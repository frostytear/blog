<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>做一個回覆食材營養成份的聊天機器人</title>
      <link href="/2018/03/21/made-an-nutrition-bot/"/>
      <url>/2018/03/21/made-an-nutrition-bot/</url>
      <content type="html"><![CDATA[<p><img src="https://i.imgur.com/nDA5cBml.jpg" alt="Imgur"></p><h2 id="食物-運動-與身體平衡">食物，運動，與身體平衡</h2><p>最近在看代謝型態飲食全書，裡面提到<code>吃下的東西</code>與<code>運動</code>，與體內的平衡和慢性病的產生有相當密切的關係。要讓身體重新回復到平衡的健康狀態，需要選擇適合自己的食物（營養素的比例）並搭配適當運動（有氧 + 無氧）與充足睡眠。</p><div class="mermaid">  graph LR食物 --> 身體吸收身體吸收 -- 影響 --> 體內系統的平衡運動 --> 強化身體強化身體 -- 影響 --> 體內系統的平衡睡眠 --> 修補身體修補身體 -- 影響 --> 體內系統的平衡</div><p>其中我們所選擇的一天三餐與餐間的<code>飲食習慣</code>，則是潛移默化地影響我們的健康。當我們持續吃不好的食物或錯誤的營養素比例，則讓體內的系統處在有的養分過多，有的養分不足的持續不平衡的狀態。這些不平衡讓各種體內各種系統無法正常工作。例如一餐吃進過多的精製糖份可能造成血液中的糖份快速升高，胰臟必須快速分泌大量胰島素來協助細胞消化糖份，當這樣不平衡的狀態維持久了，就會造成胰臟的過度負擔。當體內的代謝開始失常時，我們可以先觀察到一些亞健康症狀，累積久了就成了各種慢性病。因此<code>選擇適合自己的食物</code>是相當重要的。</p><div class="mermaid">  graph LR吃錯食物 --> 身體吸收身體吸收 -- 影響 --> 體內系統不平衡體內系統不平衡 --> 代謝失常代謝失常 --> 亞健康症狀亞健康症狀 --> 慢性病</div><h2 id="bot-怎麼做成的">Bot 怎麼做成的</h2><p>要<code>選擇適合自己的食物</code>時，我除了先做了測驗了解個人飲食中三大營養素(<code>碳水化合物</code>、<code>蛋白質</code>、<code>脂肪</code>)的參考比例，也想知道每樣吃下的東西大致的營養成份。</p><p>我想到如果有各種食材的營養成份資料，就可以做成聊天機器人或App以供隨時查詢。我搜尋了一下，發現政府資料開放平台上有公開的「<a href="https://data.gov.tw/dataset/8543" target="_blank" rel="noopener">食品營養成分資料集</a>」，提供csv, json, xml等格式下載。</p><p>下載開啟資料後，發現原始的JSON格式還是蠻…有趣的。</p><p>下載的JSON格式資料長這樣：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[&#123;&quot;食品分類&quot;:&quot;魚貝類&quot;&#125;,&#123;&quot;資料類別&quot;:&quot;樣品基本資料&quot;&#125;,&#123;&quot;整合編號&quot;:&quot;J11101&quot;&#125;,&#123;&quot;樣品名稱&quot;:&quot;鮸魚&quot;&#125;,&#123;&quot;俗名&quot;:&quot;鮸仔,敏魚,鮸,敏仔魚&quot;&#125;,&#123;&quot;樣品英文名稱&quot;:&quot;Brown croaker; Mi-iuy croaker&quot;&#125;</span><br></pre></td></tr></table></figure><p>…對於這種JSON存法只能呵呵。</p><p>重新下載了csv檔，這次總算正常了點。</p><p>解開後的csv檔案有接近50MB大小。寫了個腳本過濾掉不需要的資料，並轉換成需要的格式後，輸出總共不到500KB，就算放到App裡也還合適。</p><p>這次使用<a href="http://bottender.js.org/" target="_blank" rel="noopener">bottender</a>框架來連接到LINE。由於LINE需要HTTPS連線，開發的過程中使用了<a href="https://ngrok.com/" target="_blank" rel="noopener">ngrok</a>來讓LINE可以連到開發中的電腦，免去另外架設公開網站的麻煩。</p><p>此外還使用了<a href="http://fusejs.io/" target="_blank" rel="noopener">Fuse.js</a>這個模糊搜尋函式庫，在搜尋的時候只要打部份內容，就可以搜出相關的條目。</p><p>整個bot的軟體架構如下</p><div class="mermaid">  graph LRsubgraph 資料處理公開資料(csv) -- 轉換/過濾 --> JSONendsubgraph NodeJSON --> fuse.jsfuse.js --> bottenderbottender --> ngrok-cliendngrok-cli --> ngrokngrok --> ngrok-clingrok --> LINELINE --> ngrokngrok-cli --> bottender</div><h2 id="我可以加這個bot嗎">我可以加這個Bot嗎?</h2><p>目前雖然自用OK，但還沒做好公開的準備。有需求的歡迎留言。</p><h2 id="會不會-open-source">會不會 Open Source</h2><p>目前程式還沒有好好整理，尚不打算開源。</p>]]></content>
      
      
        <tags>
            
            <tag> chatbot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Advanced tuning for my daily Elementary OS usage</title>
      <link href="/2018/02/25/advanced_elementary_os_usage/"/>
      <url>/2018/02/25/advanced_elementary_os_usage/</url>
      <content type="html"><![CDATA[<p>I’m a happy Elementary OS user and use it as my default desktop OS (~95%) several month. There are some useful tweakings that help me live with the Linux desktop.</p><h2 id="1-package-installer">1. Package installer</h2><p>Elementary OS does not provide deb installer by default, need install manually:</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install gdebi</span><br><span class="line">sudo apt install software-properties-common</span><br></pre></td></tr></table></figure><p>And you can download <code>ubuntu software center</code> as well(optional).</p><h2 id="2-setup-fonts">2. Setup Fonts</h2><p>List system supported fonts</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">fc</span>-list | cut -f2 -d: | sort -u</span><br></pre></td></tr></table></figure><p>Setup fonts</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gsettings <span class="built_in">set</span> org.pantheon.terminal.settings font <span class="string">'Roboto Mono'</span></span><br><span class="line">gsettings <span class="built_in">set</span> org.gnome.desktop.interface font-name <span class="string">'Open Sans 9'</span></span><br><span class="line">gsettings <span class="built_in">set</span> org.gnome.desktop.interface document-font-name <span class="string">'Open Sans 10'</span></span><br></pre></td></tr></table></figure><h2 id="3-pairing-bluetooth-mouse">3. Pairing Bluetooth Mouse</h2><p>I can’t use GUI Bluetooth manager to pair with bluetooth device, but these commandline works well for me.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ bluetoothctl</span><br><span class="line">$ agent on</span><br><span class="line">$ default-agent</span><br><span class="line">$ pairable on</span><br><span class="line">$ scan on</span><br><span class="line">$ devices (to see the devices and macs that you want to pair)</span><br><span class="line">$ pair &lt;dev mac&gt;</span><br><span class="line">$ trust &lt;dev mac&gt;</span><br><span class="line">$ connect &lt;dev mac&gt;</span><br></pre></td></tr></table></figure><h2 id="4-saving-power">4. Saving Power</h2><p><code>tlp</code> is a good tool for auto power management</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:linrunner/tlp</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install tlp</span><br><span class="line">sudo tlp start</span><br></pre></td></tr></table></figure><h2 id="5-auto-adjust-color-temperature">5. Auto adjust color temperature</h2><p><a href="http://jonls.dk/redshift/" target="_blank" rel="noopener">redshift</a> is by far the great f.lux like app for linux.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install redshift redshift-gtk</span><br><span class="line">$ redshift-gtk</span><br></pre></td></tr></table></figure><p>Then configue it as auto start in task bar.</p><h3 id="6-touchpad-indicator">6. Touchpad indicator</h3><p>Sometimes you may found the cursor is moving to the wrong place. Install Touchpad indicator solved this issue.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:atareao/atareao</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install touchpad-indicator</span><br></pre></td></tr></table></figure><p>and Toggle <code>Disable Touchpad on typing</code>.</p><h2 id="7-dropbox-icon">7. Dropbox icon</h2><p>Install Dropbox from its website, then <a href="http://sandeepbhardwaj.github.io/2016/11/13/missing-dropbox-icons-on-elementary-loki.html" target="_blank" rel="noopener">configue to fix the missing icon</a>.</p><h2 id="參考資料">參考資料</h2><ul><li>Tweaking fonts <a href="https://adam.merrifield.ca/2016/11/12/tweaking-fonts-in-elementary-os/" target="_blank" rel="noopener">https://adam.merrifield.ca/2016/11/12/tweaking-fonts-in-elementary-os/</a></li><li>Ubuntu 16.04 LTS: get bluetooth mouse to work <a href="https://askubuntu.com/questions/839014/ubuntu-16-04-lts-cant-get-bluetooth-mouse-to-work?rq=1" target="_blank" rel="noopener">https://askubuntu.com/questions/839014/ubuntu-16-04-lts-cant-get-bluetooth-mouse-to-work?rq=1</a></li><li><a href="http://refugeeks.com/use-tlp-to-optimize-the-power-consumption-in-ubuntu/" target="_blank" rel="noopener">http://refugeeks.com/use-tlp-to-optimize-the-power-consumption-in-ubuntu/</a></li><li><a href="https://elementaryos.stackexchange.com/questions/1090/how-to-optimize-elementary-os-for-maximal-battery-life-time-on-laptops" target="_blank" rel="noopener">https://elementaryos.stackexchange.com/questions/1090/how-to-optimize-elementary-os-for-maximal-battery-life-time-on-laptops</a></li><li><a href="https://itsfoss.com/night-shift-flux-ubuntu-linux/" target="_blank" rel="noopener">https://itsfoss.com/night-shift-flux-ubuntu-linux/</a></li><li>Top 10 Best Things To Do After Installing Elementary OS 0.4.1 Loki</li><li><a href="https://www.ubuntupit.com/top-10-best-things-installing-elementary-os/" target="_blank" rel="noopener">https://www.ubuntupit.com/top-10-best-things-installing-elementary-os/</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Devtools的近期進展和新功能(2017)</title>
      <link href="/2018/01/29/whats-new-in-devtools-2017/"/>
      <url>/2018/01/29/whats-new-in-devtools-2017/</url>
      <content type="html"><![CDATA[<p>2017/9/22我和Ricky Chien在台灣第一次舉辦的<a href="https://twitter.com/hashtag/mozilladevtw2017?src=hash" target="_blank" rel="noopener">Mozilla Developer Conference</a>中，一起為大家介紹Firefox開發者工具, 也就是Devtools的近期進展和新功能<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>。</p><p>Devtools架構的大幅改進，是過去一年中所有Devtools貢獻者共同努力的成果。在這講題中，我們可以看到Devtools如何持續改進，並提供各種新的工具，讓開發網頁的過程變得更有效率。</p><p><img src="http://g.recordit.co/RN5AVhnpGX.gif" alt=""></p><p>透過在Firefox 57新版的統一選單介面上開啟Web Developer Tool，我們可以開啟Devtools的各種工具分頁分頁(Panel)。</p><p>Devtools簡單來說，就是各式各樣網頁開發者工具的集合。這些工具以一個個分頁（Panel）的形式組織在開發者工具區域中，我們稱這個區域為<code>Toolbox</code>，也就是<code>工具箱</code>。</p><h2 id="devtools-的過去">Devtools 的過去</h2><p>Devtools 的前身叫做 Firebug<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。在2006年時，Firefox 的創始者之一Joe Hewitt 寫出了Firebug這個Firefox 的網頁開發工具addon<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。使用者可以利用它除錯、編輯、刪改任何網站的CSS、HTML、DOM與JavaScript。也可以透過addon再次擴展它的功能。現在各家瀏覽器的網頁開發者工具都參考了Firebug功能。</p><p>過去的Web相關技術遠遠沒有今天成熟，Mozilla發明了一些特有的技術(XUL, XBL)來製作瀏覽器的介面與呼叫特殊的API(Addon API)來和作業系統互動。因為原有的addon架構無法支援FIrefox新的多執行緒(multiple process)架構，因此2016年Firebug開發團隊決定<strong>將Firebug直接整合進Devtools中</strong><sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>，原有的Firebug開發團隊也大多加入了Firefox Devtools團隊繼續貢獻，也因此我和Ricky有了和原Firebug維護者Honza直接共事的機會，在過去半年中我們合作開發Network Monitor，透過Daily Meeting同步進度，也在合作的過程中得到許多難得的經驗。</p><h2 id="devtools-的現在">Devtools 的現在</h2><p>Devtools繼承Firebug的開發目標，也就是協助網頁開發者更有效率的製作網站。同時作為網頁開發者工具，我們希望開發者工具工具本身，也能用和網頁開發者使用的排版與框架來撰寫。</p><p>於是在Mozilla Web Summit，大家可以看到我們的成果。我們已經在使用HTML和Web Standard API來製作Devtools開發者工具！</p><p>使用HTML與Web Standard API只是第一步。我們進一步評估，選用了React和Redux作為前端UI介面與狀態管理框架。經過react改寫後，我們有了可在不同工具間中重用的元件庫。透過redux，每個工具也都有了清晰的App狀態管理機制。</p><p>我們將許多Devtools核心的專案放到Github上以方便開發者，並且將可以重用的元件，放到 <a href="https://github.com/devtools-html/devtools-core" target="_blank" rel="noopener">Devtools-Core</a> 專案中，將可以獨立運作的<a href="https://github.com/devtools-html/debugger.html" target="_blank" rel="noopener">Debugger.html</a>，<a href="https://github.com/devtools-html/perf.html" target="_blank" rel="noopener">Perf.html</a>專案也放到Github上，讓參與專案變得更容易。</p><p>如果想開發自己所需的的開發者工具。現在也可以使用Web Extension API來製作新的開發者工具面板。面板中也可以重用<code>Devtools-Core</code>專案提供的React介面元件，更快地打造自己的開發者工具。</p><h2 id="使用者介面的改進">使用者介面的改進</h2><p>Firefox 57上的 Devtools 分頁變得更美觀了。當然這些都已包成React component，喜歡還可以拿去用。</p><p>對於新配色的選擇，我們的UX團隊有做過可用性(Assessibility)測試<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>。即使是辨色有障礙的人，也可以容易地分辨不同色塊的差異。</p><h2 id="inspector-工具的改進">Inspector 工具的改進</h2><p>Inspector 工具是最常被使用的開發者工具。透過Inspector，可以查看或修改HTML。選到任一個Element時，可以查看並修改這個Element目前所有套用的Style。</p><p>透過重構Inspector，我們把原本使用的XUL與addon SDK替換為HTML和web API。並使用React + Redux來組織程式的內部架構。</p><p>在整理所有devtools新增功能的時候，我最先注意到的就是&quot;Find Useless Rules&quot;這個超實用的功能。</p><p>過去在Inspector裡只會在不合法的樣式旁顯示警告標誌，現在我們也會在「合法，但無用」的樣式旁也顯示警告標誌。比如在grid或flex layout中使用float屬性的話沒有作用，Inspector就會在float屬性旁顯示警告標誌。</p><p>此外，Inspector的Box Model會列出所有影響的這個元件位置，大小，或形狀的屬性。透過新的box model介面，可以更容易地查看並調整上下左右position參數，快速地將版面調整到理想狀態。</p><p>Firefox Devtools 也是最先支援 Grid Layout <sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>的開發者工具。我們可以看到，在Rules side panel中的任何修改，都會直接反映到頁面上。</p><p>在Layout Side panel上會列出了頁面上所有的Grid Layout。右側則可以選擇要顯示輔助線號碼，區塊名稱，或是要不要延長Grid格線以便排版。</p><iframe width="560" height="315" src="https://www.youtube.com/embed/EinJPX86XCE?rel=0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe><p>不僅如此，在畫面上也可以見到，開發者也可以在 Layout Side panel中快速的查看對應的網格。我們可以透過這些選項更好地查看頁面上的Grid Layout。</p><h2 id="ｗeb-console">Ｗeb Console</h2><p>Web Console應該是Javascript開發者最常用的網頁工具吧。除了查看頁面上的Javascript錯誤，印log外，Web Console可以即時執行javascript，或是存取頁面上的 Ｇlobal Object。</p><p>去年Web Console也經過改寫。使用React + Redux來組織程式的內部架構。</p><p>我們在console中可以即時執行javascript並取得執行結果。不管是哪種類型的變數，無論是boolean, array, object 都會用Object logs來顯示。</p><p>在rewrite web console的過程中，我們也將Object logs包裝起來變成一個可以重用的React Component。</p><p>這個元件被大量地運用在Debugger, Network等其他panel上。</p><p>如果你想要開發自己的開發者工具或剛好需要類似的元件，reps可以在github上找到。或是透過<code>npm install devtools-reps</code>命令來安裝到你的專案中。</p><p><a href="https://github.com/devtools-html/devtools-core/tree/master/packages/devtools-reps#readme" target="_blank" rel="noopener">https://github.com/devtools-html/devtools-core/tree/master/packages/devtools-reps#readme</a></p><p>Web console 近期也透過tree和reps元件，支援了console group功能 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Console/group" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/Console/group</a></p><p><img src="http://g.recordit.co/NuO10hu9Ug.gif" alt=""></p><p>現在透過web console實驗XMLHTTPRequest 或 fetch 時，也可以透過HTTP inspector來即時查看http request的內容。整套HTTP inspector元件是來自Network Monitor，只經過一點點修改就能完整套用。因此在 web console 中可以直接看到與在network panel中一樣的資訊，非常方便。</p><p><img src="http://g.recordit.co/ebfs76lmG1.gif" alt=""></p><h2 id="perf-html-網頁效能監測工具">Perf.html 網頁效能監測工具</h2><p>最後我想介紹的是 Perf.html 這套工具。</p><p>要提升網頁的效能是相當考驗技術的。透過profiling，也就是量測的結果，我們可以更直觀地找出網頁效能的瓶頸並做出針對性地改善。perf.html就是這樣的量測工具。</p><p>去年perf.html也經過改寫。使用React + Redux來組織程式的內部架構。有自己的網頁，可以脫離devtools獨立運作。程式碼host在github上。</p><p>perf.html使用前需先到網站上安裝addon，在要量測前後按下start/stop，就可以得到量測的profile。</p><p>perf.html最棒的點是，量測好的profile可以透過addon直接上傳到網站上，我們是在一般網站的介面上查看量測的結果。可以直接分享這個網址，或是標註出關注的時間區間後分享。和其他人一起trace效能瓶頸。</p><p>經過photon更新後，perf.html介面風格將變得更加簡潔，配色變得更大膽，用起來更舒服。</p><p>以上是我分享的部分。若您對Devtools感興趣，可以到<a href="http://firefox-dev.tools/" target="_blank" rel="noopener">firefox-dev.tools</a>網站查看所有與 Firefox Devtools 相關的資訊。</p><h2 id="參考資料">參考資料</h2><ul><li>[1] Firebug <a href="http://www.drdobbs.com/tools/ajax-debugging-with-firebug/196802787" target="_blank" rel="noopener">http://www.drdobbs.com/tools/ajax-debugging-with-firebug/196802787</a></li><li>[2] <a href="https://medium.com/mozilla-tech/a-quick-history-of-firefox-devtools-620d3074b510" target="_blank" rel="noopener">https://medium.com/mozilla-tech/a-quick-history-of-firefox-devtools-620d3074b510</a></li><li>[3] Firebug lives on Firefox Devtools <a href="https://hacks.mozilla.org/2016/12/firebug-lives-on-in-firefox-devtools/" target="_blank" rel="noopener">https://hacks.mozilla.org/2016/12/firebug-lives-on-in-firefox-devtools/</a></li><li>[4] Grid Layout <a href="https://hacks.mozilla.org/2017/06/new-css-grid-layout-panel-in-firefox-nightly/" target="_blank" rel="noopener">https://hacks.mozilla.org/2017/06/new-css-grid-layout-panel-in-firefox-nightly/</a></li><li>[5] colors with accessible contrast in concern <a href="https://blog.nightly.mozilla.org/2017/09/11/developer-tools-visual-refresh-coming-to-nightly/" target="_blank" rel="noopener">https://blog.nightly.mozilla.org/2017/09/11/developer-tools-visual-refresh-coming-to-nightly/</a></li><li>[6] Devtools Photon UI <a href="https://hacks.mozilla.org/2017/09/developer-edition-devtools-update-now-with-photon-ui/" target="_blank" rel="noopener">https://hacks.mozilla.org/2017/09/developer-edition-devtools-update-now-with-photon-ui/</a></li><li>[7] 簡報檔位於<a href="https://docs.google.com/presentation/d/1mUoXy97Uv4FqkTiPBqMAw5AlgRz3VCrHpzShS1bl9Jc/edit?usp=sharing" target="_blank" rel="noopener">Google Doc</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> devtools </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用gitbook寫書的體驗</title>
      <link href="/2018/01/28/white-a-gitbook/"/>
      <url>/2018/01/28/white-a-gitbook/</url>
      <content type="html"><![CDATA[<p>把過去半年本部落格上關於區塊鏈的文章整理放到Gitbook。命名為<a href="https://www.gitbook.com/book/gasolin/learn-ethereum-dapp/details" target="_blank" rel="noopener">Ethereum區塊鏈！智能合約(Smart Contract)與分散式網頁應用(DApp)入門</a>，對區塊鏈，智能合約，分散式應用(DApp)感興趣的讀者不妨前往一觀。</p><p>這不是我寫的第一本書<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，也不是我第一本用Markdown寫的電子書(以前用Leanpub出版過<a href="https://leanpub.com/gaiafromabove" target="_blank" rel="noopener">Firefox OS 開發書</a>)，但絕對是我編輯過程最順暢的一本書（雖然還未完成 XD）。</p><h2 id="一路markdown">一路Markdown</h2><p>編輯過程最順暢不是因為對主題很熟悉或寫得快，而是因為從部落格文章初稿到Gitbook，在寫作的過程中可以一路使用Markdown。而且由於原本部落格圖片皆使用外連，因此引用圖片時也不用像以前編書時需要重新導入的過程。由於gitbook也支援<code>mermaid.js</code>插件，支援我常常使用的flowchart語法，因此這些流程圖也不需要重新截圖或繪製，節省了大量時間。</p><h2 id="所見即所得編輯器">所見即所得編輯器…</h2><p>我已有Ｍarkdown格式的初稿，但剛開始我使用gitbook提供的所見即所得的編輯器。使用起來感覺非常不自在。</p><p>線上編輯器提供的<code>new change request</code>，所見即所得編輯等功能，特別是gitbook提供的所見即所得編輯器無法切換回純Markdown模式，對於已熟悉git, Markdown語法的我來說並沒有變得好用。直接將Markdown格式貼到編輯器上時，也無法順利辨識格式，反而是貼上已輸出的部落格網頁時效果好很多。</p><p>所以最後我放棄使用線上編輯器，而是在本機編輯Markdown後直接git推送到專案上。</p><p>gitbook在同步收到新的改動後，會自動編譯並發布新版本，相當方便。接下來應該會繼續使用這個流程。</p><h2 id="參考資料">參考資料</h2><ul><li>[1] 我的著作 <a href="https://gasolin.idv.tw/portfolio#books" target="_blank" rel="noopener">https://gasolin.idv.tw/portfolio#books</a></li><li>[2] 利用gitbook命令行工具创建和编译书籍 <a href="http://mdengli.com/gitbook_cmd_study/" target="_blank" rel="noopener">http://mdengli.com/gitbook_cmd_study/</a></li><li>[3] 深入淺出 GitBook 寫作與自助出版，電子書也能多人協作 <a href="http://www.codedata.com.tw/social-coding/gitbook-self-publishing" target="_blank" rel="noopener">http://www.codedata.com.tw/social-coding/gitbook-self-publishing</a></li><li>[4] 用 GitBook 來寫本書吧！<a href="http://www.oxxostudio.tw/articles/201502/gitbook.html" target="_blank" rel="noopener">http://www.oxxostudio.tw/articles/201502/gitbook.html</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> ethereum </tag>
            
            <tag> git </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我如何做個人自動化紀錄-2018版</title>
      <link href="/2018/01/26/personal-automation-in-2018/"/>
      <url>/2018/01/26/personal-automation-in-2018/</url>
      <content type="html"><![CDATA[<p>2017年開始紀錄自己使用的自動化紀錄工具，今年更新。</p><h2 id="為什麼要做個人自動化紀錄">為什麼要做個人自動化紀錄?</h2><p>有人會問，Facebook/Twitter不就可以記錄大小事了嗎? 如果會這麼回答，那就實在太天真了😏。FB上也許包含了自己覺得值得分享的事，但生活中還有諸多事情值得記錄，而不適合與大眾分享。擁有自己的一份完整數位化生活記錄，是我持續的個人目標之一。要達成這個目標，需要藉助一些自動化紀錄工具，好讓整個過程變得自然而不困難。</p><h2 id="照片自動化備份-📷">照片自動化備份 📷</h2><ul><li>360CAM所拍的相片一律備份到手機</li><li><a href="http://www.dropbox.com/" target="_blank" rel="noopener">Dropbox</a>, 自動從手機上傳照片</li><li>Google相簿, 充電時自動從手機備份照片到Google雲端</li><li>NAS (Synnalogy), 透過<code>Cloud Sync</code>從Dropbox同步照片。</li></ul><div class="mermaid">  graph LRcam[360 CAM]User -- take photo --> camUser -- take photo --> Phonecam --> PhonePhone -.-> DropboxPhone -.-> gphoto[Google Photo]Dropbox -.-> NAS</div><h2 id="運動自動化紀錄-🚶">運動自動化紀錄 🚶</h2><ul><li><s>記步，睡眠紀錄：小米手環2</s></li><li>體重：小米體重計</li></ul><div class="mermaid">  graph LRUser -- 量體重 --> 小米體重計小米體重計 -.-> 小米運動App</div><p>現已不再帶小米手環2，覺得記錄睡眠與步數，並無法改善健康狀況，意義不大。同時為了降低多走路所需要的意志力，把每日步數改成更容易達成的300步，只要開始走，通常都會超過需要的步數。</p><hr><h2 id="生活事件自動化紀錄">生活事件自動化紀錄</h2><p>延續<a href="https://blog.gasolin.idv.tw/2015/02/28/%E7%94%A8-IFTTT-%E5%81%9A%E8%87%AA%E5%8B%95%E7%94%9F%E6%B4%BB%E7%B4%80%E9%8C%84-LifeLog/">用 IFTTT 做自動生活紀錄</a>這篇的思路，我把看過的書籍、電影，喜歡的Youtube影片，貼過的文章,每日完成的事項都記錄到Google日曆中，以方便之後回顧。</p><h3 id="自動閱讀-觀看紀錄-📚">自動閱讀/觀看紀錄 📚</h3><p>對於書籍與電影, 我使用RSS + IFTTT + Google Calendar來自動紀錄。當我在豆瓣上修改狀態，豆瓣的RSS也跟著改變，這時IFTTT會將RSS中的新事項紀錄到Google 日曆上。對於Youtube上like的影片，Facebook或Twitter上新貼的文章，也會透過IFTTT紀錄到Google 日曆上。</p><div class="mermaid">  graph LRUser -- add movie --> DoubanUser -- post --> BlogBlog -.-> RSSDouban -.-> RSSRSS -.-> IFTTTIFTTT -.-> gcal[Google Calendar]</div><p>透過RSS轉IFTTT紀錄</p><div class="mermaid">  graph LRUser -- like --> YoutubeUser -- post --> FacebookUser -- post --> TwitterYoutube -.-> IFTTTFacebook -.-> IFTTTTwitter -.-> IFTTTIFTTT -.-> gcal[Google Calendar]</div><p>直接透過IFTTT紀錄</p><h3 id="自動紀錄每日完成的事項-📓">自動紀錄每日完成的事項 📓</h3><p>這部份是自動紀錄的核心。使用 Todoist + IFTTT + Google Calendar 即可達成。我在Google Calendar上使用一個單獨的日曆(成功日記)來紀錄每日完成的事項。</p><div class="mermaid">  graph LRUser -- checked --> TodoistTodoist -.-> IFTTTIFTTT -.-> gcal[Google Calendar]</div><p>If task completed in Todoist, Then log into Google Calendar</p><h4 id="從email新增待辦事項-✉">從Email新增待辦事項 ✉️</h4><p>為了更方便地蒐集待辦事項，我參考這份影片 <a href="https://youtu.be/V7Dk7pzjJmM?t=11m30s" target="_blank" rel="noopener">https://youtu.be/V7Dk7pzjJmM?t=11m30s</a> 來將Todoist#Inbox設定為Email聯絡人，這樣處理Email的過程中也能快速地新增待辦事項。</p><p>事實上這設定很少使用。</p><h3 id="紀錄看過或待看的網頁-🌐">紀錄看過或待看的網頁 🌐</h3><p>我會將待看的文章搜集到Pocket。</p><p>除了瀏覽Facebook或Twitter上的文章，我也使用Feedly訂閱一些自己挑選過的網站。並將Feedly設定成當我做標記時，就將本篇文章轉存到Pocket稍候閱讀列表，我可以掃過Feedly列表，標記感興趣的新聞，稍後再到Pocket閱讀。</p><p>這樣讓我在看到文章連結當下不需急著看完整篇文章，而是在有空閒的時候才閱讀這些文章。</p><p>我唯一的待辦事項收件夾是Todoist，若看到值得閱讀(紀錄)的網頁，桌面上我使用瀏覽器的<code>Pocket</code>外掛插件(Firefox瀏覽器內建)，將待看網頁記錄到Pocket中。</p><p>若這個網頁非看不可，我會在按下插件時填入一個自訂標籤<code>fox</code>，然後透過IFTTT，若發現Pocket中新增了一筆含<code>fox</code>標籤的網頁，就新建一筆Todoist代辦事項。</p><p>在手機上就直接使用Todoist和Pocket等App達到一樣的效果。</p><div class="mermaid">  graph LRFeedly --> PocketBrowser --> addon[Pocket addon + tag]addon --> Pocketpocket -.-> IFTTTIFTTT -.-> Todoist</div><h3 id="文章更新時自動提醒">文章更新時自動提醒 ⏰</h3><p>有些網站並未提供RSS訂閱，手機上我會使用<a href="https://play.google.com/store/apps/details?id=me.webalert" target="_blank" rel="noopener">Web Alert</a>來取得網頁更新提醒。</p><div class="mermaid">  graph LRwebalert[Web Alert] --> UserUser --> Browser</div>¨¨<h3 id="開發工具設定自動備份">開發工具設定自動備份¨</h3><p>使用VS Code <a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync" target="_blank" rel="noopener">Settings Sync</a> ，只需剛開始時設定一次，之後可同步各種VS Code中的設定與插件。</p><h3 id="半自動工作紀錄-💼">半自動工作紀錄 💼</h3><p>透過翻看Todoist或Google Calendar，我可以輕易地將過去一週達成的事項整理出來，再送PR到Github上。也可以說這塊目前只能算半自動化地列出過去事項列表，可以再繼續改進。</p><hr><h2 id="自動化網站部署-🌐">自動化網站部署 🌐</h2><p>目前已使用Github來放我的個人網站與部落格，透過與Travis CI整合，我所修改的任何內容，在幾分鐘之內都會自動部署到網站上。</p><p>如何做可參考 <a href="https://blog.gasolin.idv.tw/2016/09/18/hello-world/">Hello Hexo</a> (個人網站自動化部署) 和 <a href="https://blog.gasolin.idv.tw/2017/01/03/ghpage-auto-deploy/">Automatically deploy new commit to github pages via Travis CI</a></p><div class="mermaid">  graph LRmaster[Github:master]travis[Travis CI]ghpages[Github:gh-pages]User -- commit --> mastermaster -. auto build .-> travistravis -.  auto deploy .-> ghpages</div><p>Auto website deploy flow</p><p>一些可以直接運作在瀏覽器的專案(如BlocklyDuino和Saihubot)，我會直接將gh-pages設為預設分支，所有改動直接push到這分支中。這樣一有改動即可在網頁上看到更新成果。</p><h2 id="定期整理">定期整理</h2><p>撰寫本文的目的之一，也是讓我有回顧我的自動化運作的機會。</p><h3 id="照片備份規則">照片備份規則</h3><p>由於Dropbox空間有限，會不定期將Dropbox上的照片移動到到NAS上按年月份分類的<code>photo/</code>資料夾.</p><p>我的照片並不算多，但若有出遊的月份通常照片會暴增。所以我的基本備份規則是依年份，並以雙月份命名資料夾,若是當月有重大活動則直接在檔名中標注。例如2016年的照片資料夾裡會有<code>2016_10_11</code>，或是<code>2016_06_london</code>這樣的命名。</p><p>在整理照片的時候，每當遇到特別喜歡的，我會另存到Dropbox中的一個依年份歸檔的資料夾，例如2017年的精彩照片我會另存到 <code>dropbox/spot/2017</code>資料夾中，這樣隨時可以找出來欣賞。</p><p>另外每年累積的一些螢幕截圖，也放在當年度的<code>screenshots</code>資料夾裡。</p><h3 id="清理rss-feed">清理RSS Feed</h3><p>透過Feedly訂閱RSS Feed太容易，但是不小心每天收到的新聞量就遠高於自己能吸收的量，這時可以到<a href="https://feedly.com/i/organize/my" target="_blank" rel="noopener">https://feedly.com/i/organize/my</a> 把那些失效的連結清掉，並快速檢視一下現在仍在訂閱的網站，是否還對這些主題感興趣。</p><h2 id="參考資料">參考資料</h2><ul><li><a href="https://blog.gasolin.idv.tw/2017/02/02/personal-automation-in-2017/">我如何做個人自動化紀錄-2017版</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> mobile </tag>
            
            <tag> life </tag>
            
            <tag> automation </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>個人工具箱2018二月</title>
      <link href="/2018/01/25/tooling-in-2018-feb/"/>
      <url>/2018/01/25/tooling-in-2018-feb/</url>
      <content type="html"><![CDATA[<p><code>先記錄下來手邊使用的工具，才有機會從繁雜中歸納出簡單的使用規則。</code></p><p>2011<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>年時紀錄了一次當時的個人工具箱，2016年開始再次紀錄自己手邊工具箱的改變<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> <sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>🤹。今年初工作上有了變化，也將家中的環境包含進配置列表中。</p><h2 id="主要裝備">主要裝備</h2><ul><li>💻Dell XPS 13 (8550), Windows 10, i7 4GHz x4, 8GB RAM, 13.3&quot; LCD，作業系統：<a href="https://blog.gasolin.idv.tw/2017/10/25/xps13-elementary-os/">Elementary OS + Windows</a></li><li>📱<a href="https://oneplus.net/global/3" target="_blank" rel="noopener">One Plus 3</a>, Android, 6GB RAM, 5.5&quot; AMOLED</li><li>🎧Sony WI-1000 降噪耳機</li></ul><h3 id="家">家</h3><ul><li>🖥24&quot; LCD</li><li>⌨️羅技K375s鍵盤</li><li>🖱羅技M720滑鼠</li><li>📦Synology NAS: 電影，影集，照片，資料備份</li><li>💡Yeelight LED燈泡</li><li>備用 💻Macbook Air 13&quot;, 2012年版</li><li>備用 📺Chromecast 一代</li><li>備用 🔈Echodot</li><li>備用 Respberry Pi 3</li><li>備用 📙Kindle Voyage</li></ul><h3 id="和去年相比的改變：">和去年相比的改變：</h3><p>主力用💻Dell XPS 13&quot;，家中添購了一台🖥24&quot; LCD接筆電，搭配3轉1 HDMI Hub，接🎮Nintendo Switch, Chromecast, Respberry Pi，可滿足影音相關需求。HDMI設備通電時會自動切換到對應的設備。</p><div class="mermaid">  graph LRLCD -- DVI --- NotebookLCD -- HDMI --- hub{HDMI Hub}hub --- ns[Nintendo Switch]hub --- Chromecasthub --- rpi[Respberry Pi]</div><p>上次記錄前即開始使用的⌨️羅技K375s鍵盤與🖱羅技M720滑鼠，兩者特點都是同時支援使用USB或藍牙控制設備，讓我可以用一套鍵鼠控制多種設備。</p><h3 id="🕸網站工具">🕸網站工具</h3><ul><li>🕸主要瀏覽器：<a href="https://www.mozilla.org/en-US/firefox/products/" target="_blank" rel="noopener">Firefox</a></li><li>瀏覽器插件<ul><li>顏文字查詢：Emoji cheatsheet</li><li>翻譯：ImTranslator</li><li>拼字訂正：Grammarly</li><li>密碼管理：Bitwarden</li></ul></li><li>瀏覽器常駐分頁<ul><li>✉️<a href="http://mail.google.com/" target="_blank" rel="noopener">GMail</a>, Inbox</li><li>📆<a href="http://www.google.com/calendar" target="_blank" rel="noopener">Google日曆</a></li><li>📒記帳: <a href="https://toshl.com" target="_blank" rel="noopener">Toshl</a> (付費)</li><li>✅待辦事項：<a href="https://todoist.com/" target="_blank" rel="noopener">Todoist</a> (付費)</li></ul></li><li>👥主要社交網站：<a href="http://www.facebook.com/" target="_blank" rel="noopener">Facebook</a>、<a href="https://twitter.com/gasolin" target="_blank" rel="noopener">Twitter</a></li><li>📝記事：<a href="http://keep.google.com/" target="_blank" rel="noopener">Google keep</a>, Google Doc</li><li>💾網路硬碟：<a href="http://www.dropbox.com/" target="_blank" rel="noopener">Dropbox</a>, 主要用作同步照片</li><li>🔑密碼管理：<a href="https://www.bitwarden.com/" target="_blank" rel="noopener">Bitwarden</a></li><li>📰新聞聚合：<a href="https://feedly.com/" target="_blank" rel="noopener">Feedly</a></li><li>📘閱讀紀錄：<a href="https://share.readmoo.com/mooer/lifaicqb9/bookshelf/gasolin/read" target="_blank" rel="noopener">Readmoo分享書</a></li><li>🎥看電影記錄：<a href="http://www.douban.com/" target="_blank" rel="noopener">豆瓣</a></li><li>🗂個人網站：<a href="http://www.gasolin.idv.tw" target="_blank" rel="noopener">個人網站</a>, <a href="https://github.com/gasolin/blog/" target="_blank" rel="noopener">Github</a></li><li>🗂個人履歷：<a href="https://www.linkedin.com/in/fredglin/" target="_blank" rel="noopener">Linkedin</a></li><li>🔗IFTTT <a href="https://blog.gasolin.idv.tw/2018/01/26/personal-automation-in-2018/">自動化生活紀錄2018</a></li><li>📺<a href="https://www.youtube.com/" target="_blank" rel="noopener">Youtube</a></li><li>👛電子錢包<a href="https://www.myetherwallet.com/" target="_blank" rel="noopener">MyEtherWallet</a>, <a href="https://blog.gasolin.idv.tw/2017/12/26/setup_ledger_nano_on_linux/">Ledger Nano S</a></li></ul><h3 id="設計工具">設計工具</h3><ul><li>Mockup：<a href="http://www.balsamiq.com/products/mockups" target="_blank" rel="noopener">Balsmiq Mockups</a></li><li>螢幕動畫錄製： <a href="https://github.com/phw/peek" target="_blank" rel="noopener">Peek</a>(Linux), <a href="http://www.recordit.co/" target="_blank" rel="noopener">Recordit</a>(Mac)</li><li>心智圖：XMind</li></ul><h3 id="開發工具">開發工具</h3><ul><li>編輯器：VS Code<ul><li>Blank Line at the End</li><li>Diff Tool</li><li>EditorConfig for VSCode</li><li>Go</li><li>Guides: more guide line</li><li>GitLens: more git info</li><li>Python</li><li>Settings Sync</li><li>solidity</li><li>Trailing Spaces</li></ul></li><li>版本控制：git</li><li>套件管理：apt (Linux), <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a>, yarn, Chocolatey(windows)</li></ul><p>若需要在Windows上開發，能用Chocolatey處理的就用Chocolatey處理。</p><h3 id="娛樂工具">娛樂工具</h3><ul><li>🎮Nintendo Switch</li><li>📺Chromecast (少用)</li><li>🎮Steam / vlc (少用)</li></ul><p>因為攜帶便利，現在主要只玩NS上的遊戲。Steam上看到喜歡的遊戲，也盡量等NS上出了再買。</p><h2 id="📱android-手機應用">📱Android 手機應用</h2><ul><li>瀏覽器：Firefox for Android</li><li>網頁更新通知：Web Alert</li><li>閱讀：Feedly, Readmoo</li><li>稍候閱讀：Pocket</li><li>信箱：Inbox, Gmail</li><li>地圖：Google地圖</li><li>記事：Keep</li><li>內建相機, 內建時鐘</li><li>相簿：內建相簿, Google相簿, Dropbox</li><li>社交：Facebook, LINE, Twitter</li><li>待辦事項：<a href="https://play.google.com/store/apps/details?id=com.todoist" target="_blank" rel="noopener">Todoist</a></li><li>密碼管理：Bitwarden</li><li>記帳: <a href="https://play.google.com/store/apps/details?id=com.thirdframestudios.android.expensoor" target="_blank" rel="noopener">Toshl</a></li><li>線上影片：Youtube</li><li>有聲書：Audible</li><li>音樂：豆瓣FM</li><li>健康：小米運動, Pokemon Go, 7Min workout</li></ul><p>工具</p><ul><li>2步驟認證：Duo Mobile</li><li>旅遊：Google翻譯, TripAdvisor</li><li>影片播放：MX Player, DS video</li><li>記錄看書狀況：Readmoo分享書</li><li>線上學習：Udemy, <a href="http://EggHead.io" target="_blank" rel="noopener">EggHead.io</a></li><li>IFTTT</li><li>💳街口支付</li></ul><h2 id="reference">Reference</h2><ul><li><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> <a href="https://blog.gasolin.idv.tw/2013/01/02/%E5%80%8B%E4%BA%BA%E5%B7%A5%E5%85%B7%E7%AE%B12011/">個人工具箱2011</a></li><li><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> <a href="https://blog.gasolin.idv.tw/2016/12/19/tooling-in-2016/">個人工具箱2016</a></li><li><sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> <a href="https://blog.gasolin.idv.tw/2017/02/02/tooling-in-2017/">個人工具箱2017</a></li><li><sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> <a href="https://blog.gasolin.idv.tw/2017/02/02/tooling-in-2017-sep/">個人工具箱2017九月</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何撰寫智能合約(Smart Contract)?(IV)加入單元測試</title>
      <link href="/2018/01/02/howto-write-a-contract-test/"/>
      <url>/2018/01/02/howto-write-a-contract-test/</url>
      <content type="html"><![CDATA[<p>因為智能合約一旦部署就難以修改，因此合約的安全性極其重要，要避免合約中出現一些基礎錯誤，除了透過第三方驗證外，完整地單元測試(unit test)也是必需的。</p><p>目前最成熟的智能合約單元測試方式，還是透過<code>Truffle</code>開發框架來達成。有趣的是Truffle主要使用Javascript來撰寫智能合約的單元測試（也可以用 solidity來寫）。</p><h2 id="加入測試">加入測試</h2><p>接續上一篇建立的<code>HelloToken</code>合約，在<code>test/</code>目錄下加入<code>test_hello_token.js</code>測試檔案（如果覺得這份程式碼不易理解，可跳過這節，後面會介紹更簡潔的測試方法，到時再回來對照著看）。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> HelloToken = artifacts.require(<span class="string">'HelloToken'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> INITIAL_SUPPLY = <span class="number">100000</span>;</span><br><span class="line"><span class="keyword">let</span> _totalSupply;</span><br><span class="line"></span><br><span class="line">contract(<span class="string">'HelloToken'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">accounts</span>) </span>&#123;</span><br><span class="line">  it(<span class="string">'should met initial supply'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> contract;</span><br><span class="line">    HelloToken.deployed().then(<span class="function">(<span class="params">instance</span>) =&gt;</span> &#123;</span><br><span class="line">        contract = instance;</span><br><span class="line">        <span class="keyword">return</span> contract.totalSupply.call();</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">totalSupply</span>) =&gt;</span> &#123;</span><br><span class="line">        _totalSupply = totalSupply;</span><br><span class="line">        assert.equal(totalSupply.toNumber(), INITIAL_SUPPLY);</span><br><span class="line">        <span class="keyword">return</span> contract.balanceOf(accounts[<span class="number">0</span>]);</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">senderBalance</span>) =&gt;</span> &#123;</span><br><span class="line">        assert.equal(_totalSupply.toNumber(), senderBalance.toNumber());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>運行<code>truffle test</code>可看到測試通過的結果。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Contract: HelloToken</span><br><span class="line">    ✓ should met initial supply</span><br><span class="line"></span><br><span class="line">1 passing (11ms)</span><br></pre></td></tr></table></figure><h3 id="講解">講解</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> HelloToken = artifacts.require(<span class="string">'HelloToken'</span>);</span><br></pre></td></tr></table></figure><p><code>artifacts.require</code>的用法和在<code>migrations/</code>中的用法相同，可以直接引入對應的智能合約。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">contract(<span class="string">'HelloToken'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">accounts</span>) </span>&#123;</span><br><span class="line">  it(<span class="string">'should met initial supply'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Truffle是使用Javascript開發中常見的<a href="https://mochajs.org/" target="_blank" rel="noopener">Mocha</a>測試框架和<a href="http://chaijs.com/" target="_blank" rel="noopener">Chai</a>斷言庫來做單元測試。差別只是把Mocha test中的 <code>describe</code>換成<code>contract</code>。根據官方文件<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，<code>contact</code>執行前會自動重新部署到testrpc(或測試網路)上，所以智能合約會是剛部署好乾淨的狀態。</p><p>此外，<code>contract</code>也會帶入<code>accounts</code>變數，裡面儲存了testrpc或其他你運行的測試網路所提供的帳號，開發者可以直接使用這些帳號來測試合約。</p><p>第一個測試是來測部署合約後預設的代幣數目是否正確。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> contract;</span><br><span class="line">HelloToken.deployed().then(<span class="function">(<span class="params">instance</span>) =&gt;</span> &#123;</span><br><span class="line">    contract = instance;</span><br><span class="line">    <span class="keyword">return</span> contract.totalSupply.call();</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">totalSupply</span>) =&gt;</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>這邊內容和在<code>truffle console</code>中輸入的測試內容雷同，使用<code>Promise</code>來確定每個非同步的操作都在上一個操作完成後才繼續執行。</p><p>上一個操作可以透過 <code>return</code> 語句回傳下個操作需要的參數。例如這邊<code>then</code>裡面傳入的<code>totalSupply</code>參數，是來自上一行<code>return contract.totalSupply.call()</code>的結果。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">assert.equal(totalSupply.toNumber(), INITIAL_SUPPLY);</span><br><span class="line">...</span><br><span class="line">assert.equal(_totalSupply.toNumber(), senderBalance.toNumber());</span><br></pre></td></tr></table></figure><p>這邊我們透過<code>assert.equal</code>語句驗證了<code>HelloToken</code>合約中的初始代幣總額與<code>INITIAL_SUPPLY</code>參數的值相符，且與合約部署者(<code>accounts[0]</code>)帳戶中擁有的總額相符。</p><h2 id="使用-async-await-簡化測試">使用 async/await 簡化測試</h2><p>要理解這樣的promise chain需要一些練習。但其實上面的測試用例中，我們只想做好最後的兩個assert驗證。有沒有比較直覺的測試方法呢？</p><p>有的！2017下半年，Javascript 語言支援了<code>async/await</code>語句[2]（只要安裝Node 7.6版以上即可使用），可以用更直覺的方式撰寫非同步的程式碼。</p><p>智能合約測試剛好也使用大量的非同步程式碼。使用<code>async/await</code>語句改寫後的智能合約測試程式碼如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> HelloToken = artifacts.require(<span class="string">'HelloToken'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> INITIAL_SUPPLY = <span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line">contract(<span class="string">'HelloToken'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">accounts</span>) </span>&#123;</span><br><span class="line">  it(<span class="string">'should met initial supply'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> contract = <span class="keyword">await</span> HelloToken.deployed();</span><br><span class="line">    <span class="keyword">let</span> totalSupply = <span class="keyword">await</span> contract.totalSupply.call();</span><br><span class="line">    <span class="keyword">let</span> senderBalance = <span class="keyword">await</span> contract.balanceOf(accounts[<span class="number">0</span>]);</span><br><span class="line">    assert.equal(totalSupply.toNumber(), INITIAL_SUPPLY);</span><br><span class="line">    assert.equal(totalSupply.toNumber(), senderBalance.toNumbe());</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>運行<code>truffle test</code>可看到測試通過的結果。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Contract: HelloToken</span><br><span class="line">    ✓ should met initial supply</span><br><span class="line"></span><br><span class="line">1 passing (11ms)</span><br></pre></td></tr></table></figure><h3 id="講解-v2">講解</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">it(<span class="string">'should met initial supply'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>要在程式碼中使用async/await，需要在函式前加入<code>async</code>宣告，這樣解譯器才會解析函式中的<code>await</code>語法。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> contract = <span class="keyword">await</span> HelloToken.deployed();</span><br><span class="line"><span class="keyword">let</span> totalSupply = <span class="keyword">await</span> contract.totalSupply.call();</span><br><span class="line"><span class="keyword">let</span> senderBalance = <span class="keyword">await</span> contract.balanceOf(accounts[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><p>透過在非同步的操作前加上<code>await</code>宣告，這三行程式會依照順序，等待第一行await語句執行完，取得<code>contract</code>變數後，再依序執行第二行語句。第二行語句執行完，取得<code>totalSupply</code>變數後，再繼續執行第三行語句以取得<code>senderBalance</code>變數。</p><p>後面兩個assert語句則與promise撰寫時完全一樣。這樣改寫後，程式碼的可讀性大大地提昇了！</p><h2 id="加入轉帳測試">加入轉帳測試</h2><p>再透過<code>async/await</code>語句試著加入轉帳測試：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">it(<span class="string">'should have right balance after transfer'</span>, <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> AMOUNT = <span class="number">123</span>;</span><br><span class="line">  <span class="keyword">let</span> contract = <span class="keyword">await</span> HelloToken.deployed();</span><br><span class="line">  <span class="comment">// check init balance</span></span><br><span class="line">  <span class="keyword">let</span> account0Balance = <span class="keyword">await</span> contract.balanceOf(accounts[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">let</span> account1Balance = <span class="keyword">await</span> contract.balanceOf(accounts[<span class="number">1</span>]);</span><br><span class="line">  assert.equal(account0Balance.toNumber(), INITIAL_SUPPLY);</span><br><span class="line">  assert.equal(account1Balance.toNumber(), <span class="number">0</span>);</span><br><span class="line">  <span class="comment">// check balance after transferred</span></span><br><span class="line">  <span class="keyword">await</span> contract.transfer(accounts[<span class="number">1</span>], AMOUNT);</span><br><span class="line">  account0Balance = <span class="keyword">await</span> contract.balanceOf(accounts[<span class="number">0</span>]);</span><br><span class="line">  account1Balance = <span class="keyword">await</span> contract.balanceOf(accounts[<span class="number">1</span>]);</span><br><span class="line">  assert.equal(account0Balance.toNumber(), INITIAL_SUPPLY - AMOUNT);</span><br><span class="line">  assert.equal(account1Balance.toNumber(), AMOUNT);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>運行<code>truffle test</code>可看到測試通過的結果。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Contract: HelloToken</span><br><span class="line">    ✓ should met initial supply</span><br><span class="line">    ✓ should have right balance after transfer (92ms)</span><br><span class="line"></span><br><span class="line">2 passing (151ms)</span><br></pre></td></tr></table></figure><h3 id="講解-v3">講解</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> account0Balance = <span class="keyword">await</span> contract.balanceOf(accounts[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">let</span> account1Balance = <span class="keyword">await</span> contract.balanceOf(accounts[<span class="number">1</span>]);</span><br><span class="line">assert.equal(account0Balance.toNumber(), INITIAL_SUPPLY);</span><br><span class="line">assert.equal(account1Balance.toNumber(), <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>範例的前半部測試<code>帳號0</code>與<code>帳號1</code>中的代幣餘額。<code>帳號0</code>即部署代幣的帳號，因此擁有所有的<code>HelloToken</code>代幣，而<code>帳號1</code>中則沒有<code>HelloToken</code>代幣。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> contract.transfer(accounts[<span class="number">1</span>], AMOUNT);</span><br></pre></td></tr></table></figure><p>接著呼叫合約的<code>transfer</code>方法將一些代幣轉入<code>帳號1</code>。注意這些都是非同步的操作（送出傳輸命令後，要先等待區塊鍊確認），因此需要使用<code>await</code>語句。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">account0Balance = <span class="keyword">await</span> contract.balanceOf(accounts[<span class="number">0</span>]);</span><br><span class="line">account1Balance = <span class="keyword">await</span> contract.balanceOf(accounts[<span class="number">1</span>]);</span><br><span class="line">assert.equal(account0Balance.toNumber(), INITIAL_SUPPLY - AMOUNT);</span><br><span class="line">assert.equal(account1Balance.toNumber(), AMOUNT);</span><br></pre></td></tr></table></figure><p>範例的後半部再次測試<code>帳號0</code>與<code>帳號1</code>中的代幣餘額。結果符合轉帳後兩個帳戶的預期代幣數額。</p><h2 id="結語">結語</h2><p><code>async/await</code>語句相當適合拿來寫非同步的程式，這特性太適合用來寫智能合約的測試了。因為<code>async/await</code>這語法太新，所以大部分的參考資料都還在用<code>Promise</code>來撰寫。我建議當你看到相關的智能合約測試時，可以用async/await改寫看看，會有很不一樣的感受。</p><h1>參考資料</h1><p>[1] Writing Tests in Javascript <a href="http://truffleframework.com/docs/getting_started/javascript-tests" target="_blank" rel="noopener">http://truffleframework.com/docs/getting_started/javascript-tests</a>[2] 6 Reasons Why JavaScript’s Async/Await Blows Promises Away (Tutorial)<a href="https://hackernoon.com/6-reasons-why-javascripts-async-await-blows-promises-away-tutorial-c7ec10518dd9" target="_blank" rel="noopener">https://hackernoon.com/6-reasons-why-javascripts-async-await-blows-promises-away-tutorial-c7ec10518dd9</a></p>]]></content>
      
      
        <tags>
            
            <tag> ethereum </tag>
            
            <tag> javascript </tag>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在 Linux 上設定 Ledger Nano S 硬體錢包</title>
      <link href="/2017/12/26/setup_ledger_nano_on_linux/"/>
      <url>/2017/12/26/setup_ledger_nano_on_linux/</url>
      <content type="html"><![CDATA[<p>今天已把前陣子買到的 Ledget Nano S 硬體錢包在Windows 10/Elementary OS(/Ubuntu 16.04)上設定好，正式開始使用。和預期一樣，雖然在Linux上剛開始設定時需要多做一些步驟，但是一旦設定好後，使用過程和在其他平台上並沒有區別。</p><h1>硬體錢包</h1><p>過去透過NAS，外接硬碟等方式來保護自己的相片，作品等「數位資產」，以防哪天檔案遺失或外流。現在要守護的範圍更要擴及「加密代幣」，即保護自己的「數位財產」。</p><div class="mermaid">  graph LR作品 --> NAS相片 --> NAS相片 --> 線上備份NAS --> 數位資產線上備份 --> 數位資產加密代幣 --> 硬體錢包硬體錢包 --> 數位資產</div><p>MyEtherWallet網站<a href="https://myetherwallet.github.io/knowledge-base/hardware-wallets/hardware-wallet-recommendations.html" target="_blank" rel="noopener">推薦</a>任何擁有超過「2周的薪資」數位財產的人，使用「硬體錢包」來保管自己的「加密代幣」，以避免可能的財產損失。</p><p>目前Ledget Nano S和TREZOR是兩款較多人使用的硬體錢包。硬體錢包的安全性從產生錢包帳號開始。硬體錢包帳號的私鑰一直保存在硬體設備中，只要保存好「recovery phase」(Mnemonic Seed)，不會發生使用線上交易所時帳號或帳戶中的代幣可能被盜的風險。只有在發送代幣時需要解鎖錢包帳號。解鎖錢包帳號時，輸入PIN碼解鎖的過程，也是透過硬體錢包上的按鍵完成，從而避免了所使用的電腦可能已被入侵者安裝鍵盤側錄軟體而造成的財產上的風險。</p><h1>設定流程</h1><h2 id="1-設定-ledget-nano-s-硬體">1. 設定 Ledget Nano S 硬體</h2><p>在 Ledget Nano S 上透過按壓左右兩顆硬體按鈕，設定4~8字的PIN Code與24個單字的「recovery phase」，並用紙筆等實體方式記錄下來（千萬別用拍照的…）。完成後機器會隨機挑幾個次序測試，而你需要選擇對應的單字來確認安全性。如果以後機器壞了或遺失了，仍然可以透過這24個單字的「recovery phase」來取回帳號。</p><h2 id="2-在電腦上安裝-chrome-或-chromium">2. 在電腦上安裝 Chrome 或 Chromium</h2><p>因為目前 Ledger Nano S 使用Chrome App技術來提供桌面應用程式，Chrome也是唯一支援<a href="https://wicg.github.io/webusb/" target="_blank" rel="noopener">WebUSB API</a>的瀏覽器…Google近期公告Chrome App即將被Progressive Web App取代，我們拭目以待Ledger公司將拿出什麼方案來應對。</p><h2 id="3-安裝-ledger-manager">3. 安裝 Ledger Manager</h2><p>前往<a href="https://www.ledgerwallet.com/apps/manager" target="_blank" rel="noopener">https://www.ledgerwallet.com/apps/manager</a>安裝Ledger Manager。</p><h2 id="4-設定-usb-連線">4. 設定 USB 連線</h2><p>這時開啟Ledger Manager，將Ledget Nano S連線到電腦並解鎖，Ledger Manager無法找到對應的設備。</p><p>這時可以參考<a href="https://ledger.zendesk.com/hc/en-us/articles/115005165269-What-if-Ledger-Wallet-is-not-recognized-on-Linux-" target="_blank" rel="noopener">What if Ledger Wallet is not recognized on Linux?</a>在命令行環境下輸入以下命令：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget -q -O - https://www.ledgerwallet.com/support/add_udev_rules.sh | sudo bash</span><br></pre></td></tr></table></figure><p>執行後重新將Ledget Nano S連線到電腦並解鎖，可以看到Ledger Manager開始更新資料。</p><h2 id="4-安裝-ethereum-app">4. 安裝 Ethereum App</h2><p>Ledger Manager與Ledget Nano S連線後，除了可以更新韌體之外，也能安裝不同的「加密代幣」App進 Ledget Nano S。</p><p>這邊選擇安裝Ethereum App。</p><p>安裝完成後，在Ledget Nano S上可以看到多出一個<code>Ethereum</code>的圖示。</p><p>點選進入<code>Ethereum</code>，確認<code>Browser Support</code>選項為<code>No</code> (Ethereum &gt; Settings &gt; Browser Support &gt; No)，這樣稍後安裝的Ledger Wallet Ethereum才能辨識到 Ledget Nano S。</p><h2 id="5-安裝-ledger-wallet-ethereum">5. 安裝 Ledger Wallet Ethereum</h2><p>參考<a href="https://ledger.zendesk.com/hc/en-us/articles/115005199649-How-to-install-and-use-Ethereum-and-Ethereum-Classic-" target="_blank" rel="noopener">How to install and use Ethereum and Ethereum Classic?</a> 前往<a href="https://www.ledgerwallet.com/apps/ethereum" target="_blank" rel="noopener">https://www.ledgerwallet.com/apps/ethereum</a>下載Ledger Wallet Ethereum App。</p><p>安裝好後重新將Ledget Nano S連線到電腦並解鎖，可以看到相關操作界面。</p><h1>使用 MyEtherWallet 取代 Ledger Wallet Ethereum</h1><p>若不喜歡使用App，還可透過 MyEtherWallet 來存取。</p><p>參考<a href="https://myetherwallet.github.io/knowledge-base/migration/moving-from-private-key-to-ledger-hardware-wallet.html" target="_blank" rel="noopener">Moving from MyEtherWallet to Ledger</a> 和<a href="https://ledger.zendesk.com/hc/en-us/articles/115005200009-How-to-use-MyEtherWallet-with-Ledger" target="_blank" rel="noopener">How to use MyEtherWallet with Ledger</a> 這兩篇設定，將<code>Setting</code>中的<code>Contract Data</code>與<code>Browser support</code>選項都設成<code>Yes</code>，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ethereum &gt; Settings &gt; Contract Data &gt; Yes</span><br><span class="line">Ethereum &gt; Settings &gt; Browser Support &gt; Yes</span><br></pre></td></tr></table></figure><p>透過Chrome瀏覽器，在MyEtherWallet中看到<code>How would you like to access your wallet</code>選項時，選擇<code>Ledger Wallet</code>並在硬體上解鎖即可。</p><h1>參考資料</h1><ul><li>BIP39 Mnemonic Code Converter <a href="https://iancoleman.io/bip39/" target="_blank" rel="noopener">https://iancoleman.io/bip39/</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> ethereum </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Firefox 使用者導覽 (Onboarding)</title>
      <link href="/2017/11/27/firefox-onboarding/"/>
      <url>/2017/11/27/firefox-onboarding/</url>
      <content type="html"><![CDATA[<p>隨著Firefox 56，57版的推出，我參與製作的Firefox Onboarding功能也正式和大眾見面了。</p><h2 id="firefox-56">Firefox 56</h2><p>在Firefox 56版中當新使用者開啟瀏覽器時，會看到一個可愛的狐狸頭。<img src="https://i.imgur.com/5f4I31q.png" alt="Imgur"></p><p>點進去可以看到一些功能導覽頁面。<img src="https://i.imgur.com/WaOb0Fo.png" alt="Imgur"></p><p>點擊導覽頁面右下方的按鈕的話，會聚焦到瀏覽器對應的功能區塊上，使用者可以快速嘗試這些功能。<img src="https://i.imgur.com/JhNp2K4h.png" alt="Imgur"></p><p>我們也加入了Web assessibility，使用者可以只用鍵盤來瀏覽整個使用者導覽頁面。</p><h2 id="firefox-quantum-57">Firefox Quantum (57)</h2><p>經過使用者研究(User research)，在Firefox Quantum(57)版上我們針對Onboarding的體驗又做了不小的修改。</p><p><img src="https://i.imgur.com/EMDXiIX.png" alt="Imgur"></p><p>這次的更新除了主視覺與一些互動元素都變得不一樣之外，也加了個小彩蛋：新使用者(全新的profile)和從過去版本升級的使用者，所看到的功能導覽項目是不盡相同的喔。</p><p><img src="https://i.imgur.com/pGmPnM8.png" alt="Imgur"></p><p>有興趣進一步了解我們怎麼製作Onboarding Tour，可參考<a href="https://github.com/mozilla/gecko-dev/tree/master/browser/extensions/onboarding" target="_blank" rel="noopener">Onboarding文件</a></p>]]></content>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>為 Elementary OS 設定中文環境</title>
      <link href="/2017/11/04/chinese-in-elementary-os/"/>
      <url>/2017/11/04/chinese-in-elementary-os/</url>
      <content type="html"><![CDATA[<p>在前一篇文章中我已經設定好了雙系統（Elementary OS/Windows 10）開機。在這篇中將繼續把系統的基礎中文環境（中文界面 + 輸入法）設定起來。感謝前路上的貢獻者讓整個過程變得相當容易。</p><p>設定好的中文環境如下<img src="https://i.imgur.com/WjBUcl6m.png" alt="Imgur"></p><h2 id="為什麼要用elementary-os">為什麼要用Elementary OS?</h2><p>其實Ubuntu等發行版的中文環境已經做得很好，如果使用Ubuntu等更成熟的發行版，基礎的中文環境都是預設好開箱即用的。</p><p>但我就是任性想用基於Ubuntu，但是界面看起來更養眼的<a href="https://elementary.io/zh_TW/" target="_blank" rel="noopener">Elementary OS</a>。</p><h2 id="調整語系">調整語系</h2><p><img src="https://i.imgur.com/TZRXNzGm.png" alt="Imgur"></p><p>首先，打開<code>Settings</code>中的<code>Language &amp; Region</code>，在左側<code>Installed Languages</code>選單中將界面切換到中文。並選擇完全安裝（Complete Installation）。</p><p>等待安裝好後重新登入，就可以看到全中文界面了。</p><p><img src="https://i.imgur.com/jVv0rNEm.png" alt="Imgur"></p><h2 id="安裝新酷音輸入法">安裝新酷音輸入法</h2><p>在安裝好 Elementary OS 0.4.1 後，預設並沒有輸入法選項，但其實內部已安裝了ibus輸入法框架。</p><p>因為沒有內建輸入法，所以若要使用輸入法，需要自行安裝。</p><p>在命令列中輸入以下命令以安裝新酷音輸入法</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install ibus-chewing</span><br></pre></td></tr></table></figure><p>安裝好後再輸入<code>ibus-setup</code>，可開啟輸入法設定畫面</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ibus-setup</span><br></pre></td></tr></table></figure><p>在 「輸入法」 分頁底下的 「漢語」 子選單當中可以加入剛安裝的新酷音輸入法。</p><p><img src="https://i.imgur.com/5EBSmC6.png" alt="Imgur"></p><p>按「確定」，在設定畫面中可以看到的新酷音輸入法。</p><p><img src="https://i.imgur.com/vhkdfvKm.png" alt="Imgur"></p><p>最後重要的步驟，就是將切換方式改成個人較習慣的<code>Ctrl+Space</code>。</p><p><img src="https://i.imgur.com/S4TZ1iRm.png" alt="Imgur"></p><p>如此一來，就可以在Elementary OS上輸入中文啦！這篇文章就是從截圖到文章編輯/上傳，全程在已照上述方式安裝好Elmentary OS基礎中文環境的筆電上完成的。</p><h3 id="fcitx-版">fcitx 版</h3><p>我也試了安裝fcitx版本的新酷音</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo apt install fcitx fcitx-chewing</span><br></pre></td></tr></table></figure><p>安裝好後使用<code>im-config</code>命令將預設輸入法框架切換成<code>fcitx</code>，重新開機後就可以看到輸入法圖示了。</p><h2 id="參考資料">參考資料</h2><ul><li>Ubuntu fcitx + chewing 新酷音輸入法 <a href="https://gist.github.com/tanyuan/c0d4ee15cf0c9c93da28cc1cf0ff87b3" target="_blank" rel="noopener">https://gist.github.com/tanyuan/c0d4ee15cf0c9c93da28cc1cf0ff87b3</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Dual boot Elementary OS &amp; Windows 10 on XPS 13 (9360)</title>
      <link href="/2017/10/25/xps13-elementary-os/"/>
      <url>/2017/10/25/xps13-elementary-os/</url>
      <content type="html"><![CDATA[<p>I just successfully installed Elementary OS Luna (0.4.1) along side with Windows 10 on my new Dell XPS 9360 machine.</p><p>Comparing this XPS 13 <code>9360 (8th Gen i7)</code> with my previous model <code>9343 (5th Gen i7)</code>, the CPU is way faster(feels like 3 times faster), the wireless works well and the signal is stronger (which I was encountered some issues in XPS 13 9343), the keyboard feedback is pleasent, and the battery life did last longer in 9360.</p><p>Several settings are trickier than early days when I try to install *nux on Notebook. Here’s the self reference guide and hope it could help others.</p><h2 id="settings-on-windows">Settings on Windows</h2><h3 id="login-to-microsoft-account">Login to Microsoft account</h3><p>It’s necessary to bind your account with the device, so you can get recovery key later.</p><h3 id="flash-elementary-os-to-the-usb-disk">Flash Elementary OS to the USB disk</h3><p>I download the OS image from <a href="http://elementary.io/" target="_blank" rel="noopener">Elementary OS web site</a> and use <a href="https://unetbootin.github.io/" target="_blank" rel="noopener">Unetbootin</a> to flash the image into the disk.</p><h3 id="shrink-the-disk-space">Shrink the disk space</h3><p>I have the 256GB SSD, I use <a href="https://www.partitionwizard.com/" target="_blank" rel="noopener">Partition Wizard</a> to slice ~100GB for Elementary OS.</p><p>I have 8GB RAM so I <a href="https://askubuntu.com/questions/49109/i-have-16gb-ram-do-i-need-32gb-swap" target="_blank" rel="noopener">reference</a> the recommend swap size and left ~8GB for swap.</p><h3 id="disable-fast-startup">Disable fast startup</h3><p>I also need to follow the instructions to <a href="https://www.tenforums.com/tutorials/4189-turn-off-fast-startup-windows-10-a.html" target="_blank" rel="noopener">disable the fast startup</a> on Windows.</p><h3 id="switch-sata-operation-mode-from-raid-to-ahci">Switch SATA operation mode from RAID to AHCI</h3><p>Here’s the most tricky part. It takes me a while to figure out how to switch the SATA storage from RAID to AHCI. The trick is doing this procedure with <a href="http://triplescomputers.com/blog/uncategorized/solution-switch-windows-10-from-raidide-to-ahci-operation/" target="_blank" rel="noopener">Windows safe mode</a>.</p><h2 id="settings-on-bios">Settings on BIOS</h2><p>Press <code>F12</code> during booting.</p><ul><li>Don’t need to turn off the security boot.</li><li>Follow above link’s instructions to config SATA storage.</li><li>Save the configureation before exit.</li></ul><p>Reboot to windows and make sure windows runs nicely in safemode. Then follow above link’s instructions to jump out of safemode.</p><p>Now I’m prepared and able to install Elementary OS.</p><h2 id="install-elementary-os-through-usb-disk">Install Elementary OS through USB disk</h2><p>Install Elementary OS as usual Ubuntu distribution.</p><p>First connect to wifi and allow install 3rd party softwares.</p><p>Add the left space as <code>/</code>(root) with <code>Ext4</code> format. And set the left ~8GB as <code>SWAP</code> format.</p><p>Then continue the auto install process.</p><p>Now I have a clean Elementary OS.</p><h2 id="recover-windows-with-bitlocker-recovery-keys">Recover Windows with BitLocker recovery keys</h2><p>After restart I can see an option menu with Elementary OS and Windows Boot Manager.</p><p>I can boot to Elementary OS without major issue.</p><p>Well, I met the problem that AppCenter can’t start correctly, so I do <code>sudo apt update &amp;&amp; sudo apt upgrade</code> then <code>sudo apt purge appcenter &amp;&amp; sudo apt purge packagekit</code> then restart and run <code>sudo apt install appcenter &amp;&amp; sudo apt install packagekit</code> to make it work normally.</p><p>The input method and bluetooth pairing seems not work out of box, but I can live with that.</p><p>Then when I boot to Windows, I need to enter the BitLocker recovery keys. That could be solved by <a href="https://support.microsoft.com/en-us/help/17133/windows-8-bitlocker-recovery-keys-frequently-asked-questions" target="_blank" rel="noopener">following the FAQ from microsoft</a>. I need to login to Microsoft Account and find the recovery key.</p><p>Enter the recovery key then everything works.</p>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何撰寫智能合約(Smart Contract)?(III)建立標準代幣</title>
      <link href="/2017/09/16/howto-write-an-erc20-compatible-token/"/>
      <url>/2017/09/16/howto-write-an-erc20-compatible-token/</url>
      <content type="html"><![CDATA[<p><a href="https://blog.gasolin.idv.tw/2017/09/11/howto-write-a-simple-token/">上一篇</a>中我們已寫好並部署完成了簡單的加密代幣🔒💵合約。在閱讀完本文後，你將學會建立一個可以放到乙太幣錢包👛的加密代幣🔒💵。</p><h2 id="開發前的準備">開發前的準備</h2><p>延續上一篇的內容，在開發的過程中，我們將繼續使用<code>testrpc</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>工具在電腦上模擬智能合約所需的乙太坊區塊鏈測試環境。</p><p>首先確保已啟動testrpc。若尚未啟動，可以使用以下命令啟動：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ testrpc</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>這邊有個值得一學的小技巧：在啟動testrpc時加上<code>--seed</code>參數，例如</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">testrpc --seed apple banana cherry</span><br></pre></td></tr></table></figure><p>這樣之後重新啟動testrpc時可以產生一樣的帳號(accounts)和私鑰(private key)。</p><h2 id="erc20標準">ERC20標準</h2><p>建立的代幣若要能透過乙太幣錢包👛來收送，必須相容於以太坊的ERC20標準<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。ERC20標準定義了支援錢包所必須的合約介面。</p><p>本篇將使用<code>OpenZeppelin</code><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>函式庫來簡化建立加密代幣🔒💵的過程。<code>OpenZeppelin</code>是一套協助撰寫安全的加密合約的函式庫，裡面也提供了相容ERC20標準的智能合約。可以透過npm工具安裝到專案目錄<code>node_modules/zeppelin-solodity/</code>中：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ npm install zeppelin-solidity</span><br></pre></td></tr></table></figure><p>準備完成，我們可以開始建立新的加密代幣智能合約了。</p><h2 id="建立一個標準代幣合約">建立一個標準代幣合約</h2><p>在<code>contracts/</code>目錄下建立一個<code>HelloToken.sol</code>檔案。也可以使用以下命令來產生檔案：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ truffle create contract HelloToken</span><br></pre></td></tr></table></figure><p><code>HelloToken.sol</code>檔案內容如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line">import &quot;zeppelin-solidity/contracts/token/StandardToken.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract HelloToken is StandardToken &#123;</span><br><span class="line">  string public name = &quot;HelloCoin&quot;;</span><br><span class="line">  string public symbol = &quot;H@&quot;;</span><br><span class="line">  uint8 public decimals = 2;</span><br><span class="line">  uint256 public INITIAL_SUPPLY = 88888;</span><br><span class="line"></span><br><span class="line">  function HelloToken() public &#123;</span><br><span class="line">    totalSupply = INITIAL_SUPPLY;</span><br><span class="line">    balances[msg.sender] = INITIAL_SUPPLY;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="講解">講解</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br></pre></td></tr></table></figure><p>第一行指名目前使用的solidity版本，不同版本的solidity可能會編譯出不同的bytecode。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &quot;zeppelin-solidity/contracts/token/StandardToken.sol&quot;;</span><br></pre></td></tr></table></figure><p>接著我們使用<code>import</code>語句，來讀入<code>zeppelin-solidity</code>提供的<code>StandardToken</code>合約。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract HelloToken is StandardToken &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立<code>HelloToken</code>合約時，使用<code>is</code>語句繼承了<a href="https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/StandardToken.sol" target="_blank" rel="noopener">StandardToken</a>合約。因此<code>HelloToken</code>合約繼承了<code>StandardToken</code>合約所包含的資料與呼叫方法。</p><p>當我們繼承了<code>StandardToken</code>合約，也就支援了以下 ERC-20 標準中<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>規定的函式</p><table><thead><tr><th>函式</th><th>描述</th></tr></thead><tbody><tr><td>totalSupply()</td><td>代幣發行的總量</td></tr><tr><td>balanceOf(A)</td><td>查詢A帳戶下的代幣數目</td></tr><tr><td>transfer(A,x)</td><td>傳送x個代幣到A帳戶</td></tr><tr><td>transferFrom(A,x)</td><td>從A帳戶提取x個代幣</td></tr><tr><td>approve(A,x)</td><td>同意A帳戶從我的帳戶中提取代幣</td></tr><tr><td>allowance(A,B)</td><td>查詢B帳戶可以從A帳戶提取多少代幣</td></tr></tbody></table><p>和前一篇一樣，後面驗證時會用到<code>balanceOf</code>和<code>transfer</code>兩個函式。因為<code>StandardToken</code>合約中已經幫我們實做了這些函式，因此我們不需要自己從頭再寫一次。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string public name = &quot;HelloCoin&quot;;</span><br><span class="line">string public symbol = &quot;H@&quot;;</span><br><span class="line">uint8 public decimals = 2;</span><br><span class="line">uint256 public INITIAL_SUPPLY = 100000;</span><br></pre></td></tr></table></figure><p>這邊設定參數的目的是指定這個代幣的一些特性。以美元為例，美元的名稱(<code>name</code>)是<code>dollar</code>，美元的代號為<code>$</code>，拿一美元去找零最小可以拿到零錢是一美分(cent)，也就是0.01元。因為一美元最小可分割到小數點後2位(0.01)，因此最小交易單位(decimals)為2。</p><p>這邊將這個加密代幣取名(name)為<code>HelloCoin</code>(哈囉幣)，代幣的代號(symbol)為<code>H@</code>，最小分割單位是2(最小可以找0.01個哈囉幣)。</p><p>以下為美金，比特幣，以太幣，哈囉幣的對照表供參考：</p><table><thead><tr><th>Name</th><th>Symbol</th><th>decimals</th></tr></thead><tbody><tr><td>Dollar</td><td>$</td><td>2</td></tr><tr><td>Bitcoin</td><td>BTC</td><td>8</td></tr><tr><td>Ethereum</td><td>ETH</td><td>18</td></tr><tr><td>HelloCoin</td><td>H@</td><td>2</td></tr></tbody></table><p>最後也定義了初始代幣數目<code>INITIAL_SUPPLY</code>為<code>100000</code>。當我們把全域變數設為<code>public</code>(公開)，編譯時就會自動新增一個讀取公開變數的ABI接口，我們在<code>truffle console</code>中也可以讀取這些變數。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function HelloToken() public &#123;</span><br><span class="line">  totalSupply = INITIAL_SUPPLY;</span><br><span class="line">  balances[msg.sender] = INITIAL_SUPPLY;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和合約同名的<code>HelloToken</code>方法，就是<code>HelloToken</code>合約的建構函式(constructor)。在建構式裡指定了<code>totalSupply</code>數目，並將所有的初始代幣<code>INITIAL_SUPPLY</code>都指定給<code>msg.sender</code>帳號，也就是用來部署這個合約的帳號。‵<code>totalSupply</code>定義於<a href="https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20Basic.sol#L10" target="_blank" rel="noopener">ERC20Basic.sol</a>中，<code>balances</code>定義於<a href="https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/BasicToken.sol#L15" target="_blank" rel="noopener">BasicToken.sol</a>中。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &apos;../math/SafeMath.sol&apos;;</span><br><span class="line">...</span><br><span class="line">using SafeMath for uint256;</span><br><span class="line">...</span><br><span class="line">balances[msg.sender] = balances[msg.sender].sub(_value);</span><br></pre></td></tr></table></figure><p>進一步追去看<a href="https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/BasicToken.sol" target="_blank" rel="noopener">BasicToken.sol</a>合約的內容，可以發現<code>BasicToken.sol</code>合約中匯入了<code>SafeMath.sol</code>合約<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>。<code>SafeMath</code>對各種數值運算加入了必要的驗證，讓合約中的數字計算更安全。</p><p>如此一來，我們已寫好一個可透過以太幣錢包交易的新加密代幣🔒💵合約。如果將這個合約部署到乙太坊公開區塊鍊上，這個代幣合約就會一直存在，世界上從此也就多了一種新的加密代幣。只要你能找到人想擁有這種代幣，這種代幣就有交易的價值。</p><h3 id="編譯與部署">編譯與部署</h3><p>在<code>migrations/</code>目錄下建立一個<code>4_deploy_hellotoken.js</code>檔案，內容如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> HelloToken = artifacts.require(<span class="string">"HelloToken"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</span><br><span class="line">  deployer.deploy(HelloToken);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>現在執行compile與migrate命令</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ truffle compile</span><br><span class="line">...</span><br><span class="line">$ truffle migrate --reset</span><br><span class="line">Using network <span class="string">'development'</span>.</span><br><span class="line"></span><br><span class="line">Running migration: 4_deploy_hellotoken.js</span><br><span class="line">  Deploying HelloToken...</span><br><span class="line">  ... 0x2c4659528c68b4e43d1edff6c989fba05e8e7e56cc4085d408426d339b4e9ba4</span><br><span class="line">  HelloToken: 0x352fa9aa18106f269d944935503afe57a00a9a0d</span><br><span class="line">Saving successful migration to network...</span><br><span class="line">  ... 0x1434c1b61e9719f410fc6090ce37c0ec141a1738aba278dd320738e4a5d229fa</span><br><span class="line">Saving artifacts...</span><br></pre></td></tr></table></figure><p>如此一來我們已將HelloCoin代幣合約部署到testrpc上。</p><h2 id="驗證">驗證</h2><p>我們一樣可以透過<code>truffle console</code>來驗證<code>HelloToken</code>是否部署成功。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ truffle console</span><br><span class="line">&gt; <span class="built_in">let</span> contract</span><br><span class="line">&gt; HelloToken.deployed().<span class="keyword">then</span>(instance =&gt; contract = instance)</span><br><span class="line">&gt; contract.address</span><br><span class="line"><span class="string">'0x352fa9aa18106f269d944935503afe57a00a9a0d'</span></span><br><span class="line">&gt; contract.balanceOf(web3.eth.coinbase)</span><br><span class="line">BigNumber &#123; s: 1, e: 5, c: [ 100000 ] &#125;</span><br><span class="line">&gt; contract.balanceOf(web3.eth.accounts[1])</span><br><span class="line">BigNumber &#123; s: 1, e: 0, c: [ 0 ] &#125;</span><br><span class="line">&gt; contract.transfer(web3.eth.accounts[1], 123)</span><br><span class="line">...</span><br><span class="line">&gt; contract.balanceOf(web3.eth.accounts[0])</span><br><span class="line">BigNumber &#123; s: 1, e: 4, c: [ 99877 ] &#125;</span><br><span class="line">&gt; contract.balanceOf(web3.eth.accounts[1])</span><br><span class="line">BigNumber &#123; s: 1, e: 2, c: [ 123 ] &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h3 id="講解-v2">講解</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">let</span> contract</span><br><span class="line">&gt; SimpleToken.deployed().<span class="keyword">then</span>(instance =&gt; contract = instance)</span><br></pre></td></tr></table></figure><p>這邊使用<code>HelloToken.deployed().then</code>語句來取得HelloToken合約的Instance(實例)，並存到<code>contract</code>變數中，以方便後續的呼叫。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; contract.balanceOf(web3.eth.coinbase)</span><br><span class="line">BigNumber &#123; s: 1, e: 5, c: [ 100000 ] &#125;</span><br><span class="line">&gt; contract.balanceOf(web3.eth.accounts[1])</span><br><span class="line">BigNumber &#123; s: 1, e: 0, c: [ 0 ] &#125;</span><br></pre></td></tr></table></figure><p><code>web3.eth.coinbase</code> 代表操作者預設的帳號，即testrpc所提供的10個帳號中的第一個帳號，也可以透過<code>web3.eth.accounts[0]</code>取得。這兩句的目的是在進行轉帳操作前，先查詢前兩個帳號所擁有的代幣餘額。透過呼叫<code>balanceOf</code>函式，可以看到第一個帳號(部署合約的帳號)裡存著所有的代幣。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; contract.transfer(web3.eth.accounts[1], 123)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>接著使用<code>transfer</code>函式來傳送<code>123</code>個代幣到第二個帳號<code>web3.eth.accounts[1]</code>。如果轉帳成功，傳送者預設帳號中會減少<code>123</code>個代幣，接收者帳號中會增加<code>123</code>個代幣。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; contract.balanceOf(web3.eth.accounts[0])</span><br><span class="line">BigNumber &#123; s: 1, e: 4, c: [ 99877 ] &#125;</span><br><span class="line">&gt; contract.balanceOf(web3.eth.accounts[1])</span><br><span class="line">BigNumber &#123; s: 1, e: 2, c: [ 123 ] &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>我們再次透過呼叫<code>balanceOf</code>函式，查詢傳送者帳號和接收者帳號各自剩下的HelloToken數目。發現轉帳真的成功了。</p><h2 id="結語">結語</h2><p>我們用到 <code>OpenZeppelin</code>提供的函式庫來簡化撰寫加密代幣合約的工作。要實際投入使用前，還是建議將呼叫到的程式碼都再審查幾遍。可以從 OpenZeppelin 自己提供的Audit開始看<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>，可以學到一些觀念。</p><h2 id="參考資料">參考資料</h2><ul><li>[1] <a href="https://github.com/ethereumjs/testrpc" target="_blank" rel="noopener">https://github.com/ethereumjs/testrpc</a></li><li>[2] ERC20 <a href="https://theethereum.wiki/w/index.php/ERC20_Token_Standard" target="_blank" rel="noopener">https://theethereum.wiki/w/index.php/ERC20_Token_Standard</a> 或 <a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md" target="_blank" rel="noopener">https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md</a></li><li>[3] OpenZeppelin <a href="https://github.com/OpenZeppelin/zeppelin-solidity" target="_blank" rel="noopener">https://github.com/OpenZeppelin/zeppelin-solidity</a></li><li>[4] OpenZeppelin Audit <a href="https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/audit/ZeppelinAudit.md" target="_blank" rel="noopener">https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/audit/ZeppelinAudit.md</a></li><li>[5] An Ethereum Hello World Smart Contract for Beginners part 1 <a href="http://www.talkcrypto.org/blog/2017/04/17/an-ethereum-hello-world-smart-contract-for-beginners-part-1/" target="_blank" rel="noopener">http://www.talkcrypto.org/blog/2017/04/17/an-ethereum-hello-world-smart-contract-for-beginners-part-1/</a></li><li>[6] <a href="http://www.talkcrypto.org/blog/2017/04/22/an-ethereum-hello-world-smart-contract-for-beginners-part-2/" target="_blank" rel="noopener">http://www.talkcrypto.org/blog/2017/04/22/an-ethereum-hello-world-smart-contract-for-beginners-part-2/</a></li><li>[7] OpenZeppelin <a href="https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol" target="_blank" rel="noopener">SafeMath 合約</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> ethereum </tag>
            
            <tag> javascript </tag>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何撰寫智能合約(Smart Contract)?(II)建立加密代幣</title>
      <link href="/2017/09/11/howto-write-a-simple-token/"/>
      <url>/2017/09/11/howto-write-a-simple-token/</url>
      <content type="html"><![CDATA[<p>Update: 12/28/2017 更新教程，使用require取代throw。</p><p><a href="https://blog.gasolin.idv.tw/2017/09/06/howto-write-a-smart-contract/">上一篇</a>中我們已寫好並部署完成了第一個智能合約，也驗證了合約確實可以運作。在閱讀完本篇後，你將學會建立一個簡易的加密代幣🔒💵。本篇目的並非為了寫出一個安全可用的加密代幣，而是以介紹代幣合約的相關概念為主， 是以對合約做了適當地簡化，好更易於理解。</p><h2 id="開發前的準備">開發前的準備</h2><p>延續上一篇的內容，在開發的過程中，我們將繼續使用<code>testrpc</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>工具在電腦上模擬智能合約所需的乙太坊區塊鏈測試環境。</p><p>首先確保已啟動testrpc，若尚未啟動，可以使用以下命令啟動</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ testrpc</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>這樣我們就可以開始建立加密代幣智能合約專案了。</p><h2 id="代幣合約的基礎概念">代幣合約的基礎概念</h2><p>代幣合約扮演像是銀行🏦的角色。使用者在代幣合約中，用自己的乙太幣帳戶地址當作銀行帳戶，可以透過代幣合約執行轉帳(transfer，將代幣由一個帳戶傳送到另一個帳戶)，查詢餘額(balanceOf，查詢指定帳戶中擁有的代幣)等原本由銀行負責的工作。因為合約部署在公開區塊鏈上，所有的交易都是公開透明，可供檢驗的。</p><h2 id="建立一個代幣合約">建立一個代幣合約</h2><p>在<code>contracts/</code>目錄下建立一個<code>SimpleToken.sol</code>檔案。也可以使用以下命令來產生檔案：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ truffle create contract SimpleToken</span><br></pre></td></tr></table></figure><p><code>SimpleToken.sol</code>檔案內容如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line"></span><br><span class="line">contract SimpleToken &#123;</span><br><span class="line">  uint256 INITIAL_SUPPLY = 10000;</span><br><span class="line">  mapping(address =&gt; uint256) balances;</span><br><span class="line"></span><br><span class="line">  function SimpleToken() public &#123;</span><br><span class="line">    balances[msg.sender] = INITIAL_SUPPLY;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // transfer token for a specified address</span><br><span class="line">  function transfer(address _to, uint256 _amount) public &#123;</span><br><span class="line">    require(balances[msg.sender] &gt; _amount);</span><br><span class="line">    balances[msg.sender] -= _amount;</span><br><span class="line">    balances[_to] += _amount;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Gets the balance of the specified address</span><br><span class="line">  function balanceOf(address _owner) public constant returns (uint256) &#123;</span><br><span class="line">    return balances[_owner];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="講解">講解</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br></pre></td></tr></table></figure><p>第一行指名目前使用的solidity版本，不同版本的solidity可能會編譯出不同的bytecode。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uint256 INITIAL_SUPPLY = 10000;</span><br><span class="line">mapping(address =&gt; unit256) balances;</span><br></pre></td></tr></table></figure><p>我們定義了初始代幣數目<code>INITIAL_SUPPLY</code>。這邊隨意選擇了一個數字<code>10000</code>。</p><p>我們用<code>mapping</code>來定義一個可以儲存鍵值對(key-value pair)的資料結構(類似Javascript中的<code>{&quot;0xaabbccddeeff&quot;: 888}</code>)，同時也需要分別指定<code>address</code>作為鍵的型別，指定<code>uint256</code>作為值的型別。和Javascript不同，型別定義好後不能隨時更改要儲存的型別。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract SimpleToken &#123;</span><br><span class="line">  function SimpleToken() public &#123;</span><br><span class="line">    balances[msg.sender] = INITIAL_SUPPLY;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和合約同名的<code>SimpleToken</code>函式，就是<code>SimpleToken</code>這個合約的建構函式(constructor)。函式中我們拿<code>msg.sender</code>當作key，<code>INITIAL_SUPPLY</code>當作值，將所有的初始代幣<code>INITIAL_SUPPLY</code>都指定給<code>msg.sender</code>帳號。<code>msg</code>是一個全域(Global)物件<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，<code>msg.sender</code>表示用作呼叫當前函式的帳號。由於建構函式只有在合約部署時會被執行，因此這邊用到的<code>msg.sender</code>，也就代表著用來部署這個合約的帳號。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function transfer(address _to, uint256 _amount) public &#123;</span><br><span class="line">  require(balances[msg.sender] &gt; _amount);</span><br><span class="line">  balances[msg.sender] -= _amount;</span><br><span class="line">  balances[_to] += _amount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>transfer</code>函式定義了如何<code>轉帳</code>，只要指定要傳送的帳號與數目，就會從呼叫者手上把對應數目的代幣移轉到指定的帳號上。</p><div class="mermaid">  graph LR傳送者 -- 轉帳 --> 代幣合約代幣合約 -.-> 修改傳送者和接收者餘額</div><p><code>require(balances[msg.sender] &gt; _amount);</code>語句判斷帳戶中是否還有足夠轉出的餘額，若存款小於想轉出的數目，就丟出錯誤。</p><p>這個函式這麼寫當然還是過度簡化了，若要能實際使用，需要檢查更多可能的狀況。但就先這樣吧。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function balanceOf(address _owner) public constant returns (uint256) &#123;</span><br><span class="line">  return balances[_owner];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>balanceOf</code>函式的作用，是讓使用者可以查詢任一帳號的餘額。透過傳入<code>_owner</code>帳號，可以查詢<code>_owner</code>帳號儲存在<code>balances</code>對照表中的值。</p><div class="mermaid">  graph LR傳送者 --> 代幣合約代幣合約 -. 查詢結果 .-> 傳送者</div><p>如此一來，我們就寫好一個新加密代幣🔒💵合約囉！接下來將要編譯合約並部署到區塊鏈上。</p><h3 id="編譯與部署">編譯與部署</h3><p>在<code>migrations/</code>目錄下建立一個<code>3_deploy_token.js</code>檔案，內容如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> SimpleToken = artifacts.require(<span class="string">"SimpleToken"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</span><br><span class="line">  deployer.deploy(SimpleToken);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>現在可執行compile與migrate命令</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ truffle compile</span><br><span class="line">...</span><br><span class="line">$ truffle migrate</span><br><span class="line">Using network <span class="string">'development'</span>.</span><br><span class="line"></span><br><span class="line">Running migration: 3_deploy_token.js</span><br><span class="line">  Deploying HelloToken...</span><br><span class="line">  ... 0x2c4659528c68b4e43d1edff6c989fba05e8e7e56cc4085d408426d339b4e9ba4</span><br><span class="line">  SimpleToken: 0x352fa9aa18106f269d944935503afe57a00a9a0d</span><br><span class="line">Saving successful migration to network...</span><br><span class="line">  ... 0x1434c1b61e9719f410fc6090ce37c0ec141a1738aba278dd320738e4a5d229fa</span><br><span class="line">Saving artifacts...</span><br></pre></td></tr></table></figure><p>如此一來我們已將<code>SimpleToken</code>代幣合約部署到testrpc上。</p><h2 id="驗證">驗證</h2><p>合約部署完成後，我們可以使用<code>truffle console</code>命令開啟console，輸入以下命令來驗證合約是否能照我們設計的方式運作。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ truffle console</span><br><span class="line">&gt; <span class="built_in">let</span> contract</span><br><span class="line">&gt; SimpleToken.deployed().<span class="keyword">then</span>(instance =&gt; contract = instance)</span><br><span class="line">&gt; contract.balanceOf(web3.eth.coinbase)</span><br><span class="line">BigNumber &#123; s: 1, e: 4, c: [ 10000 ] &#125;</span><br><span class="line">&gt; contract.balanceOf(web3.eth.accounts[1])</span><br><span class="line">BigNumber &#123; s: 1, e: 0, c: [ 0 ] &#125;</span><br><span class="line">&gt; contract.transfer(web3.eth.accounts[1], 123)</span><br><span class="line">...</span><br><span class="line">&gt; contract.balanceOf(web3.eth.coinbase)</span><br><span class="line">BigNumber &#123; s: 1, e: 3, c: [ 9877 ] &#125;</span><br><span class="line">&gt; contract.balanceOf.call(web3.eth.accounts[1])</span><br><span class="line">BigNumber &#123; s: 1, e: 2, c: [ 123 ] &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h3 id="講解-v2">講解</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">let</span> contract</span><br><span class="line">&gt; SimpleToken.deployed().<span class="keyword">then</span>(instance =&gt; contract = instance)</span><br></pre></td></tr></table></figure><p>這邊使用<code>SimpleToken.deployed().then</code>語句來取得SimpleToken合約的Instance(實例)，並存到<code>contract</code>變數中，以方便後續的呼叫。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; contract.balanceOf(web3.eth.coinbase)</span><br><span class="line">BigNumber &#123; s: 1, e: 4, c: [ 10000 ] &#125;</span><br><span class="line">&gt; contract.balanceOf(web3.eth.accounts[1])</span><br><span class="line">BigNumber &#123; s: 1, e: 0, c: [ 0 ] &#125;</span><br></pre></td></tr></table></figure><p>還記得啟動testrpc後預設會產生10個帳號(Accounts)嗎?。<code>web3.eth.coinbase</code> 代表操作者預設的帳號，即10個帳號中的第一個帳號<code>web3.eth.accounts[0]</code>，所以這邊呼叫<code>web3.eth.coinbase</code>或<code>web3.eth.accounts[0]</code>結果是一樣的。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; contract.balanceOf(web3.eth.accounts[0])</span><br><span class="line">BigNumber &#123; s: 1, e: 4, c: [ 10000 ] &#125;</span><br></pre></td></tr></table></figure><p>這兩句的目的是在進行轉帳操作前，先查詢前兩個帳號所擁有的代幣餘額。透過呼叫<code>balanceOf</code>函式，可以看到第一個帳號(部署合約的帳號)裡存著所有的代幣。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; contract.transfer(web3.eth.accounts[1], 123)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>接著使用<code>transfer</code>函式來傳送<code>123</code>個代幣到第二個帳號<code>web3.eth.accounts[1]</code>。如果轉帳成功，傳送者預設帳號中會減少123個代幣，接收者帳號中會增加123個代幣。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; contract.balanceOf(web3.eth.coinbase)</span><br><span class="line">BigNumber &#123; s: 1, e: 3, c: [ 9877 ] &#125;</span><br><span class="line">&gt; contract.balanceOf.call(web3.eth.accounts[1])</span><br><span class="line">BigNumber &#123; s: 1, e: 2, c: [ 123 ] &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>我們再次透過呼叫<code>balanceOf</code>函式，查詢傳送者帳號和接收者帳號各自剩下的SimpleToken數目。發現轉帳真的成功了。</p><h2 id="你知道剛剛的程式碼裡有一堆安全漏洞💣嗎">你知道剛剛的程式碼裡有一堆安全漏洞💣嗎?</h2><p>寫智能合約看起來並不困難吧？但因為智能合約的運作是透明公開的，而且其中牽涉了代幣或金錢的流動，這提供了駭客很強的挑戰動機。</p><p>因此如果要妥善處理智能合約，會遇到的諸多安全問題。即使單純如本篇中的<code>SimpleToken</code>，也至少會遇到幾個問題：例如<code>transfer</code>函式中沒有禁止傳入負數金額，因此傳送者反過來可以從接收者那邊取得代幣。同時也沒有檢查接收者帳號是否合法，因此傳送者可能會傳送失敗或因為送到黑洞中，白白損失了代幣。</p><p>有著一堆安全漏洞的合約，輕則執行失敗白花交易費用，嚴重則影響到合約中的代幣或以太幣。已有多起因為合約的漏洞，造成儲存在合約中的代幣或以太幣被駭客轉走，使得ICO失敗的案例。</p><p>有興趣的人可以進一步查看參考資料<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>和<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>了解智能合約當前的一些最佳實現。</p><h2 id="結語">結語</h2><p>看完這篇除了學到本篇講解的<code>SimpleToken</code>外，應該也可以大致看得懂truffle預設的<code>MetaCoin.sol</code>合約了。不同的細節可以查看solidity相關語法<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。下一篇會接著介紹如何使用經過驗證的函式庫，來建立一份可以放到乙太幣錢包👛的加密代幣🔒💵合約。</p><h2 id="參考資料">參考資料</h2><ul><li>[1] <a href="https://github.com/ethereumjs/testrpc" target="_blank" rel="noopener">https://github.com/ethereumjs/testrpc</a></li><li>[2] Units and Globally Available Variables <a href="http://solidity.readthedocs.io/en/develop/units-and-global-variables.html" target="_blank" rel="noopener">http://solidity.readthedocs.io/en/develop/units-and-global-variables.html</a></li><li>[3] An Ethereum Hello World Smart Contract for Beginners <a href="http://www.talkcrypto.org/blog/2017/04/17/an-ethereum-hello-world-smart-contract-for-beginners-part-1/" target="_blank" rel="noopener">part 1</a>, <a href="http://www.talkcrypto.org/blog/2017/04/22/an-ethereum-hello-world-smart-contract-for-beginners-part-2/" target="_blank" rel="noopener">part 2</a></li><li>[4] Onward with Ethereum Smart Contract Security <a href="https://blog.zeppelin.solutions/onward-with-ethereum-smart-contract-security-97a827e47702" target="_blank" rel="noopener">https://blog.zeppelin.solutions/onward-with-ethereum-smart-contract-security-97a827e47702</a></li><li>[5] Ethereum Contract Security Techniques and Tips <a href="https://github.com/ConsenSys/smart-contract-best-practices" target="_blank" rel="noopener">https://github.com/ConsenSys/smart-contract-best-practices</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> ethereum </tag>
            
            <tag> javascript </tag>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何撰寫智能合約(Smart Contract)?(I)</title>
      <link href="/2017/09/06/howto-write-a-smart-contract/"/>
      <url>/2017/09/06/howto-write-a-smart-contract/</url>
      <content type="html"><![CDATA[<p>Update: 11/30/2017 更新教程，使用<a href="https://github.com/trufflesuite/truffle/releases/tag/v4.0.0" target="_blank" rel="noopener">Truffle 4.0.1</a>。</p><p><a href="https://blog.gasolin.idv.tw/2017/09/02/what-is-smart-contract/">上一篇</a>中介紹了智能合約📒是什麼，也概略描述了從編譯到部署智能合約的流程，接下來將介紹如何使用solidity語言來寫智能合約。</p><h2 id="使用solidity語言撰寫智能合約">使用solidity語言撰寫智能合約</h2><p>Ethereum上的智能合約需要使用<code>solidity</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>語言來撰寫。雖然還有其他能用來撰寫智能合約的語言如<code>Serpent</code>(類Python)、<code>lll</code>(類Fortran)，但目前看到所有公開的智能合約都是使用solidity撰寫。</p><p>宣傳上說，solidity是一種類似Javascript的語言，而且圍繞著solidity的各種開發工具鏈，都是使用屬於Javascript生態系的npm來提供的。但我覺得solidity還是比較像Java或C#。因為和Javascript不同，solidity與Java或C#同屬於強型別(Strong Type，在定義變數時需要指定型別)語言、在定義函式(function)時同樣需指定回傳的型別(type)、同樣也需要先編譯才能執行。這些特性都是Javascript所不具備的。</p><h2 id="開發前的準備">開發前的準備</h2><p>本文將使用當前最活躍的智能合約開發框架<code>truffle</code><sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>為基礎來開發。之前提到過的ENS(Ethereum Name Service)<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>也是採用truffle框架。其他選擇還有<code>embark</code><sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>等。</p><p>就像一般網站或App開發一樣，在提供公開服務之前，開發者會在自己用於寫程式的電腦(又稱作本機)💻或透過測試網路🕸來測試程式執行的效果，測試完成後，才會部署到公開的網路上提供服務。開發區塊鏈智能合約(程式)的過程也是如此。特別是公開鏈上所有寫入或讀取計算結果的操作都需要真金白銀(虛擬代幣)💸，而且根據網路狀況，每個公開鏈上的操作都需要要一小段反應時間(15秒 ~ 數分鐘)，這些等待頗浪費寶貴的開發時間⏳。因此在開發的過程中，我們將使用<code>testrpc</code><sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>工具在電腦上模擬智能合約所需的乙太坊區塊鏈測試環境。</p><p>testrpc中也包含了Javascript版本的Ethereum虛擬機(Ethereum Virtual Machine)<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>，因此可以完整地執行智能合約😇。</p><p>此外，開發前還需準備一個合手的編輯器。我目前是使用<a href="https://code.visualstudio.com" target="_blank" rel="noopener">Visual Studio Code</a>搭配<a href="https://marketplace.visualstudio.com/items?itemName=JuanBlanco.solidity" target="_blank" rel="noopener">solidity</a>插件來開發。solidity插件除了支援語法高亮之外，也會透過Solium<sup id="fnref:11"><a href="#fn:11" rel="footnote">11</a></sup>檢查並提示基本的語法錯誤，相當方便。其他編輯器應該也有類似的插件可選擇。</p><h3 id="安裝所需工具">安裝所需工具</h3><p>首先開發機上必須裝好Node.js，再使用以下命令安裝所需的工具：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ npm install -g ethereumjs-testrpc truffle</span><br></pre></td></tr></table></figure><h3 id="啟動-testrpc">啟動 Testrpc</h3><p>安裝好後隨時可以使用<code>testrpc</code>命令來啟動乙太坊測試環境。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ testrpc</span><br><span class="line">Available Accounts</span><br><span class="line">==================</span><br><span class="line">(0) 0xa4d7ce9137e6f8de4fb1311595b33230be15be50</span><br><span class="line">(1) 0x26c231bdd7c8a7304983b04694c3437b30331019</span><br><span class="line">(2) 0xe238ccca936dcdbd48f0cf3a1e6f147d04b55527</span><br><span class="line">(3) 0x769ed341bf83cc86e5037cb78388012d6e2d9cc9</span><br><span class="line">(4) 0x72a084c80195de79e5cd8dca59488e67982f65d7</span><br><span class="line">(5) 0xcfda0765b0a82721d2f59581f53846a12e392999</span><br><span class="line">(6) 0x4b0349aea768b4e1ed4cec683f8f7dd112729fea</span><br><span class="line">(7) 0x643c305f0b3844984d7f1f7b9f3ab93a73dfdfcf</span><br><span class="line">(8) 0x2ee0a7974326604442dca127d02fac4957ab3e8a</span><br><span class="line">(9) 0xe00e57db1772f6e81bcccc982e565a10ae26ab92</span><br><span class="line"></span><br><span class="line">Private Keys</span><br><span class="line">==================</span><br><span class="line">(0) 7de56fb677edc8d0c7a1f3a6d5bcb8f73ce257d44996e9b5fc8ad414af38a22a</span><br><span class="line">(1) 4401de20cf287d15d1c062005d866a35cd82e2a73f8cb43ec0cb90b117d1ec38</span><br><span class="line">(2) 8f51f9100a81218343d44a047ae3b0be5d80d262a13fbef24dc569b3e335e820</span><br><span class="line">(3) 241a0ff98dfb6f290dbee909c9a7a4eea2de3a2174e7cddf834868ea03f80fa9</span><br><span class="line">(4) ce1108cc6763bc74658068a55b080c6ccbfb1bd26e609588b81c07d13affc70d</span><br><span class="line">(5) f9614c1fd34224787e6c95bbe881fb28fd0fdc00808ef85d0430505f4a348690</span><br><span class="line">(6) 4c1baad08f720f5c5754bb185e66490b45e3480aa3ec419e4b76f7a81118b296</span><br><span class="line">(7) af9af2c6b519d49605cc58b719240299e5e8b9a89a7e94a85625734fc30c46bd</span><br><span class="line">(8) 55ab79ae6de4fad5b98bc1dfd795b945ba8e7d92dcc88073f9e3fdfef471f69f</span><br><span class="line">(9) e9299fb391c8830370991659780933e6b62269e32a8cbc55a29aa5f73df995a2</span><br><span class="line"></span><br><span class="line">HD Wallet</span><br><span class="line">==================</span><br><span class="line">Mnemonic:      addict cherry medal cupboard bless reduce oven beauty egg gift pledge exact</span><br><span class="line">Base HD Path:  m/44<span class="string">'/60'</span>/0<span class="string">'/0/&#123;account_index&#125;</span></span><br></pre></td></tr></table></figure><p>可以看到testrpc啟動後自動建立了10個帳號(Accounts)，與每個帳號對應的私鑰(Private Key)🔑。每個帳號中都有100個測試用的以太幣(Ether)💵。要注意testrpc僅運行在記憶體中，因此每次重開時都會回到全新的狀態。</p><p>一切準備就緒，我們可以開始建立第一份智能合約專案了。</p><h2 id="建立專案">建立專案</h2><p>開啟另一個命令列視窗，輸入以下命令以建立專案：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ mkdir hello</span><br><span class="line">$ <span class="built_in">cd</span> hello</span><br><span class="line">$ truffle init</span><br></pre></td></tr></table></figure><p>如此一來，我們已建立好第一份智能合約專案了。</p><p>在<code>demo/</code>資料夾下，可以看到<code>contracts/</code>資料夾，裡面放的是這個專案所包含的所有solidity程式。我們在<code>contracts/</code>資料夾中額外建立一個<code>HelloWorld.sol</code>檔案。（或者也可以用<code>truffle create contract HelloWorld</code>命令來建立）</p><p><code>HelloWorld.sol</code>檔案內容如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br><span class="line"></span><br><span class="line">contract HelloWorld &#123;</span><br><span class="line">    function sayHello() public returns (string) &#123;</span><br><span class="line">        return (&quot;Hello World&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="講解">講解</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.11;</span><br></pre></td></tr></table></figure><p>第一行指名目前使用的solidity版本，不同版本的solidity可能會編譯出不同的bytecode。</p><p>想要知道當前的solidity版本，也可以用 <code>truffle version</code> 命令來查看當前使用的truffle與solidity版本：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ truffle version</span><br><span class="line">Truffle v4.0.1 (core: 4.0.1)</span><br><span class="line">Solidity v0.4.18 (solc-js)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract HelloWorld &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>contract</code>關鍵字類似於其他語言中較常見的<code>class</code>。因為solidity是專為智能合約(Contact)設計的語言，宣告<code>contract</code>後即內建了開發智能合約所需的功能。也可以把這句理解為<code>class HelloWorld extends Contract</code>。</p><p>雖然一個.sol檔案中可以定義多個Contract，但建議一個.sol檔案中只定義一個Contract以便於後續的維護。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function sayHello() public returns (string) &#123;</span><br><span class="line">    return (&quot;Hello World&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函式的結構與其他程式類似，但如果有傳入的參數或回傳值，需要指定參數或回傳值的型別(type)。所有支援的型別可以查看參考資料<sup id="fnref:10"><a href="#fn:10" rel="footnote">10</a></sup>。</p><p>solidity官方推薦的縮排風格為4個空格<sup id="fnref:13"><a href="#fn:13" rel="footnote">13</a></sup>。</p><h2 id="編譯">編譯</h2><p>現在執行<code>truffle compile</code>命令，我們可以將<code>HelloWorld.sol</code>原始碼編譯成Ethereum bytecode。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ truffle compile</span><br></pre></td></tr></table></figure><p>編譯成功的話，在<code>build/contracts/</code>目錄下會多出<code>HelloWorld.json</code>這個檔案。（在Windows平台上執行truffle compile若遇到問題，可以查看參考資料<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup>來解決。）</p><h2 id="部署">部署</h2><p>為了將寫好的solidity程式碼部署到區塊鍊上，我們需要做一些相應的設定。</p><h3 id="遷移">遷移</h3><p>truffle框架中提供了方便部署合約的腳本。我們可以在<code>migrations/</code>目錄下維護這些腳本。這些腳本除了能部署合約，也可以用來遷移合約中的資料。建立<code>migrations/2_deploy_contracts.js</code>檔案(這些腳本使用Javascript撰寫)，將內容修改如下</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> HelloWorld = artifacts.require(<span class="string">"HelloWorld"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</span><br><span class="line">  deployer.deploy(HelloWorld);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>這些migration檔案會依照檔案的<code>編號</code>來執行。例如<code>2_</code>就會在<code>1_</code>之後執行。檔案後面的文字只為協助開發者理解之用。</p><p>在檔案中可使用<code>artifacts.require</code>語句來取得準備部署的合約。使用<code>deployer.deploy</code>語句將合約部署到區塊鏈上。這邊<code>HelloWorld</code>是<code>contract</code>的名稱而不是檔名。因此可以用此語法讀入任一<code>.sol</code>檔案中的任一合約。</p><h3 id="區塊網路設定">區塊網路設定</h3><p>為了與<code>testrpc</code>連線，需要打開<code>truffle.js</code>並加入以下設定：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// See &lt;http://truffleframework.com/docs/advanced/configuration&gt;</span></span><br><span class="line">  <span class="comment">// to customize your Truffle configuration!</span></span><br><span class="line">  networks: &#123;</span><br><span class="line">    development: &#123;</span><br><span class="line">      host: <span class="string">"localhost"</span>,</span><br><span class="line">      port: <span class="number">8545</span>,</span><br><span class="line">      network_id: <span class="string">"*"</span> <span class="comment">// Match any network id</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>truffle 使用 Javascript 的 Object 格式來定義設定。這邊定義了<code>development</code>網路為<code>localhost:8545</code>，即testrpc所提供的網路位址。</p><h3 id="部署-v2">部署</h3><p>現在執行<code>truffle migrate</code>命令</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ truffle migrate</span><br><span class="line">Using network <span class="string">'development'</span>.</span><br><span class="line"></span><br><span class="line">Running migration: 1_initial_migration.js</span><br><span class="line">...</span><br><span class="line">Saving successful migration to network...</span><br><span class="line">Running migration: 2_deploy_contracts.js</span><br><span class="line">...</span><br><span class="line">Saving successful migration to network...</span><br><span class="line">...</span><br><span class="line">Saving artifacts...</span><br></pre></td></tr></table></figure><p>如此一來合約已經部署到testrpc中。切換到testrpc視窗，可以看到testrpc有反應了。</p><h3 id="與合約互動">與合約互動</h3><p>truffle提供命令行工具，執行<code>truffle console</code>命令後，可用Javascript來和剛剛部署的合約互動。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ truffle console</span><br><span class="line">&gt; <span class="built_in">let</span> contract</span><br><span class="line">&gt; HelloWorld.deployed().<span class="keyword">then</span>(instance =&gt; contract = instance)</span><br><span class="line">&gt; contract.sayHello.call()</span><br><span class="line"><span class="string">'Hello World'</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><h4 id="講解-v2">講解</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&gt; HelloWorld.deployed().then(<span class="function"><span class="params">instance</span> =&gt;</span> contract = instance)</span><br></pre></td></tr></table></figure><p><code>truffle console</code>中預載了<code>truffle-contract</code><sup id="fnref:12"><a href="#fn:12" rel="footnote">12</a></sup>函式庫，以方便操作部署到區塊鏈上的合約。</p><p>這邊使用<code>HelloWorld.deployed().then</code>語句來取得HelloWorld合約的Instance(實例)，並存到<code>contract</code>變數中，以方便後續的呼叫。</p><p>上面用的是Javascript ES6+的語法，這句也可以寫成</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">HelloWorld.deployed().then(<span class="function"><span class="keyword">function</span>(<span class="params">instance</span>) </span>&#123;</span><br><span class="line">  hello = instance;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt; contract.sayHello.call()</span><br><span class="line"><span class="string">'Hello World'</span></span><br></pre></td></tr></table></figure><p>這邊直接呼叫<code>contract.sayHello()</code>也會得到一樣的結果。<code>truffle-contract</code>提供使用<code>call()</code>來讀取唯讀(read only)的資料，這樣就不需提供gas。因此如果遇到的操作需要向區塊鏈寫入資料，我們就不能用<code>call</code>語句了。</p><p>如此一來，我們已寫好並部署完成了第一個智能合約，也驗證了合約確實可以運作。</p><h3 id="加入新方法">加入新方法</h3><p>我們在<code>HelloWorld.sol</code>中再加入一個<code>echo</code>方法，<code>echo</code>方法接受輸入一個參數，並回傳傳送的參數。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function echo(string name) constant returns (string) &#123;</span><br><span class="line">  return name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新的<code>echo</code>方法中傳入了一個<code>name</code>參數。我們也為<code>echo</code>方法加入一個<code>constant</code>宣告，表示呼叫這個方法並不會改變區塊鏈的狀態。如此一來，透過<code>truffle-contract</code>來呼叫此方法時，會自動選用<code>call</code>來呼叫，也不需要額外提供gas。</p><p>由於更新了合約內容，我們需要先重新新編譯一次，將編譯結果部署到testrpc上，再透過<code>truffle console</code>執行看看結果。</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ truffle compile</span><br><span class="line">...</span><br><span class="line">$ truffle migrate --reset</span><br><span class="line">...</span><br><span class="line">$ truffle console</span><br><span class="line">&gt; <span class="built_in">let</span> contract</span><br><span class="line">&gt; HelloWorld.deployed().<span class="keyword">then</span>(instance =&gt; contract = instance)</span><br><span class="line">&gt; contract.echo(<span class="string">"yo man"</span>)</span><br><span class="line"><span class="string">'yo man'</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p><code>echo</code>方法確實將我們輸入的內容回傳了。同時因為宣告了<code>constant</code>，我們不需要直接呼叫<code>call()</code>方法，<code>truffle</code>會自動選用call來呼叫。</p><p>另一點需要注意的，是這次如果還是用<code>truffle migrate</code>命令，我們會得到如下訊息：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ truffle migrate</span><br><span class="line">Using network <span class="string">'development'</span>.</span><br><span class="line"></span><br><span class="line">Network up to date.</span><br></pre></td></tr></table></figure><p>Truffle會告訴你現在網路上的合約都已是最新的，但事實上剛剛程式中新增的方法並沒有更新到區塊鏈上。要更新區塊鏈上已部署的程式，需要改寫<code>migrations</code>中的腳本，但現在還不到介紹migration的時候。還好我們開發用的區塊鏈是怎麼修改都沒關係的testrpc，可以使用<code>truffle migrate --reset</code>命令直接重新在testrpc上部署一次🎉。</p><h2 id="使用truffle-develop命令">使用truffle develop命令</h2><p>truffle 4.0.0 版本之後加入了<code>truffle develop</code>命令。這個命令讓我們不需要另外安裝testrpc等環境，就能直接上手開發。</p><p>例如</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">truffle develop</span><br><span class="line">Truffle Develop started at http://localhost:9545/</span><br><span class="line"></span><br><span class="line">Accounts:</span><br><span class="line">(0) 0x627306090abab3a6e1400e9345bc60c78a8bef57</span><br><span class="line">(1) 0xf17f52151ebef6c7334fad080c5704d77216b732</span><br><span class="line">(2) 0xc5fdf4076b8f3a5357c5e395ab970b5b54098fef</span><br><span class="line">(3) 0x821aea9a577a9b44299b9c15c88cf3087f3b5544</span><br><span class="line">(4) 0x0d1d4e623d10f9fba5db95830f7d3839406c6af2</span><br><span class="line">(5) 0x2932b7a2355d6fecc4b5c0b6bd44cc31df247a2e</span><br><span class="line">(6) 0x2191ef87e392377ec08e7c08eb105ef5448eced5</span><br><span class="line">(7) 0x0f4f2ac550a1b4e2280d04c21cea7ebd822934b5</span><br><span class="line">(8) 0x6330a553fc93768f612722bb8c2ec78ac90b3bbc</span><br><span class="line">(9) 0x5aeda56215b167893e80b4fe645ba6d5bab767de</span><br><span class="line"></span><br><span class="line">Mnemonic: candy maple cake sugar pudding cream honey rich smooth crumble sweet treat</span><br><span class="line"></span><br><span class="line">truffle(develop)&gt; compile</span><br><span class="line">truffle(develop)&gt; migrate</span><br><span class="line">Using network <span class="string">'develop'</span>.</span><br><span class="line">Running migration: 1_initial_migration.js</span><br><span class="line">  Deploying Migrations...</span><br><span class="line">...</span><br><span class="line">Saving artifacts...</span><br><span class="line">Running migration: 2_deploy_contracts.js</span><br><span class="line">  Deploying HelloWorld...</span><br><span class="line">...</span><br><span class="line">Saving artifacts...</span><br><span class="line">truffle(develop)&gt; <span class="built_in">let</span> contract</span><br><span class="line">truffle(develop)&gt; HelloWorld.deployed().<span class="keyword">then</span>(instance =&gt;contract = instance)</span><br><span class="line">...</span><br><span class="line">truffle(develop)&gt; contract.sayHello.call()</span><br><span class="line"><span class="string">'Hello World'</span></span><br></pre></td></tr></table></figure><p>可以看到，在命令行中輸入<code>truffle develop</code>命令，可以直接在裡面執行<code>compile</code>，<code>migrate</code>指令，還可以直接使用<code>console</code>命令所提供的與區塊鍊互動等功能。</p><h2 id="結語">結語</h2><p>本篇設計的範例<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>相當簡單，但已達到完整地帶大家快速⚡️走一遍智能合約開發流程的目的。要透過智能合約實現各種功能，可以參考<a href="http://solidity.readthedocs.io/en/latest/solidity-by-example.html" target="_blank" rel="noopener">Solidity by example</a> 和 <a href="http://truffleframework.com/docs/getting_started/" target="_blank" rel="noopener">Truffle getting started</a> 網站學習更多的內容。也歡迎讀者留言，分享學習資源或提供建議。</p><p>下一篇會接著介紹如何建立一份簡單的加密代幣🔒💵合約。</p><h2 id="參考資料">參考資料</h2><ul><li>[1] Solidity <a href="http://solidity.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">http://solidity.readthedocs.io/en/latest/index.html</a></li><li>[2] Solidity線上編輯器　<a href="https://ethereum.github.io/browser-solidity/" target="_blank" rel="noopener">https://ethereum.github.io/browser-solidity/</a></li><li>[3] Truffle Framework <a href="http://truffleframework.com/" target="_blank" rel="noopener">http://truffleframework.com/</a></li><li>[4] Embark Framework <a href="https://github.com/iurimatias/embark-framework" target="_blank" rel="noopener">https://github.com/iurimatias/embark-framework</a></li><li>[5] ENS也使用Truffle框架 <a href="https://github.com/ethereum/ens" target="_blank" rel="noopener">https://github.com/ethereum/ens</a></li><li>[6] <a href="https://github.com/ethereumjs/testrpc" target="_blank" rel="noopener">https://github.com/ethereumjs/testrpc</a></li><li>[7] <a href="https://github.com/ethereumjs/ethereumjs-vm" target="_blank" rel="noopener">https://github.com/ethereumjs/ethereumjs-vm</a></li><li>[8] HelloWorld範例修改自 <a href="https://app.pluralsight.com/library/courses/blockchain-fundamentals/" target="_blank" rel="noopener">https://app.pluralsight.com/library/courses/blockchain-fundamentals/</a></li><li>[9]  Truffle issue on windows <a href="http://truffleframework.com/docs/advanced/configuration#resolving-naming-conflicts-on-windows" target="_blank" rel="noopener">http://truffleframework.com/docs/advanced/configuration#resolving-naming-conflicts-on-windows</a></li><li>[10] Solidity支援的型別(Type) <a href="https://solidity.readthedocs.io/en/develop/types.html" target="_blank" rel="noopener">https://solidity.readthedocs.io/en/develop/types.html</a></li><li>[11] Solium syntax check <a href="https://github.com/duaraghav8/Solium" target="_blank" rel="noopener">https://github.com/duaraghav8/Solium</a></li><li>[12] <a href="http://truffleframework.com/docs/getting_started/contracts" target="_blank" rel="noopener">http://truffleframework.com/docs/getting_started/contracts</a></li><li>[13] Coding Style <a href="http://solidity.readthedocs.io/en/develop/style-guide.html" target="_blank" rel="noopener">http://solidity.readthedocs.io/en/develop/style-guide.html</a></li><li>[14] 本篇也已分享到medium上的Taipei Ethereum Meetup台灣以太坊社群專欄　<a href="https://medium.com/taipei-ethereum-meetup/%E5%A6%82%E4%BD%95%E6%92%B0%E5%AF%AB%E6%99%BA%E8%83%BD%E5%90%88%E7%B4%84-smart-contract-i-363d06b1965b" target="_blank" rel="noopener">https://medium.com/taipei-ethereum-meetup/如何撰寫智能合約-smart-contract-i-363d06b1965b</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> ethereum </tag>
            
            <tag> javascript </tag>
            
            <tag> solidity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>什麼是智能合約(Smart Contract)?</title>
      <link href="/2017/09/02/what-is-smart-contract/"/>
      <url>/2017/09/02/what-is-smart-contract/</url>
      <content type="html"><![CDATA[<h2 id="智能合約是什麼">智能合約是什麼?</h2><p>在區塊鏈上運行的程式，通常稱為智能合約(Smart Contract)📒。所以通常會把&quot;寫區塊鏈程式&quot;改稱作&quot;寫智能合約&quot;。雖然比特幣(Bitcoin)上也能寫智能合約，但是比特幣所支援的語法僅與交易有關，能做的事情比較有限。因此目前提到寫智能合約，通常指的是支援執行圖靈完備程式的以太坊(Ethereum)區塊鏈⛓。</p><h2 id="智能合約可以做什麼">智能合約可以做什麼</h2><p>目前最常見的智能合約是各種加密貨幣合約💷，開發者可以很容易地透過部署一個智能合約，來提供運行於以太坊上的新加密代幣。如果這份智能合約相容於ERC20標準<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，開發者不需要重新開發從挖礦到交易的整個代幣生態系，你的新加密代幣就可以直接使用支援以太坊的電子錢包💰來收送，大大降低了建立新加密代幣的門檻。</p><p>智能合約也讓募資💸變得更透明。參與者投資資金或提供服務，也可獲得相應的權益。這份權益可以用代幣的形式返還給參與者。同樣地如果這代幣相容於ERC20標準<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，投資者或贊助者還可以隨時交易這些代幣。讓資金的運用變得更加彈性，也降低了投資的門檻。</p><p>除此之外，智能合約也可以用來運作各式公開公正的自動服務機構(DAO，Decentralized Autonomous Organization)🏦。透過分散在全球各節點上運作的智能合約，所有運作與決策都是公開透明的，降低了交易的不確定性(Uncertainty)。</p><h2 id="智能合約和一般程式的差異">智能合約和一般程式的差異</h2><p>以太坊智能合約確實有些和一般程式不同的特性，以下整理了四個不同點。</p><h3 id="一-整合金流容易">一，整合金流容易</h3><p>一般的應用程式要整合金流是件非常不容易的事情。而智能合約極容易整合金流系統(使用以太幣或自行建立的新代幣合約)。</p><h3 id="二-部署時與後續寫入時需費用">二，部署時與後續寫入時需費用</h3><p>一般的應用程式需要提供網址讓使用者下載，一般的網頁應用程式也需要運行在伺服器上，開發者需要維持伺服器的運作以提供服務，這需要持續地花費（就算是免費的伺服器或網頁空間，也是廠商自行吸收了費用），程式開始運作後，除了維持費用外不需額外的花費。</p><p>智能合約在部署時需要一筆費用，這筆費用將分給參與交易驗證（挖礦）的人。而在合約部署成功後，合約會作為不可更改的區塊鏈的一部分，分散地儲存在全球各地以太坊的節點上。也因此，智能合約在部署後，並不需定期提供維持費用，同時查詢已寫入區塊鏈的靜態資料時也不需費用。只有在每次透過智能合約寫入或讀取計算結果時，需要提供一小筆交易費用。</p><h3 id="三-儲存資料的成本更高">三，儲存資料的成本更高</h3><p>一般的應用程式將資料儲存在本機或伺服器上，需要資料時再從本機或伺服器上讀取，而智能合約將資料儲存在區塊鏈上，儲存資料所需的時間與成本相對昂貴。</p><h3 id="四-部署後無法更改">四，部署後無法更改</h3><p>一般的應用程式改版時可透過安裝新版程式，網頁應用程式也可透過部署新版程式達成，而智能合約一旦部署到區塊鏈上後，就無法更改這個智能合約。當然聰明的開發者透過加入額外的智能合約，也已有辦法繞過智能合約部署後無法再更改的限制。</p><h2 id="如何撰寫智能合約？">如何撰寫智能合約？</h2><p>Ethereum上的智能合約需要使用solidity<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>語言來撰寫。之前還有其他能用來撰寫智能合約的語言如Serpent(類Python)、lll(類Fortran)，但目前看到所有公開的智能合約都是使用solidity撰寫。官方宣傳上說solidity是一種類似Javascript的語言，而且圍繞著solidity的各種開發工具鏈都是使用屬於Javascript生態系的npm來提供的。</p><h2 id="將智能合約部署到區塊鏈的流程">將智能合約部署到區塊鏈的流程</h2><p>寫好solidity程式碼(.sol)後，需要先將程式碼編譯(compile)成EVM(Ethereum Virtual Machine)能讀懂的二進位Contract ByteCode，才能部署到Ethereum的區塊鏈上執行。部署到區塊鏈上的合約會有一個和錢包地址（Address）一樣格式的合約地址（Contract Address）。</p><div class="mermaid">  graph LRsubgraph local.sol -- compile --> bytecode[Contract Bytecode]endsubgraph ethereumbytecode -- deploy --> Contractend</div><p>部署後智能合約可自動執行。後續呼叫智能合約的時候，使用者可以使用部署合約的錢包地址(Owner Account)，或依據撰寫的智能合約條件，讓其他錢包地址也能呼叫這個智能合約。所謂的&quot;呼叫智能合約&quot;，其實就是向這個合約地址發起交易，只是交易的不只是代幣，而可以是智能合約提供的呼叫方法。</p><div class="mermaid">  graph LRsubgraph localAccountendsubgraph ethereumAccount -- call --> ContractContract --> EVMend</div><h2 id="有點抽象-來個例子？-🌰">有點抽象，來個例子？ 🌰</h2><p>在<a href="https://blog.gasolin.idv.tw/2017/08/13/got-my-ens-domain/">收到我的ENS網域啦 gasolin.eth</a>這篇文章中，我介紹了申請Ethereum Name Service的心得。其實ENS本身就是一堆智能合約的集合，透過這些智能合約，一起提供了Ethereum Name Service從申請，競價，到設定地址對應的服務。</p><p>要和智能合約互動，除了需要有合約地址外，還需要知道合約所提供的操作介面(Application Binary Interface，ABI)，即知道如何呼叫程式提供的功能，和如何解釋程式回傳的資料。ABI（JSON格式）檔案在從原始碼編譯成ByteCode時會一併產生。</p><p>下圖即是ENS Public Resolver這個合約的地址和ABI。<img src="https://i.imgur.com/y6jvpAUl.png" alt=""></p><p>準備好合約地址和ABI後，我們才能呼叫對應功能來存取合約。<img src="https://i.imgur.com/5550HgNl.png" alt="Imgur"></p><p>在<a href="https://blog.gasolin.idv.tw/2017/09/06/howto-write-a-smart-contract/">下一篇</a>中，我將簡單介紹如何撰寫Solidity程式。</p><h2 id="參考資料">參考資料</h2><ul><li>[1] ERC20 <a href="https://theethereum.wiki/w/index.php/ERC20_Token_Standard" target="_blank" rel="noopener">https://theethereum.wiki/w/index.php/ERC20_Token_Standard</a></li><li>[2] Solidity <a href="http://solidity.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">http://solidity.readthedocs.io/en/latest/index.html</a></li><li>[3] migration contracts <a href="http://truffleframework.com/docs/getting_started/migrations" target="_blank" rel="noopener">http://truffleframework.com/docs/getting_started/migrations</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> ethereum </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>個人工具箱2017九月</title>
      <link href="/2017/08/31/tooling-in-2017-sep/"/>
      <url>/2017/08/31/tooling-in-2017-sep/</url>
      <content type="html"><![CDATA[<p><code>先記錄下來手邊使用的工具，才有機會從繁雜中歸納出簡單的使用規則。</code></p><p>2011<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>年時紀錄了一次當時的個人工具箱，去年開始再次紀錄<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。今年給自己定的一大目標是個人自動化。年初開始紀錄自己工具箱的改變<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>🤹，持續更新。</p><h2 id="主要裝備">主要裝備</h2><ul><li>💻Macbook Air 13&quot;, 2012年版</li><li>📱<a href="https://oneplus.net/global/3" target="_blank" rel="noopener">One Plus 3</a>, Android, 6GB RAM, 5.5&quot; AMOLED</li><li>💻Dell XPS 13 (4943), Windows 10, i7 2.4GHz x2, 8GB RAM, 13&quot; LCD</li><li>📙Kindle Voyage</li><li>🖥Desktop PC, <a href="https://elementary.io/" target="_blank" rel="noopener">Elementary OS</a>, Intel i7 3770 3.40GHz x8, 16GB RAM, GeForce GT 630, 23&quot; LCD x2</li><li>📦Synology NAS: 電影，影集，照片，資料備份</li></ul><p>和年初相比的改變：</p><p>主力用Macbook Air，用回Macbook Air的主因，是因為目前工作中一定得用到的mozreview預期年底會淘汰，懶得為每台機器重新做設定。而且在Windows上編譯工作用的東西還是不太順手。桌機多擺了一台螢幕，雙螢幕工作。</p><h3 id="🕸網站工具">🕸網站工具</h3><ul><li>🕸主要瀏覽器：<a href="https://www.mozilla.org/en-US/firefox/products/" target="_blank" rel="noopener">Firefox Nightly</a></li><li>👥主要社交網站：<a href="http://www.facebook.com/" target="_blank" rel="noopener">Facebook</a>、<a href="https://twitter.com/gasolin" target="_blank" rel="noopener">Twitter</a></li><li>✅<a href="https://todoist.com/" target="_blank" rel="noopener">Todoist</a> (付費)</li><li>✉️<a href="http://mail.google.com/" target="_blank" rel="noopener">GMail</a>, Inbox</li><li>📆<a href="http://www.google.com/calendar" target="_blank" rel="noopener">Google日曆</a></li><li>📝Google Doc, <a href="http://keep.google.com/" target="_blank" rel="noopener">Google keep</a> 記事</li><li>💾個人網路硬碟：<a href="http://www.dropbox.com/" target="_blank" rel="noopener">Dropbox</a>, 主要用作同步照片，</li><li>🔑密碼管理：<a href="https://www.lastpass.com/" target="_blank" rel="noopener">Lasspass</a></li><li>📒記帳: <a href="https://toshl.com" target="_blank" rel="noopener">Toshl</a> (付費)</li><li>📰新聞聚合：<a href="https://feedly.com/" target="_blank" rel="noopener">Feedly</a></li><li><a href="https://share.readmoo.com/" target="_blank" rel="noopener">Readmoo分享書</a></li><li><a href="http://www.douban.com/" target="_blank" rel="noopener">豆瓣</a> 看電影記錄</li><li>🗂個人網站：<a href="http://www.gasolin.idv.tw" target="_blank" rel="noopener">個人網站</a>, <a href="https://github.com/gasolin/blog/" target="_blank" rel="noopener">Github</a></li><li>🗂個人履歷：<a href="https://www.linkedin.com/in/fredglin/" target="_blank" rel="noopener">Linkedin</a></li><li>🔗IFTTT <a href="https://blog.gasolin.idv.tw/2017/02/02/personal-automation-in-2017/">自動化生活紀錄2017</a></li><li>📺<a href="https://www.youtube.com/" target="_blank" rel="noopener">Youtube</a></li><li>👛電子錢包<a href="https://www.myetherwallet.com/" target="_blank" rel="noopener">MyEtherWallet</a></li></ul><p>和年初相比的改變：</p><p>使用多年的Anobii已經漸漸缺乏維護，嘗試使用<a href="https://share.readmoo.com/" target="_blank" rel="noopener">Readmoo分享書</a>替代，但就我繁，簡，英文書交換著看的情況，Readmoo分享書能掃到的書實在有限，因此今年到目前已看的書漏記了不少😓。</p><p>此外也付費訂閱<a href="https://todoist.com/" target="_blank" rel="noopener">Todoist</a>和<a href="https://toshl.com" target="_blank" rel="noopener">Toshl</a>兩種工具服務。</p><h3 id="設計">設計</h3><ul><li>Mockup：<a href="http://www.balsamiq.com/products/mockups" target="_blank" rel="noopener">Balsmiq Mockups</a></li><li>錄螢幕動畫：<a href="http://www.recordit.co/" target="_blank" rel="noopener">Recordit</a></li></ul><h3 id="開發">開發</h3><ul><li>編輯器：Visual Studio Code</li><li>版本控制：git, git-cinnabar</li><li>套件管理：apt, <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a>, yarn, Chocolatey(windows)</li><li>Shell: zsh</li></ul><p>Ubuntu bash on windows用起來還不夠穩定，目前在Windows上盡量能用Chocolatey處理的就用Chocolatey處理。</p><h3 id="常用插件">常用插件</h3><p>Browser</p><ul><li>Emoji cheatsheet</li><li>A Weel translation</li><li>Context Plus</li><li>Grammarly (付費)</li></ul><p>Grammarly 可以自動找出英文語法錯誤，相當方便。</p><p>VSCode</p><ul><li>Git Blame</li><li>Document This</li><li>EditorConfig for VS Code</li><li>WakaTime</li><li>solidity</li></ul><p>JS</p><ul><li>Babel</li><li>ESlint</li></ul><h3 id="娛樂">娛樂</h3><ul><li>🎮Nintendo Switch</li><li>🎮Steam / vlc</li></ul><p>因為攜帶便利，現在主要只玩NS上的遊戲。Steam上看到喜歡的遊戲，也盡量等NS上出了再買。</p><h2 id="📱android-手機">📱Android 手機</h2><ul><li>瀏覽器：Firefox for Android (Nightly)</li><li>網頁更新通知：Web Alert</li><li>閱讀：Palabre (feedly), Readmoo</li><li>稍候閱讀：Pocket</li><li>信箱：Gmail, Inbox</li><li>地圖：Google地圖</li><li>記事：Keep</li><li>內建相機, 內建時鐘</li><li>相簿：Dropbox, Google相簿</li><li>社交：Facebook, LINE, Twitter, WeChat</li><li>待辦事項：<a href="https://play.google.com/store/apps/details?id=com.todoist" target="_blank" rel="noopener">Todoist</a>* 密碼管理：<a href="https://play.google.com/store/apps/details?id=com.lastpass.lpandroid" target="_blank" rel="noopener">LastPass</a></li><li>記帳: <a href="https://play.google.com/store/apps/details?id=com.thirdframestudios.android.expensoor" target="_blank" rel="noopener">Toshl</a></li><li>線上影片：Youtube</li><li>有聲書：Audible</li><li>音樂：豆瓣FM</li><li>健康：小米運動, Pokemon Go</li></ul><p>工具</p><ul><li>公事：Expensify, Duo Mobile</li><li>旅遊：Google翻譯, TripAdvisor</li><li>影片播放：MX Player, DS video (少用)</li><li>記錄看書狀況：Readmoo分享書</li><li>線上學習：Udemy, Pluralsight</li><li>IFTTT</li><li>💳街口支付</li><li>拼字訂正：Grammarly</li></ul><h2 id="reference">Reference</h2><ul><li><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> <a href="https://blog.gasolin.idv.tw/2013/01/02/%E5%80%8B%E4%BA%BA%E5%B7%A5%E5%85%B7%E7%AE%B12011/">個人工具箱2011</a></li><li><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> <a href="https://blog.gasolin.idv.tw/2016/12/19/tooling-in-2016/">個人工具箱2016</a></li><li><sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> <a href="https://blog.gasolin.idv.tw/2017/02/02/tooling-in-2017/">個人工具箱2017</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>以太坊(Ethereum)是什麼？</title>
      <link href="/2017/08/18/what-is-ethereum/"/>
      <url>/2017/08/18/what-is-ethereum/</url>
      <content type="html"><![CDATA[<p>以太坊(Ethereum)是近幾年才發展起來的一種新的底層<a href="https://blog.gasolin.idv.tw/2017/08/10/what-is-blockchain/">區塊鏈</a>技術。以太幣(Ether)是以太坊公有鏈上產生的🔒💵加密貨幣(Crypto　Currency)，除了可以拿來像比特幣(Bitcoin)一樣做交易外，還具有實際的用途。</p><p>以太坊和比特幣一樣是基於P2P網路與密碼學建立起的區塊鏈機制，不同之處是，以太坊在每個運作的節點上都運行著一個以太坊虛擬機(Ethereum Virtual Machine, EVM)，可以用來執行完整的程式。這些程式在以太坊中被稱為⚖📒<strong>智能合約</strong>(Smart Contract)。智能合約除了可以處理資料，還內建轉帳功能，可以很容易地透過智能合約來交易加密貨幣。由於智能合約可在每個以太坊的節點上執行並進行驗證，所以計算結果被認為是可信任的。以太坊還開發出了<a href="https://github.com/ethereum/wiki/wiki/JavaScript-API" target="_blank" rel="noopener">web3.js</a>讓開發者可以使用網頁技術撰寫智能合約的操作介面。這樣的網頁操作介面又稱為🕸🅰<strong>分散式應用程式</strong>(DAPP)。要使用DAPP，必須在支援DAPP的瀏覽器中才能使用(如<a href="https://github.com/ethereum/mist/releases" target="_blank" rel="noopener">Mist</a>或<a href="https://parity.io/" target="_blank" rel="noopener">Parity</a>)。</p><p>使用智能合約技術製作的服務，也構成了以太坊生態圈的一環。例如<a href="https://blog.gasolin.idv.tw/2017/08/13/got-my-ens-domain/">Ethereum Name Service(ENS)</a>就提供了讓使用者更容易尋找到轉帳對象、智能合約，和DAPP的方式。</p><p>以太坊提供了便於交易的加密貨幣以太幣(Ether)，可透過智能合約解決交易上的信任問題，同時也可撰寫DAPP來提供友善的資訊彙總與操作介面，讓以太坊成為一個目前最理想的區塊鏈底層技術。</p><div class="mermaid">  graph TDDAPP -.- DAPP瀏覽器DAPP瀏覽器 -.- 智能合約錢包 -.- 智能合約智能合約 --- 以太坊錢包 -.- 以太幣以太幣 --- 以太坊以太幣 --- 激勵機制以太坊 --- P2P以太坊 --- 共識機制共識機制 --- 密碼學P2P --- 網際網路分散式APP -.- ENS智能合約 -.- ENS以太幣 -.- ENS</div><h2 id="以太幣-ether-的實際用途">以太幣(Ether)的實際用途</h2><p>在電腦上執行的一般的程式碼，寫出來可能會有迴圈不斷執行(死迴圈)的情況，搬到區塊鏈上亦然。那麼以太坊怎麼解決這個問題呢？以太坊開發者想到的辦法是讓執行的程式碼變得有價。EVM裡支援的所有的指令(OPCODE)都有<a href="https://github.com/ethereum/pyethereum/blob/develop/ethereum/opcodes.py" target="_blank" rel="noopener">明碼標價</a>，執行智能合約需要消耗與執行的指令數量相當的以太幣。在智能合約的術語中，這些拿來消耗的以太幣被稱為&quot;gas&quot;(燃料)。部署合約到區塊鏈上時，需要附加一定數量的燃料。當燃料消耗完而程式還沒執行完，就會出現&quot;Out of Gas&quot;(燃料耗盡)錯誤。智能合約透過這樣的方式來避免死迴圈等情況。</p><h2 id="智能合約能做什麼事？">智能合約能做什麼事？</h2><h3 id="創造新的加密代幣">創造新的加密代幣</h3><p>智能合約最基本的應用，就是做出新的加密代幣！只要<a href="https://theethereum.wiki/w/index.php/ERC20_Token_Standard" target="_blank" rel="noopener">遵循一定的規範</a>(ERC20)，部署一份智能合約到以太坊區塊鏈上，任何人都可以可以很容易地創造出自己的加密代幣。</p><p>不用像比特幣的山寨幣一樣需要自行徵募礦工。你的加密代幣會以&quot;以太坊的一個智能合約&quot;的形式存在於以太坊的區塊鏈中。現有支援以太幣的錢包與交易所，也可以快速地接入你的加密代幣。只要你發行的加密代幣與代幣背後所代表的服務具有交易的價值，代幣也可能變貨幣。</p><h3 id="募資">募資</h3><p>此外，在募資上，智能合約也有無與倫比的優勢。新創公司<a href="https://cointelegraph.com/news/the-ico-mania-and-its-consequences-on-ethereum" target="_blank" rel="noopener">ICO</a>可透過以太坊的智能合約，在收到資助者的以太幣時，自動發出等值的加密代幣。</p><p>由於這些加密代幣可交易，如果公司的服務有價值，早期投資人在投資的前期，就可以透過交易加密代幣來調整持有量。</p><p>普通的投資人也第一次有機會直接支持自己感興趣的創業者，並可能從而獲得豐厚(<a href="https://blog.gasolin.idv.tw/2017/08/12/things-to-know-before-join-ico/">或歸零</a>)的回報。</p><h3 id="程式能做的事">程式能做的事</h3><p>當你需要公開，可被信任的紀錄時，都可以透過智能合約達成。</p><h2 id="以太坊的缺點">以太坊的缺點</h2><p>目前以太坊區塊鏈的速度和電腦執行速度無法相比，不適合快速交易，或是需要儲存較大資料的情境。近期的<a href="http://www.investopedia.com/news/what-plasma-and-how-will-it-strengthen-ethereum-blockchain/" target="_blank" rel="noopener">plasma</a>提案有望解決快速交易的問題。</p><p>因為缺乏即時調控區塊大小的手段，在一些很熱門的交易時段(如某些熱門的ICO開放認購時)，整個網路的交易延遲會變地很長。</p><p>智能合約一經部署就永遠存在，除非擁有者啟動智能合約中的自毀(selfdestruct)功能。如何升級合約並保存其中的參數與代幣，是一個值得探討的課題。</p><p>以太坊網路節點上並不適合儲存較大的檔案。目前有<a href="https://github.com/ethersphere/swarm" target="_blank" rel="noopener">Swarm</a>與<a href="https://ipfs.io/" target="_blank" rel="noopener">IPFS</a>等分散式檔案儲存方式可供選擇。</p><h2 id="其他參考資料">其他參考資料</h2><ul><li>以太坊設計原理 <a href="http://ethfans.org/posts/510" target="_blank" rel="noopener">http://ethfans.org/posts/510</a></li><li>ethereum <a href="https://github.com/ethereum/wiki/wiki" target="_blank" rel="noopener">https://github.com/ethereum/wiki/wiki</a></li><li>挖礦教學 <a href="https://www.ptt.cc/bbs/DigiCurrency/M.1495624721.A.6A8.html" target="_blank" rel="noopener">https://www.ptt.cc/bbs/DigiCurrency/M.1495624721.A.6A8.html</a></li><li>以太坊、以太幣是什麼？ETH電腦挖礦圖文教程http://www.gooread.com/article/20122396003/</li><li><a href="https://github.com/vinsgo/awesome-ethereum" target="_blank" rel="noopener">https://github.com/vinsgo/awesome-ethereum</a></li><li>Ethereum Overview <a href="http://truffleframework.com/tutorials/ethereum-overview" target="_blank" rel="noopener">http://truffleframework.com/tutorials/ethereum-overview</a></li><li><a href="http://vitalik.ca/general/2017/09/14/prehistory.html" target="_blank" rel="noopener">A Prehistory of the Ethereum Protocol</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> ethereum </tag>
            
            <tag> blockchain </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>收到我的ENS網域啦 gasolin.eth</title>
      <link href="/2017/08/13/got-my-ens-domain/"/>
      <url>/2017/08/13/got-my-ens-domain/</url>
      <content type="html"><![CDATA[<p>前幾天剛拿到<a href="https://etherscan.io/enslookup?q=gasolin.eth" target="_blank" rel="noopener">gasolin.eth</a>這個ENS網域。ENS (Ethereum Name Service)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> 的功能類似我們較熟悉的DNS(Domain Name Service)網域名稱服務，但提供的不是Internet網址，而是將以太坊(Ethereum)錢包地址和智能合約地址以<code>xxxxxxx.eth</code>網址的方式表示，可以用於轉帳或存取智能合約等地方。</p><h2 id="ens網域的應用情境">ENS網域的應用情境</h2><p>例如有人想轉錢給我，就可以請他將以太幣轉到<code>gasolin.eth</code>這網址，<code>gasolin.eth</code>會自動轉址到我指定的錢包地址(0x…)，轉帳的人不需要記憶一串根本像亂碼的以太幣錢包地址。</p><p><img src="http://i.imgur.com/nkbbryCl.png" alt="Imgur"></p><p>若我想要公開智能合約讓大眾使用，我可以公開諸如<code>service.gasolin.eth</code>這樣的網址，使用者只要連到<code>service.gasolin.eth</code>，就會自動轉到對應的智能合約地址。若這個智能合約所提供的是單次服務，我也可以透過修改<code>service.gasolin.eth</code>對應的智能合約地址，來&quot;升級&quot;這個智能合約服務。使用者依然是連到<code>service.gasolin.eth</code>使用這個服務，而不需要了解背後的機制。</p><h2 id="查詢可申請的網域">查詢可申請的網域</h2><p>因為<code>gasolin.eth</code>已經被我申請了，查詢可申請地址這部分將以搞笑的NMB(嫩模幣) ICO<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>為例，我會以申請<code>nenmocoin.eth</code>當做例子，介紹整個申請ENS網域的流程。</p><p>嫩模幣的投資條件是<code>本次投資僅接受ETH，最少投資額0.0.1ETH,ETH錢包地址:0x74b7bafafd200a58e79b719f3565cbb43af7d6b7</code>。如果能將<code>0x74b7bafafd200a58e79b719f3565cbb43af7d6b7</code>換成<code>nenmocoin.eth</code>，投資者轉帳起來就更直覺了。</p><p>在寫作時<code>nenmocoin</code>(<a href="https://registrar.ens.domains/#nenmocoin" target="_blank" rel="noopener">https://registrar.ens.domains/#nenmocoin</a>)這個網域是可以申請的(目前ENS僅接受申請7個字母以上的網域)。</p><p>想查詢可用的網域，可以前往　<a href="http://registrar.ens.domains/" target="_blank" rel="noopener">http://registrar.ens.domains/</a>　或連到<a href="https://www.myetherwallet.com/" target="_blank" rel="noopener">MyEtherWallet</a><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>並切換到<code>ENS</code>分頁，查詢可用的ENS網址。</p><p><img src="http://i.imgur.com/HIUcvyDl.png" alt="Imgur"></p><p>如果在一般瀏覽器中查看，會看到黃色欄的警告提示。</p><p><img src="http://i.imgur.com/I5rrWTHl.png" alt="Imgur"></p><p>這是因為ENS服務是跑在以太坊Ethereum區塊鏈上，要麼用專用的browser（如Mist），不然就是裝Parity，或瀏覽器擴充套件MetaMask(Chrome only)。還有個選擇就是用<a href="https://www.myetherwallet.com/" target="_blank" rel="noopener">MyEtherWallet</a>網頁錢包，裡面內建註冊ENS需要的功能。</p><p>我是使用<a href="https://www.myetherwallet.com/" target="_blank" rel="noopener">MyEtherWallet</a>網頁錢包來完成整個註冊gasolin.eth網域的流程。</p><h2 id="競標網域須知">競標網域須知</h2><ul><li>註冊ENS網域並不需要實名或其他認證流程，只要有一個以太幣錢包地址即可。</li><li>請參考<a href="https://blog.gasolin.idv.tw/2017/08/12/things-to-know-before-join-ico/">參與首次代幣發行(ICO)時要知道的事</a>，絕對不要用交易所提供的錢包競標網域，不然即使競標到網域也會變成交易所的XD。</li><li>ENS網域的最低起標價是0.01ETH(當前匯率是美金$2~3)</li></ul><p>要註冊ENS網域，需要遵循ENS網域競標流程(bid)。</p><p>ENS網域競標流程模擬現實的競標，首先是寫下標價，並將相應數量的以太幣傳入ENS票箱。兩天後就可以公告這個網域競標(揭標)，其他人能看到這個網域已經開始競標了。如果他們有興趣，也可以加入這個網域的競標。最終價高者得，但出價最高的人只需要繳交第二高者的標價。ENS會自動退回所有參與者的標金，也會返回得標者標金的差額。如果得標者一年後未續約，ENS將釋出此網域並退回押金。</p><div class="mermaid">  graph LR網域可註冊 --> 提出標金提出標金 -- 2 天 --> 公告競標公告競標 -- 2 天 --> 取得網域取得網域 -. 1 年後未續約 .-> 釋出網域並退回押金</div><h2 id="提出標金">提出標金</h2><p>確定&quot;nenmocoin&quot;網域可用，接下來就是打開錢包，開始競標吧。</p><p><img src="http://i.imgur.com/YEHuJWHl.png" alt="Imgur"></p><p>打開錢包，輸入超過最低起標價0.01ETH的數字，勇敢按下<code>Start an Auction</code>按鈕，並照著指示完成競標手續。</p><p>記得將畫面上的資料複製留存，後面的手續中會用到。完成競標手續後會進入2天的等待期。</p><h2 id="公告競標">公告競標</h2><p><img src="http://i.imgur.com/AaQPPa9.png" alt="Imgur"></p><p>其實照著<a href="https://www.myetherwallet.com/" target="_blank" rel="noopener">MyEtherWallet</a>上面的說明完成公告手續並不困難😤。最重要的事，就是在2天的等待期結束後，</p><p><strong>記得回來公告競標，</strong><strong>記得回來公告競標，</strong><strong>記得回來公告競標，</strong></p><p>如果沒做這個動作，前幾天提出的標金會被送到黑洞消失掉，沒辦法取回喔！我第一次試著註冊網域的時候就這樣被吃掉0.01ETH😭。</p><p>公告後其他人可以看到網域開始競標的訊息。這時有兩天的時間讓其他感興趣的人一起競標，當前最高價會顯示在查詢頁面上。</p><h2 id="取得網域">取得網域</h2><p>公告期結束後，如果順利取得網域，可以看到如下訊息</p><p><img src="http://i.imgur.com/hg9vHmo.png" alt="Imgur"></p><p>這時<strong>記得回來宣告取得網域，</strong><strong>記得回來宣告取得網域，</strong><strong>記得回來宣告取得網域，</strong></p><p>照著<a href="https://www.myetherwallet.com/" target="_blank" rel="noopener">MyEtherWallet</a>上面的說明完成宣告手續後，才能正式取得這個網域。</p><p>以後其他人查詢時，就會看到這個網域已經被註冊的訊息。</p><h2 id="取得網域之後">取得網域之後</h2><p>取得網域之後，在<a href="https://www.myetherwallet.com/" target="_blank" rel="noopener">MyEtherWallet</a>上查看網域並打開錢包，就會看到如何設定網域的說明。</p><p>目前設定網域的方式比較複雜些，需要到<code>Contracts</code>(合約)目錄下，在<code>Select Existing Contract</code>（選擇已經存在的合約）選擇<code>ENS - Public Resolver</code>，並在<code>Read/Write Contract</code>(讀取/寫入合約)部分選擇<code>setAddr</code>(設定地址)功能，照著設定網域說明將錢包地址輸入，這樣網域才能正確解析到我們想要的錢包地址。</p><p><img src="http://i.imgur.com/y6jvpAUl.png" alt="Imgur"></p><h2 id="如何節省交易手續費">如何節省交易手續費</h2><p>以上整套設定ENS的過程牽涉到5~6次交易。只有第一次需轉出標金，後面的各種動作都只收交易手續費。因此註冊一個ENS網域的成本其實是標金+多次手續費。標金在到期之後會返還，因此實際影響持有成本最大的是交易手續費。</p><p><a href="https://www.myetherwallet.com/" target="_blank" rel="noopener">MyEtherWallet</a>右上角預設的交易手續費是21GWei（1 Ether = 10^9 GWei）。手續費是給分礦工（提供計算力協助以太幣記帳的人）的，調低的話，交易確認的速度會變慢，調高則變快。我剛開始不懂，因此就使用了預設值。後來看Youtube上的教學，才知道可以參考<a href="http://ethgasstation.info/" target="_blank" rel="noopener">Gas Station</a>網站即時的<code>SafeLow Cost</code>（最低安全交易手續費）來設置。只要我們提供的手續費高於這個數目，交易都會成功。</p><p><img src="http://i.imgur.com/0loyakDl.png" alt="Imgur"></p><p>這陣子最低手續費大多是3 ~ 5 GWei。我照這個手續費做設定（並斟酌提高1 ~ 2 Gwei）交易都有成功。雖然不管用什麼標準來算，以太坊的手續費都已經很便宜，但多一步簡單的操作，就能感受到精打細算的樂趣。</p><h2 id="結語">結語</h2><p>上面舉了嫩模幣ICO的轉帳地址當做例子。<strong>我故意把引用的嫩模幣錢包地址，換成了我自己的錢包地址</strong>。如果不提，應該沒幾個人會注意到吧？如果錢包地址改用本文提到的<code>nenmocoin.eth</code>，參與者是不是更容易發現收款地址已被修改了呢？ENS並沒有做身分認證，釣魚網站也可以申請相似的ENS域名來釣魚，要避免這樣的情況，也有賴服務提供者有在提供服務前，有優先註冊域名的保護意識。</p><p>ENS本身其實就是一系列基於以太坊的智能合約<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>，內部的流程都是自動的，對於智能合約與DAPP開發者來說，也是很值得參考的架構。</p><h2 id="參考資料">參考資料</h2><ul><li>[1] Ethereum Name Service <a href="https://ens.domains/" target="_blank" rel="noopener">https://ens.domains/</a></li><li>[2] <a href="http://blockcast.it/2017/05/27/eth-and-eth-token-wallet-series-myetherwallet/" target="_blank" rel="noopener">Myetherwallet介紹</a></li><li>[3] 嫩模幣 <a href="http://nmb.fun/" target="_blank" rel="noopener">http://nmb.fun/</a></li><li>[4] ENS 原始碼　<a href="https://github.com/ethereum/ens" target="_blank" rel="noopener">https://github.com/ethereum/ens</a></li></ul><hr><p><a href="https://etherscan.io/enslookup?q=gasolin.eth" target="_blank" rel="noopener">gasolin.eth</a>這個網址真的可以用喔！覺得這篇文章寫得蠻好想打賞一下，可以傳到我的錢包地址<code>gasolin.eth</code>。</p>]]></content>
      
      
        <tags>
            
            <tag> ethereum </tag>
            
            <tag> ens </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>參與首次代幣發行(ICO)時要知道的事</title>
      <link href="/2017/08/12/things-to-know-before-join-ico/"/>
      <url>/2017/08/12/things-to-know-before-join-ico/</url>
      <content type="html"><![CDATA[<p>最近首次代幣發行(ICO)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>相當熱門，但當代幣投資者打算贊助某個專案時，有相當多技術原因可能導致投資失敗，而這些原因大多是可以避免的。</p><h2 id="1-投資ico-新創-99-機率跟遇到詐騙沒兩樣">1.投資ICO/新創，99%機率跟遇到詐騙沒兩樣</h2><p>一般統計9成的新創會在一年內關門，存活下來的又有90%會在五年內倒閉。換句話說，新創的五年存活率只有1%。</p><p>首次代幣發行ICO的發起人多是新創公司，投資下去就跟投資新創一樣，有極大失敗的可能。如果不了解風險，沒做足夠的功課而盲目投資，99%機率投資ICO就跟遇到詐騙沒兩樣。就算發起人說得天花亂墜，到時參與ICO換得的代幣也只能當紀念用了。</p><h2 id="2-別用交易所錢包轉帳">2. 別用交易所錢包轉帳</h2><p><strong>交易所的錢包並不能換回其他代幣，</strong><strong>交易所的錢包並不能換回其他代幣，</strong><strong>交易所的錢包並不能換回其他代幣，</strong>重要的事說三遍。</p><p>交易所幾乎都會向客戶宣稱:開戶送比特幣/以太幣錢包。當客戶兌換好代幣後，客戶可以看到錢包帳戶裡的餘額，也可以轉進轉出，從客戶看來確實&quot;擁有&quot;了比特幣/以太幣錢包。</p><p>但是交易所的錢包畢竟是交易所的錢包。在轉出比特幣/以太幣時，交易所會動態選用自己轄下的某個錢包帳號出帳。你所參與的代幣眾籌，它的智能合約收到的是交易所的錢包帳號而不是你的錢包帳號，所以智能合約發代幣的對象也變成交易所了。</p><p>比較建議的方式是使用<a href="https://www.myetherwallet.com/" target="_blank" rel="noopener">MyEtherWallet</a><sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>或硬體錢包參與以太坊相關的ICO。其他可使用的錢包可查看參考資料<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>。</p><h2 id="3-用到假錢包">3. 用到假錢包</h2><p>無論是網路上或是手機應用程式商店中，有許多宣稱有比特幣/以太幣錢包功能的網站/App。其中依然有些是假錢包。當你使用這些錢包轉幣時，可能會被騙走。因此盡量選擇自己常用，有信譽的網站/應用，或硬體錢包來操作ICO。</p><p>網站應該加入書籤，以後都使用書籤中的網站存取。不要盲目信任搜尋引擎搜到的連結(原因在下一條)，或透過slack等社交網站，那些看起來像官方訊息提供的連結或地址[10]。</p><h2 id="4-轉帳時填錯地址或轉到假地址">4.轉帳時填錯地址或轉到假地址</h2><p>比特幣跟以太幣所謂的<code>錢包</code>地址，跟IPv6地址一樣，就是一串16進位數字(而且是頗長的一串。有人算過總共幾位數嗎?)。要投資時需要照著網站上提供的指示，將錢包地址複製到自己的錢包接收地址欄中。要是很不幸地複製錯了，你轉出的資金就被轉到不知是誰的錢包裡去了。由於以太坊上沒有銀行，一旦轉錯了，也沒有申訴的地方喔。</p><p>對於釣魚網站來說，這種根本就是亂碼的錢包地址真是個福音，因為只要將網站複製一下，錢包地址換成自己的，弄個前面網址一模一樣，但並非<code>.com</code>的假官方網域，再下個Google搜尋廣告，就可以開張來詐騙了!</p><p>但幸好最近ENS(Ethereum Name Service)<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> 地址網域開始投入使用，可以將以太坊(Ethereum)錢包地址以類似網址的方式表示。例如我(gasolin)若發起一個ICO，就可以請投資者將以太幣轉到<code>gasolin.eth</code>這網址。<code>gasolin.eth</code>會自動轉址到我指定的錢包地址。之後要公開智能合約讓大眾使用時，也可以公開諸如<code>service.gasolin.eth</code>這樣的網址，<code>service.gasolin.eth</code>會自動轉到對應的智能合約地址。</p><p><img src="http://i.imgur.com/nkbbryCm.png" alt="Imgur"></p><p>期望之後有更多的ICO和智能合約使用ENS，讓贊助者可以更安心地轉帳。</p><h2 id="5-代幣詐騙-scams">5.代幣詐騙(scams)</h2><p>隨著代幣眾籌愈發熱門，代幣詐騙(scams)也層出不窮。除了那種本來就是打算來詐騙(或是來搞笑<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>?)的專案之外，另一種可能的詐騙方式，是詐騙者做一個長得一模一樣的釣魚網站(phishing)，選一個與原來ICO網站類似的網址，並透過搜尋引擎或論壇散播。沒注意到的投資者就可能因此被騙去代幣。因此投資前務必多方確認。也可以到<code>cointelegraph</code><sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>或<code>tokenmarket</code><sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>上查看近期的ICO列表。上面列出的ICO項目不代表可靠，但至少新聞網站為了信譽，會把明顯是詐騙的ICO剔除掉(?)。</p><h2 id="結語">結語</h2><p>投資一定有風險，ICO投資有賺有賠，申購前應詳閱公開說明書。可以將上面提到的幾點當作檢核表，避免因為技術原因導致投資失利。</p><p>雖然上面舉的gasolin ICO只是個例子，但 <a href="https://etherscan.io/enslookup?q=gasolin.eth" target="_blank" rel="noopener">gasolin.eth</a> 這個網址真的可以用喔！覺得這篇文章寫得蠻好想打賞一下，可以打賞一點ETH到我的錢包地址，順便試試ENS的功能:p之後也將分享如何註冊ETH地址的心得。</p><h2 id="參考資料">參考資料</h2><ul><li>[1] 首次公開發行加密代幣 <a href="https://zh.wikipedia.org/wiki/%E9%A6%96%E6%AC%A1%E4%BB%A3%E5%B8%81%E5%8F%91%E5%94%AE" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/首次代币发售</a></li><li>[2] 嫩模幣 <a href="http://nmb.fun/" target="_blank" rel="noopener">http://nmb.fun/</a></li><li>[3] <a href="https://cointelegraph.com/ico-calendar" target="_blank" rel="noopener">https://cointelegraph.com/ico-calendar</a></li><li>[4] <a href="https://registrar.ens.domains/" target="_blank" rel="noopener">https://registrar.ens.domains/</a></li><li>[5] <a href="http://blockcast.it/2017/05/27/eth-and-eth-token-wallet-series-myetherwallet/" target="_blank" rel="noopener">Myetherwallet介紹</a></li><li>[6] <a href="https://tokenmarket.net/ico-calendar" target="_blank" rel="noopener">https://tokenmarket.net/ico-calendar</a></li><li>[7] Token compatible Ethereum wallet list <a href="https://tokenmarket.net/what-is/ethereum-token-wallets/" target="_blank" rel="noopener">https://tokenmarket.net/what-is/ethereum-token-wallets/</a></li><li>[8] Protecting Yourself and Your Funds <a href="https://myetherwallet.github.io/knowledge-base/getting-started/protecting-yourself-and-your-funds.html" target="_blank" rel="noopener">https://myetherwallet.github.io/knowledge-base/getting-started/protecting-yourself-and-your-funds.html</a></li><li>[9] 如果你打算發行ICO，可以看看這篇介紹ICO過程中各種花式被駭的經驗 <a href="https://medium.com/@kickico/how-they-tried-to-hack-our-ico-d348659dc4" target="_blank" rel="noopener">https://medium.com/@kickico/how-they-tried-to-hack-our-ico-d348659dc4</a></li><li>[10] How to scam Ethereum in 24 hrs with Slack <a href="https://hackernoon.com/how-to-scam-102-860-usd-worth-of-ethereum-in-24-hrs-with-slack-63ce1032219c" target="_blank" rel="noopener">https://hackernoon.com/how-to-scam-102-860-usd-worth-of-ethereum-in-24-hrs-with-slack-63ce1032219c</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> ethereum </tag>
            
            <tag> ico </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>區塊鏈是什麼？</title>
      <link href="/2017/08/10/what-is-blockchain/"/>
      <url>/2017/08/10/what-is-blockchain/</url>
      <content type="html"><![CDATA[<p>今年比特幣(Bitcoin)<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>與以太幣(Ether)<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>價格紛紛到達新高。主因除了隨著更多支援加密貨幣(Crypto Currency)-當地貨幣的兌換/代購/交易所開張，取得虛擬貨幣/代幣的方式更加多元外，首次公開發行加密代幣(ICO, Initial Coin/Crypto Token Offering)<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> 這種創新的投資/募資方式愈加熱絡，也讓一些個人與機構意識到虛擬貨幣作為貨幣或貨品的投資價值。</p><p>這些虛擬幣背後所使用的技術叫做區塊鏈(blockchain)<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>，可以被用來解決各種「交易」相關的問題。</p><h2 id="網際網路交換訊息-區塊鏈交換價值">網際網路交換訊息，區塊鏈交換價值</h2><p>網際網路出現之前，不同的系統之間沒辦法用標準的協定來互相通訊和傳遞訊息。網際網路讓不同連網方式（撥接、光纖、4G）、不同設備間可以互相連接，滿足人與人之間對訊息的即時需求。人們的生活在網際網路發展起來的這20多年間，也因此產生了極大地改變。</p><p>2001年時，Napter<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>開啟了透過點對點(P2P)網路交換MP3的風潮，這是第一次大眾意識到點對點網路可以被廣泛地應用在資訊交換上。隨後BitTorrent(BT)<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>接過大旗，透過BitTorrent與配合的磁力連結(Magnet Link)<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>，2009年時已占據了近50%整體網際網路流量。</p><p>區塊鏈基於網際網路，點對點(P2P)網路，和以密碼學為基礎的共識紀錄機制，提供了一個可以不被地域限制，快速交換價值的方式，降低交易的不確定性(uncertainty)與風險。網際網路和點對點網路解決了資訊交換的問題，而區塊鏈則進一步想解決價值交換與交易信任的問題。</p><div class="mermaid">  graph TD公開加密貨幣 --- 區塊鏈公開加密貨幣 --- 激勵機制區塊鏈 --- P2P區塊鏈 --- 共識機制共識機制 --- 密碼學P2P --- 網際網路</div><p>區塊鏈不僅只是加密貨幣，透過區塊鏈，我們可以和各地的人做生意，用很低的手續費在不同國家收款與匯款(都在同一個公開區塊鏈上)，而且幾分鐘內就可到帳；交易的過程中，所有的合約都由網路上的節點自動執行(智能合約 Smart Contract)，可以避免人為操縱與詐欺等潛在的信任問題，讓人們可以更安心地交易；未來還可以透過瀏覽器使用智能合約，就像使用網站一樣容易(分散式應用 DAPP)。</p><p>暢想未來的商業模型，可能是顧客透過易用的手機或網頁DAPP取得商家提供的資訊，經由可信任的智能合約，讓彼此能快速地交換價值與服務。</p><h2 id="聯盟鏈">聯盟鏈</h2><p>區塊鏈根據型態，大致分為公有鏈，私有鏈、聯盟鏈幾種。公有鏈就是大眾比較常聽到的各種加密代幣。可以在 <a href="https://coinmarketcap.com/" target="_blank" rel="noopener">https://coinmarketcap.com/</a> 查看大部分的加密貨幣。除了公有鏈之外，多家銀行、支付機構、甚至IBM、微軟等科技公司也相繼投入資源，參與區塊鏈研究與發展。多數機構採用的是聯盟鏈的形式。Apache基金會下的Hyper Ledger<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup>計畫是目前發展較好的聯盟鏈。</p><p>聯盟鏈與公有鏈有許多不同點。其一是對資料一致性有更高地要求。其二因為相對來說聯盟鏈的節點比較可控，也不需要加入代幣激勵機制或浪費能源在比拚算力的Prove-of-WOrk(PoW)共識機制上。其三是需要對資源與智能合約存取設置權限，以符合企業內部的需求。</p><h2 id="區塊鏈用到的加密技術">區塊鏈用到的加密技術</h2><p>可以在Youtube上查看 <a href="https://youtu.be/_160oMzblY8" target="_blank" rel="noopener">Blockchain 101 - A Visual Demo</a>影片<sup id="fnref:14"><a href="#fn:14" rel="footnote">14</a></sup>，或前往對應的<a href="https://anders.com/blockchain/" target="_blank" rel="noopener">Block Chain Demo網站</a><sup id="fnref:15"><a href="#fn:15" rel="footnote">15</a></sup>自行動手試驗。</p><h2 id="參考資料">參考資料</h2><ul><li>[1] 比特幣 <a href="https://zh.wikipedia.org/wiki/%E6%AF%94%E7%89%B9%E5%B8%81" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/比特币</a></li><li>[2] 以太坊 <a href="https://zh.wikipedia.org/wiki/%E4%BB%A5%E5%A4%AA%E5%9D%8A" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/以太坊</a></li><li>[3] 首次公開發行加密代幣 <a href="https://zh.wikipedia.org/wiki/%E9%A6%96%E6%AC%A1%E4%BB%A3%E5%B8%81%E5%8F%91%E5%94%AE" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/首次代币发售</a></li><li>[4] 區塊鏈https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE</li><li>[5] Napster <a href="https://en.wikipedia.org/wiki/Napster" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Napster</a></li><li>[6] BitTorrent <a href="https://en.wikipedia.org/wiki/BitTorrent" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/BitTorrent</a></li><li>[7] 磁力連結 <a href="https://zh.wikipedia.org/wiki/%E7%A3%81%E5%8A%9B%E9%93%BE%E6%8E%A5" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/磁力链接</a></li><li>[8] <a href="http://lifehacker.com/5875899/what-are-magnet-links-and-how-do-i-use-them-to-download-torrents" target="_blank" rel="noopener">What Are Magnet Links, and How Do I Use Them to Download Torrents?</a></li><li>[9] <a href="https://www.hyperledger.org/" target="_blank" rel="noopener">https://www.hyperledger.org/</a></li><li>[10] <a href="https://entethalliance.org/" target="_blank" rel="noopener">https://entethalliance.org/</a></li><li>[11] <a href="https://en.wikipedia.org/wiki/Proof-of-work_system" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Proof-of-work_system</a></li><li>[12] How Bitcoin Works Under the Hood <a href="https://www.youtube.com/watch?v=Lx9zgZCMqXE" target="_blank" rel="noopener">https://www.youtube.com/watch?v=Lx9zgZCMqXE</a></li><li>[13] TED <a href="https://www.youtube.com/watch?v=RplnSVTzvnU" target="_blank" rel="noopener">How the blockchain will radically transform the economy</a></li><li>[14] <a href="https://youtu.be/_160oMzblY8" target="_blank" rel="noopener">Blockchain 101 - A Visual Demo</a></li><li>[15] <a href="https://anders.com/blockchain/" target="_blank" rel="noopener">Block Chain Demo網站</a></li><li>[16] What is an Initial Coin Offering? <a href="https://www.youtube.com/watch?v=iyuZ_bCQeIE" target="_blank" rel="noopener">https://www.youtube.com/watch?v=iyuZ_bCQeIE</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> ethereum </tag>
            
            <tag> blockchain </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Electron 是什麼</title>
      <link href="/2017/08/09/what-is-electron/"/>
      <url>/2017/08/09/what-is-electron/</url>
      <content type="html"><![CDATA[<p><a href="https://electron.atom.io/" target="_blank" rel="noopener">Electron</a>是一套結合了Chromium瀏覽器與Node.js功能，能使用網頁相關技術撰寫桌面應用的框架。</p><div class="mermaid">  graph LRNode --> ElectronChromium --> Electron</div><p>Electron 除了使用網頁當作應用程式介面，像一般桌面應用一樣離線可使用之外，開發者可以使用npm上的各種node module來加快開發速度。</p><p>諸如存取檔案，標題列（Task bar），桌面圖示（Dock icons），系統通知（Notification），選單，快捷鍵等作業系統的原生功能，Electron 也都有支援，可以用來製作大部分的應用程式。</p><p>目前許多人使用的<a href="https://atom.io/" target="_blank" rel="noopener">atom</a>與<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a>編輯器，都是基於Electron製作的。事實上Electron就是Github在開發atom編輯器的過程中產生的專案。</p><h2 id="使用electron">使用Electron</h2><p>安裝Electron已經變得相當簡單</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ electron-prebuilt</span><br></pre></td></tr></table></figure><p>使用以下命令執行</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">electron .</span><br></pre></td></tr></table></figure><p>或是直接下載官方提供的<a href="https://github.com/electron/electron-quick-start" target="_blank" rel="noopener">electron-quick-start</a>樣板來開始使用。</p><h2 id="electron-的問題">Electron 的問題</h2><p>Electron 對網頁開發人員來說相當友好，但封裝後檔案較大。使用者介面由於是使用網頁技術製作，往往和系統原生介面不一致，在選擇時要注意。</p>]]></content>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> desktop </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何使用ES6+</title>
      <link href="/2017/07/31/howto-use-es6plus/"/>
      <url>/2017/07/31/howto-use-es6plus/</url>
      <content type="html"><![CDATA[<h2 id="es6-是什麼？">ES6+是什麼？</h2><p>近幾年有關注Javascript或Web領域的話，應該會聽過”ES6“這個頗熱門的詞彙。</p><p>ES6代表的是ECMAscript<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>第六版規則。ECMA是一個國際標準組織，各家相關廠商在ECMA-262標準中，定義了 ECMAscript 這個 Javascript 語言的參考標準。</p><p>從2011年起，Javascript語言已停滯在5.1版多年，直到在2015年時釋出了ES6，補足了諸多語言本身的許多特性，讓Javascript更便於使用。</p><p>從ES6開始，ECMAScript將每年將固定釋出新版本。因此 ES6 也可稱為 ES2015。目前已有ES2015，ES2016，ES2017多個新版本，這批新特性被統稱為ES6+或ES2015+。</p><p>之所以到了2017年還有許多人依然在講ES6，是因為ES6為Javascript帶來了20多項較大的語法改動，與之前開發者所認識的Javascript有了很大的不同。</p><h2 id="怎麼使用-es6">怎麼使用 ES6+</h2><p>最新版的主流瀏覽器Chrome、Firefox，或是Node.js 8.0.0以上版本都已實作ES2015~ES2017的所有功能。</p><p>如果想要使用最新的功能，同時又希望能相容其他瀏覽器或舊版的Node，可以使用Babel<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>來達成。Babel是當前最通用的javascript語言轉譯器(Transpiler)，它可以接受使用新語法撰寫的Javascript程式，並將這份程式轉換成與舊版語法相容的Javascript程式。</p><p>實際使用babel時，不需要手動設定ES2015~各年份的preset，只要安裝Env preset<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>並在<code>package.json</code>中做以下設定：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;presets&quot;: [</span><br><span class="line">    [&quot;env&quot;, &#123;</span><br><span class="line">      &quot;targets&quot;: &#123;</span><br><span class="line">        &quot;browsers&quot;: [&quot;last 2 versions&quot;, &quot;safari &gt;= 7&quot;]</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;node&quot;: &quot;current&quot;</span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>babel 就會根據近期的瀏覽器支援與你所使用的Node版本，自動引入所有需要的plugin，相當方便。</p><h2 id="es6-有什麼新功能">ES6+有什麼新功能?</h2><p>想要大致了解各種語法上的改動，可以查看babel的 es2015<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>, es2016<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>, es2017<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup> preset。每個preset中包含了各種相關語法的plugin。</p><p>例如今年的preset(es2017) ，帶來了 trailing-function-commas<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup> 和 async<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup> 語法的支援。</p><h2 id="參考資料">參考資料</h2><ul><li>[1] <a href="https://en.wikipedia.org/wiki/ECMAScript" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/ECMAScript</a></li><li>[2] <a href="https://babeljs.io/" target="_blank" rel="noopener">https://babeljs.io/</a></li><li>[3] <a href="https://babeljs.io/docs/plugins/preset-es2015/" target="_blank" rel="noopener">https://babeljs.io/docs/plugins/preset-es2015/</a></li><li>[4] <a href="https://babeljs.io/docs/plugins/preset-es2016/" target="_blank" rel="noopener">https://babeljs.io/docs/plugins/preset-es2016/</a></li><li>[5] <a href="https://babeljs.io/docs/plugins/preset-es2017/" target="_blank" rel="noopener">https://babeljs.io/docs/plugins/preset-es2017/</a></li><li>[6] <a href="https://babeljs.io/docs/plugins/syntax-trailing-function-commas/" target="_blank" rel="noopener">https://babeljs.io/docs/plugins/syntax-trailing-function-commas/</a></li><li>[7] <a href="https://babeljs.io/docs/plugins/transform-async-to-generator/" target="_blank" rel="noopener">https://babeljs.io/docs/plugins/transform-async-to-generator/</a></li><li>[8] <a href="https://babeljs.io/docs/plugins/preset-env/" target="_blank" rel="noopener">https://babeljs.io/docs/plugins/preset-env/</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Node.js 的發展</title>
      <link href="/2017/07/21/how-node-works/"/>
      <url>/2017/07/21/how-node-works/</url>
      <content type="html"><![CDATA[<p>2009年推出的Node.js<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>是讓Javascript成為一門廣為通用的程式語言的關鍵。Node.js將原專為Chrome<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>瀏覽器開發的V8引擎抽離出瀏覽器，讓使用者在一般命令行環境中就可以執行Javascript。</p><h2 id="開發者的需求">開發者的需求</h2><p>要完成一個全功能的現代網站，開發者除了需要至少理解某門語言相關的網站後端技術之外，Javascript也是身在Web開發領域的開發者至少必須&quot;略懂&quot;的腳本程式語言(scripting language)。</p><p>既然不管精通哪門程式語言的開發者，想在瀏覽器上發揮，都仍需要某種程度地熟悉Javascript程式語言。那麼，如果在瀏覽器之外，也可以拿Javascript來做事情不是很好嗎?</p><h2 id="node-js">Node.js</h2><p>Node.js並不是第一款讓使用者在一般命令行環境中就可以執行Javascript的工具(最早推出的可能是Mozilla的Rhino或XULRunner<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>)，但它跟上了潮流。2008年推出的Chrome瀏覽器，裡面使用了同被KDE與Apple使用的Webkit作為渲染引擎(Render)，並自行開發了全新的Javascript引擎(V8引擎)。Chrome瀏覽器的V8引擎率先支援JIT(Just in Time)編譯技術，使得當年Javascript的執行效率一舉提升了8倍以上📈。基於V8引擎的Node.js也比其他Javascript運行環境有更強的競爭力。由於執行速度的改善，Javascript語言終於有了和其他程式語言在瀏覽器之外的環境同場競技的實力。</p><h2 id="node-js的好夥伴-npm">Node.js的好夥伴: NPM</h2><p>Node.js推出當時，除了擁有一個比其他相似競爭者快上幾倍的引擎之外，在隔年整合的NPM(Node Package Manager)<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>套件管理工具，讓Javascript開發者擁有了更有效率地分享與重用函式庫的方式。到了今天，下載大多數使用Javascript語言撰寫的專案，只要執行<code>npm install</code>(或衍生的<code>yarn install</code>)，NPM就能自行安裝與解決套件之間的依賴關係。NPM實是今日Node.js之所以能形成圍繞著Javascript語言建立起龐大生態系的不可或缺的功臣。</p><h2 id="node-js衍生發展">Node.js衍生發展</h2><p>隨著Node.js更加成熟，Web開發者也圍繞著Node.js重新發明他們常用的工具。最先是Web開發框架（如Express.js<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup>, hapi, koa）與資料庫接口，再來是相關的編譯工具（grunt, gulp, webpack<sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>）。同時，也有人開始嘗試將Node.js與原有的瀏覽器環境結合，讓開發者得以使用網頁相關技術打造桌面應用（nw.js, electron<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>)。基於此技術還發展了數個流行的程式編輯器（atom, Visual Studio Code<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>）。時至今日，也可透過Node.js相關編譯工具，使用網頁相關技術來做行動裝置App開發（Cordova, React Native<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup>）。圍繞著Node.js的種種發明，讓使用網頁技術的開發者，得以從開發到部署，全都在圍繞網頁技術的生態系中完成。並由此誕生了稱之為 “Full Stack” 全端工程師（前端，後端，整合，測試）和大前端工程師的工作。全端工程師除了需處理網頁端（前端）頁面版型與互動效果外，也要兼顧伺服器端（後端）與資料庫處理。大前端工程師則是除了網頁端之外，也須兼顧行動裝置App的開發。</p><div class="mermaid">  graph LRJavascript --> BrowserJavascript --> NodeNode --> Webframework[Web Framework]Node --> Build[Build tools]Build --> ReactNative[Mobile App]Node --> Electron[Desktop App]Electron --> Editor[Editor]Browser --> Electron</div><h2 id="參考資料">參考資料</h2><ul><li><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> <a href="https://en.wikipedia.org/wiki/Node.js" target="_blank" rel="noopener">Node.js</a></li><li><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> <a href="https://en.wikipedia.org/wiki/Google_Chrome" target="_blank" rel="noopener">Google Chrome</a></li><li><sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> <a href="https://en.wikipedia.org/wiki/XULRunner" target="_blank" rel="noopener">XULRunner</a></li><li><sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> <a href="https://en.wikipedia.org/wiki/Npm_(software)" target="_blank" rel="noopener">NPM</a></li><li><sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup> <a href="https://expressjs.com/" target="_blank" rel="noopener">Express.js</a></li><li><sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup> <a href="https://webpack.github.io/" target="_blank" rel="noopener">webpack</a></li><li><sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup> <a href="https://electron.atom.io/" target="_blank" rel="noopener">Electron</a></li><li><sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup> <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a></li><li><sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup> <a href="https://facebook.github.io/react-native/" target="_blank" rel="noopener">React Native</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> mobile </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Current Progress of Netmonitor.html</title>
      <link href="/2017/03/28/current-progress-of-netmonitor-html/"/>
      <url>/2017/03/28/current-progress-of-netmonitor-html/</url>
      <content type="html"><![CDATA[<p>Update: Full instructions are avaiable on <a href="https://github.com/mozilla/gecko-dev/blob/master/devtools/client/netmonitor/README.md" target="_blank" rel="noopener">Netmonitor Readme</a> to run the Network Monitor in the browser tab.</p><p>Firefox Devtools is in progress of modernizing its infrastructure to use the same toolset that modern web developers are familiar with. When talking about <code>modern</code> web developers toolset, I mean <code>React</code>, <code>Redux</code>, <code>Immutablejs</code>, and <code>npm</code> modules.😎</p><h2 id="what-firefox-devtools-team-did-last-year">What Firefox Devtools team did last year</h2><p>Firefox Devtools was no different from Firefox itself. The Devtools panels are written in <code>XUL</code>, an HTML-like syntax language, and use several Firefox internal API called <code>XPCOM</code> or <code>Chrome privileged API</code>(Nothing related to Chrome Browser) to make the browser works.👽</p><p>In last year(2016), Firefox Devtools team’s main goal is to convert the code base from XUL to pure HTML. The second goal is convert each tool with React/Redux structure for maintenance. Debugger, Inspector, Web Console are the first batch in the conversion progress.<a href="https://hacks.mozilla.org/2016/09/introducing-debugger-html/" target="_blank" rel="noopener">Debugger.html</a> is the very first attempt from Firefox Devtools team to embrace the modern web developers’ toolset. Now new Debugger and Web Console are available in Firefox <a href="https://www.mozilla.org/en-US/firefox/channel/desktop/" target="_blank" rel="noopener">Nightly</a>🍸</p><p><a href="https://github.com/devtools-html/debugger.html" target="_blank" rel="noopener">Debugger.html</a>, <a href="">Perf.html</a>(Performance) has their standalone repository hosted on Github. A developer could use <code>git clone</code> to get the repository, and then do <code>yarn install</code>, <code>yarn start</code>(similar to npm command) to debug the debugger.html/perf.html with any browser’s devtools!🚅</p><div class="mermaid">  graph LRclone[git clone] --> install[yarn install]install --> start[yarn start]</div><h2 id="what-run-on-the-browser-tab-means">What <code>Run on the Browser tab</code> means?</h2><p><code>Run on the Browser tab</code> is a term versus <code>Run inside of the developer panel</code>. Traditionally Devtools are running inside of the browser’s developer panel. But some of new Firefox Devtools support run as normal web pages. Those pages can be opened in a browser tab by any modern browser such as Chrome, Safari, or Edge. The benefit is we can improve Firefox Devtools with any Browser’s Devtools, its an unfair advantage.🚀</p><div class="mermaid">  graph LRFirefox -- debugging --> netmonitor(Netmonitor.html)netmonitor -- mozilla-rdp --> FirefoxChrome -- debugging --> netmonitorEdge -- debugging --> netmonitorSafari -- debugging --> netmonitor</div><p>We are going to make more Devtools easy to debug and can be used for cross-browser debugging.</p><h2 id="current-status">Current Status</h2><p>To replacing the jet engine while still flying is a challenging engineering work. To make it happen, we take several engineering experiments around Devtools.</p><p>Here are the projects in progress and where they are hosted from:</p><div class="mermaid">  graph LRdebugger(Debugger.html) --> Nightlyperf(Perf.html) --> Nightlywebconsole(WebConsole.html) --> Nightlystandalone[Github] --> debuggerstandalone --> perfrefactor[mozilla-central] --> webconsoleinspector(Inspector.html) --> Releasenetmonitor(Netmonitor.html) --> Releaserefactor --> inspectorrefactor --> netmonitor</div><h2 id="what-we-have-done-in-netmonitor-html">What we have done in Netmonitor.html</h2><p>Ricky Chien and I joined the effort of convert Object Inspector from XUL to HTML. Object Inspector is a more complicated tool to convert, so Object Inspector is still half <code>React</code> and without <code>Redux</code> in the playground.</p><p>When the Object Inspector is fully converted to HTML, we shift our focus on convert the next important Devtool: <code>Netmonitor</code>. With Honza, Janda, Steve Chung, and other contributors’ help, at the end of Feb we have reached our first phase tangible goal: Converted the whole Netmonitor panel from XUL to HTML, with <code>React</code>, <code>Redux</code>, and <code>Immutablejs</code>. Now we have confidence that the code base is easy to read and contribute.🤗</p><p><img src="http://i.imgur.com/aiqBXV5.png" alt="Imgur">Picture: How current Netmonitor looks like</p><h2 id="what-we-plan-to-do-next">What we plan to do next</h2><p>We just finished the Netmonitor workweek (Fred, Honza, Ricky) in Taiwan, plenty of discussions have occurred, and we have good progress for what should be going on for the Netmonitor.</p><p>Here they are:</p><ul><li>We’ve triaged all new Netmonitor bugs and identify <a href="http://firefox-dev.tools/?easy&amp;tool=network" target="_blank" rel="noopener">good-first-bugs</a></li><li>We have Prove-Of-Concept branches to prove we can run netmonitor on the browser tab</li><li>We decide to keep using <code>mozilla-central</code>(The gecko) repo. Beside the current workflow, a developer would able to run <code>yarn start</code> command to debugging Netmonitor on the browser tab with any browser’s devtool.</li><li>We stop Netmonitor.html phase I work immediately (convert XUL to HTML, MVP 100% completed)</li><li>We’ll start Netmonitor.html phase II (To run Netmonitor on a browser tab so that we can debug Netmonitor with any browser’s devtool)<ul><li>All phase II bugs are filed in the <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1348737" target="_blank" rel="noopener">Meta-bug</a></li></ul></li></ul><h2 id="what-could-expect-in-the-future">What could expect in the future</h2><p>Currently, Debugger.html have supported both Firefox and Chrome remote debugging protocols, so Debugger.html could be used to debug Firefox, Chrome, or even Node.js!😮</p><div class="mermaid">  graph LRFirefox -- debugging --> netmonitor(Netmonitor.html)netmonitor -- mozilla-rdp --> FirefoxChrome -- debugging --> netmonitornetmonitor -- chrome-rdp --> Chromenetmonitor -- chrome-rdp --> Node[Node.js]Safari -- debugging --> netmonitorEdge -- debugging --> netmonitor</div><p>Since Debugger.html’s pure web stack nature, you can imagine one day the debugger.html can be embedded into some editors(Atom, Visual Studio Code) as plugins, or even in other browsers!😇</p><div class="mermaid">  graph LRdebugger(Debugger.html) --> Firefoxdebugger --> browsertab[Browser Tab]debugger --> Editordebugger --> other[Other Browser]</div><p><code>Run with different remote debugging protocols</code> is the next step once we make Netmonitor.html run on the browser tab.</p>]]></content>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> devtools </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何修改 git commits</title>
      <link href="/2017/03/13/git-merge-commits/"/>
      <url>/2017/03/13/git-merge-commits/</url>
      <content type="html"><![CDATA[<p>與其他人合作🤝使用git版本控制系統時，為了讓最後合併（Merge）的commit好看，常常會需要調整自己的commit。</p><h2 id="同時修改一個commit">同時修改一個commit</h2><p>剛開始工作時一次只修改一個commit，最常用到的命令是：</p><h3 id="修改commit訊息-message">修改commit訊息(message)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit --amend</span><br></pre></td></tr></table></figure><p>在commit後加入<code>--amend</code>(修正)參數，可以修改最後一個commit的訊息。</p><h3 id="將後續修改合併成一個commit">將後續修改合併成一個commit</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rebase -i HEAD~2</span><br></pre></td></tr></table></figure><p>將要合併的commit從<strong>pick</strong>改成<strong>s</strong>(squish)後儲存，修改commit訊息後，可以得到剩下的一個commit。</p><h2 id="同時修改多個commit">同時修改多個commit</h2><p>到後來為了讓審查(Review)更容易,漸漸開始嘗試在遇到某些較複雜的問題時，在同一個Branch堆疊多個commit的開發方式。</p><p>假設手上有3個疊在一起的commit(commit 1,commit 2,commit 3. commit 3是最新的commit), 這時在修改的過程中會遇到的主要問題，就是現在的修改與最新的commit(commit 3)無關, 但與最前面的commit(commit 1)相關。這時若想要將現在的修改與之前的commit 1合併，原本常使用的<code>git rebase</code>就不是那麼好用了。</p><h3 id="為前面commit的打補釘">為前面commit的打補釘</h3><p>要為前面commit的打補釘，可以使用命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit --fixup &lt;commit&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;commmit&gt;</code>代表之前commit(commit 1)的hash。輸入後最新的commit中會出現<code>fixup &lt;commit 1&gt;</code>的註記。</p><h3 id="合併所有的補釘">合併所有的補釘</h3><p>當一系列修改完成後，只要使用命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rebase -i --autosquash</span><br></pre></td></tr></table></figure><p>儲存後可以得到干淨的commit 1,2,3🤘</p><h3 id="修改任何之前的commit訊息">修改任何之前的commit訊息</h3><p>如果只想修改之前的commit訊息，可以用命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git rebase -i HEAD~3</span><br></pre></td></tr></table></figure><p>將<strong>pick</strong>改成<strong>reword</strong>，儲存後就可以修改訊息。</p><h2 id="參考資料">參考資料</h2><ul><li><a href="http://fle.github.io/git-tip-keep-your-branch-clean-with-fixup-and-autosquash.html" target="_blank" rel="noopener">GIT tip : Keep your branch clean with fixup and autosquash</a></li><li><a href="https://inteist.com/ammend-or-change-previous-git-commit-message/" target="_blank" rel="noopener">Ammend/Change Previous Git Commit Message</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> work </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2017年，我的部落格改進了什麼?</title>
      <link href="/2017/03/04/blog-updates-in-2017/"/>
      <url>/2017/03/04/blog-updates-in-2017/</url>
      <content type="html"><![CDATA[<p><img src="http://i.imgur.com/emcfRPZ.png" alt="Imgur"></p><p>在去年改用Hexo<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>架部落格後，由於用Markdown寫起來更方便了，又有Mermaid<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>語法支援可以快速畫出一些流程圖，因此多寫了幾篇。</p><p>在此期間，也陸續為這個部落格加了一些小功能。主要有</p><ul><li>將Hexo預設的Markdown引擎換成markdown-it，以支援顏文字(emoji)<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup> 🎉</li><li>加入類似Medium的文章預計閱讀時間 (每篇文章標題下方顯示 x min. read) ⏳</li><li>支援腳注(footnote)🔗，如下方的參考資料</li></ul><p>為了折騰這些功能花了些時間，不知道這樣的投資能不能攤平到下個十年 :p</p><p>🔸以下是在改進部落格的過程中發現的一些小知識:</p><h2 id="將hexo預設的markdown引擎換成markdown-it-🎉">將Hexo預設的Markdown引擎換成markdown-it 🎉</h2><p>為了要支援 emoji，在網上找到的做法是改用<code>hexo-renderer-markdown-it</code><sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>引擎並同時安裝<code>markdown-it-emoji</code><sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>最後必要的是在<code>_config.yml</code> 裡加入相應的<code>markdown</code>設定<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></p><h2 id="加入類似medium的文章預計閱讀時間">加入類似Medium的文章預計閱讀時間 ⏳</h2><p>原本我裝的是 <code>hexo-reading-time</code><sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup>，整合好後一看，所有中文文章的閱讀時長都短得可以，讓我懷疑它根本沒有支援中文字數計算。後來找一找，才拿可支援中文字數計算的<code>hexo-wordcount</code><sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup>來替換掉。隨後又丟了個PR<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>過去來調整預設的閱讀時長，最終才接近想要的效果。</p><h2 id="參考資料-📓">參考資料 📓</h2><ul><li><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> <a href="hello-world">Hello Hexo</a></li><li><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> <a href="https://knsv.github.io/mermaid/" target="_blank" rel="noopener">Mermaid, Generation of diagrams and flowcharts from text</a></li><li><sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> <a href="https://github.com/celsomiranda/hexo-renderer-markdown-it" target="_blank" rel="noopener">hexo-renderer-markdown-it</a></li><li><sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> <a href="https://github.com/markdown-it/markdown-it-emoji" target="_blank" rel="noopener">markdown-it-emoji</a></li><li><sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup> <a href="https://github.com/gasolin/blog/blob/master/_config.yml#L100" target="_blank" rel="noopener">本Blog的_config.yml</a></li><li><sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup> <a href="https://github.com/ierhyna/hexo-reading-time/" target="_blank" rel="noopener">hexo-reading-time</a></li><li><sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup> <a href="https://github.com/willin/hexo-wordcount" target="_blank" rel="noopener">hexo-wordcount</a></li><li><sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup> <a href="https://github.com/willin/hexo-wordcount/issues/3" target="_blank" rel="noopener">Patch for hexo-wordcount</a></li><li><sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup> <a href="https://gist.github.com/rxaviers/7360908" target="_blank" rel="noopener">Complete list of github markdown emoji markup</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>聊天機器人是怎麼運作的(I)</title>
      <link href="/2017/03/01/how-bot-works/"/>
      <url>/2017/03/01/how-bot-works/</url>
      <content type="html"><![CDATA[<p>聊天機器人（Chat bot）已存在許久，常見於各種即時通訊工具中。一般人最可能接觸到的，還是銀行的語音服務（Voice Response System）。</p><p>當我們打電話到銀行免付費專線，會有語音提示我們輸入驗證資料，然後輸入對應的數字來得到銀行服務。只有在根據一串語音提示，輸入特定數字時才轉接到真人回應的專線。這個過程跟使用聊天機器人基本上是一樣的。</p><div class="mermaid">  graph LRUser[使用者] --> dial[撥號]dial -- 輸入 --> identify[身份驗證資料]identify -- 選擇 --> number[服務項目]number --> auto[1-8: 自動應答]number --> manual[9: 專人服務]</div><p>銀行的語音服務流程</p><h2 id="行動裝置的完全普及">行動裝置的完全普及</h2><p>近年來聊天機器人能重新進入公眾視線，主因還是行動裝置的完全普及：幾乎所有的人都擁有一台智慧型手機。而且所有人的手機上都有一至數個聊天App（LINE, Facebook Messenger, Wechat）。</p><p>邏輯思維2017年跨年演講<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>裡提到，美國, 中國想上網的人基本都已經能上網（上網人口已經接近飽和），人們每周平均花24小時上網,而這些數字都已經沒有太大的提升空間。因此所有的網路服務都得從有限的總量中搶占使用者的上網時間與關注。</p><p>換句話說，2016年我們已正式進入行動網路（移動互連網）的下半場，廠商除了需要想方法佔用更多使用者上網時間之外，另一條路或是協助使用者更有效地利用上網的時間。</p><h2 id="聊天app佔用使用者更多上網時間">聊天App佔用使用者更多上網時間</h2><p>2016年初的調查顯示，人們每天平均在手機和在電腦上所花的時間差不多。隨著手機App的發展，人們能透過手機完成的事也越來越多。可以預見到的是人們每天花在手機上的時間佔比會再增加。人們在手機上花費最多時間的是聊天App和社交App。而今天的聊天/社交App都已內建網頁檢視（webview）功能。看到「朋友」分享的新聞連結，點選後可以直接瀏覽內容，完全不需要另外再開啟瀏覽器來查看新聞。</p><p>由於聊天App佔用了使用者多數的時間，依照「使用者在哪，機會就在哪」的原則，聊天機器人，或是對話式界面(Conversational UI)成了一個選項。</p><h2 id="siri-聊天機器人的濫觴">Siri, 聊天機器人的濫觴</h2><p>這波新一代聊天機器人的濫觴，也許可以歸功於2011年蘋果推出的Siri<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，雖然Siri並不存在於聊天App中。iPhone的使用者可以透過手機上的Siri智能助理應用，做到用口語詢問近期天氣，日程表，查詢地圖，餐廳，設定鬧鐘等行動，從而用更便利的方式取得服務。雖然今天Siri與其他選擇相比，已盡顯不足之處, 但當時Siri的推出，讓人們感知到與機器直接對話已不再遙不可及，這直接鼓勵了眾家廠商願意加大投入。</p><p>近幾年語音辨識，人工智能AI的爆發式進展，與此必然有著千絲萬縷的聯繫。</p><h2 id="聊天機器人有什麼用">聊天機器人有什麼用?</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Reddit 曾有用戶提問，如果某個 1950 年代的人突然出現，最難向他解釋的現代事物是什麼？</span><br><span class="line">最多人推的回答是： 「我擁有一部機器，就放在我的口袋裡，我可以用它來存取任何人類已知的知識。</span><br><span class="line">我常用這個來看貓咪的圖片，還有跟陌生人筆戰。」</span><br><span class="line">-- @wastemobile</span><br></pre></td></tr></table></figure><p>就像现在手机App一样，大部分的App其实没什么用，用了只是消耗自己的时间。但是像Siri所能做的，使用者透過聊天機器人簡化日常的瑣事，或是快速得到常見問題的答案。Slack平台上已有許多機器人，可以同步Github Bug，同步代辦事項資訊，提醒今日任務等。這些Bot能省下使用者寶貴的線上時間。我們更多需要的是這類型（用更便利的方式取得服務）的聊天機器人。</p><h2 id="聊天機器人與使用者的互動方式">聊天機器人與使用者的互動方式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在網際網路上，沒人知道你是一隻狗</span><br></pre></td></tr></table></figure><p>聊天軟體原本的功用是讓使用者可以和「另一個使用者」或「一群使用者」交流。聊天機器人則是取代「另一個使用者」的角色<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>，讓使用者和「聊天機器人」一對一交流，或是讓聊天機器人加入群組，和「一群使用者」交流。</p><div class="mermaid">  graph LRUser --> bot[Chat Bot]bot --> User</div><p>一對一</p><div class="mermaid">  graph LRUser --> GroupGroup --> UserGroup --> bot[Chat Bot]bot --> Group</div><p>群組（多對多）</p><h2 id="聊天機器人的應對方式">聊天機器人的應對方式</h2><p>除了「一對一」，「群組」（多對多）之外，依據聊天機器人的應對方式，還可以分為通知型（Notify），模式型（Pattern Matching），對話型（Context Aware）等幾種聊天機器人<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>。</p><h3 id="通知型-notify">通知型（Notify）</h3><p>通知型機器人會根據使用者「訂閱」的資訊，傳訊息通知使用者。例如明日天氣預報機器人可以定時告訴使用者明天氣象狀況與溫度，出門需不須要帶傘。使用者一般不需要輸入任何訊息與機器人對話。</p><div class="mermaid">  graph RLbot[Chat Bot] -- notify --> User</div><h3 id="模式型-pattern-matching">模式型（Pattern Matching）</h3><p>模式型機器人會比對使用者送出的訊息，如果符合機器人設定好的一些模式，就做出對應的回應。</p><div class="mermaid">  graph RLsubgraph chatbotMatcher[Pattern Matching] --> Responder[Build Response]endUser -- request --> MatcherResponder -- response --> User</div><p>例如使用者可以透過天氣機器人，輸入&quot;weather in Taipei&quot;查詢當前台北的天氣。</p><p>基本的模式型機器人沒有對話的概念，並不會根據使用者過去的應對而改變回應的結果。例如使用天氣機器人時每次都需要指定想查詢的地點，或是透過預先設定地點/偏好溫度格式來簡化使用方式。</p><p>除了傳統使用正則表達式(Regex)來比對模式外，Facebook Messenger bot則提供更接近口語的自然語言處理（Nature language Processing）模式比對。多數聊天機器人框架目前都仍偏向模式型。</p><h3 id="對話型-context-aware">對話型（Context Aware）</h3><p>對話型機器人會從與使用者過去的對話中提取使用者的偏好，並運用到後續的對話中。</p><p>例如Google Assistant會根據你之前的查詢,去進一步找到你想听的音樂。</p><div class="mermaid">  graph RLsubgraph chatbotParser -- Action --> Processor[Do actions]Processor --> contexture[Context Brain]contexture --> Processorcontexture --> ResponderProcessor --> Responder[Build Response]endUser -- request --> Parser[Intent Parser]Responder -- response --> User</div><p>能理解與使用者過去的對話,也是對話型人工智能的重要特徵。當使用者在聊天軟體中新加入一個bot服務，使用者與這個服務的對話都與和一般服務員的交談無異，那麼服務的後面是不是真人還重要嗎？</p><h2 id="參考資料">參考資料</h2><ul><li><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> 羅輯思維4小時跨年演講 <a href="https://kknews.cc/zh-tw/tech/xz2x4p8.html" target="_blank" rel="noopener">https://kknews.cc/zh-tw/tech/xz2x4p8.html</a></li><li><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> <a href="https://en.wikipedia.org/wiki/Siri" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Siri</a></li><li><sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> <a href="https://zh.wikipedia.org/wiki/%E5%9C%A8%E4%BA%92%E8%81%94%E7%BD%91%E4%B8%8A%EF%BC%8C%E6%B2%A1%E4%BA%BA%E7%9F%A5%E9%81%93%E4%BD%A0%E6%98%AF%E4%B8%80%E6%9D%A1%E7%8B%97" target="_blank" rel="noopener">在網際網路上，沒人知道你是一隻狗</a></li><li><sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup> <a href="http://willschenk.com/bot-design-patterns/" target="_blank" rel="noopener">Bot Design Patterns</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> mobile </tag>
            
            <tag> bot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我如何做個人自動化紀錄-2017版</title>
      <link href="/2017/02/02/personal-automation-in-2017/"/>
      <url>/2017/02/02/personal-automation-in-2017/</url>
      <content type="html"><![CDATA[<h2 id="為什麼要做個人自動化紀錄">為什麼要做個人自動化紀錄?</h2><p>有人會問，Facebook/Twitter不就可以記錄大小事了嗎? 如果會這麼回答，那就實在太天真了😏。FB上也許包含了自己覺得值得分享的事，但生活中還有諸多事情值得記錄，而不適合與大眾分享。擁有自己的一份完整數位化生活記錄，是我今年的個人目標之一。要達成這個目標，需要藉助一些自動化紀錄工具，好讓整個過程變得自然而不困難。</p><h2 id="照片自動化備份-📷">照片自動化備份 📷</h2><ul><li>360CAM所拍的相片一律備份到手機</li><li><a href="http://www.dropbox.com/" target="_blank" rel="noopener">Dropbox</a>, 自動從手機上傳照片</li><li>Google相簿, 自動從手機上傳照片</li><li>NAS (Synnalogy), 從Dropbox同步照片. 由於Dropbox空間有限，會不定期將Dropbox上的照片手動整理備份到NAS上.</li></ul><div class="mermaid">  graph LRcam[360 CAM]User -- take photo --> camUser -- take photo --> Phonecam --> PhonePhone -.-> DropboxPhone -.-> gphoto[Google Photo]Dropbox -.-> NAS</div><p>照片備份規則</p><p>我的照片並不算多，但若有出遊的月份通常照片會暴增。所以我的基本備份規則是依年份，並以雙月份命名資料夾,若是當月有重大活動則直接在檔名中標注。例如2016年的照片資料夾裡會有<code>2016_1011</code>，或是<code>2016_06倫敦</code>這樣的命名。</p><p>在整理照片的時候，每當遇到特別喜歡的，我會另存到Dropbox中的一個依年份歸檔的資料夾，例如2017年的精彩照片我會另存到 <code>dropbox/spot/2017</code>資料夾中，這樣隨時可以找出來欣賞。</p><h2 id="運動自動化紀錄-🚶">運動自動化紀錄 🚶</h2><ul><li>記步，睡眠紀錄：小米手環2</li><li>體重：小米體重計</li></ul><div class="mermaid">  graph LRUser -. 走路 .-> 小米手環2User -. 睡覺 .-> 小米手環2User -- 量體重 --> 小米體重計小米手環2 -.-> 小米運動App小米體重計 -.-> 小米運動App</div><p>今年將每天預定的步數由3000步提高到<code>4000步</code>，略高於平常的活動數字，每天要達成這個目標的話，需要特意地多走幾步路。</p><p>update(9/1): 後來不再帶小米手環2，覺得記錄睡眠與步數意義不大。同時為了降低多走路所需要的意志力，把每日步數改成更容易達成的300步，只要開始走，通常都會超過需要的步數。</p><hr><h2 id="生活事件自動化紀錄">生活事件自動化紀錄</h2><p>延續<a href="https://blog.gasolin.idv.tw/2015/02/28/%E7%94%A8-IFTTT-%E5%81%9A%E8%87%AA%E5%8B%95%E7%94%9F%E6%B4%BB%E7%B4%80%E9%8C%84-LifeLog/">用 IFTTT 做自動生活紀錄</a>這篇的思路，我把看過的書籍、電影，喜歡的Youtube影片，貼過的文章,每日完成的事項都記錄到Google Calendar中，以方便之後回顧。</p><h3 id="自動閱讀-觀看紀錄-📚">自動閱讀/觀看紀錄 📚</h3><p>對於書籍與電影, 我使用RSS + IFTTT + Google Calendar來自動紀錄。當我在Anobii或豆瓣上修改狀態，Anobii或豆瓣的RSS也跟著改變，這時IFTTT會將RSS中的新事項紀錄到Google Calendar上。對於Youtube上like的影片，Facebook或Twitter上新貼的文章，也會透過IFTTT紀錄到Google Calendar上。</p><div class="mermaid">  graph LRUser -- update book --> AnobiiUser -- add movie --> DoubanUser -- post --> BlogBlog -.-> RSSAnobii -.-> RSSDouban -.-> RSSRSS -.-> IFTTTIFTTT -.-> gcal[Google Calendar]</div><p>透過RSS轉IFTTT紀錄</p><div class="mermaid">  graph LRUser -- like --> YoutubeUser -- post --> FacebookUser -- post --> TwitterYoutube -.-> IFTTTFacebook -.-> IFTTTTwitter -.-> IFTTTIFTTT -.-> gcal[Google Calendar]</div><p>直接透過IFTTT紀錄</p><h3 id="自動紀錄每日完成的事項-📓">自動紀錄每日完成的事項 📓</h3><p>這部份是自動紀錄的核心。使用 Todoist + IFTTT + Google Calendar 即可達成。我在Google Calendar上使用一個單獨的日曆(成功日記)來紀錄每日完成的事項。</p><div class="mermaid">  graph LRUser -- checked --> TodoistTodoist -.-> IFTTTIFTTT -.-> gcal[Google Calendar]</div><p>If task completed in Todoist, Then log into Google Calendar</p><h4 id="從email新增待辦事項-✉">從Email新增待辦事項 ✉️</h4><p>為了更方便地蒐集待辦事項，我參考這份影片 <a href="https://youtu.be/V7Dk7pzjJmM?t=11m30s" target="_blank" rel="noopener">https://youtu.be/V7Dk7pzjJmM?t=11m30s</a> 來將Todoist#Inbox設定為Email聯絡人，這樣處理Email的過程中也能快速地新增待辦事項。</p><h3 id="紀錄看過或待看的網頁-🌐">紀錄看過或待看的網頁 🌐</h3><p>因為我唯一的收件夾是Todoist，所以若看到值得閱讀(紀錄)的網頁，桌面上我使用自己開發的瀏覽器Web Extension，搭配IFTTT去紀錄網頁到Todoist，或加個短評分享到Facebook或Twitter。在手機上就直接使用Todoist和Facebook等App達到一樣的效果。</p><div class="mermaid">  graph LRUser -- tap --> Browser[Browser addon]Browser -.-> IFTTT[IFTTT Maker Channel]IFTTT -.-> TodoistIFTTT -.-> FacebookIFTTT -.-> Twitter</div><p>If new task then create new Todoist item, If share then share to Facebook and Twitter.</p><h3 id="文章更新時自動提醒">文章更新時自動提醒 ⏰</h3><p>除了偶而瀏覽Facebook或Twitter上充滿同溫層的快餐短文，我也使用Feedly訂閱一些自己挑選過的網站。然而有些網站並未提供RSS訂閱，手機上我會使用<a href="https://play.google.com/store/apps/details?id=me.webalert" target="_blank" rel="noopener">Web Alert</a>來取得網頁更新提醒。搭配Todoist稍候閱讀列表，我可以不在看到文章連結當下急著消費，而是在有空閒的時候才閱讀這些文章。</p><div class="mermaid">  graph LRwebalert[Web Alert] --> UserUser --> Browser</div><h3 id="半自動工作紀錄-💼">半自動工作紀錄 💼</h3><p>透過翻看Todoist或Google Calendar，我可以輕易地將過去一週達成的事項整理出來，再送PR到Github上。也可以說這塊目前只能算半自動化地列出過去事項列表，可以再繼續改進。</p><hr><h2 id="自動化網站部署-🌐">自動化網站部署 🌐</h2><p>目前已使用Github來放我的個人網站與部落格，透過與Travis CI整合，我所修改的任何內容，在幾分鐘之內都會自動部署到網站上。</p><p>如何做可參考 <a href="https://blog.gasolin.idv.tw/2016/09/18/hello-world/">Hello Hexo</a> (個人網站自動化部署) 和 <a href="https://blog.gasolin.idv.tw/2017/01/03/ghpage-auto-deploy/">Automatically deploy new commit to github pages via Travis CI</a></p><div class="mermaid">  graph LRmaster[Github:master]travis[Travis CI]ghpages[Github:gh-pages]User -- commit --> mastermaster -. auto build .-> travistravis -.  auto deploy .-> ghpages</div><p>Auto website deploy flow</p><p>一些可以直接運作在瀏覽器的專案(如BlocklyDuino和Saihubot)，我會直接將gh-pages設為預設分支，所有改動直接push到這分支中。這樣一有改動即可在網頁上看到更新成果。</p>]]></content>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> mobile </tag>
            
            <tag> life </tag>
            
            <tag> automation </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>個人工具箱2017二月</title>
      <link href="/2017/02/02/tooling-in-2017/"/>
      <url>/2017/02/02/tooling-in-2017/</url>
      <content type="html"><![CDATA[<p><code>先記錄下來手邊使用的工具，才有機會從繁雜中歸納出簡單的使用規則。</code></p><p>2011<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>年時紀錄了一次當時的個人工具箱，去年開始再次紀錄<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。今年給自己定的一大目標是個人自動化，就從年初開始紀錄自己工具箱的改變吧🤹，持續更新。</p><h2 id="主要裝備">主要裝備</h2><ul><li>Desktop PC, <a href="https://elementary.io/" target="_blank" rel="noopener">Elementary OS</a>, Intel i7 3770 3.40GHz x8, 16GB RAM, GeForce GT 630, 23&quot; LCD</li><li>Dell XPS 13 (4943), Windows 10, i7 2.4GHz x2, 8GB RAM, 13&quot; LCD</li><li><a href="https://oneplus.net/global/3" target="_blank" rel="noopener">One Plus 3</a>, Android, 6GB RAM, 5.5&quot; AMOLED</li><li>Synology NAS: 電影，影集，照片，資料備份</li></ul><h2 id="windows-linux">Windows &amp; Linux</h2><h3 id="網站工具">網站工具</h3><p>使用多年的Anobii已經漸漸缺乏維護，嘗試使用<a href="https://share.readmoo.com/" target="_blank" rel="noopener">Readmoo分享書</a>替代。</p><ul><li>主要瀏覽器：<a href="https://www.mozilla.org/en-US/firefox/products/" target="_blank" rel="noopener">Firefox</a></li><li>主要社交網站：<a href="http://www.facebook.com/" target="_blank" rel="noopener">Facebook</a>、<a href="https://twitter.com/gasolin" target="_blank" rel="noopener">Twitter</a></li><li><a href="http://www.google.com/calendar" target="_blank" rel="noopener">Google日曆</a></li><li><a href="https://todoist.com/" target="_blank" rel="noopener">Todoist</a></li><li><a href="http://mail.google.com/" target="_blank" rel="noopener">GMail</a>, Inbox</li><li>Google Doc, <a href="http://keep.google.com/" target="_blank" rel="noopener">Google keep</a> 記事</li><li>個人網路硬碟：<a href="http://www.dropbox.com/" target="_blank" rel="noopener">Dropbox</a>, 主要用作同步照片，</li><li>密碼管理：<a href="https://www.lastpass.com/" target="_blank" rel="noopener">Lasspass</a></li><li>新聞聚合：<a href="https://feedly.com/" target="_blank" rel="noopener">Feedly</a></li><li><a href="https://share.readmoo.com/" target="_blank" rel="noopener">Readmoo分享書</a>, <a href="http://www.anobii.com/" target="_blank" rel="noopener">Anobii</a> 看書記錄</li><li><a href="http://www.douban.com/" target="_blank" rel="noopener">豆瓣</a> 看電影記錄</li><li>個人網站：<a href="https://github.com/gasolin/blog/" target="_blank" rel="noopener">Github</a></li><li>個人履歷：<a href="http://www.gasolin.idv.tw" target="_blank" rel="noopener">個人網站</a>、Linkedin</li><li>IFTTT <a href="https://blog.gasolin.idv.tw/2015/02/28/%E7%94%A8-IFTTT-%E5%81%9A%E8%87%AA%E5%8B%95%E7%94%9F%E6%B4%BB%E7%B4%80%E9%8C%84-LifeLog/">自動化生活紀錄</a></li><li>Youtube</li></ul><h3 id="設計">設計</h3><ul><li>Mockup：<a href="http://www.balsamiq.com/products/mockups" target="_blank" rel="noopener">Balsmiq Mockups</a></li></ul><h3 id="開發">開發</h3><ul><li>編輯器：Visual Studio Code</li><li>版本控制：git, git-cinnabar</li><li>套件管理：apt, <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a>, yarn, Chocolatey(windows)</li><li>Shell: zsh, Ubuntu bash on windows</li></ul><h3 id="常用插件">常用插件</h3><p>Browser</p><ul><li><a href="https://testpilot.firefox.com/experiments/tab-center" target="_blank" rel="noopener">tab center</a>VSCode</li><li>Document This</li><li>EditorConfig for VS Code</li><li>ESLint</li><li>Git Blame</li><li>WakaTimeJS</li><li>Babel</li><li>ESlint</li></ul><h3 id="娛樂">娛樂</h3><ul><li>vlc</li><li>steam, origin</li></ul><h2 id="android-手機">Android 手機</h2><ul><li>瀏覽器：Firefox for Android</li><li>網頁更新通知：Web Alert</li><li>閱讀：Palabre (feedly), Readmoo</li><li>稍候閱讀：Pocket</li><li>信箱：Inbox</li><li>地圖：Google地圖</li><li>內建相機, 內建時鐘</li><li>相簿：Dropbox, Google相簿</li><li>社交：Facebook, LINE, Twitter, WeChat</li><li>待辦事項：<a href="https://play.google.com/store/apps/details?id=com.todoist" target="_blank" rel="noopener">Todoist</a>, <a href="https://play.google.com/store/apps/details?id=org.dayup.gtask" target="_blank" rel="noopener">GTasks</a>,</li><li>密碼：<a href="https://play.google.com/store/apps/details?id=com.lastpass.lpandroid" target="_blank" rel="noopener">LastPass</a></li><li>線上影片：Youtube, Eleven Sports</li><li>音樂：豆瓣FM</li><li>健康：小米運動, Pokemon Go</li></ul><p>工具</p><ul><li>公事：Expensify, Duo Mobile</li><li>旅遊：Google翻譯, TripAdvisor</li><li>心智圖：SimpleMind, XMind</li><li>影片播放：MX Player, DS video</li><li>記錄看書狀況：Readmoo分享書</li><li>線上學習：Udemy, Pluralsight, Duolingo</li><li>IFTTT</li></ul><h2 id="reference">Reference</h2><ul><li><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> <a href="https://blog.gasolin.idv.tw/2013/01/02/%E5%80%8B%E4%BA%BA%E5%B7%A5%E5%85%B7%E7%AE%B12011/">個人工具箱2011</a></li><li><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup> <a href="https://blog.gasolin.idv.tw/2016/12/19/tooling-in-2016/">個人工具箱2016</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2016年，我開源了哪些專案(My open source projects in 2016)</title>
      <link href="/2017/01/03/my-open-source-projects-in-2016/"/>
      <url>/2017/01/03/my-open-source-projects-in-2016/</url>
      <content type="html"><![CDATA[<p><img src="http://i.imgur.com/sh87aeK.png" alt=""></p><p>今年隨著Firefox OS退場，工作內容有了不小的改變。年初時嘗試了一些不同的方向，也修了一些Firefox界面bug，後半年則主要專注於開發者工具改進這塊。以下是我今年主要參與或建立的開源專案。</p><h2 id="jan">Jan</h2><ul><li><a href="https://github.com/gasolin/webby" target="_blank" rel="noopener">Webby</a> send command to your internet assistant through the web</li></ul><p>It’s <a href="http://gasolin.github.io/webby/" target="_blank" rel="noopener">playable online</a></p><h2 id="feb">Feb</h2><ul><li><a href="https://github.com/gasolin/webbybot" target="_blank" rel="noopener">Webbybot</a> chatterbot written in es6 (es2015), fork from hubot</li><li><a href="https://github.com/gasolin/webby-calculator" target="_blank" rel="noopener">webby-calculator</a> es6 port of hubot-calculator</li></ul><h2 id="mar">Mar</h2><ul><li><a href="https://github.com/gasolin/hubot-mockadapter" target="_blank" rel="noopener">hubot-mockadapter</a> A mock Adapter written in ES6 for unit testing Hubot and Webbybot scripts</li><li><a href="https://github.com/gasolin/webby-template" target="_blank" rel="noopener">webby-template</a> A template for make a working webby bot</li><li><a href="https://github.com/gasolin/webby-grove-demo" target="_blank" rel="noopener">webby-grove-demo</a> demostrate control device via messengers</li></ul><h2 id="apr">Apr</h2><ul><li><a href="https://github.com/gasolin/aframe-href-component" target="_blank" rel="noopener">aframe-href-component</a> A Hyper Link component for A-Frame, turning object to a html linkable element</li></ul><p><a href="https://gasolin.github.io/aframe-href-component/" target="_blank" rel="noopener">https://gasolin.github.io/aframe-href-component/</a></p><h2 id="may">May</h2><ul><li>New Firefox Sites Permission</li></ul><h2 id="june">June</h2><ul><li>Firefox Password doorhanger</li></ul><h2 id="july">July</h2><ul><li>Firefox Devtools Inspector</li></ul><h2 id="aug">Aug</h2><ul><li><a href="https://github.com/gasolin/saihubot" target="_blank" rel="noopener">Saihubot</a> client side chatbot that can be embedded in any web site</li><li><a href="https://github.com/gasolin/cosbot" target="_blank" rel="noopener">Cosbot</a> coscup2016 網頁版聊天機器人<a href="https://gasolin.github.io/cosbot/" target="_blank" rel="noopener">https://gasolin.github.io/cosbot/</a></li></ul><p><img src="http://i.imgur.com/bjpwrdHm.png" alt=""></p><h2 id="sep">Sep</h2><ul><li>Firefox Devtools Network Monitor</li></ul><h2 id="oct">Oct</h2><ul><li><a href="https://github.com/gasolin/blog" target="_blank" rel="noopener">blog</a> personal tech blog</li></ul><p><a href="http://blog.gasolin.idv.tw/">http://blog.gasolin.idv.tw/</a></p><h2 id="nov">Nov</h2><ul><li><a href="https://github.com/gasolin/generator-360-photo" target="_blank" rel="noopener">generator-360-photo</a> Generator to quickly create a web based 360 photo scaffold with aframe</li></ul><h2 id="dec">Dec</h2><ul><li><a href="https://github.com/gasolin/awesome-webextension" target="_blank" rel="noopener">awesome-webextension</a> A curated list of awesome articles, tutorials and resources dealing with web extention.</li><li><a href="https://github.com/gasolin/postcss-bidirection" target="_blank" rel="noopener">postcss-bidirection</a> PostCSS plugin that polyfill Bi-directional CSS properties and values to suppot rtl and ltr rules in all browsers</li><li><a href="https://github.com/gasolin/generator-neutrino-react" target="_blank" rel="noopener">generator-neutrino-react</a> generate basic react project powered by neutrino</li><li><a href="https://github.com/gasolin/gasolin.github.io" target="_blank" rel="noopener">gasolin homepage</a> personal homepage <a href="http://www.gasolin.idv.tw" target="_blank" rel="noopener">http://www.gasolin.idv.tw</a></li><li><a href="https://github.com/gasolin/ghpage-auto-deploy" target="_blank" rel="noopener">ghpage-auto-deploy</a> Use github as a web host is that easy. This template provide essential configurations to auto deploy your github repo to gh-pages via Travis CI</li></ul>]]></content>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> life </tag>
            
            <tag> work </tag>
            
            <tag> oss </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Automatically deploy new commit to github pages via Travis CI</title>
      <link href="/2017/01/03/ghpage-auto-deploy/"/>
      <url>/2017/01/03/ghpage-auto-deploy/</url>
      <content type="html"><![CDATA[<p><img src="http://i.imgur.com/Q1hDoPLm.png" alt=""></p><p>After  migrated <a href="https://blog.gasolin.idv.tw/2016/09/18/hello-world/">my blog</a> from blogger to <a href="https://github.com/gasolin/blog/" target="_blank" rel="noopener">github</a>,at the end of 2016, I’ve migrated <a href="https://blog.gasolin.idv.tw/2016/09/18/hello-world/">my blog</a> and <a href="http://www.gasolin.idv.tw/" target="_blank" rel="noopener">home page</a> to host on <a href="https://github.com/gasolin/gasolin.github.io" target="_blank" rel="noopener">github</a> as well.</p><p>Both sites are fully stored in github and deployed automatically via <a href="https://travis-ci.org/gasolin/gasolin.github.io" target="_blank" rel="noopener">Travis CI</a>.</p><h2 id="before-auto-deploy">Before auto deploy</h2><p>Before apply auto deploy method, the usual workflow to hosting web page on github are 2 steps:</p><p>First, user commit changes to local git master branch.</p><div class="mermaid">  graph LRuser(User)master[Local:master]user -- commits* --> master</div><p>Then, user run the build process to generate contents for deploy.</p><div class="mermaid">  graph LRuser(User)dist[dist/]user -- build --> dist</div><p>Then, use git commands to push generated contents to github <code>gh-pages</code> branch</p><div class="mermaid">  graph LRuser(User)ghpages[Github:gh-pages]user -- deploy --> ghpages</div><p>At this time, our source code is still stored in local machine, we have to push the changes to github as well for safety.</p><div class="mermaid">  graph LRuser(User)master[Github:master]user -- push --> master</div><p>Of course the manual works can be improved. After apply auto deploy method, all I have to do iscommit to github and let the web services do the rest.</p><h2 id="after-auto-deploy">After auto deploy</h2><p>Here’s what my current workflow looks like</p><div class="mermaid">  graph LRmaster[Github:master]travis[Travis CI]ghpages[Github:gh-pages]User -- commit --> mastermaster -. auto build .-> travistravis -.  auto deploy .-> ghpages</div><p>The dot line process are automatically done for you.</p><h2 id="github-page-auto-deploy-to-rescue">Github page auto deploy to rescue</h2><p>After auto deploy, I am able to run test, do lint check, and build source with a few changes on <code>.travis.yml</code>(The travis configuration file),<strong>the only thing I need to care about is the content</strong>.The bonus is github now become my online web page editor. Web page is auto updated after each commit.</p><p>All these automation only needs one time setup, which is a pretty good deal to save foreseeable deploy time.For security concern, my current workflow add the github token into Travis environment variables(to let Travis able to commit gh-pages), and make the actual git push quiet to prevent showing the token on Travis.</p><p>To not reinvent wheels myself, I distilled the auto deploy scripts and instructions into <a href="https://github.com/gasolin/ghpage-auto-deploy" target="_blank" rel="noopener">ghpage-auto-deploy</a> project.you can use it to deploy your next web page as well.</p><p><a href="https://github.com/gasolin/ghpage-auto-deploy#fork-destination-box" target="_blank" rel="noopener">Fork the ghpage-auto-deploy project</a> to get start, feel free to add new issues to send suggestions or pull request to me if you want to imporove it.</p>]]></content>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> travis </tag>
            
            <tag> automation </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Debugging Firefox Devtools in 2016</title>
      <link href="/2016/12/22/debugging-firefox-devtools-in-2016/"/>
      <url>/2016/12/22/debugging-firefox-devtools-in-2016/</url>
      <content type="html"><![CDATA[<p>Not like <a href="http://blog.gasolin.idv.tw/2016/08/08/The-newbies-workflow-on-Mozilla-Gecko-project/">previous article about general workflow on Mozilla Gecko project</a>,This article is like a cookbook that I encountered during debugging Firefox devtools (mostly around inspector and network monitor).</p><h2 id="remote-debugging">Remote debugging</h2><p>According to <a href="https://developer.mozilla.org/en-US/Add-ons/WebExtensions/Debugging" target="_blank" rel="noopener">MDN</a>, first of all you need to go through <code>Developer &gt; Toggle Tools &gt; Toolbox Options &gt; Advance settings</code> to check 2 options:</p><ul><li>Enable browser chrome and add-on debugging toolboxes</li><li>Enable remote debugging</li></ul><p>Then use <code>Shift+Option+Command+i</code> on Mac or <code>Ctrl+Shift+i</code> on linux to open the remote debugger.</p><h3 id="disable-autohide-in-popup">Disable autohide in popup</h3><p>Once I’m developing toolbar web extensions or any popup windows, I feel very appreciate this feature.</p><p><a href="https://developer.mozilla.org/zh-TW/Add-ons/WebExtensions/Debugging#Disable_autohide" target="_blank" rel="noopener">https://developer.mozilla.org/zh-TW/Add-ons/WebExtensions/Debugging#Disable_autohide</a></p><h3 id="boost-build-time-via-set-mozconfig-artifact">Boost build time via set mozconfig artifact</h3><p>Add these settings in <code>mozconfig</code> file</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Enable debug version of the pre-build binary artifact</span><br><span class="line">export MOZ_DEBUG=&quot;1&quot;</span><br><span class="line"></span><br><span class="line"># Automatically download and use compiled C++ components:</span><br><span class="line">ac_add_options --enable-artifact-builds</span><br><span class="line"></span><br><span class="line"># Write build artifacts to:</span><br><span class="line">mk_add_options MOZ_OBJDIR=./objdir-frontend-debug-artifact</span><br></pre></td></tr></table></figure><p>If you just develop frontend UI(JS, CSS, XUL, HTML), the <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/Artifact_builds" target="_blank" rel="noopener">artifact build</a> prebuild the C++ and the static part of the code so you can download and link it automatically during <code>mach build</code>, it saves you tremendous build time and helps you move quicker.</p><p>You can use the command</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./mach build faster</span><br></pre></td></tr></table></figure><p>to further boost the build time.</p><h3 id="enable-react-and-other-js-debugging-message">Enable React and other JS debugging message</h3><p>Add these settings in <code>mozconfig</code> file</p><p><code>ac_add_options --enable-debug-js-modules</code></p><p>It will turn on React and other JS debugging message. Note that will influence performance while running.</p><h3 id="open-devtools-and-chrome-debugger-with-website">Open devtools and chrome debugger with website</h3><p>You may not know its possible to open a website with opened devtool with the command:</p><p><code>./mach run --devtools --jsdebugger www.yahoo.com.tw</code></p><h3 id="test-on-try-server">Test on Try server</h3><p>Mozilla Try Server let you run tests on all supported platforms. You can pick which test set and which platform to run by providing command arguments. Here’s what I used for test devtools related bugs on Windows, Mac, and Linux.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try: -b do -p linux64,macosx64,win64 -u mochitest-dt,mochitest-e10s-devtools-chrome -t none --artifact</span><br></pre></td></tr></table></figure><p>Add <code>--artifact</code> argument will both save total running time and computing resources.</p><h2 id="tracing-code">Tracing Code</h2><h3 id="via-global-search-in-editor">Via global search in editor</h3><p>Many modern editor ex sublime, visual studio code provide great support of global search. <code>Ctrl + Shift + f</code> is your good friend.</p><h3 id="via-dxr-or-searchfox">Via DXR or searchfox</h3><p><a href="http://dxr.mozilla.org/" target="_blank" rel="noopener">DXR</a> and <a href="http://searchfox.org" target="_blank" rel="noopener">searchfox</a> is a code search and navigation tool for large projects like Mozilla-center.It supports full-text and regex searches as well as structural queries.</p><p><a href="http://dxr.mozilla.org/" target="_blank" rel="noopener">http://dxr.mozilla.org/</a></p><h2 id="es6-nits">ES6 nits</h2><h3 id="do-not-use-foreach-with-yield">Do not use forEach with yield</h3><p><code>forEach</code> is a good way to loop array, but is not compatible with the generator(because the need of implement iterator interface), so if you use <code>yield</code> inside of <code>forEach</code> loop, it will not behave as you expect.The better choice is use <code>for..of</code> loop or <code>map</code> instead.</p><h3 id="try-to-be-functional">Try to be functional</h3><p>The powerful <code>=&gt;</code> arrow syntax sugar is not just for replacing <code>bind(this)</code>, it gives the developer a clear way to write more compact code.</p><p>For example</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">a , b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>can be written as</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">promise.then((a, b) =&gt; a + b);</span><br></pre></td></tr></table></figure><h2 id="misc">Misc</h2><ul><li><a href="https://wiki.mozilla.org/DevTools/Hacking" target="_blank" rel="noopener">Devtools hacking</a></li><li><a href="http://jasonlaster.github.io/devtools/js/2016/03/22/workflow.html" target="_blank" rel="noopener">Build faster</a></li><li><a href="http://stackoverflow.com/questions/29134512/insecureplatformwarning-a-true-sslcontext-object-is-not-available-this-prevent" target="_blank" rel="noopener">SSH Error handling in linux</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> devtools </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>個人工具箱2016</title>
      <link href="/2016/12/19/tooling-in-2016/"/>
      <url>/2016/12/19/tooling-in-2016/</url>
      <content type="html"><![CDATA[<p><code>先記錄下來手邊使用的工具，才有機會從繁雜中歸納出簡單的使用規則。</code></p><p>2011<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>年時紀錄了一次當時的個人工具箱，今年再次紀錄，</p><h2 id="主要裝備">主要裝備</h2><ul><li>Desktop PC, <a href="https://elementary.io/" target="_blank" rel="noopener">Elementary OS</a>, Intel i7 3770 3.40GHz x8, 16GB RAM, GeForce GT 630, 23&quot; LCD</li><li>Dell XPS 13 (4943), Windows 10, i7 2.4GHz x2, 8GB RAM, 13&quot; LCD</li><li><a href="https://oneplus.net/global/3" target="_blank" rel="noopener">One Plus 3</a>, Android, 6GB RAM, 5.5&quot; AMOLED</li></ul><h2 id="windows-linux">Windows &amp; Linux</h2><h3 id="網站工具">網站工具</h3><ul><li>主要瀏覽器：<a href="https://www.mozilla.org/en-US/firefox/products/" target="_blank" rel="noopener">Firefox</a></li><li>主要社交網站：<a href="http://www.facebook.com/" target="_blank" rel="noopener">Facebook</a>、<a href="https://twitter.com/gasolin" target="_blank" rel="noopener">Twitter</a></li><li><a href="http://www.google.com/calendar" target="_blank" rel="noopener">Google日曆</a></li><li><a href="https://mail.google.com/tasks/canvas?pli=1" target="_blank" rel="noopener">Google Tasks</a>, 將遷移到<a href="https://todoist.com/" target="_blank" rel="noopener">Todoist</a></li><li>Inbox, <a href="http://mail.google.com/" target="_blank" rel="noopener">GMail</a></li><li><a href="http://keep.google.com/" target="_blank" rel="noopener">Google keep</a> 記事</li><li>Google Doc</li><li>個人網路硬碟：<a href="http://www.dropbox.com/" target="_blank" rel="noopener">Dropbox</a></li><li>密碼管理：<a href="https://www.lastpass.com/" target="_blank" rel="noopener">Lasspass</a></li><li>新聞聚合：<a href="https://feedly.com/" target="_blank" rel="noopener">Feedly</a></li><li><a href="http://www.anobii.com/" target="_blank" rel="noopener">Anobii</a> 看書記錄</li><li><a href="http://www.douban.com/" target="_blank" rel="noopener">豆瓣</a> 看電影記錄</li><li>個人網站：使用<a href="https://www.openshift.com" target="_blank" rel="noopener">OpenShift</a>架設, 將遷移到<a href="https://github.com/gasolin/blog/" target="_blank" rel="noopener">Github</a></li><li>個人履歷：<a href="http://www.gasolin.idv.tw" target="_blank" rel="noopener">個人網站</a>、Linkedin</li><li>IFTTT <a href="https://blog.gasolin.idv.tw/2015/02/28/%E7%94%A8-IFTTT-%E5%81%9A%E8%87%AA%E5%8B%95%E7%94%9F%E6%B4%BB%E7%B4%80%E9%8C%84-LifeLog/">自動化生活紀錄</a></li></ul><h3 id="設計">設計</h3><ul><li>Mockup：<a href="http://www.balsamiq.com/products/mockups" target="_blank" rel="noopener">Balsmiq Mockups</a></li></ul><h3 id="開發">開發</h3><ul><li>編輯器：Visual Studio Code</li><li>版本控制：git, git-cinnabar</li><li>套件管理：apt, <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a>, Chocolatey(windows)</li><li>Ubuntu bash on windows</li></ul><h3 id="常用插件">常用插件</h3><p>Browser</p><ul><li><a href="https://testpilot.firefox.com/experiments/tab-center" target="_blank" rel="noopener">tab center</a>VSCode</li><li>ESLint</li><li>WakaTimeJS</li><li>Babel</li><li>ESlint</li></ul><h3 id="娛樂">娛樂</h3><ul><li>vlc</li><li>steam, origin</li></ul><h2 id="android-手機">Android 手機</h2><ul><li>主要瀏覽器：Firefox for Android</li><li>桌面：Arrow Launcher</li><li>信箱：Inbox</li><li>地圖：Google地圖</li><li>內建相機, 內建時鐘</li><li>相簿：Dropbox, Google相簿</li><li>社交：Facebook, LINE, Twitter, WeChat</li><li>待辦事項：<a href="https://play.google.com/store/apps/details?id=com.todoist" target="_blank" rel="noopener">Todoist</a>, <a href="https://play.google.com/store/apps/details?id=org.dayup.gtask" target="_blank" rel="noopener">GTasks</a>,</li><li>密碼：<a href="https://play.google.com/store/apps/details?id=com.lastpass.lpandroid" target="_blank" rel="noopener">LastPass</a></li><li>線上學習：Udemy, Pluralsight, Duolingo</li><li>線上影片：Youtube, Eleven Sports</li><li>影片播放：MX Player, DS video</li><li>閱讀：Palabre (feedly), Readmoo</li><li>音樂：豆瓣FM</li><li>公事：Expensify, Duo Mobile</li><li>遊戲：Pokemon Go</li><li>心智圖：SimpleMind, XMind</li><li>健康：小米運動</li></ul><p>不常用</p><ul><li>旅遊：Google翻譯, TripAdvisor</li><li>IFTTT</li><li>Anobii，Readmoo 記錄看書狀況</li></ul><h2 id="reference">Reference</h2><p><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> <a href="https://blog.gasolin.idv.tw/2013/01/02/%E5%80%8B%E4%BA%BA%E5%B7%A5%E5%85%B7%E7%AE%B12011/">個人工具箱2011</a></p>]]></content>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Install react-native for android environment on windows</title>
      <link href="/2016/12/13/install-react-native-android-development-environment-on-windows/"/>
      <url>/2016/12/13/install-react-native-android-development-environment-on-windows/</url>
      <content type="html"><![CDATA[<p>You may think its pretty hard to setup everything on windows. But after I found <a href="http://chocolatey.org/" target="_blank" rel="noopener">chocolatey</a> the process is deadly simple.Chocolatey is the package manager for windows. Like homebrew for Mac, you can use Chocolatey to install all react-native dependencies and let chocolatey setup system PATH for you automatically.</p><p>Sounds good? let’s install react-native on windows.</p><p>The very first step is install chocolatey via [following its instuction]<a href="https://chocolatey.org/install" target="_blank" rel="noopener">https://chocolatey.org/install</a>).</p><p>Then install git, node, android-sdk</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\&gt; choco install git nvm android-sdk</span><br></pre></td></tr></table></figure><p>And you can download the <a href="https://nodejs.org/en/download/current/" target="_blank" rel="noopener">latest node version</a> via command</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nvm install 8.4.0</span><br></pre></td></tr></table></figure><p>Note that Java Development Kit (JDK) is also installed when you install <code>android-sdk</code>, neat!As I mentioned earlier, the SYSTEM PATH are automatically set so you can run <code>android</code> command on <code>cmd</code> or the alternative to open up the SDK manager after install is complete!</p><p>Once you can open android SDK manager, check <a href="https://facebook.github.io/react-native/docs/getting-started.html#3-install-the-android-6-0-marshmallow-sdk" target="_blank" rel="noopener">Getting Started</a> section in React Native doc to find out which android SDK versions to download.</p><p>You can also check Chocolatey’s <a href="https://chocolatey.org/packages" target="_blank" rel="noopener">package list</a> to install a editor.Since its windows, I’ll give Visual Studio Code a try:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c:\&gt; choco install visualstudiocode</span><br></pre></td></tr></table></figure><p>Now you are on the fast track to install react-native, its all node related instructions now.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c:\&gt; npm install -g create-react-native-app</span><br><span class="line">c:\&gt; create-react-native-app sample</span><br><span class="line">c:\&gt; cd sample</span><br><span class="line">c:\sample&gt; npm start</span><br></pre></td></tr></table></figure><p>Happy coding!</p><h2 id="reference">Reference:</h2><ul><li><a href="https://shift.infinite.red/getting-started-with-react-native-development-on-windows-90d85a72ae65#.pnkm80tv7" target="_blank" rel="noopener">Getting Started with React Native Development on Windows</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> mobile </tag>
            
            <tag> react-native </tag>
            
            <tag> chocolatey </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>360照片網頁產生器</title>
      <link href="/2016/11/17/360-photo/"/>
      <url>/2016/11/17/360-photo/</url>
      <content type="html"><![CDATA[<iframe src="https://gasolin.github.io/2016-london-allhands/dubai_airport.html" height="400px" width="600px" align="center"></iframe>From Dubai Airport (The image is dragable to change view 可以拖曳照片來改變視角喔)<p>之前寫過一篇<a href="2016/07/03/upload-360photo-to-facebook/">使用手機上傳 360 圖片到 Facebook</a>，但其實要分享360照片<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>的話，我們也可以用<a href="http://aframe.io" target="_blank" rel="noopener">aframe</a>自己弄個網頁來分享。</p><p>將照片放在自己空間的缺點是所有工作得自己來。我用<a href="http://yeoman.io/" target="_blank" rel="noopener">yeoman</a>寫了個的360照片網頁產生器<a href="https://www.npmjs.com/package/generator-360-photo" target="_blank" rel="noopener">generator-360-photo</a>，可以用來產生如上的360照片網頁(照片與照片網頁都放在github page，透過iframe嵌入)，簡化了自己弄網頁來分享360照片的難度。</p><p><a href="https://www.npmjs.com/package/generator-360-photo" target="_blank" rel="noopener">generator-360-photo</a>在產生展示360照片網頁的同時，也對照片做優化。由於嵌入到600x400空間的圖檔解析度不需要太大，原本圖檔大小5.6MB，解析度5660x2830，優化為解析度2048x1024的圖檔後，大小只剩下481KB。下載時間只需要原來的1/11。</p><p>使用前需要使用npm安裝yeoman和generator-360-photo</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g yo</span><br><span class="line">npm install -g generator-360-photo</span><br></pre></td></tr></table></figure><p>generator-360-photo用到<a href="https://www.npmjs.com/package/sharp" target="_blank" rel="noopener">sharp</a>來最佳化照片，如果在Ubuntu linux或windows bash環境下，需要使用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install build-essential</span><br></pre></td></tr></table></figure><p>命令安裝必要的編譯工具。</p><p>安裝後切換到放照片的資料夾，就可以使用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yo 360-photo</span><br></pre></td></tr></table></figure><p>命令來建立360照片網頁啦。</p><p>如果使用上有遇到什麼問題或建議，可以前往<a href="https://github.com/gasolin/generator-360-photo/issues" target="_blank" rel="noopener">專案網頁</a>回報。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E6%99%AF%E5%9B%BE" target="_blank" rel="noopener">環景圖</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
      
      
        <tags>
            
            <tag> aframe </tag>
            
            <tag> 360photo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>行動裝置網頁(Mobile Web)的發展（科普）</title>
      <link href="/2016/10/06/how-mobile-web-works/"/>
      <url>/2016/10/06/how-mobile-web-works/</url>
      <content type="html"><![CDATA[<h2 id="iphone帶起的行動裝置網頁時代">iPhone帶起的行動裝置網頁時代</h2><p>直到21世紀初的前幾年，在PDA, 手機等設備上看網頁仍然是一種頗糟糕的經驗。當時的手機以今天的角度看來，CPU極慢(十位數的MHz，對比今日動輒1.x GHz)，螢幕普遍相當小(1<sub>2吋，對比今日4</sub>7吋)，解析度也極低（相對高階的也不過320x240，對比今日1080p, 2K螢幕），與當時在桌上型電腦螢幕（800x600~1024x768）上瀏覽的經驗完全不能相比。</p><p>直到從2007年Apple發佈第一代iPhone起，行動裝置網頁才有了長足的進步。以今天的角度來看第一代iPhone<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，3.5吋螢幕，320x480解析度，就硬體上依然有著重重限制。但是由於Apple在行動裝置網頁上提出了幾個重大發明，這些發明陸陸續續地被各家瀏覽器所採用並成為W3C標準，讓瀏覽行動裝置網頁不再那麼讓人難以忍受。</p><h2 id="viewport解放了網頁寬度">viewport解放了網頁寬度</h2><p>由於攜帶便利性的考量，行動裝置的實際螢幕大小無法和桌面相比。在iPhone版Safari瀏覽器問世之前，各家的瀏覽器並沒有可視範圍的概念，只會根據裝置當前的解析度來繪製網頁。iPhone版的Safari瀏覽器首先支援了「viewport」這個概念。透過這個概念相關的技術，讓使用者得以在行動裝置上，有了接近在桌面設備上瀏覽網頁的體驗。</p><p>viewport的中文意義是「視界」，更白話一點就是「可視範圍」。在iPhone上開啟Safari瀏覽器瀏覽網頁時，Safari瀏覽器會將網頁預設繪製到一個980px寬的虛擬畫布上。980px剛好介於當時主流的800px~1024px網頁寬度設計之間，可以正常繪製大多數的網頁。使用者則是透過大小有限的手機螢幕（可視範圍）觀看這個虛擬畫布上的網頁。透過這種方式，使用者想要看到網頁的其他部份時，可以透過滑動手指來放大，縮小，或移動這個虛擬畫布，好讓感興趣的畫面正好顯示在手機螢幕（可視範圍）上。</p><h2 id="行動裝置網頁mobile-web">行動裝置網頁Mobile Web</h2><p>在iPhone領頭的智慧型手機興起後，為了更好地服務使用者，除了一般桌面網站外，也漸漸出現專為便利行動裝置瀏覽所設計的網頁。以雅虎奇摩網頁<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>為例，在網址列上輸入 <a href="https://tw.mobi.yahoo.com" target="_blank" rel="noopener">https://tw.mobi.yahoo.com</a> 可以開啟行動版的雅虎奇摩首頁。</p><p><img src="http://i.imgur.com/nx5Iyi0m.png" alt="Imgur"></p><p>這類行動裝置網頁預設提供了符合設備寬度，字級清晰，更容易點擊的界面。</p><h2 id="responsive-web-design-rwd-響應式網站設計">Responsive Web Design (RWD) 響應式網站設計</h2><p>在行動裝置更為流行後，開始有人喊出Mobile First的呼聲，提倡設計網頁時應從行動裝置版本設計起，再根據裝置的寬度來顯示不同的網頁樣式。這種設計思路被稱為響應式網站設計（Responsive Web Design, RWD）。</p><p>例如使用行動裝置瀏覽本站時，所有的額外功能都收藏到左上角的選單中，只留下部落格標題與文章內容。<img src="http://i.imgur.com/W7oP5Mxm.png" alt="Imgur"></p><p>使用桌面瀏覽器瀏覽本站時，才展開顯示各種相關功能。</p><p><img src="http://i.imgur.com/iHRuLa4m.png" alt="Imgur"></p><p>響應式網站設計需要考慮的觀念不少，此前在謀智台客發表的文章<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>可供初步參考。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">http://www.everymac.com/systems/apple/iphone/specs/apple-iphone-specs.html</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">在網址列上輸入 https://tw.yahoo.com/ 可以連到YAHOO奇摩，輸入 https://tw.mobi.yahoo.com 可以連到行動版</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;"><a href="https://blog.gasolin.idv.tw/2013/11/20/%E8%AE%93%E7%B6%B2%E9%A0%81%E6%87%89%E7%94%A8%E6%94%AF%E6%8F%B4%E5%A4%9A%E6%A8%A3%E8%A8%AD%E5%82%99/">讓網頁應用支援多樣設備</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> mobile </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>網頁前端的發展 (科普)</title>
      <link href="/2016/10/04/how-frontend-works/"/>
      <url>/2016/10/04/how-frontend-works/</url>
      <content type="html"><![CDATA[<h2 id="ie6時代">IE6時代</h2><p>當網站的後端（Backend）剛開始嘗試使用網頁框架（Web Framework）來簡化或模組化開發過程時，網頁本身在瀏覽器的呈現上還處於半停滯狀態。首先是眾家瀏覽器對各種網頁新標準的支援度不一，網頁開發者需要分別在多個瀏覽器，多個版本上測試，以確保一切運作正常。</p><p>應運而生的是封裝了各種瀏覽器實作差異的函式庫。<a href="https://jquery.com/" target="_blank" rel="noopener">jQuery</a>函式庫的出現，讓開發者得以用一致的語法開發能運作在各種瀏覽器上的網頁。大大簡化了支援多種瀏覽器的困難度。從2006至今近10年的時間內，jQuery幾乎成了所有網站都會配備的標準函式庫。</p><h2 id="web-2-0-時代">Web 2.0 時代</h2><p>一般以2004年<a href="https://zh.wikipedia.org/zh-tw/Gmail" target="_blank" rel="noopener">Gmail公開提供服務</a>為大眾所知。網站從早期提供/搜尋資料，線上購物，進化為能取代桌面應用程式的網頁服務（Web Service）。網頁服務與傳統網頁的區別在於，使用者使用傳統網頁時，每次在網頁上按個按鈕，就得等待伺服器處理完，傳回新頁面後才能查看處理結果。網頁服務則不然，使用者的大多數行為都直接在瀏覽器端運作，背後再透過AJAX（非同步請求）技術，從網頁服務器取得資料，然後將關聯的部份更新在當前的頁面上。相較於傳統網頁，使用者感覺不到明顯的延遲，在使用經驗上大為改善。</p><div class="mermaid">  graph LR  subgraph Web Server    backend[Web framework]  end  subgraph Browser    request    response --> render  end  request --> backend  backend --> response</div><p>一直以來網頁的強項在於，當開發者做好任何的新功能或問題修復，都能更容易地更新版本。使用者不需下載就能享受到新版本的各種功能。對於使用者而言，使用網頁服務有更好的體驗。傳統上只有桌面應用程式能做到的事，透過網頁服務也能做到。也因此推升了開發各種網頁服務的需求。</p><p>網頁服務大量地使用Javascript來處理頁面上的各種行為，多種功能並存於同一個頁面中，大大增加了網頁的複雜度。一些大公司如Yahoo開始出現專注於網頁前端（FrontEnd）開發的職位。</p><h1>2016年學習寫網頁</h1><p>如果對現在的前端/Javascript相關技術發展感興趣，可以進一步查看我去年的演講<a href="https://blog.gasolin.idv.tw/2015/05/31/Javascript%EF%BC%8C%E5%BE%81%E6%9C%8D%E4%B8%96%E7%95%8C%E6%98%AF%E5%8F%AF%E8%83%BD%E7%9A%84%E5%97%8E%EF%BC%9F%20/">Javascript，征服世界是可能的嗎？</a>，或看看這篇最近頗熱門的文章<a href="https://www.v2ex.com/t/310767" target="_blank" rel="noopener">在 2016 年学 JavaScript 是一种什么样的体验？</a>😉。</p>]]></content>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> mobile </tag>
            
            <tag> webframework </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android + Chrome OS = Andromeda?</title>
      <link href="/2016/10/01/rumor-andromeda/"/>
      <url>/2016/10/01/rumor-andromeda/</url>
      <content type="html"><![CDATA[<p><a data-flickr-embed="true" href="https://www.flickr.com/photos/notahipster/4600503144/in/photostream/" title="peanut butter-filled chocolate cake" target="_blank" rel="noopener"><img src="https://c1.staticflickr.com/2/1359/4600503144_8c91bce43c_z.jpg" width="640" height="426" alt="peanut butter-filled chocolate cake"></a></p><p>隨著Firefox OS<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，黑莓BlackBerry 10<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，與Windows Phone<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>三種行動裝置OS都陸續傳出退出消費市場或停產的消息，表明現在行動裝置OS已大勢底定，由Android與iOS二分天下。</p><p>最近甚囂塵上的傳言<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>是Google將在下周發表Android與Chrome OS合併的作業系統Andromeda(英文中是&quot;仙女座&quot;的意思。有人跟我一樣感覺這唸起來尾音頗像韓國話嗎?)。這讓我想起2008年的時候，我寫過一篇<a href="https://blog.gasolin.idv.tw/2008/07/26/Androbian/">Androbian?</a>短評關於Android與Symbian將合併的傳言。裡面引用了一段話:</p><blockquote><p>How they will merge two platforms that have so many things different about them is beyond us.One is chocolate, the other is peanut butter. Two completely different things. However, we know how good they taste together!</p><p>一邊是巧克力，另一邊是花生醬，兩者是完全不同的東西。但是，我們都知道巧克力花生醬嚐起來是多麼地美味！</p></blockquote><p>這樣相對樂觀的期待，仍然可以套用在新的傳言上。</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="http://www.pcworld.com/article/3124563/open-source-tools/mozilla-is-stopping-all-commercial-development-on-firefox-os.html" target="_blank" rel="noopener">Mozilla is stopping all commercial development on Firefox OS</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;"><a href="http://www.chinatimes.com/realtimenews/20160929002813-260410" target="_blank" rel="noopener">全面外包，黑莓宣布停產智慧手機</a></span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;"><a href="http://3c.ltn.com.tw/news/26619" target="_blank" rel="noopener">承認打不過 Android 與 iOS！微軟：全面退出消費手機市場！</a></span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;"><a href="http://technews.tw/2016/09/27/google-andromeda-hybrid-androidchrome-os-tested-on-nexus-9/" target="_blank" rel="noopener">Android 和 Chrome OS 要合併，已在 Nexus 9 上開始測試了</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
      
      
        <tags>
            
            <tag> mobile </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在Windows 10上透過vagrant, virtualbox安裝與設定Elementary OS 0.4 (Loki)</title>
      <link href="/2016/09/30/setup-elementary-os-loki/"/>
      <url>/2016/09/30/setup-elementary-os-loki/</url>
      <content type="html"><![CDATA[<p><img src="http://i.imgur.com/hlzcMQm.png" alt="Imgur"></p><p>承上一篇，我工作用的桌機通常灌的是Ubuntu（Linux）系統。筆電則是在Windows 10上灌Ubuntu VM解決。</p><p>但上個月我的桌機從16.04LTS升級到16.04.1時，竟然升級失敗無法開機，這讓我很火。於是利用這個機會，我嘗試安裝了 <a href="https://www.linuxmint.com/" target="_blank" rel="noopener">Mint</a> 和 <a href="http://elementary.io/" target="_blank" rel="noopener">Elementary OS</a><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。Mint和Elementary OS都是Ubuntu的衍生版本，所以在套件和命令行使用上與Ubuntu一致，在重新設定開發環境時比較不會遇到困難。</p><p>兩者嘗試後，最終是Elementary OS的高顏值與類似Mac OS的使用經驗，讓我決定繼續用下去。當時安裝的版本是基於Ubuntu 14.04LTS的Elementary OS 0.3版(Freya)。至目前使用上相當滿意，終於可以擺脫不甚順手的Unity桌面了。</p><p>就在前幾周，基於Ubuntu 16.04LTS的Elementary OS 0.4版(Loki)<a href="http://blog.elementary.io/post/147637979911/loki-04-stable-release" target="_blank" rel="noopener">終於釋出了</a>。但是新版本竟然不支援直接從舊版升級，於是我依然錯過在第一時間試用新版本的機會。</p><p>今天心血來潮再次搜尋了一下vagrant上是否有提供Elementary OS的Box，很幸運<a href="https://atlas.hashicorp.com/TimWSpence/boxes/elementaryos" target="_blank" rel="noopener">找到了</a>！</p><p>步驟：</p><ol><li>在Windows 10上按視窗鍵，搜尋cmd並開啟</li><li>在命令行工具中輸入以下2行命令，以啟動一個Elementary OS VM</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vagrant init TimWSpence/elementaryos</span><br><span class="line">vagrant up</span><br></pre></td></tr></table></figure><p>第一次啟動後要開啟VirtualBox並選擇「顯示」，之後就不需再用到vagrant命令了。vagrant box所使用的登入的密碼是&quot;vagrant&quot;。</p><p>啟動後我照著<a href="https://itsfoss.com/things-to-do-after-installing-elementary-os-loki/" target="_blank" rel="noopener">11 things to do after install Elementary OS Loki</a> 文章的建議，安裝了一些工具。同時因為我的Dell XPS 13(9495)筆電解析度較高，預設的解析度之下每個字都超級小，我透過gsettings命令多設定了text scaling:</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gsettings get org.gnome.desktop.interface scaling-factor</span><br><span class="line">gsettings <span class="built_in">set</span> org.gnome.desktop.interface scaling-factor 2</span><br></pre></td></tr></table></figure><p>在做了這個修改之後，才得到對眼睛比較友善的使用界面。（如題圖）</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="https://zh.wikipedia.org/wiki/Elementary_(%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F)" target="_blank" rel="noopener">維基百科Elementary OS詞條</a></span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
      
      
        <tags>
            
            <tag> desktop </tag>
            
            <tag> work </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在Windows 10上透過vagrant, virtualbox安裝Ubuntu 16.04</title>
      <link href="/2016/09/30/create-ubuntu-vm-on-windows-with-vagrant/"/>
      <url>/2016/09/30/create-ubuntu-vm-on-windows-with-vagrant/</url>
      <content type="html"><![CDATA[<p>幾周前透過Ubuntu升級筆電的Firmware後，Ubuntu竟然就再也無法正確抓到無線網卡了！</p><p>我想說那就趁這機會重灌OS吧！然而在嘗試灌各種Linux套件（Elementary OS Loki (Beta), Ubuntu 16.04, Ubuntu 14.04）都抓不到網卡驅動程式後，只好乖乖灌回Windows 10。</p><p>由於在筆電上依然需要一個Linux工作環境，我就<a href="http://blog.gasolin.idv.tw/2015/08/23/FoxBox-1-0-%E8%AE%93%E4%BD%A0%E5%9C%A8%E4%B8%80%E5%80%8B%E5%B0%8F%E6%99%82%E5%85%A7%E4%B8%8D%E7%97%9B%E5%AE%89%E8%A3%9D-Firefox-OS-%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83%E7%9A%84%E8%A8%AD%E5%AE%9A%E5%B7%A5%E5%85%B7/">之前的經驗</a>繼續使用vagrant來建立工作環境VM。安裝好<a href="https://www.virtualbox.org/" target="_blank" rel="noopener">VirtualBox</a>和<a href="https://www.vagrantup.com/" target="_blank" rel="noopener">Vagrant</a>後，只需要2行命令即可安裝完成，而且之後隨時可以砍掉重新開一個全新的VM。</p><p>步驟：</p><ol><li>在Windows 10上按視窗鍵，搜尋cmd並開啟</li><li>在命令行工具中輸入以下2行命令，以啟動一個Ubuntu VM</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vagrant init boxcutter/ubuntu1604-desktop</span><br><span class="line">vagrant up</span><br></pre></td></tr></table></figure><p>第一次啟動後要開啟VirtualBox並選擇「顯示」，之後就不需再用到vagrant命令了。vagrant box所使用的登入的密碼是&quot;vagrant&quot;。</p><p>由於Vagrant使用最小化地配置VM可使用的CPU和記憶體，對於桌面開發環境來說有些不夠用。我會到VirtualBox中修改「配置」，去適量增加可用的記憶體數值。目前這方式在Windows上運作地相當順利。</p>]]></content>
      
      
        <tags>
            
            <tag> desktop </tag>
            
            <tag> work </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>網頁框架的基本運作方式 (科普)</title>
      <link href="/2016/09/26/how-webframework-works/"/>
      <url>/2016/09/26/how-webframework-works/</url>
      <content type="html"><![CDATA[<h2 id="為什麼需要網頁框架？">為什麼需要網頁框架？</h2><p>在上一篇文章中我們介紹了動態網頁的運作方式：網站伺服器在收到網頁或資源的請求（Request）後，交由佈署在伺服器裡的動態網頁腳本，根據提供的網址處理並回應（response）對應的網頁。</p><div class="mermaid">  graph LR  subgraph Web server    request --> scripts    scripts --> response  end</div><p>我們現在日常用到的許多網站，其中要處理的工作遠比這個示意圖複雜。例如許多網站需要從資料庫中存取資料，或是需要更容易地保持頁面之間的一致性。因此透過各種程式語言撰寫的「網頁框架」也應運而生。「網頁框架」除了可以簡化諸多開發網站時會碰到的需求，還可以重用或繼承其他人做過的工具和經驗。比起直接寫腳本自行處理所有事情，大多數網站會選用各種「網頁框架」來開發。</p><h2 id="網頁框架處理哪些事">網頁框架處理哪些事?</h2><p>當網站伺服器在收到不同的網頁或資源的請求（Request）後，開發者需要處理的事情有：</p><ul><li>根據網址的組成，指定不同的腳本處理</li><li>取得網址參數</li><li>把對應的資料填入網頁樣板</li></ul><p>支援這些，可說就構成一個基本網頁框架了。如Python的<a href="http://flask.pocoo.org/" target="_blank" rel="noopener">flask</a>或Node(Javascript)的<a href="http://expressjs.com/" target="_blank" rel="noopener">express</a>。</p><div class="mermaid">  graph LR  subgraph WSGI    request    response  end  subgraph Webframework    route --> controller    controller --> template    template --> controller  end  request --> route  controller --> response</div><p>除此之外，許多網頁框架還可以進一步擴展，以滿足以下需求：</p><ul><li>取得表單參數</li><li>存取資料庫</li><li>查看 Cookie / Session</li><li>檢查登入狀況</li></ul><p>光是「存取資料庫」一項，就有無數協助開發者簡化存取資料庫的方式，在此不一一細述。</p><div class="mermaid">  graph LR  subgraph WSGI    request    response  end  subgraph Webframework    route --> controller    controller --> template    template --> controller    controller --> model    model --> controller  end  request --> route  controller --> response</div><p>有了網頁框架，開發者得以重用或繼承前人提供的相關工具與開發經驗。使得動態網站變得更容易開發，大型網站也變得更容易維護。</p>]]></content>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> mobile </tag>
            
            <tag> webframework </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>動態網頁的基本運作方式 (科普)</title>
      <link href="/2016/09/21/how-dynamic-web-works/"/>
      <url>/2016/09/21/how-dynamic-web-works/</url>
      <content type="html"><![CDATA[<h2 id="網頁有兩種">網頁有兩種</h2><p>網頁類型可以簡單分為兩類：靜態網頁和動態網頁<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。在上一篇文章中我們介紹了基本的網頁運作方式，即瀏覽器請求網頁，網站伺服器傳回網頁。</p><div class="mermaid">  sequenceDiagram  Browser ->> Server: 網站請求  Server -->> Browser: 傳回網頁</div><p>這個模式適用於所有的網頁。對於瀏覽器來說，靜態網頁和動態網頁並沒有差別，都是收到一份完整的網頁後開始解析。靜態網頁和動態網頁的區分，主要是發生在網站伺服器端。</p><h2 id="靜態網頁">靜態網頁</h2><p>一般常見的網站伺服器如Apache或NGINX都同時支援靜態網頁與動態網頁。當網站伺服器收到網頁或資源的請求後，會根據網站伺服器的配置來回應使用者的請求。當網站伺服器查詢到這個請求網址目的為靜態（static）檔案時，網站伺服器會直接傳回固定的網頁或資源檔案。</p><h2 id="動態網頁">動態網頁</h2><p>動態網頁和靜態網頁是相對應的概念。靜態網頁提供的網頁內容是固定不會改變的，而動態網頁的內容則可根據時間，地點，登入的使用者等不同而呈現不同的內容。動態網頁的內容依然是透過網站伺服器產生，瀏覽器只負責將從網站伺服器回傳的內容呈現出來。</p><p>支援動態網頁的網站伺服器，在收到網頁或資源的請求後，會透過CGI<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>或WSGI<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>界面，交由佈署在伺服器裡的動態網頁腳本進行處理。</p><div class="mermaid">  graph LR  subgraph Web server    request --> scripts    scripts --> response  end</div><p>在動態網頁中，在請求（Request）網址與回應（response）網頁內容間，都是由程式腳本負責處理（script）。程式腳本需要解析請求（Request）訊息，根據提供的網址處理對應的行為並回應（response）對應的網頁。在處理過程中，程式腳本可能需要處理取得網址參數或表單參數等內容，存取資料庫，把對應的資料填入網頁樣板等等工作。</p><p>早期90年代在Web與瀏覽器剛發明時，網頁只有靜態網頁一種。這時候架網站主要的目的是個人拿來分享感興趣的資訊。因此當時流行的是製作個人「烘培機」（Home Page）。直到有了動態網頁之後，才有了現在蓬勃的電子商務與各式網路服務。一項網站伺服器端的改變，就讓我們的網路生活更加地豐富多彩。</p><h3 id="參考資料：">參考資料：</h3><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">https://en.wikipedia.org/wiki/Dynamic_web_page</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">https://en.wikipedia.org/wiki/Common_Gateway_Interface</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">https://en.wikipedia.org/wiki/Web_Server_Gateway_Interface</span><a href="#fnref:3" rev="footnote"> ↩</a></li><li id="fn:4"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">4.</span><span style="display: inline-block; vertical-align: top;"><a href="http://blog.ez2learn.com/2010/01/27/introduction-to-wsgi/" target="_blank" rel="noopener">化整為零的次世代網頁開發標準: WSGI</a></span><a href="#fnref:4" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> mobile </tag>
            
            <tag> webframework </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>網站的基本運作方式 (科普)</title>
      <link href="/2016/09/20/how-web-works/"/>
      <url>/2016/09/20/how-web-works/</url>
      <content type="html"><![CDATA[<h2 id="瀏覽器請求網頁">瀏覽器請求網頁</h2><p>當我們在瀏覽器上輸入網址，按下Enter鍵之後，瀏覽器會傳送一個訊息出去，向符合這個網址的網站伺服器發出請求。當網站伺服器收到請求後，就會傳回瀏覽器所請求的網頁。</p><div class="mermaid">  sequenceDiagram  Browser ->> Server: 網站請求  Server -->> Browser: 傳回網頁</div><h2 id="瀏覽器請求資源">瀏覽器請求資源</h2><p>瀏覽器收到網頁後，瀏覽器會開始解析網頁內容。網頁使用一種稱為<code>HTML (HyperText Markup Language)</code><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>的文字格式來定義裡面內容。當瀏覽器看到一些特定標籤（諸如link或script）的時候，瀏覽器會根據標籤裡的網址，再次向符合這些網址的網站伺服器請求相關的資源。而這些網址所代表的網站伺服器，與原本提供網頁的網站伺服器並不一定是同一台。</p><div class="mermaid">  sequenceDiagram  Browser ->> Server: 請求網頁中的資源  Server -->> Browser: 傳回資源  Browser ->> Server2: 請求網頁中的資源  Server2 -->> Browser: 傳回資源</div><p>網頁中包含的資源通常指的是Javascript<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>，CSS<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>，與圖片，影片，聲音等檔案。現代網頁通常以HTML呈現網頁的語義（網頁的大致架構與內容），以CSS改變在不同設備上呈現的效果，以Javascript控制網頁的實際運作。</p><p>從網路上接收到所有相關的CSS與JavaScript資源後，瀏覽器才會開始繪製頁面。</p><h2 id="網站伺服器的作用">網站伺服器的作用</h2><p>網站伺服器的基本作用，就是接受網頁請求與各種相關資源請求，並回傳對應的網頁或資源。</p><div class="mermaid">  graph LR  subgraph Browser    page  end  subgraph Web server    html    resources["resources (js, css, images)"]  end  html --> page  resources --> page</div><h2 id="參考資料：">參考資料：</h2><p>會寫這篇的原因之一是剛剛幫這個部落格加入了<a href="https://knsv.github.io/mermaid" target="_blank" rel="noopener">Mermaid</a> (使用Markdown畫方塊圖, 循序圖) 與footnote支援，想試試顯示的效果:p</p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;">https://zh.wikipedia.org/wiki/HTML</span><a href="#fnref:1" rev="footnote"> ↩</a></li><li id="fn:2"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">2.</span><span style="display: inline-block; vertical-align: top;">https://zh.wikipedia.org/wiki/JavaScript</span><a href="#fnref:2" rev="footnote"> ↩</a></li><li id="fn:3"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">3.</span><span style="display: inline-block; vertical-align: top;">https://zh.wikipedia.org/wiki/Cascading_Style_Sheets</span><a href="#fnref:3" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> mobile </tag>
            
            <tag> webframework </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/2016/09/18/hello-world/"/>
      <url>/2016/09/18/hello-world/</url>
      <content type="html"><![CDATA[<p><img src="http://i.imgur.com/EPzmO6p.png" alt="Imgur"></p><p>I just <strong>migrated my blog</strong> from Blogger to Github (via <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>)! Because I’d like to use Markdown to write things efficiently (format, syntax highlight…), and think if I can finally integrate blog as part of my homepage (which soon or later will be hosted on github).</p><h2 id="migrate-from-blogger">Migrate from blogger</h2><p>To migrate from blogger, I use these instructions:</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">mkdir blog &amp;&amp; <span class="built_in">cd</span> blog</span><br><span class="line">npm install --save hexo-migrator-rss</span><br><span class="line">hexo migrate rss https://www.blogger.com/feeds/xxxxxxx/posts/default?max-results=600</span><br></pre></td></tr></table></figure><p><code>xxxxxxx</code> is your blog id which can be found from url bar of blogger’s admin panel.</p><p>To test render result locally, run</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure><p>To generate static file then update to github, run</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo generate --deploy --debug</span><br></pre></td></tr></table></figure><p>If you have amount of articles like me (about 500 articles), make sure you have allocate enough memory if you run the command in VM.</p><p>The template comes from <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">hexo-theme-next</a> with great document.</p><h2 id="github-related-configurations">Github related configurations</h2><p>Make sure you’ve follow <a href="https://help.github.com/articles/setting-up-a-custom-subdomain/" target="_blank" rel="noopener">“Setting up a custom subdomain”</a> , and install <code>hexo-generator-cname</code> to generate CNAME file for your static web site.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-generator-cname</span><br></pre></td></tr></table></figure><p>Add <code>cname</code> property in <code>_config.yml</code>:</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cname:</span> <span class="string">blog.gasolin.idv.tw</span></span><br></pre></td></tr></table></figure><p>You can check <a href="https://github.com/gasolin/blog/blob/master/_config.yml" target="_blank" rel="noopener">_config.yml</a> and <a href="https://github.com/gasolin/blog/tree/master/themes" target="_blank" rel="noopener">themes/</a> for my site configurations.</p><p>The theme customization is done via npm scripts. You can check <a href="https://github.com/gasolin/blog/blob/master/package.json" target="_blank" rel="noopener">package.json::scripts</a> for detail.</p><h2 id="deploy-automatically-via-travis-ci">deploy automatically via travis CI</h2><p>Read</p><ul><li><a href="http://magicse7en.github.io/2016/03/27/travis-ci-auto-deploy-hexo-github/" target="_blank" rel="noopener">使用Travis CI自动构建hexo博客</a> (in chinese)</li><li><a href="https://sazzer.github.io/blog/2015/05/04/Deploying-Hexo-to-Github-Pages-with-Travis/" target="_blank" rel="noopener">Deploying Hexo to Github Pages with Travis</a></li></ul><p>for step by step instructions. Or you can check My version of <a href="https://github.com/gasolin/blog/blob/master/.travis.yml" target="_blank" rel="noopener">.travis.yml</a> with <a href="https://github.com/gasolin/blog/blob/master/.gitmodules" target="_blank" rel="noopener">hexo-theme-next gitsubmodule</a></p><h2 id="seo-enhancements">SEO enhancements</h2><p>Read <a href="http://fionat.github.io/blog/2013/10/23/sitemap/" target="_blank" rel="noopener">如何向google提交sitemap</a> (in chinese) to send sitemap.xml to google for better indexing.</p><h2 id="update-theme">Update theme</h2><p>Use command</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git submodule foreach git pull origin master</span><br></pre></td></tr></table></figure><p>to update your theme. Read <a href="http://stackoverflow.com/questions/5828324/update-git-submodule-to-latest-commit-on-origin" target="_blank" rel="noopener">Update Git submodule to latest commit on origin</a> for more detail.</p>]]></content>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> webframework </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>聊天機器人一份，不加咖啡</title>
      <link href="/2016/08/24/%E8%81%8A%E5%A4%A9%E6%A9%9F%E5%99%A8%E4%BA%BA%E4%B8%80%E4%BB%BD%EF%BC%8C%E4%B8%8D%E5%8A%A0%E5%92%96%E5%95%A1/"/>
      <url>/2016/08/24/%E8%81%8A%E5%A4%A9%E6%A9%9F%E5%99%A8%E4%BA%BA%E4%B8%80%E4%BB%BD%EF%BC%8C%E4%B8%8D%E5%8A%A0%E5%92%96%E5%95%A1/</url>
      <content type="html"><![CDATA[<p><a href="https://3.bp.blogspot.com/-3vup0pGDk6g/V75MUn5HqWI/AAAAAAAAEO8/Uv_Lecp99y0JNUZD090iVyxi-g92-fXJwCLcB/s1600/2016-08-25%2B09-33-23%2B%25E7%259A%2584%25E8%259E%25A2%25E5%25B9%2595%25E6%2593%25B7%25E5%259C%2596.png" target="_blank" rel="noopener"><img src="https://3.bp.blogspot.com/-3vup0pGDk6g/V75MUn5HqWI/AAAAAAAAEO8/Uv_Lecp99y0JNUZD090iVyxi-g92-fXJwCLcB/s640/2016-08-25%2B09-33-23%2B%25E7%259A%2584%25E8%259E%25A2%25E5%25B9%2595%25E6%2593%25B7%25E5%259C%2596.png" alt=""></a></p><p>「聊天機器人一份，不加咖啡」是今年在 Coscup 2016 分享的講題，<a href="https://hackmd.io/p/HJ7dfgVc#/" target="_blank" rel="noopener">投影片在此</a>。內容包含介紹聊天機器人與 <a href="https://github.com/github/hubot" target="_blank" rel="noopener">Hubot</a>，轉換Coffeescript到ES6，與移植經驗總結。</p><iframe src="https://hackmd.io/p/HJ7dfgVc#/" height="400px" width="600px" align="center"></iframe><p><a href="https://github.com/gasolin/webbybot" target="_blank" rel="noopener">Webbybot</a> 是我們將 Hubot 完全移植到 ES6 的成果。在準備這場演講時，有鑑於Server Side聊天機器人設定上還是稍嫌複雜，於是我參考 Hubot 架構，做了原始版本只有80行的網頁端聊天機器人。除了支援聊天機器人基本功能外，同時也支援擴充腳本(plugin)與擴充功能(addon)。由於參考了Hubot架構，於是命名時就取了<a href="https://gasolin.github.io/saihubot/" target="_blank" rel="noopener"><strong>Sai</strong>hubot</a> 這個既包含 Hubot，又有濃濃台味的名稱（SaiHu 即台語的「師傅」）。</p><p>這次活動官方有提供 LINE 版的聊天機器人。我在活動早上花幾小時基於 Saihubot　做了　<a href="https://gasolin.github.io/cosbot/" target="_blank" rel="noopener">Coscup 2016網頁版機器人</a>，可以上去玩玩。</p><iframe src="https://gasolin.github.io/cosbot/" height="400px" width="600px" align="center"></iframe><p>要做一個自己的網頁聊天機器人，只須在 github 上 fork 專案，然後就可以直接在 Github 上編輯，修改後的結果直接反應到 https://[your name].github.io/saihubot 網站上。修改極端容易，畢竟核心只有不到100行，對聊天機器人有點興趣的人可以照著上述說明試試，看看原始碼，當然若能送個 Issue 或 Pull Request，這場「扎根」議程達到的效果就最好了。</p>]]></content>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>The newbie&#39;s workflow on Mozilla Gecko project</title>
      <link href="/2016/08/08/The-newbies-workflow-on-Mozilla-Gecko-project/"/>
      <url>/2016/08/08/The-newbies-workflow-on-Mozilla-Gecko-project/</url>
      <content type="html"><![CDATA[<p>As our recent development focus shifting from Firefox OS to Firefox, we need to contribute to gecko repository directly instead of contributing to Gaia repository on Github.The most of the works are related to Javascript. The main change is the workflow and API difference.  In Gaia we work between Bugzilla and Github; In gecko, we have Bugzilla and mozReview.</p><p>Once you have setup the environment, the workflow could also be based on git(or hg), and most things are dealt automatically.Mozilla is a pretty open workplace so that I can share my workflow with the world. Here is a reference to how I did for per patch/weekly/per setup/one-time workflow.</p><h2 id="do-it-one-time">Do it One time</h2><p>To become a mozilla committer, read <a href="https://www.mozilla.org/en-US/about/governance/policies/commit/" target="_blank" rel="noopener">https://www.mozilla.org/en-US/about/governance/policies/commit/</a></p><p>Create Bugzilla API key<a href="https://bugzilla.mozilla.org/userprefs.cgi?tab=apikey" target="_blank" rel="noopener">https://bugzilla.mozilla.org/userprefs.cgi?tab=apikey</a>and ssh key <a href="https://login.mozilla.com/ssh_keys_index" target="_blank" rel="noopener">https://login.mozilla.com/ssh_keys_index</a></p><h2 id="do-at-every-setup">Do at every Setup</h2><p>You may check MDN as a start point, with Developer Guide <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide</a> and especially the source code page<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Source_Code" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Source_Code</a></p><p>I will do the setup flow every time I got a new laptop.</p><h3 id="1-update-git">1. Update git</h3><p>Use the <a href="https://launchpad.net/%7Egit-core/+archive/ubuntu/ppa" target="_blank" rel="noopener">PPA</a> from the maintainers of <code>git</code> on Ubuntu:</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo apt-add-repository ppa:git-core/ppa</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install git</span><br></pre></td></tr></table></figure><h3 id="2-install-git-cinnabar">2. Install git-cinnabar</h3><p>Gecko itself managed via mercurial, we need install <a href="https://github.com/glandium/git-cinnabar" target="_blank" rel="noopener">git-cinnabar</a> to help us deal with mercurial codebase via git.Check <a href="http://mozilla-version-control-tools.readthedocs.org/en/latest/mozreview/install-git.html#mozreview-install-git" target="_blank" rel="noopener">http://mozilla-version-control-tools.readthedocs.org/en/latest/mozreview/install-git.html#mozreview-install-git</a> `<a href="https://github.com/glandium/git-cinnabar/wiki/Mozilla:-A-git-workflow-for-Gecko-development" target="_blank" rel="noopener"></a></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install mercurial</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/glandium/git-cinnabar.git</span><br></pre></td></tr></table></figure><p>Then set git-cinnabar into system PATH,</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ gedit ~/.bashrc</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:absolute_path_to/git-cinnabar</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ . ~/.bashrc</span><br></pre></td></tr></table></figure><p>And do <code>git cinnabar download</code> to get the faster helper.</p><p>Then follow `<a href="https://github.com/glandium/git-cinnabar/wiki/Mozilla:-A-git-workflow-for-Gecko-development" target="_blank" rel="noopener">Mozilla: A git workflow for Gecko development</a> to checkout gecko via git.</p><p>Make sure you follow the Firefox build guide <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/Simple_Firefox_build" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/Simple_Firefox_build</a> to setup Firefox build environment.</p><p>You can <code>install style check related libraries via the following command:</code></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./mach eslint --setup</span><br></pre></td></tr></table></figure><p>You may want install mozreview which improves the overall experience of review with Bugzilla<a href="http://mozilla-version-control-tools.readthedocs.org/en/latest/mozreview/install.html" target="_blank" rel="noopener"> http://mozilla-version-control-tools.readthedocs.org/en/latest/mozreview/install.html</a><code></code></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./mach mercurial-setup</span><br></pre></td></tr></table></figure><p>Will clone <code>version-control-tools</code> into <code>~/.mozbuild/version-control-tools</code>. We need update system PATH</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ gedit ~/.bashrc</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:absolute_path_to/git-cinnabar:/path/to/.mozbuild/version-control-tools/git/commands</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ . ~/.bashrc</span><br><span class="line">$ git config --global bz.username gasolin@example.com</span><br><span class="line">$ git config --global bz.apikey [your bugzilla key]</span><br><span class="line">$ git config --global mozreview.nickname gasolin</span><br><span class="line">$ git mozreview configure</span><br></pre></td></tr></table></figure><p>Then, run bootstrap script to install required build environment,</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./mach bootstrap</span><br></pre></td></tr></table></figure><p>Then, <strong>the most time-saving advice</strong>: setup mozconfig for <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Build_Instructions/Artifact_builds" target="_blank" rel="noopener">artifact builds</a> if possible. When you only work for front-end related work (non c++), Artifact build will download compiled platform code to save you lots of build time.</p><h2 id="weekly-workflow">Weekly workflow</h2><p>Previously build takes more time, I usually do the following command only twice a week if necessary. But now we can use artifact build, which is pretty fast and can be done many times a day.</p><p>We need update Gecko repository regularly:</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git remote update</span><br></pre></td></tr></table></figure><p>Then merge recent updates into current repo with</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git rebase central/default</span><br></pre></td></tr></table></figure><p>Checkout a new bug and then rebuild the stack,</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./mach build</span><br></pre></td></tr></table></figure><p>The command will compile the whole gecko.</p><h2 id="per-patch-workflow">Per patch workflow</h2><p>When I work on a new bug, I’ll checkout a new branch (on mac)</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git checkout -b bugxxxxxxx central/branches/default/tip</span><br></pre></td></tr></table></figure><p>or (on Ubuntu)</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git checkout -b bugxxxxxxx mozilla/central</span><br></pre></td></tr></table></figure><p>Usually, the bug is focused on a component of gecko, such as <code>browser/components/customizableui</code>. To make .js/.jsm changes work, we don’t need to rebuild gecko. But to make some C++ code or new test code works, we need to rebuild this part of source via</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./mach build browser/components/customizableui</span><br></pre></td></tr></table></figure><p>Once we have some progress for the patch, we can test code via the command:</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./mach <span class="built_in">test</span> browser/components/customizableui/<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>You need to make sure you’ve followed the JS code style <a href="https://wiki.mozilla.org/DevTools/CodingStandards#Code_style" target="_blank" rel="noopener">https://wiki.mozilla.org/DevTools/CodingStandards#Code_style </a>and CSS code style <a href="https://wiki.mozilla.org/Firefox/CSS_Tips" target="_blank" rel="noopener">https://wiki.mozilla.org/Firefox/CSS_Tips</a>. Do the eslint test before commit to make sure the patch does not contain some obvious syntax error.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./mach eslint browser/components/customizableui/<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>Once the patch is ready, commit it as normal git commit, with a <a href="http://mozilla-version-control-tools.readthedocs.org/en/latest/mozreview/commits.html#mozreview-commits" target="_blank" rel="noopener">structured syntax</a>:<code>Bug xxxxxxx - description. ;r=?reviewer_bugzilla_alias</code>.</p><p>Then, use git mozreview command to push the commit onto Bugzilla for review.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git mozreview push</span><br></pre></td></tr></table></figure><p>You can use try chooser<a href="http://trychooser.pub.build.mozilla.org/" target="_blank" rel="noopener"> http://trychooser.pub.build.mozilla.org/</a> to select test suites that run automatically on the test server. Treeherder is Mozilla’s test server hosted on AWS (Amazon Web Service). Push code there and everyone will have the same base to validate if your code works well on anyone’s computer.</p><p>The reference try script (credit from :Gijs) for <code>browser/component</code> is</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">try: -b od -t none -p win32,win64,macosx64,linux,linux64,linux64-asan -u mochitest-bc,mochitest-e10s-bc,marionette,marionette-e10s</span><br></pre></td></tr></table></figure><p>You can manipulate the script based on what you need to test.</p><h2 id="if-you-like-to-file-a-bug">If you like to file a bug</h2><ul><li>Assign priorities when filing new bugs that you’re going to work on in the component.</li></ul><h2 id="reference">Reference</h2><ul><li><a href="https://sny.no/2016/03/geckogit" target="_blank" rel="noopener">https://sny.no/2016/03/geckogit</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Mozilla </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用手機上傳 360 圖片到 Facebook</title>
      <link href="/2016/07/03/upload-360photo-to-facebook/"/>
      <url>/2016/07/03/upload-360photo-to-facebook/</url>
      <content type="html"><![CDATA[<p>前幾天 Facebook 開放上傳 360 影片，經過幾番嘗試後，終於找出直接在手機上直接上傳 360 照片的方法。</p><p>剛嘗試的人建議使用 <a href="https://github.com/gasolin/webvrdemo/blob/gh-pages/Lab360Image.md" target="_blank" rel="noopener">Google Street View</a> 或 <a href="https://github.com/gasolin/webvrdemo/blob/gh-pages/LabPanorama.md" target="_blank" rel="noopener">Cardboard Camera</a> 試試效果，這兩個 App 可以在 Android 或 iOS 應用商店中找到。</p><p>透過這兩個 App 拍攝的 360影片，直接上傳到 Facebook 應該是沒問題的。</p><p>但現在有更方便的 360 影片拍攝工具如 Ricoh Theta S 或是 LG 360 CAM，這類設備搭載兩個鏡頭，拍攝時只要按一下拍攝鈕，就輕鬆完成全景照片。</p><div class="separator" style="clear: both; text-align: center;">[![](https://1.bp.blogspot.com/-UaagH6k-OzM/V18XxoSk_vI/AAAAAAAAEMg/sgslPBDmGwoeNVIzplFoKpunRa-sWDrTwCLcB/s640/2016-06-13%2B10.59.07.jpg) ](https://1.bp.blogspot.com/-UaagH6k-OzM/V18XxoSk_vI/AAAAAAAAEMg/sgslPBDmGwoeNVIzplFoKpunRa-sWDrTwCLcB/s1600/2016-06-13%2B10.59.07.jpg)</div><div class="separator" style="clear: both; text-align: center;">使用全景相機拍攝 360 照片或影片</div>有的設備如 LG 360 CAM，目前 Facebook 還無法辨認（更新：現直接上傳 360 照片已經可以正確辨認），所以只能用一些繞過的方法。朋友傳來[這篇教學文章](http://360rumors.blogspot.co.uk/2016/06/facebook-posts-detailed-instructions.html)。根據這篇文章的說明，我做了些嘗試與改進，並最終成功透過手機上傳360照片。<p>1. 首先準備一張 360 照片 （我用的是 LG 360 CAM）</p><p><a href="https://3.bp.blogspot.com/-vYbbKwCqZHU/V15VyI-P9ZI/AAAAAAAAELs/De5JfreicgM4iprWmEeRD74eIiqLdAzxwCLcB/s1600/2016-06-12%2B06.42.34.png" target="_blank" rel="noopener"><img src="https://3.bp.blogspot.com/-vYbbKwCqZHU/V15VyI-P9ZI/AAAAAAAAELs/De5JfreicgM4iprWmEeRD74eIiqLdAzxwCLcB/s640/2016-06-12%2B06.42.34.png" alt=""></a></p><p>2. 接著從應用商店取得可以編輯照片 Exif 資訊的應用。我選的是免費的 Photo Exif editor。3. 從照片 (Gallery, Photo) App 預覽到想要修改的 360 照片，選擇分享（Share）到 Photo Exif editor。 4. 照著修改 以下欄位的值：</p><p>Camera maker: <strong>Ricoh <strong>（首字母大寫）</strong>**Camera model: <strong>RICOH THETA S</strong></strong> **（全大寫）</p><p><a href="https://1.bp.blogspot.com/-Oj_TnMi4gOo/V15V-GIQGqI/AAAAAAAAEL8/Y8mpHvEJ6ekCWxQpQoTaMo13_mO0uiyhwCLcB/s1600/2016-06-12%2B06.42.55.png" target="_blank" rel="noopener"><img src="https://1.bp.blogspot.com/-Oj_TnMi4gOo/V15V-GIQGqI/AAAAAAAAEL8/Y8mpHvEJ6ekCWxQpQoTaMo13_mO0uiyhwCLcB/s640/2016-06-12%2B06.42.55.png" alt=""></a>5. 最後再透過相片軟體選擇分享到 Facebook 即可。如果成功，可以看到相片下角出現球狀 360 影片圖示。</p><p><a href="https://3.bp.blogspot.com/-QlivFrXBAH8/V15cHOpDbjI/AAAAAAAAEMQ/ArxXPl95BKUXm1koRXcVd9u8TJkoGr09gCLcB/s1600/2016-06-13%2B07.08.05.png" target="_blank" rel="noopener"><img src="https://3.bp.blogspot.com/-QlivFrXBAH8/V15cHOpDbjI/AAAAAAAAEMQ/ArxXPl95BKUXm1koRXcVd9u8TJkoGr09gCLcB/s640/2016-06-13%2B07.08.05.png" alt=""></a></p><p>我的觀察啦，360 相機使用上相當方便，按一下拍攝鈕啟動相機，再按一下就拍張照。長按就開始拍攝影片。</p><p>拍照時只要把相機往上平舉，就整個環境都拍到了（一個小技巧：拍攝時將相機舉在頭上就不會拍到自己），不需要什麼特別的攝影技巧。這對只是想分享當下體驗的我相當適合。這種特性也很適合團體拍照。這樣方便的新品，加上 Facebook 這樣容易分享相片的環境，相信很快 360 相機就會流行起來。 目前拍 360 相片時，附近的人其實並沒有意識到我在幹什麼，但其實附近的人也是全部入鏡的。使用 360 相機時要如何兼顧隱私的保護也會是一個議題。</p>]]></content>
      
      
        <tags>
            
            <tag> 360photo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Setup a skype chatbot on Respberry pi with 4GB SD Card</title>
      <link href="/2016/04/07/Setup-a-skype-chatbot-on-Respberry-pi-with-4GB-SD-Card/"/>
      <url>/2016/04/07/Setup-a-skype-chatbot-on-Respberry-pi-with-4GB-SD-Card/</url>
      <content type="html"><![CDATA[<p>It’s a small challenge and fun to setup a chatbot on a small device with restrained resource.</p><p>Here’s the instruction to setup a chatbot on Respberry pi with 4GB SD Card.</p><h3 id="download-respbian-lite">Download respbian lite</h3><p>We need respbian lite because normal Respbian took more than 4GB space. If you have 8GB or larger SD Card, normal Respbian works fine for you.</p><p>You can download them from <a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="noopener">https://www.raspberrypi.org/downloads/raspbian/</a></p><h3 id="flash-image-to-sdcard">Flash image to sdcard</h3><p>I did it in Mac with diskutil. You can check the install guide from <a href="https://www.raspberrypi.org/documentation/installation/installing-images/README.md" target="_blank" rel="noopener">https://www.raspberrypi.org/documentation/installation/installing-images/README.md</a> for other platforms.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ diskutil list</span><br><span class="line">/dev/disk0 (internal, physical):</span><br><span class="line">...</span><br><span class="line">/dev/disk1 (internal, virtual):</span><br><span class="line">...</span><br><span class="line">/dev/disk2 (internal, virtual):</span><br><span class="line">... 2: Linux 3.8 GB disk2s2</span><br><span class="line"></span><br><span class="line">$ diskutil unmountDisk disk2</span><br><span class="line">$ sudo dd bs=1m <span class="keyword">if</span>=2016-03-18-raspbian-jessie-lite.img of=/dev/rdisk2</span><br></pre></td></tr></table></figure><h3 id="login-to-respbian">Login to respbian</h3><p>Respbian lite does not provide desktop environment, so we’ll do everything with command line.</p><p>Insert SDCard, bootup and login into respbian with</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name: pi</span><br><span class="line">password: raspberry</span><br></pre></td></tr></table></figure><p>Refer from <a href="http://elinux.org/RPi_Distributions#Raspbian" target="_blank" rel="noopener">http://elinux.org/RPi_Distributions#Raspbian</a></p><h3 id="install-node-and-redis">Install node and redis</h3><p>Refer from <a href="https://nodejs.org/en/download/package-manager/" target="_blank" rel="noopener">https://nodejs.org/en/download/package-manager/</a></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ `curl -sL https://deb.nodesource.com/setup_5.x &gt; script</span><br><span class="line">$ chmod 755 script</span><br><span class="line">$ sudo -E ./script</span><br><span class="line">$ sudo apt-get install -y nodejs build-essential redis-server</span><br><span class="line">$ node -v</span><br><span class="line">v5.10.1</span><br></pre></td></tr></table></figure><h3 id="install-webbybot">Install webbybot</h3><p>Webbybot is the rewrite of hubot from coffeescript to ES6, its will be more maintainable in the future.</p><p>In respbian lite, the git is not pre-installed, so we need install <strong>git-core</strong> from <strong>apt-get</strong> as well.</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install git-core</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/gasolin/webby-template pibot</span><br><span class="line">$ <span class="built_in">cd</span> pibot</span><br><span class="line">$ npm install</span><br><span class="line">$ ./bin/webby</span><br><span class="line">webby&gt; webby <span class="built_in">test</span></span><br><span class="line">webby&gt; **pong**</span><br></pre></td></tr></table></figure><h3 id="deploy-on-messengers">Deploy on messengers</h3><p>Check Workable adapters section to install your bot onto telegram, facebook messenger, or skype <a href="https://github.com/gasolin/webby-template#workable-adapters" target="_blank" rel="noopener">https://github.com/gasolin/webby-template#workable-adapters</a></p><p>Let’s take skype for example. First you need sign up an skype account, then put the username/password on to <code>.env</code> file.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi .env</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HUBOT_SKYPE_USERNAME=name</span><br><span class="line">HUBOT_SKYPE_PASSWORD=password</span><br></pre></td></tr></table></figure><p>Then install hubot-skyweb adapter and switch the core to webbybot</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install hubot-skyweb</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi node_module/hubot-skyweb/src/skyweb.coffee</span><br></pre></td></tr></table></figure><p>replace require ‘hubot’ to ‘webbybot’. Then run</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./bin/webby -a skyweb</span><br></pre></td></tr></table></figure><p>You are good to go! You can add new skills on your pibot by following <a href="https://github.com/gasolin/webbybot/#add-plugins" target="_blank" rel="noopener">https://github.com/gasolin/webbybot/#add-plugins</a> which is same as hubot, and create your own plugin to control the respberry pi <a href="https://github.com/gasolin/webbybot#write-your-own-plugin" target="_blank" rel="noopener">https://github.com/gasolin/webbybot#write-your-own-plugin</a>.</p><p>Have fun!</p>]]></content>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> fun </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>How we ported Hubot from Coffeescript to ES6</title>
      <link href="/2016/03/14/How-we-ported-Hubot-from-Coffeescript-to-ES6/"/>
      <url>/2016/03/14/How-we-ported-Hubot-from-Coffeescript-to-ES6/</url>
      <content type="html"><![CDATA[<p><a href="https://www.flickr.com/photos/franzbrandtwein/210333714/in/photolist-jA1Tm-7zsdd5-c3S9RY-6nV3Rp-96h4Vx-of3ttt-38gqh7-gmHXQv-dVEbJF-7E2T3H-HtFB3-robohy-druZRm-nrF4vh-HtFAN-7Dk3uW-pkMp7E-qpn51r-67WHcz-dmkogt-AkVdM-951oFH-af6bdQ-igcWis-bw1gLG-6ZkGsP-r3KjtA-aojgSy-qXYEst-ckHzAN-97rv7G-qfi5f6-bu6G96-4mdWDR-62fyWi-qgcVh4-89o3px-8AKiYq-Xb2wh-5K91Q3-rwerig-i19QiK-7jGYc7-2Pc3VK-bNBoUp-9RDmqK-9iEDUt-kb1z7K-dwYP4H-pN2djS" title="Hubo" target="_blank" rel="noopener"><img src="https://farm1.staticflickr.com/91/210333714_cccff3a76f.jpg" alt="Hubo"></a><script async charset="utf-8" src="//embedr.flickr.com/assets/client-code.js"></script></p><p>We (Fred Lin &amp; Ray Lin) have ported Github’s popular chat robot framework '<a href="https://github.com/github/hubot" target="_blank" rel="noopener">Hubot’</a> from Coffeescript to plain Javascript with ES6 features. Currently I name it <a href="https://github.com/gasolin/webbybot" target="_blank" rel="noopener"><strong>webbybot</strong></a> to denote ES6 version of hubot, to better test the port result and avoid the naming confusion with the original hubot.</p><p>Now webbybot is fully functional and still support all coffeescript written plugins.If you have an existing bot generated by  hubot-generator, you can install webbybot via <code>npm install webbybot</code> command, follow <a href="https://github.com/gasolin/webbybot#how-to-replace-hubot-to-webbybot" target="_blank" rel="noopener">with simple instruction</a> and see your bot works smoothly with webbybot core.</p><p>(For experienced developer, the instruction guide you to replace script in  generated ‘/bin’ folder from ‘hubot’ to ‘webby’. And change the adapter  library import from ‘hubot’ to ‘webbybot’.)</p><p>As time goes to 2016, there’re less reason to use <a href="http://coffeescript.org/" target="_blank" rel="noopener">Coffeescript</a> instead of standard ES6 Javascript. During the porting we do learned something that might helpful for your projects.</p><p><strong>1. Use npm script directly instead of gulp or grunt</strong></p><p>With npm we can define some scripts directly in the ‘script’ attribution of ‘package.json’ file. Webbybot use ‘npm run build’ command to compile ES6 to plain javascript via <a href="http://babeljs.io/" target="_blank" rel="noopener">Babel</a>. Do style checking via ‘npm run lint’ command.</p><p><strong>2. Use babel directly instead of webpack</strong></p><p>At the beginning we count on <a href="https://webpack.github.io/" target="_blank" rel="noopener">webpack</a>’s babel-loader to convert ES6 to plain javascript. Alas its a beginning of ‘Try and Error’ journey. Webpack is originally designed for front-end packaging and works very well on that purpose. But for backend program like webbybot that feature is not important for us. Webpack also bring ‘require’ keyword to the front-end, but its not suit for backend program that depends on dynamic import. As a framework, hubot heavily counts on NODE require to load plugins. Webpack treat all ‘require’ as its keyword and try hard in vain to find external modules from packed files.</p><p>We tried several ways to detour these side effects, and finally replaced the full webpack stack with <a href="https://github.com/gasolin/webbybot/blob/master/package.json#L10" target="_blank" rel="noopener">one line npm build script</a>. Now its easier to debug and no hacks needed in source code.</p><p><strong>3. return or not return, its the question</strong></p><p>We use the  “Try Coffeescript” utility provide form <a href="http://coffeescript.org/" target="_blank" rel="noopener">Coffeescript</a> official site, which you can paste Coffeescript the page will convert the source to Javascript instantly.The converted code is… not all pretty for human read, and all converted functions will contain a return statement even its unnecessary. It needs check by hand.</p><p><strong>4. test cases matter</strong></p><div dir="ltr">Hubot itself contains good coverage of unit tests. So we are able to test one ported script file with one ported test file when we start the porting. The unit test files contain great number of redundant return sentences when convert from coffeescript.</div><div dir="ltr"></div><p><strong>5. class and super</strong></p><p>Hubot use Class syntax from Coffeescript。Thanksfully ES6 support the Class syntax, which is a bit different from Coffeescript. You can check how to use Class and super on <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="noopener">MDN.</a></p><p><strong>6. Default + rest + spread</strong></p><p>Hubot contain several syntax like ‘reply(strings…)’. The syntax ‘strings…’ in Coffeescript is correspondent to “…strings” in ES6（The order of ‘…’ is reversed）.’…strings’ denotes an array and I feel its a bit hard to figure out when to expand it or not.</p><p><strong>7. for…of instead of for…in</strong></p><p>To use for…in loop in ES6, we need add ‘hasOwnProperty’ check to make sure inherited property are not looped. Or we can rewrite for…in loop in Coffeescript to forEach iteration. Though there are some cases that need ‘break’ or ‘return’ from a loop.</p><p>Now we use ES6 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of" target="_blank" rel="noopener">for…of loop</a> in Webbybot to replace forEach and for…in loop. You need wrap object with Object.keys syntax to iterate with object. ex: <code>for (let item of Object.keys(TargetObj)) {...}</code>.</p><p><strong>8. Object.assign instead of Extend</strong></p><p>We can use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener">Object.assign</a> to extend a object without handmade extend function or lodash!</p><p><strong>9. Do you know hubot also <a href="https://github.com/gasolin/webbybot/blob/master/src/robot.js#L404" target="_blank" rel="noopener">support write plugin with plain javascript</a>?</strong></p><p>Learning how chat bot works is the main reason we start porting hubot to ES6!A simple plain javascript plugin could be as easy as: (src/simple.js)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; module.exports = function(robot) &#123;</span><br><span class="line">&gt; &amp;nbsp; robot.respond(/(hello)/i, function(res) &#123;</span><br><span class="line">&gt; &amp;nbsp; &amp;nbsp; res.send(&apos;hi&apos;); </span><br><span class="line">&gt; &amp;nbsp; &#125;);</span><br><span class="line">&gt; &#125;You can put it in generated plugin folder and it will just work.</span><br></pre></td></tr></table></figure><p>I’ve created a <a href="https://github.com/github/hubot/issues/1138" target="_blank" rel="noopener">ticket on hubot issue list</a> to start a discussion if hubot would like to go with ES6 in its future version.</p><p>The webbybot source is at<a href="https://github.com/gasolin/webbybot" target="_blank" rel="noopener"> https://github.com/gasolin/webbybot</a></p><p>Do you have a project ported from coffeescript to ES6? Welcome to drop by your thoughts.</p>]]></content>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>將聊天機器人框架 hubot 從 Coffescript 移植到 ES6</title>
      <link href="/2016/03/14/%E5%B0%87%E8%81%8A%E5%A4%A9%E6%A9%9F%E5%99%A8%E4%BA%BA%E6%A1%86%E6%9E%B6-hubot-%E5%BE%9E-Coffescript-%E7%A7%BB%E6%A4%8D%E5%88%B0-ES6/"/>
      <url>/2016/03/14/%E5%B0%87%E8%81%8A%E5%A4%A9%E6%A9%9F%E5%99%A8%E4%BA%BA%E6%A1%86%E6%9E%B6-hubot-%E5%BE%9E-Coffescript-%E7%A7%BB%E6%A4%8D%E5%88%B0-ES6/</url>
      <content type="html"><![CDATA[<p><a href="https://www.flickr.com/photos/franzbrandtwein/210333714/in/photolist-jA1Tm-7zsdd5-c3S9RY-6nV3Rp-96h4Vx-of3ttt-38gqh7-gmHXQv-dVEbJF-7E2T3H-HtFB3-robohy-druZRm-nrF4vh-HtFAN-7Dk3uW-pkMp7E-qpn51r-67WHcz-dmkogt-AkVdM-951oFH-af6bdQ-igcWis-bw1gLG-6ZkGsP-r3KjtA-aojgSy-qXYEst-ckHzAN-97rv7G-qfi5f6-bu6G96-4mdWDR-62fyWi-qgcVh4-89o3px-8AKiYq-Xb2wh-5K91Q3-rwerig-i19QiK-7jGYc7-2Pc3VK-bNBoUp-9RDmqK-9iEDUt-kb1z7K-dwYP4H-pN2djS" title="Hubo" target="_blank" rel="noopener"><img src="https://farm1.staticflickr.com/91/210333714_cccff3a76f.jpg" alt="Hubo"></a><script async charset="utf-8" src="//embedr.flickr.com/assets/client-code.js"></script></p><div dir="ltr">([English Version available here](http://blog.gasolin.idv.tw/2016/03/how-we-ported-hubot-from-coffeescript.html)）<p>用兩周多的時間，路路續續把原本用 <a href="http://coffeescript.org/" target="_blank" rel="noopener">Coffeescript</a> 撰寫的 <a href="https://github.com/github/hubot" target="_blank" rel="noopener">Hubot</a> 聊天機器人框架移植成使用到 ES6 特性的純 Javascript 版本。</p></div><div dir="ltr"><p></p></div><div dir="ltr">現在這個移植版本已經可供使用。移植後依然可以使用 Hubot 原來以 Coffeescript 撰寫的各種擴充套件(Plugins) 。</div><div dir="ltr"></div><div dir="ltr">[https://github.com/gasolin/webbybot](https://github.com/gasolin/webbybot)</div><div dir="ltr"></div><div dir="ltr">(目前的版本完全移植 Hubot 的功能，已開 [Issue](https://github.com/github/hubot/issues/1138#issue-138031128) 詢問 Hubot 是否有興趣 merge 回去，在此之前先放在自己的 webbybot repo 裡)</div><div dir="ltr">移植的動機之一是為了了解整個聊天機器人框架，為後續可能的修改打基礎。其二則是嘗試平常不常用到的ES6新特性。</div><div dir="ltr"></div><div dir="ltr">過去 Coffeescript 和 [Typescript](http://www.typescriptlang.org/) 等最終編譯成 Javascript 執行的語言，都走在 Javascript 之前，提供了許多語法上的新特性。但在 2015 年 Javascript 開始的新發佈規劃(一年一版)下，ES6(ES2015)已將 Coffescript 眾多特性都收編了。且現在透過 [Babel](http://babeljs.io/) 可以將 ES6 編譯成現有的 Javascript 直譯器能讀懂的語法。在這樣的趨勢下，過去開發者想為這些新特性多學一套語言的誘因就不再存在了。</div><div dir="ltr"></div><div dir="ltr">移植過程中採用的作法與遇到了一些坑，在此一一列出來。</div><div dir="ltr"></div><div dir="ltr">**1\. 不用 grunt gulp, 直接使用 npm script**</div><div dir="ltr"></div><div dir="ltr">在 package.json 裡可以直接在 "script" 屬性中定義一些要執行的腳本，例如 webbybot 透過 "npm run build" 來將 ES6 轉換成 Javascript 直譯器能讀懂的語法。用 “npm run lint" 來做 style check。</div><div dir="ltr"></div><div dir="ltr">**2\. 不用 webpack, 直接使用babel**</div><div dir="ltr"></div><div dir="ltr">移植之初決定使用 webpack 的 babel loader 來轉換 ES6，但這是一連串從「錯誤中學習」的開始。 webpack 支援使用 require 命令載入各種檔案，而且webpack 在轉換的過程中會將檔案打包成一份。但後端程式其實不太需要打包，而且 Hubot 作為一個框架，執行後從外部讀取 Plugin 是非常重要的功能。 使用 webpack 時，它會將程式中出現的 require 都視為它的 require，而嘗試從打包好的檔案中找到我們需要的外部 plugin，結果是徒勞的。當我們換用 npm script 直接呼叫 babel-cli 來打包，原來使用 webpack 時出現的諸多問題也都一併解決了。</div><div dir="ltr"></div><div dir="ltr">**3\. 該不該 return**</div><div dir="ltr"></div><div dir="ltr">在移植的過程中常用到的工具是 [Coffeescript](http://coffeescript.org/) 官網的 "Try Coffeescript" 分頁。可以即時將 Coffeescript 結果轉換成 Javascript。 但是真的把程式碼貼上去會發現， Coffeescript 所轉出來的 Javascript 所有的函式都會回傳值。需要手工一個個確認。</div><div dir="ltr"></div><div dir="ltr">**4\. test cases**</div><div dir="ltr"></div><div dir="ltr">Hubot 本身有很完整的單元測試。所以每移植一支程式碼時，只要一併移植對應的單元測試，就可以捉對拿來直接測試。單元測試移植時出現最多該不該 return 的問題。</div><div dir="ltr"></div><div dir="ltr">**5\. class and super**</div><div dir="ltr"></div><div dir="ltr">Hubot 使用了很多 Coffeescript 的 Class 語法。Class 與 super 的用法在 [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes) 上可以找到相關教學。</div><div dir="ltr"></div><div dir="ltr">**6\. Default + Rest + Spread**</div><div dir="ltr"></div><div dir="ltr">Hubot 程式碼裡常常會出現諸如 reply(strings...) 的語法。Coffeescript 裡的"strings..."可以對應到ES6 的 "...strings"（...放置位置剛好相反）。"...strings" 代表的是一個陣列。在程式中有時要展開有時不用，其實頗令人苦惱。</div><div dir="ltr">**7\. 使用 for..of 替換 for.. in 迴圈**</div><div dir="ltr"></div><div dir="ltr">碰到 for..in 迴圈有幾種解法，最不會出錯的是將 Array iteration 改寫成 forEach。但是用 forEach ˇ的話無法在執行中使用 break/return 跳出是其缺點。其二是在 for..in 迴圈裡加入 hasOwnProperty 確認不會跑到無關的 function。在 Webbybot 的第二版中已使用 ES6支援的 [for..of 迴圈](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) 來取代 forEach 和 for..in 迴圈。由於 for..of 迴圈只支援 iteratable ，不支援一般 Object，所以碰到要對 Object 跑迴圈時可以在 Object 外包一層 Object.keys，例如 `for (let item of Object.keys(TargetObj)) {...}`。</div><div dir="ltr">**8\. 使用 Object.assign 替換 Extend**<p>要擴展一個物件的功能不用再用 lodash 或是自己寫 extend 函式，直接用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener">Object.assign</a> 吧。</p></div><div dir="ltr">以上是移植過程中碰上的問題。感謝同事 Ray Lin 一起幫忙完成這次的移植。</div><div dir="ltr"></div><div dir="ltr">現在 Webbybot (Hubot ES6 port) 整套都可以用 Javascript 寫了，歡迎試用或上 Patch 喔。</div><div dir="ltr">[https://github.com/gasolin/webbybot](https://github.com/gasolin/webbybot)</div><div dir="ltr"></div>]]></content>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>人生如棋？或其實人生更像俄羅斯方塊</title>
      <link href="/2016/02/08/%E4%BA%BA%E7%94%9F%E5%A6%82%E6%A3%8B%EF%BC%9F%E6%88%96%E5%85%B6%E5%AF%A6%E4%BA%BA%E7%94%9F%E6%9B%B4%E5%83%8F%E4%BF%84%E7%BE%85%E6%96%AF%E6%96%B9%E5%A1%8A/"/>
      <url>/2016/02/08/%E4%BA%BA%E7%94%9F%E5%A6%82%E6%A3%8B%EF%BC%9F%E6%88%96%E5%85%B6%E5%AF%A6%E4%BA%BA%E7%94%9F%E6%9B%B4%E5%83%8F%E4%BF%84%E7%BE%85%E6%96%AF%E6%96%B9%E5%A1%8A/</url>
      <content type="html"><![CDATA[<p>前陣子在 Medium 上看到<a href="https://medium.com/@TorBair" target="_blank" rel="noopener"> Tor Bair</a> 寫的 <a href="https://medium.com/life-learning/your-life-is-tetris-stop-playing-it-like-chess-4baac6b2750d#.uhonynsf7" target="_blank" rel="noopener">Your Life is Tetris, Stop playing it like Chess</a>, 談到作者認為俄羅斯方塊比起棋局更接近人生。</p><p>棋局是種非贏即輸的零和遊戲，而俄羅斯方塊則是不斷重複，幾乎不可能獲得最終勝利的遊戲。</p><p>作者的論點如下:</p><p>1. 人生中你唯一的對手是你自己</p><p>真實的人生遊戲是內化的，而不是靠向外找尋對手或打敗大魔王來獲取積分。</p><p>2. 人生中，事情不會變得更難，只會變得更快</p><p>3. 人生中，你無法控制接下來會發生什麼</p><p>你只知道下一個拿到的方塊是什麼，你只能活在當下，試著組織起最好的結果。</p><p>4. 人生中，沒有人告訴你什麼時候你贏了</p><p>不是為了贏而遊戲，而是為了樂趣而遊戲。</p><p>“人生如俄羅斯方塊”，實在是很有趣的人生觀阿!</p>]]></content>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2015完食的書</title>
      <link href="/2016/01/03/2015%E5%AE%8C%E9%A3%9F%E7%9A%84%E6%9B%B8/"/>
      <url>/2016/01/03/2015%E5%AE%8C%E9%A3%9F%E7%9A%84%E6%9B%B8/</url>
      <content type="html"><![CDATA[<p><a href="http://blog.gasolin.idv.tw/2013/12/blog-post.html">2013</a>，<a href="http://blog.gasolin.idv.tw/2015/01/2014.html">2014</a>年都曬過書架，今年繼續獻曝。（今年能紀錄的共讀 115 本，23539頁），63本是電子書（54%），比例首次超過實體書。不過這也許是因為更多原本線上的小說也出了實體書，讓我也得以紀錄下來的關係？</p><p>來曬一下今年看過的書，順便從中推薦些好書（由近至遠）</p><div class="separator" style="clear: both; text-align: center;">[![](http://4.bp.blogspot.com/-QaQ1mJd9Blc/VolAK9mtA9I/AAAAAAAAEB0/-HghPRzsK7c/s400/2016-01-03%2B23-36-59%2B%25E7%259A%2584%25E8%259E%25A2%25E5%25B9%2595%25E6%2593%25B7%25E5%259C%2596.png)](http://4.bp.blogspot.com/-QaQ1mJd9Blc/VolAK9mtA9I/AAAAAAAAEB0/-HghPRzsK7c/s1600/2016-01-03%2B23-36-59%2B%25E7%259A%2584%25E8%259E%25A2%25E5%25B9%2595%25E6%2593%25B7%25E5%259C%2596.png)</div><p>今年的開始似乎是從 Remote Work (中國譯做 重來2) 開始，看看知名團隊如何遠端工作還蠻新鮮的。</p><p><a href="http://www.anobii.com/books/%E5%9C%98%E9%9A%8A%E4%B9%8B%E7%BE%8E/9789862763834/01bec6368eddaffedb/" target="_blank" rel="noopener">團隊之美</a><br>讓我觸動最深的一句話是：「好工具的關鍵不是說不再需要人們，而是讓人們更快樂。」</p><p><a href="http://www.anobii.com/books/%E7%9F%BD%E8%B0%B7%E4%B9%8B%E7%81%AB/011bbad6661a3c2a05/" target="_blank" rel="noopener">矽谷之火</a><br>全本在 kindle 上看完的矽谷歷史書，</p><p>「<span class="short_text" id="result_box" lang="zh-TW"><span title="西部人认为自己是一往无前的牛仔，失败对于他们来说，不过是一种更快速的获取经验的途径罢了。">西部人認為自己是一往無前的牛仔，失敗對於他們來說，不過是一種更快速的獲取經驗的途徑罷了。</span></span>」</p><p>看那些媒體沒告訴我們的個人電腦史，看那些湮沒在時間中，對個人電腦發展留下貢獻的人們。相當精彩</p><p>之後看的 <a href="http://www.anobii.com/books/%E9%BB%91%E5%AE%A2%E5%88%97%E5%82%B3/9789862764633/01e878decc7781a7d8/" target="_blank" rel="noopener">黑客列傳</a> 也還可以，沒這本驚豔。</p><div class="separator" style="clear: both; text-align: center;">[![](http://2.bp.blogspot.com/-zzcjSqUHvb4/VolCTwYoPlI/AAAAAAAAECA/NNl5K-qfhdE/s400/2016-01-03%2B23-43-46%2B%25E7%259A%2584%25E8%259E%25A2%25E5%25B9%2595%25E6%2593%25B7%25E5%259C%2596.png)](http://2.bp.blogspot.com/-zzcjSqUHvb4/VolCTwYoPlI/AAAAAAAAECA/NNl5K-qfhdE/s1600/2016-01-03%2B23-43-46%2B%25E7%259A%2584%25E8%259E%25A2%25E5%25B9%2595%25E6%2593%25B7%25E5%259C%2596.png)</div><p>食戟之靈<br>無論是作者或繪者都超認真地構思與呈現符合每個選手風格的料理</p><p><a href="http://www.anobii.com/books/%E8%90%AC%E6%9B%86%E5%8D%81%E4%BA%94%E5%B9%B4/9789578876019/0096082bd3cbecc848/" target="_blank" rel="noopener">萬曆十五年</a><br>禁得起時間考驗，已出版經年的書，讀來還是精彩</p><p><a href="http://www.anobii.com/books/%E9%A0%82%E5%B0%96%E6%A5%AD%E5%8B%99%E5%93%A1%E9%83%BD%E5%9C%A8%E7%94%A8%E7%9A%843T%E7%AD%86%E8%A8%98%E8%A1%93/9789862352557/014c403d32d3210a10/" target="_blank" rel="noopener">頂尖業務員都在用的3T筆記術</a></p><p>雖然標題聳動，但內容卻意外地紮實。</p><div class="ajax_ugc_full ajax_hide" style="display: block;">書中講到業務要做好的兩個要件：  **思考**：不斷思考「接下來該做什麼？怎麼做會比較好？」</div><div class="ajax_ugc_full ajax_hide" style="display: block;">**行動**：採取確切行動。</div><div class="separator" style="clear: both; text-align: center;">[![](http://1.bp.blogspot.com/-98zH-7eK8PA/VolDTLqk8tI/AAAAAAAAECM/B2pbpi8hr2A/s400/2016-01-03%2B23-50-17%2B%25E7%259A%2584%25E8%259E%25A2%25E5%25B9%2595%25E6%2593%25B7%25E5%259C%2596.png) ](http://1.bp.blogspot.com/-98zH-7eK8PA/VolDTLqk8tI/AAAAAAAAECM/B2pbpi8hr2A/s1600/2016-01-03%2B23-50-17%2B%25E7%259A%2584%25E8%259E%25A2%25E5%25B9%2595%25E6%2593%25B7%25E5%259C%2596.png)</div><div class="separator" style="clear: both; text-align: left;">和小朋友一起讀童書其實很有趣。當一本書翻多遍時，你可以從中找到許多觀察與講述的方法。</div><div class="separator" style="clear: both; text-align: center;">[![](http://2.bp.blogspot.com/-LwgoCILVD6g/VolDsDh06SI/AAAAAAAAECU/aHFF2bM0fFE/s400/2016-01-03%2B23-51-52%2B%25E7%259A%2584%25E8%259E%25A2%25E5%25B9%2595%25E6%2593%25B7%25E5%259C%2596.png)](http://2.bp.blogspot.com/-LwgoCILVD6g/VolDsDh06SI/AAAAAAAAECU/aHFF2bM0fFE/s1600/2016-01-03%2B23-51-52%2B%25E7%259A%2584%25E8%259E%25A2%25E5%25B9%2595%25E6%2593%25B7%25E5%259C%2596.png)</div><p><a href="http://www.anobii.com/books/%E5%BE%9E0%E5%88%B01/9789862419533/01556708753fb327ce/" target="_blank" rel="noopener">從0到1</a></p><p>「今天的任務是找到獨一無二的方法創造新事物，不只讓未來變得不一樣，而且要更好，所以我們要從0到1。最重要的第一步是自己獨立思考。唯有重新看待世界，像古人首次見到它那樣覺得新鮮古怪，我們才能重新創造，並將更好的未來留給後世。」</p><p>我們已經漸漸實現了過去所想像的未來。現在需要的，是從過去的經驗中，尋找出我們對下個未來的想像。</p><p><a href="http://www.anobii.com/books/%E5%85%88%E8%AE%93%E8%8B%B1%E9%9B%84%E6%95%91%E8%B2%93%E5%92%AA/9789868980266/01b4452dd6382b5ed6/" target="_blank" rel="noopener">先讓英雄救貓咪</a></p><p>之前看電影類yy小說時反覆被提到的編劇聖經</p><p>一個人的會議時間<br>我還是頗愛看個人時間管理相關的書</p><div class="separator" style="clear: both; text-align: center;">[![](http://2.bp.blogspot.com/-doF3yxuYalo/VolFzg87jiI/AAAAAAAAECg/picjlAuloqA/s400/2016-01-04%2B00-00-56%2B%25E7%259A%2584%25E8%259E%25A2%25E5%25B9%2595%25E6%2593%25B7%25E5%259C%2596.png)](http://2.bp.blogspot.com/-doF3yxuYalo/VolFzg87jiI/AAAAAAAAECg/picjlAuloqA/s1600/2016-01-04%2B00-00-56%2B%25E7%259A%2584%25E8%259E%25A2%25E5%25B9%2595%25E6%2593%25B7%25E5%259C%2596.png)</div><p><a href="http://www.anobii.com/books/%E5%83%B9%E5%80%BC%E4%B8%BB%E5%BC%B5%E5%B9%B4%E4%BB%A3/9789863980605/01a2edb53458fce6d8/" target="_blank" rel="noopener">價值主張年代</a><br>Business Canvas 作為經常被提及與使用的工具，這本書其實不太好讀</p><p>今年應該會找日本作者寫的「圖解獲利世代」 看看。</p><p><a href="http://www.anobii.com/books/%E5%A4%B1%E6%8E%A7/9787513300711/01de5511185a555c58/" target="_blank" rel="noopener">失控</a></p><p>1980年的大部頭舊書，把人與科技合在一起，當作一個有機生物體來觀察它的發展的想法值得思考。我們現在把手機，Siri或運用網路的能力視為人的一部分，還能看到個體間更大的差異。</p><p><a href="http://www.anobii.com/books/%E6%B2%B3%E5%9C%96%E6%B4%9B%E6%9B%B8%E5%89%8D%E5%82%B3/9789862727355/01e4d23f398bd4e8fe/" target="_blank" rel="noopener">河圖洛書前傳</a><br>提到中國上古文化裡其實是有數位基因的，不論真實性如何，就算當作小說看，這樣的立論也很有趣。</p><p><a href="http://www.anobii.com/books/%E8%A8%88%E6%99%82%E5%99%A8%E8%AE%80%E6%9B%B8%E6%B3%95/9789866151651/017c544b43968941fe/" target="_blank" rel="noopener">計時器讀書法</a><br>15min 一段專注力的週期 + 3min 最後的跳躍。<br>保持非整數時間，讓人有強迫繼續補完的動力，不強制休息時間，讓實行起來更不困難。<br>都是高明的心理技巧。</p><p>這本小書一看完，馬上將手機的倒數計時器設成18分鐘。</p><div class="separator" style="clear: both; text-align: center;">[![](http://3.bp.blogspot.com/-I7PCGBObQYM/VolIW_S1l6I/AAAAAAAAECs/oTvnoQUijcs/s400/2016-01-04%2B00-11-49%2B%25E7%259A%2584%25E8%259E%25A2%25E5%25B9%2595%25E6%2593%25B7%25E5%259C%2596.png)](http://3.bp.blogspot.com/-I7PCGBObQYM/VolIW_S1l6I/AAAAAAAAECs/oTvnoQUijcs/s1600/2016-01-04%2B00-11-49%2B%25E7%259A%2584%25E8%259E%25A2%25E5%25B9%2595%25E6%2593%25B7%25E5%259C%2596.png)</div><p><a href="http://www.anobii.com/books/%E4%B8%8D%E8%B3%A3%E6%9D%B1%E8%A5%BF%EF%BC%8C%E8%B3%A3%E9%AB%94%E9%A9%97/9789862418505/01759dee9b65b0e846/" target="_blank" rel="noopener">不賣東西，賣體驗</a><br>「這名女性真正想要的並不是卡地亞Tank Francaise腕錶這項「商品」，她要的是在聖誕夜，男朋友陪她到銀座卡地亞總店，在裝潢華麗的店裡，接受女店員恭敬的服務，買下女店員用戴著白手套的手，從盒子裡取出的Tank Francaise腕錶的那份’體驗’。」</p><p>光看這段就有顛覆三觀之效</p><p><a href="http://www.anobii.com/books/%E7%82%BA%E4%BB%80%E9%BA%BC%E8%81%B0%E6%98%8E%E4%BA%BA%E9%83%BD%E7%94%A8%E6%96%B9%E6%A0%BC%E7%AD%86%E8%A8%98%E6%9C%AC%EF%BC%9F/9789861753805/017762dcc8455ff042/" target="_blank" rel="noopener">為什麼聰明人都用方格筆記本？</a><br>看了後腦波很弱地馬上去買了方格筆記本來用。目前使用尚稱順暢。</p><p><a href="http://www.anobii.com/books/%E6%9C%89%E6%B2%92%E6%9C%89XXX%E7%9A%84%E5%85%AB%E5%8D%A6/9789869147644/01a90ff646c6a6798f/" target="_blank" rel="noopener">有沒有XXX的八卦</a><br>書名不正經，但內容出乎意料的充實</p><p><a href="http://www.anobii.com/books/SCRUM/9789863207146/014dea631355a32031/" target="_blank" rel="noopener">SCRUM </a><br>將敏捷開發法用在各行各業。</p><p>有人說過「所有的模型都是錯的，但有些比較好用(All models are wrong; but some are useful)」，這本有詳細地講解目前科技圈最愛說自己有在用的 SCRUM 開發方法。</p><p>小結：</p><p>21世紀，書也已經不是唯一獲取知識的方式。也許該綜合一下，若有方便的方法，也應該把看過的電影/按贊過的Youtube影片/SlideShare等也列一列。</p>]]></content>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Setup Firefox OS (Gaia) on Ubuntu 15.10</title>
      <link href="/2015/11/13/Setup-Firefox-OS-Gaia-on-Ubuntu-15-10/"/>
      <url>/2015/11/13/Setup-Firefox-OS-Gaia-on-Ubuntu-15-10/</url>
      <content type="html"><![CDATA[<p>I got my Dell XPS 13 (9343) for a while and decide to install Ubuntu 15.10 as duel boot.</p><p>By following the <a href="http://hgdev.co/install-ubuntu-15-10-on-the-dell-xps-13-9343-2015-a-complete-guide/" target="_blank" rel="noopener">guide</a> its pretty easy to get a Ubuntu environment.To setup my daily develop environment, I take the <a href="https://github.com/gasolin/foxbox/blob/master/scripts/setup_ubuntu_14_04.sh" target="_blank" rel="noopener">foxbox setup script</a> for 14.04 and everything works fine.</p><p>So for windows user who want develop FirefoxOS gaia with real device, I recommend you try <a href="https://github.com/gasolin/foxbox/" target="_blank" rel="noopener">foxbox</a> first. If you have more commitment, install the Ubuntu. With duel boot you can keep windows and have a more developer friendly environment to develop connecting devices.</p>]]></content>
      
      
        <tags>
            
            <tag> FirefoxOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Quick Settings Enhancement Addon</title>
      <link href="/2015/10/14/Quick-Settings-Enhancement-Addon/"/>
      <url>/2015/10/14/Quick-Settings-Enhancement-Addon/</url>
      <content type="html"><![CDATA[<p>As the Firefox OS Settings Peer, I still feel its not efficient to toggle everything in Settings, because it needs too many steps such as: 1. Open Settings app, 2. Find proper item, which may located in sub panels, 3. Do the action with that setting.</p><p>During hackthon in Taipei last month, Yifan and I made the Quick  Settings Enhancement Addon, and now its available on marketplace (within  the :debug mode).</p><p>How it looks like?</p><div class="separator" style="clear: both; text-align: center;">[![](http://i.imgur.com/PVibrhx.png)](http://i.imgur.com/PVibrhx.png)</div>The  addon add plenty of Settings switch(NFC, Internet Sharing,  Lock Orientation, Battery Saving Mode, Geolocation, Enable USB Storage),  Settings shortcut (Developer panel configs), Power menu shortcut  (Silence Incomming Calls) and.....the **Flashlight** to quick settings menu!<p>We  also found it will take a lot of estate of your utility tray, so FYR  we’d propose a <code>at most 2 clicks</code> mockup to handle those quick settings.</p><div class="separator" style="clear: both; text-align: center;">[![](http://i.imgur.com/iQFoj9l.png)](http://i.imgur.com/iQFoj9l.png)</div>The codebase is at [https://github.com/gasolin/<wbr>fxos-quick-settings](https://github.com/gasolin/fxos-quick-settings)Welcome to contribute.]]></content>
      
      
        <tags>
            
            <tag> FirefoxOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Node 版的 SimpleHTTPServer</title>
      <link href="/2015/10/02/Node-%E7%89%88%E7%9A%84-SimpleHTTPServer/"/>
      <url>/2015/10/02/Node-%E7%89%88%E7%9A%84-SimpleHTTPServer/</url>
      <content type="html"><![CDATA[<p>2008年的時候寫了篇<a href="http://blog.gasolin.idv.tw/2008/02/blog-post.html">如何在python上簡單開個web server</a>的文章，現在來個node版的：</p><blockquote><p>$ npm install -g http-server$ http-server -p 9000參考自<a href="http://stackoverflow.com/questions/12905426/what-is-a-faster-alternative-to-pythons-simplehttpserver" target="_blank" rel="noopener">StackOverflow</a>這篇文章。</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> webapp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Node 版的 SimpleHTTPServer</title>
      <link href="/2015/10/02/Node%20%E7%89%88%E7%9A%84%20SimpleHTTPServer/"/>
      <url>/2015/10/02/Node%20%E7%89%88%E7%9A%84%20SimpleHTTPServer/</url>
      <content type="html"><![CDATA[<p>2008年的時候寫了篇<a href="http://blog.gasolin.idv.tw/2008/02/blog-post.html">如何在python上簡單開個web server</a>的文章，現在來個node版的：</p><blockquote><p>$ npm install -g http-server<br>$ http-server -p 9000</p></blockquote><p>參考自<a href="http://stackoverflow.com/questions/12905426/what-is-a-faster-alternative-to-pythons-simplehttpserver" target="_blank" rel="noopener">StackOverflow</a>這篇文章。</p>]]></content>
      
      
        <tags>
            
            <tag> webapp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>FoxBox 1.0, 讓你在一個小時內不痛安裝 Firefox OS 開發環境的設定工具</title>
      <link href="/2015/08/23/FoxBox-1-0-%E8%AE%93%E4%BD%A0%E5%9C%A8%E4%B8%80%E5%80%8B%E5%B0%8F%E6%99%82%E5%85%A7%E4%B8%8D%E7%97%9B%E5%AE%89%E8%A3%9D-Firefox-OS-%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83%E7%9A%84%E8%A8%AD%E5%AE%9A%E5%B7%A5%E5%85%B7/"/>
      <url>/2015/08/23/FoxBox-1-0-%E8%AE%93%E4%BD%A0%E5%9C%A8%E4%B8%80%E5%80%8B%E5%B0%8F%E6%99%82%E5%85%A7%E4%B8%8D%E7%97%9B%E5%AE%89%E8%A3%9D-Firefox-OS-%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83%E7%9A%84%E8%A8%AD%E5%AE%9A%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<p><a href="https://www.flickr.com/photos/28289659@N02/10351341274/in/photolist-gLHk8h-6APwhj-4YvKGJ-ihTTs-qZVwX-fuUaX-4ASwRM-9oMyXk-dSR5cF-48JtWV-4vdwk-jjtzT-gGH6oD-6bKC3Y-3Q3qEf-ca5nA-oX9UA-5Ru4vz-5QspRU-oX9UD-WjG4s-4XyTBp-cvqpf-6zQq15-yyNQz-neBzbT-JUMsA-xXPgM-64z6MY-7iQZE6-8qAQD-evarx-5pnwJx-b8G1-8FXLE7-9g9Cz-5AdgA8-9pWBQW-9emKCP-8xYpgz-6dfyXp-9zmfZR-PsAt-tDXdo-HLxuZ-8xYpdZ-8y2qLq-6BmmRm-5aKDea-2cxh9L" title="Here she is!!" target="_blank" rel="noopener"><img src="https://farm8.staticflickr.com/7323/10351341274_ded5f4d043.jpg" alt="Here she is!!"></a><script async charset="utf-8" src="//embedr.flickr.com/assets/client-code.js"></script></p><p>要開始開發 Firefox OS 的 Web 端（Gaia），並不像開發一般網站一樣那麼容易。在開始改網頁之前，通常要把相關的<a href="https://developer.mozilla.org/en-US/Firefox_OS/Building_and_installing_Firefox_OS" target="_blank" rel="noopener">開發文件</a>讀一遍/試一遍，才能順利把開發環境設定好。而把環境設定好可能已經花了半天時間，這時原本想要改程式的精力也所剩不多了。</p><p>去年有感於此，花了些時間整合了一套快速設定 Firefox OS 開發環境的工具「<a href="https://github.com/gasolin/foxbox" target="_blank" rel="noopener">FoxBox」</a>，透過 <a href="https://www.virtualbox.org/" target="_blank" rel="noopener">Virtualbox</a> 虛擬機與  <a href="https://www.vagrantup.com/" target="_blank" rel="noopener">vagrant</a> 自動化工具來達成自動部署 Gaia 的開發環境。最近把 <a href="https://github.com/gasolin/foxbox" target="_blank" rel="noopener">FoxBox</a> 基礎作業系統版本升級了一下（使用 Ubuntu 14.04LTS），在 Macbook 或 Ubuntu 桌面電腦上，只需用一個小時左右的時間，就可以自動安裝好整套開發環境。</p><h3 id="vagrant-vm-的優點">Vagrant + VM 的優點</h3><p>使用Vagrant搭配虛擬機（VMWare或免費的Virtualbox）的好處多多，其一是簡化了開發環境的需求，由於主流的作業系統（Windows，Mac，Ubuntu/RedHat）都支援虛擬機，透過在虛擬機上使用單一的作業系統，可以大幅簡化安裝指令。其二則是自動化安裝，透過 Vagrantfile 指定要執行的指令 （放在scripts資料夾下），最後跑出來的結果只有安裝成功一種。如果失敗了表示自動安裝的指令沒寫好，初級開發者不用在環境安裝時就強迫得學太多細節。其三是開發環境隔離，命令都跑在VM中，在之後開發或升級的過程中出現任何問題，隨時都可以重新建立一個乾淨的開發環境。</p><p>使用 <a href="https://github.com/gasolin/foxbox" target="_blank" rel="noopener">FoxBox</a> 這套開發環境設定工具，當其他人碰到問題時，也可以更容易地重現問題。</p><p>透過 Vagrant 設定，<a href="https://github.com/gasolin/foxbox" target="_blank" rel="noopener">FoxBox</a> 提供實體機與虛擬機共享檔案夾，並支援USB實機偵錯。</p><p>雖然開發環境隔離，但是<a href="https://github.com/gasolin/foxbox" target="_blank" rel="noopener"> FoxBox</a> 預設的設定即提供實體機與虛擬機共享檔案夾。裝好開發環境後，你依然可以使用目前作業系統上自己習慣的編輯器來修改程式碼，然後在VM中執行命令。</p><p><a href="https://github.com/gasolin/foxbox" target="_blank" rel="noopener">FoxBox</a> 預設也將 USB port 串接到 VM 中，所以在 VM 中也可以直接接收到實機的偵錯訊息 。</p><h3 id="設定的流程">設定的流程</h3><p>連上網路，在主機上執行以下命令</p><blockquote><p>$ git clone <a href="https://github.com/gasolin/foxbox.git" target="_blank" rel="noopener">https://github.com/gasolin/foxbox.git</a>$ cd foxbox$ ./configure.sh除了開始時需要指定網路介面卡，並輸入主機的密碼（用來和虛擬機共享檔案夾）外，其中大部分的流程都是自動化的。</p></blockquote><p>當VM跑起來後，登入VM（帳號/密碼為 vagrant/vagrant）並執行以下命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; $ gaia_init.sh</span><br><span class="line">&gt; $ cd gaia</span><br><span class="line">&gt; $ make`</span><br></pre></td></tr></table></figure><p>即可順利編譯好Firefox OS 的 Web 端（Gaia）程式碼囉！</p>]]></content>
      
      
        <tags>
            
            <tag> FirefoxOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JSDoc generator in Gaia</title>
      <link href="/2015/06/07/JSDoc-generator-in-Gaia/"/>
      <url>/2015/06/07/JSDoc-generator-in-Gaia/</url>
      <content type="html"><![CDATA[<iframe allowfullscreen frameborder="0" height="333" mozallowfullscreen="" msallowfullscreen="" oallowfullscreen="" src="https://www.flickr.com/photos/martino_/9737982315/in/photolist-fQvGSP-amDaFg-amG2rb-59b4Yy-5vWMzf-f8qaks-hxt2tZ-9vy7L8-hD4KYt-edj5U8-4GZkRV-edj3BF-oKVYK7-edpEGS-edjc8T-f8brp4-dm5RTi-7SGqv8-8cxsHY-991Tu5-hAXRh8-fgMMhj-jjR181-4EySgF-fwa9zL-cAtxiU-7HKgV-9VMUi1-h4tqKg-ej3JDk-azMMwP-8p6YBM-akKnga-91AQhf-2j7XBh-pGxPMD-bTBf44-mSJdMU-ixg1hh-jd1NvW-fvUZYz-fvUXbP-7kpHpC-91xGz8-91AQ7b-hD3SUB-tf8mBc-gYsCxY-j7WsYW-ixg9AZ/player/" webkitallowfullscreen="" width="500"></iframe><p>Last week I’ve <a href="https://groups.google.com/forum/#!topic/mozilla.dev.gaia/UI1uL7ukedo" target="_blank" rel="noopener">post</a> on dev-gaia to notice the change of JSDoc generator.</p><p>Now gaia’s jsdoc generator takes standard  jsdoc config format from each app’s jsdoc.json file. And app owner could  customize its look and feel if they prefer to do so.<a href="http://usejsdoc.org/about-configuring-jsdoc.html" target="_blank" rel="noopener">http://usejsdoc.org/about-<wbr>configuring-jsdoc.html</a></p><p>Here’s the working jsdoc for Firefox OS settings app <a href="http://gasolin.github.io/gaia/settings/" target="_blank" rel="noopener">http://gasolin.github.io/gaia/settings/ .</a></p><div class="separator" style="clear: both; text-align: center;">[![](http://4.bp.blogspot.com/-diJKPL8ynts/VXUCIo35OBI/AAAAAAAAD5k/JG59TzUcjHI/s400/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%2B2015-06-08%2B%25E4%25B8%258A%25E5%258D%258810.46.21.png)](http://4.bp.blogspot.com/-diJKPL8ynts/VXUCIo35OBI/AAAAAAAAD5k/JG59TzUcjHI/s1600/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%2B2015-06-08%2B%25E4%25B8%258A%25E5%258D%258810.46.21.png)</div><p>The trick is done by <a href="http://gulpjs.com/" target="_blank" rel="noopener">gulp</a> and shell commands, which can be apply on any other projects. Here’s how I did it.</p><p>First of all is install required packages</p><blockquote><p>$ npm install gulp gulp-shell jsdoc --save-devThen open <code>gulpfile.js</code> and add following scripts:</p></blockquote><blockquote><p>var gulp = require(‘gulp’);var shell = require(‘gulp-shell’);</p><p>gulp.task(‘jsdoc’, shell.task([  ‘./node_modules/jsdoc/jsdoc.js -c jsdoc.json’]));(It’s an simplified version because gaia contains 20+ web apps in it, so I add some tree-walking code to create bunch of gulp tasks. But basically its the same)The simplified version is now available for reuse in <a href="https://github.com/webapplate/webapplate/blob/master/gulpfile.js" target="_blank" rel="noopener">webapplate</a>.</p></blockquote><p>Bonus section:</p><p>Here’s how I upload jsdoc (<a href="http://gasolin.github.io/gaia/settings/" target="_blank" rel="noopener">http://gasolin.github.io/gaia/settings/</a> , <a href="http://gasolin.github.io/gaia/system/" target="_blank" rel="noopener">http://gasolin.github.io/gaia/system/</a>) to github gh pages.</p><p>Add another section in gulpfile.js with following script</p><blockquote><p>var gulp = require(‘gulp’);var ghPages = require(‘gulp-gh-pages’);</p><p>…</p><p>gulp.task(‘github’, [‘jsdoc’], function() {  return gulp.src(’./docs/*<em>/</em>’)    .pipe(ghPages());});Run <code>gulp github</code> command and the build tool will generate jsdoc and upload to github page automatically.</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> FirefoxOS </tag>
            
            <tag> webframework </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Javascript，征服世界是可能的嗎？</title>
      <link href="/2015/05/31/Javascript%EF%BC%8C%E5%BE%81%E6%9C%8D%E4%B8%96%E7%95%8C%E6%98%AF%E5%8F%AF%E8%83%BD%E7%9A%84%E5%97%8E%EF%BC%9F%20/"/>
      <url>/2015/05/31/Javascript%EF%BC%8C%E5%BE%81%E6%9C%8D%E4%B8%96%E7%95%8C%E6%98%AF%E5%8F%AF%E8%83%BD%E7%9A%84%E5%97%8E%EF%BC%9F%20/</url>
      <content type="html"><![CDATA[<iframe allowfullscreen frameborder="0" height="333" mozallowfullscreen="" msallowfullscreen="" oallowfullscreen="" src="https://www.flickr.com/photos/45105801@N00/3155765131/in/photolist-5NS82D-ndXzjY-4tx43p-7D9kWt-7R6Xja-rGcPhd-jDuDgs-qi74Jg-6dyo33-9gMi93-8ysTVT-cJsDz1-6GqHmM-4eM4Lx-5TNATX-hPumrP-mJmtqo-Dy7Vj-ifw27L-cSWwrN-5FA8cS-5kCHWk-oewDty-6VrrnL-aGMKQ6-6cCum8-fqcxCM-nDV5Uf-gRPYTf-oVKnsH-8sm4i-7DQd1m-tMFF6-oc7Mkp-r1tzm5-98tKJC-3izzBF-bZgYwW-tkjuP-rfPw3d-pCKTDs-cSWw6j-aePnVP-8rFCc5-4NEf9t-ctbu61-c3F1uh-cVGi8E-9weFPo-c2sJ3U/player/" webkitallowfullscreen="" width="500"></iframe>  <p>幾週前在 Modern Web 2015 分享了以「Javascript，征服世界是可能的嗎？」為主題的演講。</p><p>演講主題靈感來自於 <a href="https://medium.com/@slsoftworks/javascript-world-domination-af9ca2ee5070" target="_blank" rel="noopener">The JavaScript World Domination</a> 一文。</p><p>原本想用編年史的形式表現，一直發展到演講的前幾天，才演變成最終使用的形式。</p><iframe allowfullscreen frameborder="0" height="355" marginheight="0" marginwidth="0" scrolling="no" src="//www.slideshare.net/slideshow/embed_code/key/4B9FXZPp09tJpN" style="border-width: 1px; border: 1px solid #CCC; margin-bottom: 5px; max-width: 100%;" width="425"></iframe>  <div style="margin-bottom: 5px;">**[Javascript征服世界是可能的嗎？](https://www.slideshare.net/gasolin/javascript-48212668 "Javascript征服世界是可能的嗎？") **</div><p>公布講題後，一些人先跑來問我JS是不是真的可能征服世界。<br>我能理解大家想要知道最終的答案迫切。但其實大多數時候，聽別人的預測，還是不準確的比率更高。</p><p>就我而言，了解別人推論的過程，與他所引用的資料，會影響我對他預測結果的信賴度。哪些資訊是我所不知道的（秘密），哪些是我知道但沒有意識到與推斷目標關聯性的。從推敲的過程中，我可以學到一些新東西，也可以產生一些新想法。這樣的過程比偷看答案有趣地多。</p><p>這份投影片裡面分享了四個JS征服世界的秘密，你是否已經知道？我的觀察跟你的觀察一致嗎？有沒有什麼其他你觀察到的秘密想分享哩？</p><p><a href="https://medium.com/@slsoftworks/javascript-world-domination-af9ca2ee5070" target="_blank" rel="noopener"></a></p>]]></content>
      
      
        <tags>
            
            <tag> webapp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Dogfooding FxOS 2.2 one more month</title>
      <link href="/2015/03/10/Dogfooding-FxOS-2-2-one-more-month/"/>
      <url>/2015/03/10/Dogfooding-FxOS-2-2-one-more-month/</url>
      <content type="html"><![CDATA[<iframe allowfullscreen frameborder="0" height="333" mozallowfullscreen="" msallowfullscreen="" oallowfullscreen="" src="https://www.flickr.com/photos/brian_ford/496522609/player/" webkitallowfullscreen="" width="500"></iframe><p>I’ve finished another iteration of dogfooding with Firefox OS 2.2. This is the version by far I’m pretty enjoy to use in daily base, without a backup Android phone.</p><p>Since my main usage of smart phone is browsing news and web sites, the new Browser frame serves me well.</p><p>The edge swiping is still awesome. Swipe left to right or vice versa from the off screen is more efficient than task manager.</p><p>In task manager, a small <code>close</code> button in bottom left of each card, make a more intuitive way to clean a web app.</p><p>Some web app made the dogfood more easier.</p><ul><li><p><a href="https://marketplace.firefox.com/app/feedspider?src=search" target="_blank" rel="noopener">FeedSpider</a>: The news feed via feedly</p></li><li><p>Social</p></li><li><p>Facebook and Twitter: Browse their web site, then add them on Homescreen*   Map</p></li><li><p>Google Map:   Browse the web site, then add it on Homescreen*   Note takingThe last thing I want to have is the bookmark sync.</p></li></ul><p>Since the dogfooding experience is so positive, I’ll challenge with dogfooding nightly build in next month.</p>]]></content>
      
      
        <tags>
            
            <tag> FirefoxOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Future proved Javascript and CSS</title>
      <link href="/2015/02/28/Future-proved-Javascript-and-CSS/"/>
      <url>/2015/02/28/Future-proved-Javascript-and-CSS/</url>
      <content type="html"><![CDATA[<iframe allowfullscreen frameborder="0" height="440" mozallowfullscreen="" msallowfullscreen="" oallowfullscreen="" src="https://www.flickr.com/photos/ikimuled/16354509187/in/pool-backtothefuture/player/" webkitallowfullscreen="" width="500"></iframe><p><a href="https://babeljs.io/" target="_blank" rel="noopener">This time, its different</a>. The transpilers are build-time polyfills that fill the gap of current browser/server implementation and the newest JS/CSS specs.</p><p>Transpilers trans-compile Javascript and CSS to current workable version, so developers could be more productive with JS/CSS latest features and transpilers would translate them into current supported version of code.</p><p>From my opinion the most useful es6 feature is <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">arrow functions</a> (=&gt;) which comes from coffeescript. This syntax sugar bind the this value automatically, so developer wont forgot the binding anymore.</p><p>The original code is</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ‘use strict’;</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(‘DocumentLocalized’, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="comment">// App.init();</span></span><br><span class="line">  &#125;.bind(<span class="keyword">this</span>));</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><p>We can use arrow function to replace <code>function() {}.bind(this)</code> to <code>() =&amp;gt; {}</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ‘use strict’;</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(‘DocumentLocalized’, () =&gt; &#123;</span><br><span class="line">     <span class="comment">// App.init();</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><p>Currently the arrow functions <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Browser_compatibility" target="_blank" rel="noopener">only default enabled on Firefox</a>. So developer could not use this directly on their project. With <a href="https://babeljs.io/" target="_blank" rel="noopener">babel</a> javascript transpiler the js could be translated to current workable version automatically.</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  ‘use strict’;</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(‘DocumentLocalized’, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="comment">// App.init();</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><p>The transpiler will know the content does not need ‘this’ reference and skip the binding. Note the Javascript transpiler still stick into <a href="http://vanilla-js.com/" target="_blank" rel="noopener">vanilla javascript</a>. It does not invent new syntax, but it make new specs could be used or experiment in current environment.</p><p>From CSS perspective, <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables" target="_blank" rel="noopener">CSS variables</a> brings variables into CSS. Pre-define some color and use everywhere on project is possible.</p><p>The origin style is</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#847AD1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">pre</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It’s frustrated when the stylesheets expand larger and we need to change the new color or size everywhere.</p><p>We can use CSS variables to predefine the changeable stuff into pseudo ‘:root’ element.</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  –maincolor: #847AD1;</span><br><span class="line">  –<span class="selector-tag">size</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(–maincolor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">pre</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="built_in">var</span>(–size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Looks good. But the same situation occurred. Currently the CSS variables <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables#Browser_compatibility" target="_blank" rel="noopener">only support on Firefox</a>. So developer could not use this directly on their project. With <a href="http://www.myth.io/" target="_blank" rel="noopener">myth</a> CSS transpiler the CSS could be translated to current workable version automatically.</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#847AD1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">pre</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note the CSS transpiler still stick into CSS specs. It does not invent new syntaxes like LESS or SASS does. It just make new CSS specs could be used or experiment in current environment.</p><p>Besides the feature polyfill, running transpiler before deploy also help developer catch out the error since transpiler will traverse the source and parsing syntaxes. Transpiler will bark you when any error in your source.</p><p>You may wonder setup an environment with above JS/CSS transpiler seems take some time. <a href="https://github.com/webapplate/webapplate" target="_blank" rel="noopener">webapplate</a> 2.3.0 already integrated with <a href="https://babeljs.io/" target="_blank" rel="noopener">babel</a>  and <a href="http://www.myth.io/" target="_blank" rel="noopener">myth</a> grunt tasks to auto transpile your JS/CSS code to current workable version. <a href="https://github.com/webapplate/webapplate" target="_blank" rel="noopener">webapplate</a> jshint/githook also support <a href="https://github.com/webapplate/webapplate/blob/master/.jshintrc#L17" target="_blank" rel="noopener">es6 syntax</a> validation (yes the .jshintrc is exactly borrowed from gaia project), so your project is future proved and keep maintainable.</p>]]></content>
      
      
        <tags>
            
            <tag> webapp </tag>
            
            <tag> FirefoxOS </tag>
            
            <tag> webframework </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用 IFTTT 做自動生活紀錄 (LifeLog)</title>
      <link href="/2015/02/28/%E7%94%A8-IFTTT-%E5%81%9A%E8%87%AA%E5%8B%95%E7%94%9F%E6%B4%BB%E7%B4%80%E9%8C%84-LifeLog/"/>
      <url>/2015/02/28/%E7%94%A8-IFTTT-%E5%81%9A%E8%87%AA%E5%8B%95%E7%94%9F%E6%B4%BB%E7%B4%80%E9%8C%84-LifeLog/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;">[![](http://3.bp.blogspot.com/-W4Kk4j8DGro/VPGOmgGFA_I/AAAAAAAAD3Y/JwxVHmIirn0/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-02-28%2B%E4%B8%8B%E5%8D%885.39.44.png)](http://3.bp.blogspot.com/-W4Kk4j8DGro/VPGOmgGFA_I/AAAAAAAAD3Y/JwxVHmIirn0/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-02-28%2B%E4%B8%8B%E5%8D%885.39.44.png)</div>我會想要把看過的書籍、電影，喜歡的Youtube影片，貼過的文章等記錄下來，之後可以方便回顧。過去要這麼做，少不了得手工紀錄，但手動紀錄其實是相當沒效率的。<p>過去幾年裡，我使用 Google 日曆紀錄簡單的一行日記，使用Anobii 紀錄讀過的書與心得，使用豆瓣電影紀錄看過的影片，使用 Facebook/Google+、Blogger 等分享連結與寫文章。最近我的做法仍然沒有改變，但會利用 IFTTT 來自動將我更新的書、影片、分享過的連結等自動紀錄到我的 Google 日曆中。</p><p><a href="https://ifttt.com/" target="_blank" rel="noopener">IFTTT</a> 是一個幫你連結各種不同網路服務的自動化工具，包括 Google Calendar、Facebook、Evernote、RSS 等各種服務。其運作方式是先指定一些需要的配方（Receipe）。</p><div class="separator" style="clear: both; text-align: center;">[![](http://4.bp.blogspot.com/-2k7zRZ9OJsk/VPGOm-tiSOI/AAAAAAAAD3k/C-9ZnXfp-M0/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-02-28%2B%E4%B8%8B%E5%8D%885.38.57.png)](http://4.bp.blogspot.com/-2k7zRZ9OJsk/VPGOm-tiSOI/AAAAAAAAD3k/C-9ZnXfp-M0/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-02-28%2B%E4%B8%8B%E5%8D%885.38.57.png)</div>IFTTT會定時追蹤你使用的一些服務的狀況。當你的配方中包含的服務的內容改變時（如 Blogger 上有更新的文章），IFTTT 可以自動將結果添加到你的另一個服務中（如加入至日曆）。<p>以我自己為例，要將 Blogger 上的文章更新到我的日曆，只需先找出我的 Blogger RSS <a href="http://blog.gasolin.idv.tw/feeds/posts/default">http://blog.gasolin.idv.tw/feeds/posts/default</a>，然後建立「RSS -&gt; Google日曆」的配方即可。Anobii 或豆瓣的做法也類似。</p><p><a href="http://3.bp.blogspot.com/-W4Kk4j8DGro/VPGOmgGFA_I/AAAAAAAAD3Y/JwxVHmIirn0/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-02-28%2B%E4%B8%8B%E5%8D%885.39.44.png" target="_blank" rel="noopener"><img src="http://3.bp.blogspot.com/-W4Kk4j8DGro/VPGOmgGFA_I/AAAAAAAAD3Y/JwxVHmIirn0/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-02-28%2B%E4%B8%8B%E5%8D%885.39.44.png" alt=""> </a> 另一類則是從社群網站將文章加到日曆，也是建立簡單的規則即可做到。</p><p><a href="http://4.bp.blogspot.com/-2k7zRZ9OJsk/VPGOm-tiSOI/AAAAAAAAD3k/C-9ZnXfp-M0/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-02-28%2B%E4%B8%8B%E5%8D%885.38.57.png" target="_blank" rel="noopener"><img src="http://4.bp.blogspot.com/-2k7zRZ9OJsk/VPGOm-tiSOI/AAAAAAAAD3k/C-9ZnXfp-M0/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-02-28%2B%E4%B8%8B%E5%8D%885.38.57.png" alt=""></a></p><p>我的生活紀錄 (LifeLog)現在能自動記錄的資料有：</p><ul><li>Facebook 貼文</li><li>Blogger 貼文</li><li>Anobii 書籍</li><li>豆瓣書籍/音樂更新</li><li>Youtube 設為喜歡的影片</li></ul><p>Update at 2016/12/19</p><ul><li>Twitter 貼文</li><li>Todoist 完成的事項</li></ul><p>如果你有其他自動生活紀錄 (LifeLog)的想法，也歡迎與我分享。</p>]]></content>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> zen </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Single line of style to bring (keypart of) f.lux on FirefoxOS</title>
      <link href="/2015/02/23/Single-line-of-style-to-bring-keypart-of-f-lux-on-FirefoxOS/"/>
      <url>/2015/02/23/Single-line-of-style-to-bring-keypart-of-f-lux-on-FirefoxOS/</url>
      <content type="html"><![CDATA[<p>Claim: this exercise is for experiment, not for product.</p><div class="separator" style="clear: both; text-align: center;">[![](http://4.bp.blogspot.com/-BcKUOW2lvxA/VOwjKljJnSI/AAAAAAAAD20/fG8jM03NKLg/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-02-24%2B%E4%B8%8B%E5%8D%882.09.23.png)](http://4.bp.blogspot.com/-BcKUOW2lvxA/VOwjKljJnSI/AAAAAAAAD20/fG8jM03NKLg/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-02-24%2B%E4%B8%8B%E5%8D%882.09.23.png)</div>According to [wikipedia](http://en.wikipedia.org/wiki/F.lux), **f.lux** adjusts a computer display's [color temperature](http://en.wikipedia.org/wiki/Color_temperature "Color temperature") according to its location and time of day. I always use it on my Mac to make my eyes more comfortable at night.<p>So, the topic is about if we can bring that experience on Firefox OS.Adjust display’s color temperature generally is a system specific issue. But actually it can be categorized as an CSS trick if we like to <a href="https://gist.github.com/contra/254e1a5a07da830d6051" target="_blank" rel="noopener">make it on web</a> (a gist to mimic the f.lux effect).</p><p>To quick experiment if it doable or not, the validation steps are:</p><p>1. open the <a href="https://developer.mozilla.org/en-US/docs/Tools/WebIDE" target="_blank" rel="noopener">WebIDE</a> on <a href="https://www.mozilla.org/en-US/firefox/developer/" target="_blank" rel="noopener">Firefox Developer Edition</a>2. download and open emulator (I choose v2.2) on WebIDE.3. To debug system app, choose <code>System</code> from top left selector in WebIDE.4. once connected,  select the <code>html</code> tag and add style<code>**filter: brightness(0.8) sepia(0.9);**</code> into the element.</p><div class="separator" style="clear: both; text-align: center;">[![](http://2.bp.blogspot.com/-rV4FV9HRVEE/VOwjP4MFTUI/AAAAAAAAD28/AMFRpG21jlk/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-02-24%2B%E4%B8%8B%E5%8D%882.09.05.png)](http://2.bp.blogspot.com/-rV4FV9HRVEE/VOwjP4MFTUI/AAAAAAAAD28/AMFRpG21jlk/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-02-24%2B%E4%B8%8B%E5%8D%882.09.05.png)</div>The live view changed to f.lux like color temperature.<div class="separator" style="clear: both; text-align: center;">[![](http://4.bp.blogspot.com/-BcKUOW2lvxA/VOwjKljJnSI/AAAAAAAAD20/fG8jM03NKLg/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-02-24%2B%E4%B8%8B%E5%8D%882.09.23.png)](http://4.bp.blogspot.com/-BcKUOW2lvxA/VOwjKljJnSI/AAAAAAAAD20/fG8jM03NKLg/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-02-24%2B%E4%B8%8B%E5%8D%882.09.23.png)</div><p>So it works!</p><p>To make it persistent on real device, edit <code>[gaia/apps/system/style/system/system.css](https://github.com/mozilla-b2g/gaia/blob/master/apps/system/style/system/system.css#L5)</code>, add above style into <code>html</code> tag. Run <code>make reset-gaia</code> then you have the style applied on device.</p><h3 id="what-s-next">What’s Next</h3><p>The above experiment will change your device’s color temperature permanently, which is not what f.lux do. To make it as option, you can add an option in settings &gt; developer panel and add a observer in system to dynamically add such style into system html tag.</p><p>If you feel the strong desire to have such feature happen on Firefox OS device, fire a bug on <a href="http://bugzilla.mozilla.org/" target="_blank" rel="noopener">bugzilla</a>.</p>]]></content>
      
      
        <tags>
            
            <tag> FirefoxOS </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2015 年的 4 個 Web 技術趨勢</title>
      <link href="/2015/02/21/2015-%E5%B9%B4%E7%9A%84-4-%E5%80%8B-Web-%E6%8A%80%E8%A1%93%E8%B6%A8%E5%8B%A2/"/>
      <url>/2015/02/21/2015-%E5%B9%B4%E7%9A%84-4-%E5%80%8B-Web-%E6%8A%80%E8%A1%93%E8%B6%A8%E5%8B%A2/</url>
      <content type="html"><![CDATA[<p>要預測未來不容易，但根據已經發生的一些蛛絲馬跡，來推測看看一年半載內可能會發生什麼，還是勉力可以為之。</p><p>1. Javascript 語法的改進</p><p>ECMAScript6 (ES6) 規格已經底定，<a href="http://kangax.github.io/compat-table/es6/" target="_blank" rel="noopener">主流的瀏覽器</a>也已紛紛支援 ES6 的各種特性。好用的諸如 <a href="https://babeljs.io/docs/learn-es6/#arrows" target="_blank" rel="noopener">arrow function</a> 和 <a href="https://babeljs.io/docs/learn-es6/#promises" target="_blank" rel="noopener">promises</a> 等特性，都已在 Gaia 專案中大量被使用。</p><p>要追求專案與舊瀏覽器的相容性，有 <a href="https://babeljs.io/" target="_blank" rel="noopener">Babel</a> 和 <a href="https://github.com/google/traceur-compiler" target="_blank" rel="noopener">traceur </a>等轉譯器可供使用。<a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">中文</a>，<a href="https://babeljs.io/docs/learn-es6/" target="_blank" rel="noopener">英文</a>教學文件也已不少，就安心地用吧。</p><p>2. DOM 的改進</p><p>去年最紅的前端函式庫當推Facebook提出的<a href="http://facebook.github.io/react/" target="_blank" rel="noopener"> react.js</a>。react.js 提出使用 Virtual DOM 來管理更新與繪製畫面，在不修改現有瀏覽器實作的現況下，提升操作DOM的效能。</p><p><a href="http://webcomponents.org/" target="_blank" rel="noopener">Web Component </a>則是提供了多種新的瀏覽器特性，Gaia 專案裡也已經使用 Web Component 來設計新一代共用的介面元件。Custom Element 特性讓每個開發者可以自行定義新的 HTML 標籤，Shadow DOM 特性則讓每個 HTML 標籤的實作獨立，不會輕易被其他網頁內容改變。</p><p>好消息是這些<a href="http://webcomponents.org/presentations/complementarity-of-react-and-web-components-at-reactjs-conf/" target="_blank" rel="noopener">改進是可以共用的</a>。</p><p>3. HTTPS 大量被採用</p><p>(離線存取的改進)</p><div class="separator" style="clear: both; text-align: center;"><iframe width="320" height="266" class="YOUTUBE-iframe-video" data-thumbnail-src="https://ytimg.googleusercontent.com/vi/4uQMl7mFB6g/0.jpg" src="http://www.youtube.com/embed/4uQMl7mFB6g?feature=player_embedded" frameborder="0" allowfullscreen></iframe></div>[Service Worker](https://github.com/slightlyoff/ServiceWorker/blob/master/explainer.md) 是規劃了多年的重頭戲。Service Worker 提供更完備的離線存取功能。在第一次使用 Web App 時會快取內容，之後再次使用 Web App 時只需更新不同的部分。由於這功能在各瀏覽器中都還在實驗或Beta階段，最快可能是年底上線。因此開發者能大量投入使用的時間點應該是2016年。<p>無論是 Service worker 或是也剛底定的 <a href="https://github.com/http2/http2-spec" target="_blank" rel="noopener">HTTP 2.0</a> 草案，都需要運行在加密過的 HTTPS 上。Google 更是<a href="http://www.techbang.com/posts/19460-adjusted-google-search-engine-algorithm-use-https-to-encrypt-website-rank-higher" target="_blank" rel="noopener">為使用 HTTPS 連線的網站提升搜索排序</a>。過去由於證書取得不易，限制了 HTTPS 的使用率。Mozilla 與 Cisco 等廠商今年將合作提供<a href="https://letsencrypt.org/" target="_blank" rel="noopener">免費的CA證書</a>。當然，也可以透過現在已經存在的 <a href="http://blog.miniasp.com/post/2013/01/10/The-Complete-Guide-Free-StartSSL-personal-and-web-site-ssl-tls-certificates.aspx" target="_blank" rel="noopener">StartSSL服務 </a>來取得免費證書。</p><p>4. 預編譯網站</p><p>現在比較大型的網站或 web app 都是透過 build script 預做一些 packaging，optimize，或 trans compile 等動作後才部署上線。除了可以壓縮網頁大小以減少載入時間，同時也起到部分保護原始碼的效果。由於 <a href="http://gruntjs.com/" target="_blank" rel="noopener">Grunt</a>，<a href="http://gulpjs.com/" target="_blank" rel="noopener">Gulp</a> 等工具的流行，預編譯這方面的門檻降低不少。中、小型，甚至個人網站，也可以很容易地使用這些技術來建構網站或Web App。</p><p>最後賣瓜一下：<a href="https://github.com/webapplate/webapplate" target="_blank" rel="noopener">webapplate</a> 這個範本已經整合好 grunt based packaging，optimize，trans compile 等動作，新版本也加進了 Babel trans compiler，可以直接使用 ES6 語法開發 web app。要開新 web 專案時歡迎取用。</p>]]></content>
      
      
        <tags>
            
            <tag> webapp </tag>
            
            <tag> FirefoxOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>隱私與 Hololens</title>
      <link href="/2015/02/16/%E9%9A%B1%E7%A7%81%E8%88%87-Hololens/"/>
      <url>/2015/02/16/%E9%9A%B1%E7%A7%81%E8%88%87-Hololens/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;"><iframe allowfullscreen class="YOUTUBE-iframe-video" data-thumbnail-src="https://ytimg.googleusercontent.com/vi/aThCr0PsyuA/0.jpg" frameborder="0" height="266" src="http://www.youtube.com/embed/aThCr0PsyuA?feature=player_embedded" width="320"></iframe></div>近期最激動人心的新科技當屬Hololens。<p>Kinect動態捕捉 + AR增強現實 + VR虛擬現實，將這些令人讚嘆的系統縮小綑綁成一個頭戴裝置。這樣的技術與願景，可以說甚至超越了上個世紀我們對21世紀的想像。</p><p>如果價格與電腦相去不遠，實在令人難以拒絕這樣的裝備。</p><p>然而也不禁反省，有天當技術變成生活的一部分，人們可能會選擇自願放棄一部分隱私，以換取享受科技與網路帶來的便利。當使用的人多了，就形成了一股社會壓力，不用也不成。</p><p>「<span class="st">天地萬物﹐朕賜給你的才是你的﹐<em>朕不給</em>﹐你不能搶。</span>」，你看到的，都變成某些公司或團體想讓你看的；你沒看到的，可能是某些公司/政府要求屏蔽下來不讓你看的。</p>]]></content>
      
      
        <tags>
            
            <tag> design </tag>
            
            <tag> gadget </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OddWerx 與 ROMO</title>
      <link href="/2015/02/16/OddWerx-%E8%88%87-ROMO/"/>
      <url>/2015/02/16/OddWerx-%E8%88%87-ROMO/</url>
      <content type="html"><![CDATA[<p>我們先來看兩段影片，兩個產品都是為手機加裝底座，讓手機變成可移動，可和人互動的機器人。</p><p>OddWerx</p><div class="separator" style="clear: both; text-align: center;"><iframe allowfullscreen class="YOUTUBE-iframe-video" data-thumbnail-src="https://ytimg.googleusercontent.com/vi/bJ6vzyOG-7o/0.jpg" frameborder="0" height="266" src="http://www.youtube.com/embed/bJ6vzyOG-7o?feature=player_embedded" width="320"></iframe></div>OddWerx 在 [2012/4](https://www.kickstarter.com/projects/ologic/oddwerx-autonomous-smartphone-robots) 於 kickstarter 上募款失敗。<p>ROMO</p><div class="separator" style="clear: both; text-align: center;"><iframe allowfullscreen class="YOUTUBE-iframe-video" data-thumbnail-src="https://ytimg.googleusercontent.com/vi/UAu7eu7e82Q/0.jpg" frameborder="0" height="266" src="http://www.youtube.com/embed/UAu7eu7e82Q?feature=player_embedded" width="320"></iframe></div>ROMO 在 [2011/11](https://www.kickstarter.com/projects/peterseid/romo-the-smartphone-robot)，[2012/11](https://www.kickstarter.com/projects/peterseid/romo-the-smartphone-robot-for-everyone)兩次上Kickstarter募款都成功。<p>也許是算上包裝設計等成本，ROMO (170) 比起OddWerx (99)貴上不少。即使 OddWerx 和 ROMO 提供的實際功能其實差不多，比較兩個「產品」，一個是需要動手組裝的套件，一個是買來即可用的玩具。</p><p>兩個專案的成功與否，是因為在眾籌網站上出沒的大眾還是偏好看起來立即可用的產品，還是因為在 OddWerx 之前 ROMO 已經出現了，比起來沒什麼新鮮感？</p>]]></content>
      
      
        <tags>
            
            <tag> design </tag>
            
            <tag> gadget </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>手工作玩偶</title>
      <link href="/2015/02/16/%E6%89%8B%E5%B7%A5%E4%BD%9C%E7%8E%A9%E5%81%B6/"/>
      <url>/2015/02/16/%E6%89%8B%E5%B7%A5%E4%BD%9C%E7%8E%A9%E5%81%B6/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;">[![](http://2.bp.blogspot.com/-DWAEBoZhSlU/VOLoOfuFuoI/AAAAAAAAD1A/aGVx7ruSlfc/s1600/2015-01-26%2B13.44.19.jpg)](http://2.bp.blogspot.com/-DWAEBoZhSlU/VOLoOfuFuoI/AAAAAAAAD1A/aGVx7ruSlfc/s1600/2015-01-26%2B13.44.19.jpg)</div>前陣子感到應該用一些方法來驗證現在數位與實體世界的距離是否已經越來越近。而且桌上也缺一些裝飾品，於是從 [cubeecraft](http://www.cubeecraft.com/cubee/domo-kun) 下載了多摩君的剪紙，直接用印表機印出A4大小的紙來。<p>和Designer同事借了剪刀與美工刀後，照著紙上的指示割了起來。</p><div class="separator" style="clear: both; text-align: center;">[![](http://2.bp.blogspot.com/-eaV_Fe7U9pI/VOLpoKpjtsI/AAAAAAAAD1M/hY2igMkf_3A/s1600/2015-01-26%2B14.05.10.jpg)](http://2.bp.blogspot.com/-eaV_Fe7U9pI/VOLpoKpjtsI/AAAAAAAAD1M/hY2igMkf_3A/s1600/2015-01-26%2B14.05.10.jpg)</div>多摩君的構成很簡單，基本就是一個紙盒。白色的地方是要割開的洞，將黑色區塊嵌進去後，不需要膠水就可以組裝成成立體的玩偶。<div class="separator" style="clear: both; text-align: center;">[![](http://1.bp.blogspot.com/-uih6PYkYdFU/VOLp3OmOHtI/AAAAAAAAD1U/b87SK7n6wM8/s1600/2015-01-26%2B14.07.31.jpg)](http://1.bp.blogspot.com/-uih6PYkYdFU/VOLp3OmOHtI/AAAAAAAAD1U/b87SK7n6wM8/s1600/2015-01-26%2B14.07.31.jpg)</div>用中午休息不到20分鐘的時間，多摩君完成啦！ <div class="separator" style="clear: both; text-align: center;">[![](http://2.bp.blogspot.com/-wgeDR91fDuo/VOLp-EfzAzI/AAAAAAAAD1c/xPLFvxvSXgM/s1600/2015-01-26%2B14.11.51.jpg)](http://2.bp.blogspot.com/-wgeDR91fDuo/VOLp-EfzAzI/AAAAAAAAD1c/xPLFvxvSXgM/s1600/2015-01-26%2B14.11.51.jpg)</div>&nbsp;完成後有了點信心，改天繼續挑戰了難度大一點的[成步堂君](http://www.cubeecraft.com/cubee/phoenix-wright-p)。<div class="separator" style="clear: both; text-align: center;">[![](http://2.bp.blogspot.com/-NY3kbJT34jE/VOLqZvsxXMI/AAAAAAAAD1k/6LHvjx3sPGc/s1600/2015-01-27%2B13.14.33.jpg)](http://2.bp.blogspot.com/-NY3kbJT34jE/VOLqZvsxXMI/AAAAAAAAD1k/6LHvjx3sPGc/s1600/2015-01-27%2B13.14.33.jpg)</div>&nbsp;在勞作過程中，發現剪紙時還是美工刀好用。這次的成步堂君剪開來還蠻多配件的。<div class="separator" style="clear: both; text-align: center;">[![](http://3.bp.blogspot.com/-Qofq3k1kiCE/VOLqrRbjbNI/AAAAAAAAD1s/FEE_tyLU4-c/s1600/2015-01-27%2B13.43.48.jpg)](http://3.bp.blogspot.com/-Qofq3k1kiCE/VOLqrRbjbNI/AAAAAAAAD1s/FEE_tyLU4-c/s1600/2015-01-27%2B13.43.48.jpg)</div>&nbsp;組裝好的樣子<div class="separator" style="clear: both; text-align: center;">[![](http://2.bp.blogspot.com/-f3FBcWKlSkk/VOLq7nTEiYI/AAAAAAAAD10/DJRqnU2Z3-w/s1600/2015-01-27%2B14.10.37.jpg)](http://2.bp.blogspot.com/-f3FBcWKlSkk/VOLq7nTEiYI/AAAAAAAAD10/DJRqnU2Z3-w/s1600/2015-01-27%2B14.10.37.jpg)</div>&nbsp;最後來個疊疊樂<div class="separator" style="clear: both; text-align: center;">[![](http://3.bp.blogspot.com/-xPfHv9zmYWw/VOLrFhtflsI/AAAAAAAAD18/pzJ8X_LKjNI/s1600/2015-01-27%2B14.09.33.jpg)](http://3.bp.blogspot.com/-xPfHv9zmYWw/VOLrFhtflsI/AAAAAAAAD18/pzJ8X_LKjNI/s1600/2015-01-27%2B14.09.33.jpg)</div>手工藝成本：<p>兩張A4紙。</p>]]></content>
      
      
        <tags>
            
            <tag> fun </tag>
            
            <tag> gadget </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>手作鋼鐵衣</title>
      <link href="/2015/02/16/%E6%89%8B%E4%BD%9C%E9%8B%BC%E9%90%B5%E8%A1%A3/"/>
      <url>/2015/02/16/%E6%89%8B%E4%BD%9C%E9%8B%BC%E9%90%B5%E8%A1%A3/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;">[![](http://3.bp.blogspot.com/-6nr9x4l3BWs/VOLvA7CAWVI/AAAAAAAAD2I/FG0lMbVPXns/s1600/2015-02-13%2B17.40.34.jpg)&nbsp;](http://3.bp.blogspot.com/-6nr9x4l3BWs/VOLvA7CAWVI/AAAAAAAAD2I/FG0lMbVPXns/s1600/2015-02-13%2B17.40.34.jpg)</div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: left;">我相信現在數位與實體世界的距離已經越來越近，我觀察到某些例子，能讓我們常見的實體商品，透過數位方式加值，產生出相當不同的體驗。</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;">這邊舉 T-Shirt 為例。這是網上已經在銷售的商品。</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;"><iframe width="320" height="266" class="YOUTUBE-iframe-video" data-thumbnail-src="https://ytimg.googleusercontent.com/vi/PI_GSXXGh1I/0.jpg" src="http://www.youtube.com/embed/PI_GSXXGh1I?feature=player_embedded" frameborder="0" allowfullscreen></iframe></div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;">其實整個想法很簡單。只是透過將手機放入胸前的袋子，就提供了旁觀者新穎的視覺體驗。</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;">在網上也能找到簡易的作法：</div><div class="separator" style="clear: both; text-align: left;">&nbsp;</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;"><iframe width="320" height="266" class="YOUTUBE-iframe-video" data-thumbnail-src="https://ytimg.googleusercontent.com/vi/0EuVSiJP5hY/0.jpg" src="http://www.youtube.com/embed/0EuVSiJP5hY?feature=player_embedded" frameborder="0" allowfullscreen></iframe></div>由於今年尾牙要求的dress code是 cosplay 電影動漫人物，於是我把腦筋動到鋼鐵衣上面。<p>1. 首先找一件不要的衣服（這件是 2011 年參加 Coscup 送的，穿到現在）2. 在胸口適當的地方開個洞。</p><div style="text-align: center;">[![](http://4.bp.blogspot.com/-j9rieG8qJAI/VOLvWMYh7JI/AAAAAAAAD2g/H9DZhflwQYs/s1600/2015-02-13%2B17.41.49.jpg)](http://4.bp.blogspot.com/-j9rieG8qJAI/VOLvWMYh7JI/AAAAAAAAD2g/H9DZhflwQYs/s1600/2015-02-13%2B17.41.49.jpg)&nbsp;</div>3\. 為了手機容易拿取，黏一個袋子進去（剛好最近常常看醫生，就拿藥袋頂上）。袋子對應胸口的地方也要開洞。<div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;">[![](http://4.bp.blogspot.com/-Heoe8eYsuEs/VOLvHBDEwGI/AAAAAAAAD2Q/XATaPS8ap80/s1600/2015-02-13%2B17.40.52.jpg)&nbsp;](http://4.bp.blogspot.com/-Heoe8eYsuEs/VOLvHBDEwGI/AAAAAAAAD2Q/XATaPS8ap80/s1600/2015-02-13%2B17.40.52.jpg)</div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: left;">4\. 下載 [Digital Dudz](https://play.google.com/store/apps/details?id=com.digitaldudz.app) App， 選鋼鐵人裝扮</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;">於是就完成有 Arc Reactor 的「We love Open」鋼鐵衣啦！</div><div class="separator" style="clear: both; text-align: center;">[![](http://3.bp.blogspot.com/-mPoy4bP2vxw/VOLvOFCPcWI/AAAAAAAAD2Y/kqWVLrPBGmk/s1600/2015-02-13%2B17.41.44.jpg)&nbsp;](http://3.bp.blogspot.com/-mPoy4bP2vxw/VOLvOFCPcWI/AAAAAAAAD2Y/kqWVLrPBGmk/s1600/2015-02-13%2B17.41.44.jpg)</div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;">[](http://4.bp.blogspot.com/-j9rieG8qJAI/VOLvWMYh7JI/AAAAAAAAD2g/H9DZhflwQYs/s1600/2015-02-13%2B17.41.49.jpg)</div><div class="separator" style="clear: both; text-align: center;"></div>]]></content>
      
      
        <tags>
            
            <tag> fun </tag>
            
            <tag> design </tag>
            
            <tag> gadget </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webapplate on jsfiddle</title>
      <link href="/2015/02/13/webapplate-on-jsfiddle/"/>
      <url>/2015/02/13/webapplate-on-jsfiddle/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;">[![](http://2.bp.blogspot.com/-nkV9gLoimbE/VN3LVpkptTI/AAAAAAAAD0s/6yaydAV6ujo/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-02-13%2B%E4%B8%8B%E5%8D%886.00.33.png)](http://2.bp.blogspot.com/-nkV9gLoimbE/VN3LVpkptTI/AAAAAAAAD0s/6yaydAV6ujo/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-02-13%2B%E4%B8%8B%E5%8D%886.00.33.png)</div>In short, here is the [jsfiddle](http://jsfiddle.net/gasolin/sxjja37j/) link.<p>In recent <a href="http://tech.mozilla.com.tw/posts/5987/%e4%bd%bf%e7%94%a8-github-%e9%96%8b%e7%99%bc%e6%88%91%e7%9a%84%e7%ac%ac%e4%b8%80%e5%80%8b%e7%b6%b2%e9%a0%81%e6%87%89%e7%94%a8%e7%a8%8b%e5%bc%8f-%ef%bc%88web-app%ef%bc%89" target="_blank" rel="noopener">article on moztech</a> (in Chinese) I’ve introduce <a href="https://github.com/webapplate/ghapplate" target="_blank" rel="noopener">ghapplate</a> to develop and host web app directly on github. After the post is published, I’m still seeking for a more easier approach. Since github does not provide web preview while editing, you have to save your current work then view it later on browser to see if it’s the expect result.</p><p>So <a href="http://jsfiddle.net/gasolin/sxjja37j/" target="_blank" rel="noopener">jsfiddle</a> comes to my mind. <a href="http://jsfiddle.net/gasolin/sxjja37j/" target="_blank" rel="noopener">Here</a> is a playground that preload the libraries used by <a href="https://github.com/webapplate/ghapplate" target="_blank" rel="noopener">ghapplate</a> and <a href="https://github.com/webapplate/webapplate" target="_blank" rel="noopener">webapplate</a>.</p><p>It’s possible to <a href="https://hacks.mozilla.org/2013/08/using-jsfiddle-to-prototype-firefox-os-apps/" target="_blank" rel="noopener">use jsfiddle to prototype web app</a> as well. What you need is attach <code>/manifest.webapp</code> postfix after your jsfiddle link.</p><p><a href="http://jsfiddle.net/gasolin/sxjja37j/" target="_blank" rel="noopener">jsfiddle</a> and  <a href="https://github.com/webapplate/ghapplate" target="_blank" rel="noopener">ghapplate</a> are good for quick experiment. If you want to get benefit from optimizer, lint check and more during serious web development, <a href="https://github.com/webapplate/webapplate" target="_blank" rel="noopener">webapplate</a> is still the more maintainable choice.</p>]]></content>
      
      
        <tags>
            
            <tag> mobile </tag>
            
            <tag> FirefoxOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OddWerx 與 ROMO</title>
      <link href="/2015/02/11/OddWerx%20%E8%88%87%20ROMO/"/>
      <url>/2015/02/11/OddWerx%20%E8%88%87%20ROMO/</url>
      <content type="html"><![CDATA[<p>我們先來看兩段影片，兩個產品都是為手機加裝底座，讓手機變成可移動，可和人互動的機器人。</p><p>OddWerx</p><div class="separator" style="clear: both; text-align: center;"><iframe allowfullscreen class="YOUTUBE-iframe-video" data-thumbnail-src="https://ytimg.googleusercontent.com/vi/bJ6vzyOG-7o/0.jpg" frameborder="0" height="266" src="http://www.youtube.com/embed/bJ6vzyOG-7o?feature=player_embedded" width="320"></iframe></div><p>OddWerx 在 <a href="https://www.kickstarter.com/projects/ologic/oddwerx-autonomous-smartphone-robots" target="_blank" rel="noopener">2012/4</a> 於 kickstarter 上募款失敗。</p><p>ROMO</p><div class="separator" style="clear: both; text-align: center;"><iframe allowfullscreen class="YOUTUBE-iframe-video" data-thumbnail-src="https://ytimg.googleusercontent.com/vi/UAu7eu7e82Q/0.jpg" frameborder="0" height="266" src="http://www.youtube.com/embed/UAu7eu7e82Q?feature=player_embedded" width="320"></iframe></div><p>ROMO 在 <a href="https://www.kickstarter.com/projects/peterseid/romo-the-smartphone-robot" target="_blank" rel="noopener">2011/11</a>，<a href="https://www.kickstarter.com/projects/peterseid/romo-the-smartphone-robot-for-everyone" target="_blank" rel="noopener">2012/11</a>兩次上Kickstarter募款都成功。</p><p>也許是算上包裝設計等成本，ROMO (170) 比起OddWerx (99)貴上不少。<br>即使 OddWerx 和 ROMO 提供的實際功能其實差不多，比較兩個「產品」，一個是需要動手組裝的套件，一個是買來即可用的玩具。</p><p>兩個專案的成功與否，是因為在眾籌網站上出沒的大眾還是偏好看起來立即可用的產品，還是因為在 OddWerx 之前 ROMO 已經出現了，比起來沒什麼新鮮感？</p>]]></content>
      
      
        <tags>
            
            <tag> design </tag>
            
            <tag> gadget </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React Native</title>
      <link href="/2015/02/04/React-Native/"/>
      <url>/2015/02/04/React-Native/</url>
      <content type="html"><![CDATA[<p><img src="http://2.bp.blogspot.com/-h1K2VsEYe2I/VNI3xOR0JsI/AAAAAAAADzY/El2GI8a20v4/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-02-04%2B%E4%B8%8B%E5%8D%8811.15.44.png" alt=""></p><p>在看 Facebook 發表的 <a href="http://youtu.be/KVZ-P-ZI6W4?t=17m56s" target="_blank" rel="noopener">React Native</a> 介紹的時候，講者提到為什麼現在 Web 沒辦法提供如他們做的 Paper App 一樣順暢的體驗，主要是三點：</p><ol><li>Parallelize work 平行處理在 Web 上雖然有 web worker，但能做的事很有限。</li><li>Gesture Handling在 Web 上沒有一個好的如何使用手勢操作的指引</li><li>Access to Native Capabilities在 Web 上沒有辦法使用所有在原生平台上可取用的 API。</li></ol><p>於是 Facebook 發表了使用 React UI 來開發 iOS/Android App ，他們現在已用在了 Facebook Group App 上。React Native 不像 Cordova/Phonegap 用 WebView 來跑 HTML/JS/CSS，而是直接接上 Native UI widget。</p><p><img src="http://4.bp.blogspot.com/-d7HcU_mQEmU/VNI8IeF5XZI/AAAAAAAADzk/nO1cKbvaRH0/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-02-04%2B%E4%B8%8B%E5%8D%8811.34.26.png" alt=""></p><p>雖然使用JS當controller，但用async的方式和Native UI做互動。並且互動時是將UI各改動一次性完成（原本 React 的 Virtual DOM 特性），從而避免 JS 程式運行阻塞住 UI 而影響效能。</p><p>當然兩個平台的 Native UI 元件名稱或參數多有不同，所以不能像 Cordova/PhoneGap 那樣「寫一次，跨多個平台」 ，而是「學一次，跨多個平台」（Learn Once，Write anywhere）。</p><p>原始演講內容可以查看</p><iframe allowfullscreen frameborder="0" height="315" src="https://www.youtube.com/embed/KVZ-P-ZI6W4#t=17m56s" width="560"><p>OS: 開發者大會都要留一些爆點啊</p></iframe>]]></content>
      
      
        <tags>
            
            <tag> mobile </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Material Design（物質設計）是什麼？</title>
      <link href="/2015/01/13/Material-Design%EF%BC%88%E7%89%A9%E8%B3%AA%E8%A8%AD%E8%A8%88%EF%BC%89%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F/"/>
      <url>/2015/01/13/Material-Design%EF%BC%88%E7%89%A9%E8%B3%AA%E8%A8%AD%E8%A8%88%EF%BC%89%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;">[![](http://1.bp.blogspot.com/-UnhYl5RoUFE/U7bD2gwLQwI/AAAAAAAADrc/2JhNmgnaD2I/s1600/2014-06-29+22.20.19.jpg)](http://1.bp.blogspot.com/-UnhYl5RoUFE/U7bD2gwLQwI/AAAAAAAADrc/2JhNmgnaD2I/s1600/2014-06-29+22.20.19.jpg)</div><h3 id="物質設計-material-design">物質設計(Material Design)</h3><p>「物質設計」有人翻作材質設計，但我很容易把「材質」聯想到3D遊戲的材質貼圖去，這跟 Material Design 所想要表達的意涵差了十萬八千里。而從相關的英文詞彙聯想，「Material Girl」或譯為拜金女孩或物質女孩，那種對於追求「摸的到的實際東西」有所迷戀的意涵，似乎與 「Material Design」的內在涵義更為貼近，所以我更願意稱之為「物質設計」。</p><p>註：官方後來定名為「實感設計」。</p><h3 id="物質設計-material-design-是什麼？">物質設計（Material Design）是什麼？</h3><p>簡而言之，<a href="http://www.google.com/design/spec/material-design/introduction.html" target="_blank" rel="noopener">Material Design</a>（物質設計）是 Google 公佈的一套同時適用於Android、iOS、Web 等各種平台，同時能適用於手機、平板、電視、電腦螢幕等不同裝置的跨平台/裝置的設計規則（仍需為各裝置設計，但鼓勵共用更多相同元素）。</p><p>讀者也可以透過觀看 Google I/O 2014 - Keynote（從14:18分開始，由 Matias Duarte 介紹 Material Design）<a href="https://www.youtube.com/watch?v=wtLJPvx7-ys" target="_blank" rel="noopener">https://www.youtube.com/watch?v=wtLJPvx7-ys  </a>可以得到對於 Material Design 最精巧的介紹。</p><p>我不是設計師，僅從開發者角度分享一些個人想法，如果還有興趣請繼續看下去。</p><h3 id="從擬物化-扁平化-到物質化的-app-設計">從擬物化、扁平化、到物質化的 App 設計</h3><p>自從 2007 年 iOS 重新發明手機之後，「擬物」化（Skeuomorphism）一直是 iOS App 的設計原則。「擬物」化的設計，讓新接觸「智慧手機」、「智慧平板」的使用者得以沿用過去實物的使用經驗，愉悅地使用新的數位化工具。</p><p>但是這幾年智慧手機/平板實在太成功，軟體App 漸漸吞噬了實體世界的各種工具，造成原本「擬物」所參照的物品已紛紛變成老古董，要年輕人畫出電話的形狀，可能畫的卻是手機的模樣…總而言之，許多擬物的參照物已經漸漸被時間淘汰了。</p><p>微軟的設計師們很早看出這個趨勢，在2010年推出的 Window Phone 中使用了極端「扁平」化（Flat）的設計風格。經過幾年來的大膽嘗試，最後也由市占極高的 iOS/Android 定調了使用者界面「扁平」化的發展潮流。「扁平」化的設計，讓使用者得以減少在使用 App 過程中，辨識「擬物」化界面所產生的認知疲勞。</p><p>不管是「擬物」化或者「扁平」化，在每個平台的設計指南中，都明確指出設計的App要提供最佳的使用者經驗，必須要符合該平台的風格。iOS還分別為手機與平板提供不同的設計指南，並指出手機與平板是不同的設備，App設計必須要符合該設備的使用情境。</p><p>其實平台們的意思很簡單：現在開發者必需要對應每個平台，針對平台不同的風格提出相符的設計。對於同平台的不同裝置，也請分開處理。</p><p>於是現在開發者（或提出 Material Design 的 Google，別忘了他們得支援多少種平台與裝置）要面對的，是針對不同裝置、多重平台開發設計 App 時所需面對的各種問題。</p><p><strong>「物質設計」（Material Design）就是 Google 整理出的新跨平台、跨裝置適用 (For every screen, and for all devices) 的設計指南</strong>。並將首先套用到 Android 的最新版本「L」上。</p><h3 id="物質化的-app-設計">物質化的 App 設計</h3><p>「物質設計」是以「扁平」化的 App 設計為基礎，加上紙質分層的概念（即以「Google Now」為代表的卡片式設計），整理出字體、色彩、圖標等設計模式，並加入佈局（Layout）、圖像，與動畫效果（effect）等設計模式。紙質分層與「動畫效果」產生出的設計模式，就我所知，是在之前的各種介面設計中所未特別強調的。</p><p>想進一步了解Material Design上的動畫效果，可由 Google I/O 2014 - Keynote（從18.25分開始，由 Matias Duarte 介紹 Material Design Animation）<a href="https://www.youtube.com/watch?v=wtLJPvx7-ys" target="_blank" rel="noopener">https://www.youtube.com/watch?v=wtLJPvx7-ys  </a>查看。</p><h3 id="物質設計-material-design-工具">物質設計（Material Design）工具</h3><p><span style="font-weight: normal;">看完這些大片的色彩</span><span style="font-weight: normal;">、轉場</span><span style="font-weight: normal;">、動畫效果，不知道身為開發者的你臉綠不綠，反正我綠了。 這樣該如何應用於 app 開發哩? 整個開發成本還了得?</span></p><div><div><div><div>還好 Google 還提供了一些配套工具(但卻不是出現在 Android L)。</div><div></div><div>(未完待續)</div><div></div><div><h3 id="參考資料">參考資料</h3><ul><li>官網 <a href="http://www.google.com/design/spec/material-design/introduction.html" target="_blank" rel="noopener">http://www.google.com/design/spec/material-design/introduction.html</a></li><li>Google I/O 2014 - Keynote (14:18) Matias Duarte 介紹 Materia Design <a href="https://www.youtube.com/watch?v=wtLJPvx7-ys" target="_blank" rel="noopener">https://www.youtube.com/watch?v=wtLJPvx7-ys </a></li><li>中文翻譯 <a href="http://www.ui.cn/Material/index.html" target="_blank" rel="noopener">http://www.ui.cn/Material/index.html</a></li></ul></div></div></div></div>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> webframework </tag>
            
            <tag> design </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Code Flower of Gaia - The firefox OS front end</title>
      <link href="/2015/01/06/Code-Flower-of-Gaia-The-firefox-OS-front-end/"/>
      <url>/2015/01/06/Code-Flower-of-Gaia-The-firefox-OS-front-end/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;">[![](http://3.bp.blogspot.com/-A5omYli3oD8/VKy7ZhFdo4I/AAAAAAAADx4/lmK6VlkaxC8/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-01-07%2B%E4%B8%8B%E5%8D%8812.51.22.png)&nbsp;](http://3.bp.blogspot.com/-A5omYli3oD8/VKy7ZhFdo4I/AAAAAAAADx4/lmK6VlkaxC8/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-01-07%2B%E4%B8%8B%E5%8D%8812.51.22.png)</div><div class="separator" style="clear: both; text-align: center;"></div>There are [several source code visualization](https://www.codefellows.org/blog/visualizing-the-history-of-node-js-via-git-commits) tools available for choose. I've tried  [Code Swarm](https://code.google.com/p/codeswarm/) long time ago and this time I'd like to try something that can be done on web directly. So, here's the [Gaia source code visulization](http://gasolin.github.io/CodeFlower/) rendered by [CodeFlower](http://redotheweb.com/CodeFlower/) via [D3.js](http://d3js.org/).<p>The prosperity of blossom denotes different</p><div class="separator" style="clear: both; text-align: center;">[![](http://1.bp.blogspot.com/-Vthdxeyf8Eo/VKy89BNpqaI/AAAAAAAADyE/mBdj3ZX7ASc/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-01-07%2B%E4%B8%8B%E5%8D%8812.57.51.png)&nbsp;](http://1.bp.blogspot.com/-Vthdxeyf8Eo/VKy89BNpqaI/AAAAAAAADyE/mBdj3ZX7ASc/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-01-07%2B%E4%B8%8B%E5%8D%8812.57.51.png)</div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: left;">Orange is the settings app flower. The upperside are modulized setting panels. We can see good order of them. The downside crowds are things that not that modularized.</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: center;">[![](http://2.bp.blogspot.com/-KYFYxGwq86A/VKy-cCI-5dI/AAAAAAAADyQ/cuUaw_LCZrA/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-01-07%2B%E4%B8%8B%E5%8D%881.03.23.png)&nbsp;](http://2.bp.blogspot.com/-KYFYxGwq86A/VKy-cCI-5dI/AAAAAAAADyQ/cuUaw_LCZrA/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-01-07%2B%E4%B8%8B%E5%8D%881.03.23.png)</div><div class="separator" style="clear: both; text-align: left;">The purple sparkled flower is gaia web components. The main part is gaia-header, the top left part is gaia-grid.</div><div class="separator" style="clear: both; text-align: left;"><span id="goog_2114704576"></span><span id="goog_2114704577"></span></div><div class="separator" style="clear: both; text-align: center;">[![](http://3.bp.blogspot.com/-aADuKdPoumA/VKy_fsik7WI/AAAAAAAADyk/CrMWTIDgchg/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-01-07%2B%E4%B8%8B%E5%8D%881.08.21.png)](http://3.bp.blogspot.com/-aADuKdPoumA/VKy_fsik7WI/AAAAAAAADyk/CrMWTIDgchg/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-01-07%2B%E4%B8%8B%E5%8D%881.08.21.png)</div><span id="goog_504565697"></span><span id="goog_504565698"></span><p>The system app is a flower with a more concrete shape.</p><div class="separator" style="clear: both; text-align: center;">[![](http://3.bp.blogspot.com/-Chy7pnUtwLA/VKy_9F84vUI/AAAAAAAADys/u6VfY--3iVQ/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-01-07%2B%E4%B8%8B%E5%8D%881.10.56.png)](http://3.bp.blogspot.com/-Chy7pnUtwLA/VKy_9F84vUI/AAAAAAAADys/u6VfY--3iVQ/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-01-07%2B%E4%B8%8B%E5%8D%881.10.56.png)</div>The calendar app (in yellow) looks like a pretty Dandelion.<div class="separator" style="clear: both; text-align: center;">[![](http://1.bp.blogspot.com/-e2QDiaJBwTE/VKzAcvmIm1I/AAAAAAAADy0/1rhVYaG1Ajo/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-01-07%2B%E4%B8%8B%E5%8D%881.12.53.png)](http://1.bp.blogspot.com/-e2QDiaJBwTE/VKzAcvmIm1I/AAAAAAAADy0/1rhVYaG1Ajo/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-01-07%2B%E4%B8%8B%E5%8D%881.12.53.png)</div>&nbsp;What about others? go [Gaia source code visulization](http://gasolin.github.io/CodeFlower/) and check by yourself. (The repo is a digest from 2015/1/7 master) <p>And you can make your own by forking <a href="https://github.com/fzaninotto/CodeFlower" target="_blank" rel="noopener">CodeFlower</a> from github.</p>]]></content>
      
      
        <tags>
            
            <tag> FirefoxOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2014完食的書</title>
      <link href="/2015/01/03/2014%E5%AE%8C%E9%A3%9F%E7%9A%84%E6%9B%B8/"/>
      <url>/2015/01/03/2014%E5%AE%8C%E9%A3%9F%E7%9A%84%E6%9B%B8/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: left;">2013年[曬了一下書架](http://blog.gasolin.idv.tw/2013/12/blog-post.html)，2014年過去了，終於今年沒讀破百本。（今年共讀 86 本，16052頁）也許是由於今年做了許多不甚成功的專案，佔用了不少時間，或是因為家中小朋友 1 + 1 的效應開始顯現。但其實也看了不少大部頭的書。值得注意的是看的86本中，電子版已佔了32本（38%）。</div><table class="help_table"><tbody><tr><td></td>  <td></td>  <td></td><td></td> </tr><tr>  <td></td><td></td><td></td></tr></tbody></table><div class="separator" style="clear: both; text-align: left;">來曬一下今年看過的書，順便從中推薦些好書（由近至遠）</div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;">![](http://1.bp.blogspot.com/-OitxN6NZ9z8/VKodu1NXMMI/AAAAAAAADw8/-eIWqijFX8g/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-01-05%2B%E4%B8%8B%E5%8D%881.13.52.png)</div>今年剛開始看了Google/Apple世紀大格鬥與「什麼都能賣！：貝佐斯如何締造亞馬遜傳奇」的kindle簡體版。瞭解各大巨頭間的糾葛與發跡史還蠻有意思的。<p>「超速習法」對於閱讀前的「待機」心理準備部分歸納的非常完備，後半實際閱讀時的方法相對表達地沒那麼清楚。</p><p>Kindle上看完的「哲學家們都干了些什麼？」。透過一邊介紹有代表性哲學家的故事，將哲學起始到近代的哲學思想都點水過了一遍。對於我這樣的初學者來說還是很有幫助。</p><div class="separator" style="clear: both; text-align: center;">[![](http://4.bp.blogspot.com/--yo9QAvrT7Q/VKog6o-ldYI/AAAAAAAADxI/ZtF8dfyoaQA/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-01-05%2B%E4%B8%8B%E5%8D%881.14.41.png)](http://4.bp.blogspot.com/--yo9QAvrT7Q/VKog6o-ldYI/AAAAAAAADxI/ZtF8dfyoaQA/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-01-05%2B%E4%B8%8B%E5%8D%881.14.41.png)</div>&nbsp;過年和元旦依舊是漫畫的領地，「銀之匙」實在是部很有趣的漫畫，身在台灣就能體驗日本的農校生活。<p>為了稍微瞭解 Android 底層開發以完成「<a href="https://leanpub.com/gaiafromabove" target="_blank" rel="noopener">Beyond Web and FirefoxOS</a>」的撰寫，翻譯了「<a href="http://www.books.com.tw/products/0010632066" target="_blank" rel="noopener">Android BSP與系統移植開發</a>」一書。</p><div class="separator" style="clear: both; text-align: center;">[![](http://4.bp.blogspot.com/-cWZZdLYhoGY/VKohswBD8-I/AAAAAAAADxQ/hQOyHC58ElY/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-01-05%2B%E4%B8%8B%E5%8D%881.31.04.png)](http://4.bp.blogspot.com/-cWZZdLYhoGY/VKohswBD8-I/AAAAAAAADxQ/hQOyHC58ElY/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-01-05%2B%E4%B8%8B%E5%8D%881.31.04.png)</div><p>在kindle上複習了一遍yy小說「冒牌大英雄」，另外也拜讀王伯達先生的新書「再見，世界工廠」，「生產才能創造踏實的經濟成長」等想法在年末看到時寒冰先生的「未來二十年，經濟大趨勢」中也有出現。</p><p>數位新時代</p><p>在過去十年裡，資訊的獲取方式發生了巨大的變化。可汗學院、維基百科、數以億計的部落格，多如牛毛的網站，只要你有興趣，就可以找到任何資訊，不論你在哪裡。學校的資訊媒介作用已經不再像過去那麼重要，培養孩子「發現資訊的願望」在現在更為重要。</p><p>再見世界工廠</p><p>這些年可以看到對岸的改變，應進一步認識與了解對岸與東南亞的週邊鄰國發展狀況</p><div class="separator" style="clear: both; text-align: center;">[![](http://2.bp.blogspot.com/-_Hb1_Fx7yUI/VKoiwxQZ5mI/AAAAAAAADxc/Pu6WHabraUY/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-01-05%2B%E4%B8%8B%E5%8D%881.35.37.png)](http://2.bp.blogspot.com/-_Hb1_Fx7yUI/VKoiwxQZ5mI/AAAAAAAADxc/Pu6WHabraUY/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-01-05%2B%E4%B8%8B%E5%8D%881.35.37.png)</div>&nbsp;[30歲前，畫出你的生涯藍圖](http://www.anobii.com/books/30%E6%AD%B2%E5%89%8D%EF%BC%8C%E7%95%AB%E5%87%BA%E4%BD%A0%E7%9A%84%E7%94%9F%E6%B6%AF%E8%97%8D%E5%9C%96/9789866032516/01bf3bb1fd156bedae/)<p>我對圖解與量化自我類的書一直沒什麼抵抗力。這本算言之有物，但一年過去了，實踐上還是差了點 /_\。</p><p><a href="http://www.anobii.com/books/%E7%B5%A6%E4%B8%AD%E5%AD%B8%E7%94%9F%E7%9A%84%E6%99%82%E9%96%93%E7%AE%A1%E7%90%86%E8%A1%93/9789862416983/01faa14757eb969216/" target="_blank" rel="noopener">給中學生的時間管理術</a></p><p>各種時間管理的入門概念，沒看過科維，GTD的人從這邊入門也不錯</p><p>從年初開始看到年中才看完「Javascript Pattern」，作者很仔細地推導各種 Javascript 模式，相當有意思。</p><p>「遊戲化時代」 這本書的作者之前有在 coursera 開MOOC課程，雖然我沒上完，但可以感覺到課程內容比書中提到的更多元。這次終於讀完整本。</p><div class="separator" style="clear: both; text-align: center;">[![](http://3.bp.blogspot.com/-BXU3Zr6RgjA/VKojz9wgjPI/AAAAAAAADxo/U0x0vBRBczs/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-01-05%2B%E4%B8%8B%E5%8D%881.39.57.png)](http://3.bp.blogspot.com/-BXU3Zr6RgjA/VKojz9wgjPI/AAAAAAAADxo/U0x0vBRBczs/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2015-01-05%2B%E4%B8%8B%E5%8D%881.39.57.png)</div>郝明義先生的工作DNA三卷也拜讀完了，值得一觀。小米的「參與感」和360「我的互聯網方法論」書雖然打廣告意味濃厚，但比起台灣的捧CEO類型商業書來，多了些實在的想法。<p>「一個人的經濟」 前半段講到日本即將面對的現況，不久也會出現在台灣。提早察覺到的趨勢，可以讓我做些什麼哩？</p><p>小旅行，繪本，工作，時間管理，哲學，趨勢。我的閱讀依然雜食。</p><p>PS: 感覺Anobii已經幾乎不更新，許多書已經不是輸入ISBN就可以自動出現，所以今年的書單裡還是有些漏書。也許看倌可以建議我將書架搬去哪好？</p>]]></content>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移民效應，是自幹一套還是拿別人的 Open Source 來用？</title>
      <link href="/2014/12/14/%E7%A7%BB%E6%B0%91%E6%95%88%E6%87%89%EF%BC%8C%E6%98%AF%E8%87%AA%E5%B9%B9%E4%B8%80%E5%A5%97%E9%82%84%E6%98%AF%E6%8B%BF%E5%88%A5%E4%BA%BA%E7%9A%84-Open-Source-%E4%BE%86%E7%94%A8%EF%BC%9F/"/>
      <url>/2014/12/14/%E7%A7%BB%E6%B0%91%E6%95%88%E6%87%89%EF%BC%8C%E6%98%AF%E8%87%AA%E5%B9%B9%E4%B8%80%E5%A5%97%E9%82%84%E6%98%AF%E6%8B%BF%E5%88%A5%E4%BA%BA%E7%9A%84-Open-Source-%E4%BE%86%E7%94%A8%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>從 <a href="http://mmdays.com/2014/12/12/yahoo_comeback/" target="_blank" rel="noopener">Marissa Mayer 與起死回生的雅虎</a> 一文中，可以看到雅虎工程師對自家 CEO 的讚美。其中一點提到雅虎內部有很多系統設計是與外界完全不一樣的，直到新 CEO 上任才放下使用多年的YUI而擁抱其他Open Source團隊維護的專案。</p><p>從樂觀的角度看：因為當初Yahoo工程師夠強（Douglas Crockford），覺得自己做的東西比別家的好，所以乾脆自己做。有這種「愛自幹」的精神，所以才會做出很多跟其他地方不一樣的東西，這是feature。從反面看則是因為長期跟人家用的工具不一樣，所以沒辦法直接使用別人做的Open source工具，這也是bug。</p><p>以前的Yahoo「不擁抱其他Open Source團隊維護的專案」嗎？Yahoo當然某種程度是支持Open Source的公司。就我所知，Yahoo是間很早開始支援 <a href="http://hadoop.apache.org/" target="_blank" rel="noopener">Hadoop</a> 開源專案的公司。Yahoo使用 Hadoop，也延攬 Hadoop 開發者進公司，所以「不擁抱其他Open Source團隊維護的專案」這個論點也許是存在的。</p><p>我們來看看 Google。類似於 YUI，Google 自己也有一套 <a href="https://developers.google.com/closure/library/" target="_blank" rel="noopener">Closure Library</a>，多數 Google 的產品都建構於其上，雖然開源，但外面專案會使用它的也少之又少。而 Android 呢，<a href="https://source.android.com/" target="_blank" rel="noopener">AOSP</a>專案裡也有不少只能在 Android 工具鏈中使用的工具，但從以前基於 Eclipse 的 Android 開發工具到最近釋出的Android Studio 1.0是基於 IntelliJ 的開發工具，部分的Google似乎較接受擁抱其他Open Source團隊維護的專案。</p><p>在寫下這兩段話的同時，我比較這兩家公司擁抱其他Open Source團隊維護的專案的原因，竟發現兩者改變的相同點在於「併購」。當Google併購Android，就接受了Android團隊與他們提出的開發工具。當Yahoo開始大採購，許多新創團隊進入Yahoo大家庭的同時，也帶進各團隊使用的「其他Open Source團隊維護的專案」。也就是說，當新移民團隊進入這個團體時，帶來了改變。</p><p>比起大公司而言，新移民團隊在被併購前的資源有限，使用其他Open Source團隊維護的專案是很自然的事。團隊被併購後若需使用併購方的技術重新打造產品，將是相當痛苦的事情。因此在Yahoo大採購後許多原有規矩被改寫，恐怕背後也有這些新團隊帶來的影響。</p><p>用社會學可能可以解釋為什麼是團隊而不是個人？因為改變一直是困難的事。原有的團隊在過去磨合/開發的過程中已經凝聚出了一些共識。移民到新團體的過程中，新移民團隊需要參與和適應團體的一些運作方式，而團體則需接納和適應新移民團隊的一些習俗。</p><p>回來想想 Mozilla 也做了很多 Open Source 專案，但整套工具常常僅供自己相關的專案使用。從自身找原因，自家工具的開源專案原本就是為了滿足自己的需求。當外部出現對這套工具的需求時，由於公司人力資源調配，優先要滿足的還是自身專案時程的需求。當用到的Open Source專案在公司裡就有人可以諮詢，當然比去找其他Open Source團隊維護的專案來地可靠（？）。許多專案在這樣的思維下就使用自己寫的工具，當意識到的那天，已經回不去了。</p><p>若想避免現在的feature變成未來的bug，在決定自幹專案工具前，先想一想（或search一下），也許結果會不一樣。</p>]]></content>
      
      
        <tags>
            
            <tag> Mozilla </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用 FLUX 架構的概念，漸進改善一般 Javascript 程式碼的組織方式</title>
      <link href="/2014/12/03/%E4%BD%BF%E7%94%A8-FLUX-%E6%9E%B6%E6%A7%8B%E7%9A%84%E6%A6%82%E5%BF%B5%EF%BC%8C%E6%BC%B8%E9%80%B2%E6%94%B9%E5%96%84%E4%B8%80%E8%88%AC-Javascript-%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%9A%84%E7%B5%84%E7%B9%94%E6%96%B9%E5%BC%8F/"/>
      <url>/2014/12/03/%E4%BD%BF%E7%94%A8-FLUX-%E6%9E%B6%E6%A7%8B%E7%9A%84%E6%A6%82%E5%BF%B5%EF%BC%8C%E6%BC%B8%E9%80%B2%E6%94%B9%E5%96%84%E4%B8%80%E8%88%AC-Javascript-%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%9A%84%E7%B5%84%E7%B9%94%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>前陣子 Facebook 推出一套名為 <a href="http://fluxxor.com/what-is-flux.html" target="_blank" rel="noopener">FLUX</a> 的前端程式架構，期望能幫過去沒有條理，程式多了結構就亂得像一團麵條的 Javascript 程式寫法找到一個理想的組織方法。</p><h3 id="flux-簡介">FLUX 簡介</h3><blockquote><p>視圖（View）-&gt; 操作（Action）-&gt; 分配器（Dispatcher）-&gt; 資料處理器（Store）-&gt; 繪圖者（Renderer）-&gt; 視圖（View）FLUX 的基本原理有別於常用的 MVC（Model/View/Controller）或 MVVM（Model/View/ViewModel）是在M，Ｖ，C（VM）三者之間互相傳遞或修改資料，</p></blockquote><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;">[![](http://fluxxor.com/images/mvc-simple.png)&nbsp;](http://fluxxor.com/images/mvc-simple.png)</div><div class="separator" style="clear: both; text-align: center;">MVC (image from [fluxxer](http://fluxxor.com/what-is-flux.html))</div>FLUX 重新定義整個組織架構為**單向**的視圖（View）-&gt; 操作（Action）-&gt; 分配器（Dispatcher）-&gt; 資料處理器（Store）-&gt; 繪圖者（Renderer）-&gt;&nbsp; 視圖（View）的運作流程。<div class="separator" style="clear: both; text-align: center;">[![](http://fluxxor.com/images/flux-simple.png)](http://fluxxor.com/images/flux-simple.png)</div><div style="text-align: center;">FLUX (image from [fluxxer](http://fluxxor.com/what-is-flux.html))</div>就我的理解，FLUX 的架構可以拆分為三個重點流程：<ul><li>跟視圖（View）有關的操作（Action），都透過事件註冊到分配器（Dispatcher）去。</li><li>分配器 （Dispatcher）負責將操作（Action）傳遞給需要的資料處理器（Store）。</li><li>資料處理器（Store）負責跟資料直接相關的操作。若資料處理器（Store）修改的結果需要反映到視圖（View）上，可以透過發送訊息通知給繪圖者（Renderer）處理。這邊講到了原本 FLUX 概念圖中沒有提到的繪圖者（Renderer）這個角色，在 Facebook 中他們是用 <a href="http://facebook.github.io/react/" target="_blank" rel="noopener">ReactJS</a> 處理。</li></ul><p>瞭解其基本架構之後，我發現其實就算不用他們提供的函式庫，用 Javascript 內建的 addEventListener, handleEvent, customEvent 等方法，也可以利用前面所提的三個重點，漸進寫出符合 FLUX 精神的程式。</p><h3 id="目前的-js-組織方式">目前的 JS 組織方式</h3><p>一個常見的JS檔案，一般的架構是</p><blockquote><p>var App = {    init: function app_init() {      // get view      this.view1 = document.getElementById(‘xxx1’);      this.view2 = document.getElementById(‘xxx2’);           // do stuff      this.view1.addEventListener(‘click’, function() {        // do something      });      this.view2.addEventListener(‘keyup’, function() {        // do something      });    }};若我們想要將視圖（View）的操作從 init 分離開來，大部分的人會這樣做</p></blockquote><blockquote><p> var App = {    init: function app_init() {      // get view      this.view1 = document.getElementById(‘xxx1’);      this.view2 = document.getElementById(‘xxx2’);           // do stuff      this.view1.addEventListener(‘click’, <strong>this.clickView1</strong>);      this.view2.addEventListener(‘keyup’, <strong>this.keyupView2</strong>);    },</p><p>    <strong>clickView1</strong>: function app_clickView1() {       // do something    },</p><p>    <strong>keyupView2</strong>: function app_keyupView2() {       // do something    }</p><p>};如果在 clickView1 或 keyupView2 中要呼叫到 App 裡的參數或方法，那麼我們需要在addEventListener 時使用 bind(this)</p></blockquote><blockquote><p> var App = {    init: function app_init() {      // get view      this.view1 = document.getElementById(‘xxx1’);      this.view2 = document.getElementById(‘xxx2’);           // do stuff      this.view1.addEventListener(‘click’, this.clickView1**.bind(this)<strong>);      this.view2.addEventListener(‘keyup’, this.keyupView2</strong>.bind(this)**);    },</p><p>    clickView1: function app_clickView1() {       // do something    },</p><p>    keyupView2: function app_keyupView2() {       // do something       this.clickView1();    }</p><p>};大多數書籍的範例大概就停在這裡，沒有再進一步探討程式的組織架構了。即使是龐大的 Javascript 專案如 <a href="https://github.com/mozilla-b2g/gaia" target="_blank" rel="noopener">Gaia</a>，不少部分的程式碼組織方式也是如此。在這種組織方式裡，若有很多的視圖（View）需要操作或修改，我們的程式碼就會開始亂起來。</p></blockquote><p>下面來試著將以上程式漸進改為 FLUX 架構。</p><h3 id="改進建議一：將-handleevent-當作-dispatcher-來使用">改進建議一：將 handleEvent 當作 Dispatcher 來使用</h3><blockquote><p>跟視圖（View）有關的操作（Action），都透過事件註冊到分配器（Dispatcher）去。 （溫馨提示：IE 9以上版本才有支援 handleEvent 方法，在之前版本上使用要加 polyfill）</p></blockquote><p>我們先來想想看視圖（View）跟操作（Action）在前端 Javascript 程式中分別代表著什麼。視圖（View）很明顯，就是透過 getElementById 等方法，從 HTML 中取得代表對應節點（Node）的元素（element）。</p><p>若想要套用FLUX架構，我們可以將附加在各個元素（element）上的事件行為分離，將事件註冊到一個統一的地方（分配器），在這個地方對不同的事件進行操作。</p><p> Javascript 內建的分配器叫做 <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventListener" target="_blank" rel="noopener">handleEvent</a>，它可以拿來處理任何事件Event，寫法如下。</p><blockquote><p> var App = {    init: function app_init() {      // get view      this.view1 = document.getElementById(‘xxx1’);      this.view2 = document.getElementById(‘xxx2’);           // do stuff      this.view1.addEventListener(‘click’, <strong>this</strong>);      this.view2.addEventListener(‘keyup’, <strong>this</strong>);    },</p><p>    <strong>handleEvent</strong>: app_handleEvent(evt) {       switch (evt.type) {         case ‘click’:           switch (evt.target) {              case this.view1:                this.clickView1();                break;           }           break;         case ‘keyup’:            switch (evt.target) {              case this.view2:                this.keyupView2();                break;             }       }    },</p><p>    clickView1: function app_clickView1() {       // do something    },</p><p>    keyupView2: function app_keyupView2() {       // do something       this.clickView1();    }</p><p>};這麼做帶來的明顯好處是所有的呼叫都統一在 handleEvent 中，可以更容易地追查到。</p></blockquote><p>這麼寫也可以在 addEventListener/removeEventListener 時不用使用 bind(this)，而 bind(this) 經常有些 side effect 需要特別留意。</p><p>例如假使我們想要反註冊 view1 上的 click 方法，使用以下寫法</p><blockquote><p> this.view1.removeEventListener(‘click’, this.clickView1.bind(this));其實並沒有將第一個 event 移除。因為使用了 **.bind(this) **後，回傳的其實是一個新的 instance…。正確的寫法是<strong>this.bindClickView1</strong> = this.clickView1.bind(this)this.view1.addEventListener(‘click’, this.bindClickView1);…this.view1.removeEventListener(‘click’, this.bindClickView1);用 handleEvent 可以省點事，要反註冊時也傳入 this 即可。this.view1.removeEventListener(‘click’, this);</p></blockquote><h3 id="改進建議二：將資料處理的部分分離-使用自訂事件來改變-store-狀態">改進建議二：將資料處理的部分分離，使用自訂事件來改變 Store 狀態</h3><blockquote><p>分配器 （Dispatcher）負責將操作（Action）傳遞給需要的資料處理器（Store）資料處理器（Store）負責跟資料直接相關的操作。在稍大的 Web App 中，我們可以另外定一個 Object 來處理資料相關的事宜。一般我們的寫法會是</p></blockquote><blockquote><p>// Store.jsfunction Store() {  this._data: 0;};</p><p>Store.prototype = {  getSomething: function s_getSomething() {    return this._data;  },</p><p>  doSomething: function s_doSomething() {    this._data += 1;  },</p><p>  setSomething: function s_setSomething(val) {    this._data = val;  }};</p><p>// App.jsvar App = {  this.store = new Store();  this.store.init();  this.store.getSomething();  this.store.doSomething();  this.store.setSomething(2);};若想要套用FLUX架構，首先我們要避免從資料處理器（Store）外部直接改變資料處理器（Store）。我們可以透過在呼叫端使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window.dispatchEvent" target="_blank" rel="noopener">window.DispatchEvent</a> 發送自訂事件（<a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent" target="_blank" rel="noopener">CustomEvent）</a>，並在資料處理器（Store）中接收自訂事件來做到。</p></blockquote><p>如此一來，資料處理器（Store）將只留下 get 方法來讓外部取得 Store 想提供的資料。</p><p>另外如果程式碼改善進入到下一個重點，在操作（Action）時應該不需要再呼叫 Store.getSomething 了，我們將資料處理器（Store）的 getSomething 方法留著給繪圖者（Renderer）使用 。</p><blockquote><p>// Store.jsfunction Store() {  this._data: 0;};</p><p>Store.prototype = {  init: function s_init() {     <strong>window.addEventListener(‘store_do’, this);</strong><strong>     window.addEventListener(‘store_set’, this);</strong>  },</p><p>  handleEvent: s_handleEvent(evt) {    switch(evt.type) {      case ‘store_do’:        this.doSomething();        break;      case ‘store_set’:        this.setSomething(<strong>evt.detail.val</strong>);        break;    }  },</p><p>  getSomething: function s_getSomething() {    return this._data;  },</p><p>  _doSomething: function s_doSomething() {    this._data += 1;  },</p><p>  _setSomething: function s_setSomething(val) {    this._data = val;  }};</p><p>// App.jsvar App = {  this.store = new Store();  this.store.init();  <a href="//this.store.getSomething">//this.store.getSomething</a>();  **window…dispatchEvent(new CustomEvent(‘store_do’));  <strong><strong>window…dispatchEvent(new CustomEvent(‘store_set’,</strong><strong>    {‘detail’:{‘val’:2}}  )); **};這麼做帶來的明顯好處是</strong>測試</strong>時可以簡單地將 Store 與 App 分開來測試，這對大型App是很重要的。</p></blockquote><h3 id="改進建議三：讓-renderer-來處理視圖">改進建議三：讓 Renderer 來處理視圖</h3><blockquote><p>若資料處理器（Store）修改的結果需要反映到視圖（View）上，可以透過發送訊息通知給繪圖者（Renderer）處理&gt; //  Renderer.jsvar ClickRenderer = {  init: function s_init(element, Store) {     this.element = element;     this.store = Store;     <strong>window.addEventListener(‘render_view1’, this);</strong>  },</p><p>  handleEvent: s_handleEvent(evt) {    switch(evt.type) {      case ‘render_view1’:        this.element.textConent = this.store.getSomething();        break;    }  }};</p><p>// Store.jsfunction Store() {  this._data: 0;};</p><p>Store.prototype = {  init: function s_init() {     window.addEventListener(‘store_do’, this);     window.addEventListener(‘store_set’, this);  },</p><p>  handleEvent: s_handleEvent(evt) {    switch(evt.type) {      case ‘store_do’:        this.doSomething();        break;      case ‘store_set’:        this.setSomething(evt.detail.val);        break;    }  },</p><p>  getSomething: function s_getSomething() {    return this._data;  },</p><p>  _doSomething: function s_doSomething() {    this._data += 1;    <strong>window…dispatchEvent(new CustomEvent(‘render_view1’));</strong>  },</p><p>  _setSomething: function s_setSomething(val) {    this._data = val;  }};</p><p>// App.jsvar App = {  init: function a_init() {    // get view    this.view1 = document.getElementById(‘xxx1’);    this.view2 = document.getElementById(‘xxx2’);    this.store = new Store();    this.store.init();    **ClickRenderer.init(this.view1, **<strong>this.store);</strong>  },</p><p>   handleEvent: a_handleEvent(evt) {    window…dispatchEvent(new CustomEvent(‘store_do’));    <a href="//Store.setSomething">//Store.setSomething</a>(2)    window…dispatchEvent(new CustomEvent(‘store_set’,      {‘detail’:{‘val’:2}}    ));};上段程式在 App 中註冊了 ClickRenderer，並傳入 Store 與 所需的 View 元件。所有的介面更新全交由 ClickRenderer 處理。</p></blockquote><p>（另一個方法是讓繪圖者（Renderer）監看資料處理器（Store）的狀態，然後去改變視圖（View）） <a href="http://fluxxor.com/documentation/store-watch-mixin.html" target="_blank" rel="noopener">http://fluxxor.com/documentation/store-watch-mixin.html</a></p><h3 id="none"></h3><h3 id="總結">總結</h3><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: left;">整理完後，一般 javascript 套用 flux 架構的運作流程如下：</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: center;">![](http://i.imgur.com/hpHcPRu.png)</div>簡而言之，上面的各種建議是鼓勵大家多使用 Javascript 內建的 addEventListener, handleEvent, customEvent 等方法。透過大量使用 event，我們可以改善 Javascript 程式邏輯，資料，與介面元件之間的關聯程度。<p>將 FLUX 架構拆分為三個重點流程來理解或實踐的好處，是我們能漸進地遵循其中一些方法來改善我們現有的程式架構。</p><p>以上是我關於如何使用 FLUX 架構在一般 Javascript 組織方式的第三個版本，可能有些錯謬之處，還迎大家討論或給予建議。</p>]]></content>
      
      
        <tags>
            
            <tag> webapp </tag>
            
            <tag> FirefoxOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一個 WebApp，各自表述</title>
      <link href="/2014/08/23/%E4%B8%80%E5%80%8B-WebApp%EF%BC%8C%E5%90%84%E8%87%AA%E8%A1%A8%E8%BF%B0/"/>
      <url>/2014/08/23/%E4%B8%80%E5%80%8B-WebApp%EF%BC%8C%E5%90%84%E8%87%AA%E8%A1%A8%E8%BF%B0/</url>
      <content type="html"><![CDATA[<p>前陣子寫了一篇「<a href="http://tech.mozilla.com.tw/posts/4803/%E5%83%8F%E5%8E%9F%E7%94%9F%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E4%B8%80%E6%A8%A3%E7%9A%84-webapp%EF%BC%9F%E8%B6%95%E5%BF%AB%E5%AD%B8%E8%B5%B7%E4%BE%86%EF%BC%81" target="_blank" rel="noopener">像原生應用程式一樣的 WebApp？趕快學起來！</a>」，稍微提到現在 WebApp 在桌面和移動端上已經可以像一般應用程式一樣安裝、移除、離線使用。</p><p>再進一步觀之，webapp 至今尚未有統一的標準，但Adobe、Google、Mozilla已分別為此推出 Cordova (PhoneGap)、Chrome Apps、WebApp等多種方式來達成此目標。</p><p><strong>Cordova (PhoneGap)</strong></p><p>Cordova 其實是在各個智慧手機平台上實作共用的Native Adapter，透過 Javascript Interface 來存取設備功能。所以得以使用同一套 web API，而能在不同的平台上執行。</p><p>因此 Cordova App 在各平台上執行的效果取決於該平台的 WebView 支援程度。所幸近期兩大 OS 的 WebView 都已隨自家瀏覽器更新，在新版 OS 上 Webapp 的效能已漸漸不再是太大的問題。</p><p><strong>Chrome Apps</strong></p><p>Chrome Apps 可以在 Chrome 桌面瀏覽器上執行，並提供修改版的 Cordova，Chrome App 可以使用相同的 API 移植到 Android App 上。</p><p>近期 Chrome 也進一步釋出 <a href="https://chrome.google.com/webstore/detail/chrome-dev-editor-develop/pnoffddplpippgcfjdhbmhkofpnaalpg" target="_blank" rel="noopener">Chrome Dev Editor</a> 與  App Dev Tool，提供在瀏覽器上即可編輯網頁App 與即時在 Android 手機上預覽的功能。</p><p><strong>Mozilla Webapp</strong></p><p>Mozilla Webapp 可以在「<a href="http://tech.mozilla.com.tw/posts/4803/%E5%83%8F%E5%8E%9F%E7%94%9F%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E4%B8%80%E6%A8%A3%E7%9A%84-webapp%EF%BC%9F%E8%B6%95%E5%BF%AB%E5%AD%B8%E8%B5%B7%E4%BE%86%EF%BC%81" target="_blank" rel="noopener">像原生應用程式一樣的 WebApp？趕快學起來！</a>」這篇中找到比較詳細的解釋。</p><p>開發工具的部分，近期 Mozilla 亦將 WebIDE 整合進瀏覽器中。除HTML/JS/CSS編輯器外，也附帶Firefox OS 模擬器與 adb 工具，所以在桌面安裝了 Firefox 後可直接在 Firefox 中開發 Web app。開發的 Web app 除了在瀏覽器或模擬器中測試外，亦可以直接傳送到 Firefox OS裝置或 Android 裝置（需要裝 Firefox for Android）上測試。</p><p>以上三者之間各自有些異同之處，但並非不可調和。Cordova 已正式支援輸出 Firefox OS webApp，Chrome App 與 Mozilla Webapp 也已共用大部份的 manifest 格式。Chrome Apps 也透過修改 Cordova，來讓 Chrome Apps 的特有 web API能運行在 Android 手機上。</p><p>若想開始嘗試寫 Webapp，我寫的 <a href="https://github.com/webapplate/webapplate" target="_blank" rel="noopener">We<span id="goog_609996666"></span><span id="goog_609996667"></span>bapplate</a> 除了可以幫你處理掉開新專案、封裝App、整合測試框架、程式碼風格檢查等問題，也已經同時支援 Mozilla WebApp 、 Chrome Apps，可以參考看看。</p>]]></content>
      
      
        <tags>
            
            <tag> webapp </tag>
            
            <tag> FirefoxOS </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>遷移個人首頁經驗分享</title>
      <link href="/2014/07/17/%E9%81%B7%E7%A7%BB%E5%80%8B%E4%BA%BA%E9%A6%96%E9%A0%81%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB/"/>
      <url>/2014/07/17/%E9%81%B7%E7%A7%BB%E5%80%8B%E4%BA%BA%E9%A6%96%E9%A0%81%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;">[![](http://2.bp.blogspot.com/-XZvTEPfDWEg/U54DKkNzvWI/AAAAAAAADqU/MO__rAkee0A/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-06-16+%E4%B8%8A%E5%8D%884.33.26.png)](http://2.bp.blogspot.com/-XZvTEPfDWEg/U54DKkNzvWI/AAAAAAAADqU/MO__rAkee0A/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-06-16+%E4%B8%8A%E5%8D%884.33.26.png)</div><div style="text-align: center;">在DNS代管商網站上輸入要切換的CNAME</div><div class="separator" style="clear: both; text-align: center;">[![](http://1.bp.blogspot.com/-yonEpwxModo/U54Cj-dZR3I/AAAAAAAADqM/Bpd-Jb3hNnk/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-06-16+%E4%B8%8A%E5%8D%884.30.42.png)](http://1.bp.blogspot.com/-yonEpwxModo/U54Cj-dZR3I/AAAAAAAADqM/Bpd-Jb3hNnk/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-06-16+%E4%B8%8A%E5%8D%884.30.42.png)</div><div style="text-align: center;">在Openshift中輸入domain name alias</div><div class="separator" style="clear: both; text-align: center;">[![](http://3.bp.blogspot.com/-JZVIOkoBZho/U54FK8RYZnI/AAAAAAAADqg/mERAEpVHLoc/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-06-16+%E4%B8%8A%E5%8D%884.42.04.png)&nbsp;](http://3.bp.blogspot.com/-JZVIOkoBZho/U54FK8RYZnI/AAAAAAAADqg/mERAEpVHLoc/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2014-06-16+%E4%B8%8A%E5%8D%884.42.04.png)</div><div class="separator" style="clear: both; text-align: center;">遷移成功！</div><div class="separator" style="clear: both; text-align: center;"></div>趁週末將個人首頁[ www.gasolin.idv.tw](http://www.gasolin.idv.tw/) 從 [Google App Engine](https://appengine.google.com/)(GAE) 遷移至 [OpenShift](https://www.openshift.com/). 從2009年開始使用 GAE 架設個人首頁，從剛開始 (python, GAEO)，2012（Java, play framework），到今天遷移到 OpenShift（Node.js, [webapplate / Express](https://github.com/webapplate/webapplate)），使用了三種 Server SIde 技術。最近的這次遷移只用了兩天，就完成整個申請/移植/部署的過程。遷移的主因是 GAE 最近不再支援 Java 1.6，使得無法繼續使用 Play Framework 1.2.x 來部署。Play Framework 1.2.x 已經被完全改寫的 2.x 取代許久，而新版並未支援GAE。加上近年開始使用js的機會更多，於是乾脆搜尋了一下，選擇 [OpenShift](https://www.openshift.com/) 作為最新的遷居點。<p>除了 Play Framework 例外，GAEO我有參與開發，<a href="https://github.com/webapplate/webapplate" target="_blank" rel="noopener">webapplate</a> 則乾脆是自己弄來撰寫 Web App 的樣板。透過實際使用，目前可無痛部署到 <a href="https://github.com/gasolin/webapplate/wiki/Deployment#12-host-by-heroku" target="_blank" rel="noopener">Heroku</a>，<a href="https://github.com/gasolin/webapplate/wiki/Deployment#11-host-by-appfog" target="_blank" rel="noopener">AppFog</a>，<a href="https://github.com/gasolin/webapplate/wiki/Deployment#13-host-by-openshift" target="_blank" rel="noopener">OpenShift</a> 上，而不需修改程式碼。所以雖然說遷移只用了兩天，但其實為了弄好 <a href="https://github.com/webapplate/webapplate" target="_blank" rel="noopener">webapplate</a>，也準備了快一年。</p><p>由於  <a href="https://github.com/webapplate/webapplate" target="_blank" rel="noopener">webapplate</a> server side 使用 express 4搭配 <a href="http://paularmstrong.github.io/swig/docs/" target="_blank" rel="noopener">swig</a> (Django-like) 樣板(template)引擎使用，與原本使用的樣板架構一致，所以遷移上並沒有遇到什麼問題。</p><p><a href="https://github.com/webapplate/webapplate" target="_blank" rel="noopener">webapplate</a> <a href="https://github.com/gasolin/webapplate/blob/master/server.js" target="_blank" rel="noopener">server side</a> 已做過伺服器效能最佳化，使用<a href="https://developer.yahoo.com/yslow/" target="_blank" rel="noopener">yslow</a>或<a href="http://developers.google.com/speed/pagespeed/insights/" target="_blank" rel="noopener">pagespeed</a>都可以測到相當高分的結果。</p>]]></content>
      
      
        <tags>
            
            <tag> webframework </tag>
            
            <tag> GAE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>來自未來的CSS - media 查詢</title>
      <link href="/2014/05/05/%E4%BE%86%E8%87%AA%E6%9C%AA%E4%BE%86%E7%9A%84CSS-media-%E6%9F%A5%E8%A9%A2/"/>
      <url>/2014/05/05/%E4%BE%86%E8%87%AA%E6%9C%AA%E4%BE%86%E7%9A%84CSS-media-%E6%9F%A5%E8%A9%A2/</url>
      <content type="html"><![CDATA[<p>注意本篇提到的技巧僅適合用在特定平台的Webapp中，透過預處理器來針對特定使用平台做最佳化。但是在撰寫時仍然可以是完全跨平台的。</p><p>接續上一篇，我們繼續來重新發現一些對於有助於撰寫結構化CSS的一些CSS標準語法。<a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries" target="_blank" rel="noopener"></a><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries" target="_blank" rel="noopener">Media Query</a> 是撰寫 Responsive design web 響應式網頁的重要元素之一。透過諸如</p><pre><span class="k">@media</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">768px</span><span class="o">)</span> <span class="p">{</span>  ...<span class="p">}</span></pre><p>這樣的語法， 瀏覽器可以根據條件，刪選並套用特定的規則來顯示。這邊需要注意的是桌面瀏覽器與移動設備瀏覽器/webapp的不同之處：在移動設備上看webapp時，除了基本Orientation之外，並不太需要調整螢幕大小。但是瀏覽器並不知道這之間的不同。瀏覽器看到@media 標簽時的運作模式，並不像一般條件式程式一般，若條件不符合時就不執行，而是一律讀進來並預先解析進 rendering tree。</p><p>在最近針對Gaia的一些load time performance measuring中，我們發現在Settings App中，每加入一行 @media 語句就會增加 100ms 左右的啟動延遲，很可能的原因就是每次瀏覽器看到@media標簽時就需要跑一次預先解析過程。因此在瀏覽器引擎本身有提供更好的方案之前，我們勢必得尋找中短期的解決方法來克服遇到的問題。</p><p>在 <a href="https://github.com/gasolin/provecss" target="_blank" rel="noopener">provecss </a>中我們嘗試提供了幾種預處理 media query 的方法。一種是搭配「Import」語法提供 filter，根據檔案名稱在 Import inlining 時將不符合條件的檔案拿掉。</p><p>例如上一篇中使用到的範例</p><blockquote><p>@import url(“app_mobile.css”);@import url(“app_tablet.css”);</p></blockquote><p>我們傳入 import_filter = [“mobile”] ，則 Import Inlining 結果將只傳回「app_mobile.css」檔案中的內容：</p><blockquote><pre><span class="nt">headers</span> <span class="p">{</span>  <span class="k">background-color</span><span class="o">:</span> <span class="nb">orange</span><span class="p">;</span><span class="p">}</span></pre></blockquote><p>「app_tablet.css」檔案中的內容就被濾掉了。這種方式可以部分解決問題，但使用上的彈性並不是很好。</p><p>另一個方式是使用標準CSS語法預處理器（Pre-processor）來查詢 CSS 檔案中的內容，只將符合條件的@media 查詢結果留下。</p><p> 我們傳入 <code>{ width: '240px', height: '320px' }，則</code></p><pre><span class="k">@media</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">768px</span><span class="o">)</span>`並不符合查詢條件，所以輸出的結果也會是` </pre><blockquote><pre><span class="nt">headers</span> <span class="p">{</span>  <span class="k">background-color</span><span class="o">:</span> <span class="nb">orange</span><span class="p">;</span><span class="p">}</span></pre>這個方法能應對更複雜的情境。我們還能進一步 傳入`「media_extract」參數，`將輸出的 @media 標簽去除。</blockquote><blockquote><pre><span class="nt">headers</span> <span class="p">{</span>  <span class="k">background-color</span><span class="o">:</span> <span class="nb">orange</span><span class="p">;</span>}// was-@media condition<span class="nt">headers</span> <span class="p">{</span>  <span class="k">background-color</span><span class="o">:</span> red<span class="p">;</span><span class="p">}</span></pre>於是原本@media標簽中的樣式將覆寫過原來的樣式，在特定機型中達成一樣的顯示效果。（目前主要目標是拿來用在Gaia內建App的編譯上）</blockquote><pre>如何安裝[provecss](https://github.com/gasolin/provecss)</pre>> npm install -g provecss<p>使用命令行操作</p><blockquote><p>provecss imprt.css imprt.out.css --import加入「–import」參數即可啟用 import inlining 功能。</p></blockquote><p>此外 <a href="https://github.com/gasolin/provecss" target="_blank" rel="noopener">provecss</a> 還可以作為 node 函式庫或是 Grunt plugin 呼叫，更詳細的使用說明請參考  <a href="https://github.com/gasolin/provecss" target="_blank" rel="noopener">provecss</a> 的 README。</p>]]></content>
      
      
        <tags>
            
            <tag> mobile </tag>
            
            <tag> FirefoxOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>來自未來的CSS - 匯入（Import）</title>
      <link href="/2014/05/05/%E4%BE%86%E8%87%AA%E6%9C%AA%E4%BE%86%E7%9A%84CSS-%E5%8C%AF%E5%85%A5%EF%BC%88Import%EF%BC%89/"/>
      <url>/2014/05/05/%E4%BE%86%E8%87%AA%E6%9C%AA%E4%BE%86%E7%9A%84CSS-%E5%8C%AF%E5%85%A5%EF%BC%88Import%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>接續上一篇，我們繼續來重新發現一些對於有助於撰寫結構化CSS的一些CSS標準語法。</p><p>對於比較複雜的CSS樣式，其實在CSS標準語法中，早已提供使用「<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@import" target="_blank" rel="noopener">import</a>」語法來結構化地組織 CSS 樣式表。</p><p>語法如下：</p><blockquote><p>@import url(“app_mobile.css”);@import url(“app_tablet.css”);瀏覽器在載入時會自動去「app_mobile.css」和「app_tablet.css」檔案中載入相應的CSS樣式。</p></blockquote><p>有經驗的使用者在此會提出質疑：在CSS檔案中使用 import 語法將會拖慢載入速度，千萬別用！</p><p>是的，由於瀏覽器須先完全載入這個包含「import」語句的CSS檔案，然後才能再載入「import」語句中的檔案，整個載入流程會被阻塞住，需等待所有CSS檔案載入完成後才能繼續渲染（Render）過程，所以將比直接在檔案中平鋪CSS樣式的載入時間更長。</p><p>解決方法一樣是使用標準CSS語法預處理器（Pre-processor）來將使用到「import」語法的CSS檔案「扁平化」。即將「import」語法中讀到的檔案直接嵌入到原檔案中，以達到平鋪的目的。</p><p>如果 app_mobile.css 檔案的內容為</p><blockquote><pre><span class="nt">headers</span> <span class="p">{</span>  <span class="k">background-color</span><span class="o">:</span> <span class="nb">orange</span><span class="p">;</span><span class="p">}</span></pre><pre><span class="p">&nbsp;</span></pre><pre><span class="p">app_tablet.css </span>檔案的內容為</pre><pre>&nbsp;</pre>> <pre><span class="k">@media</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">768px</span><span class="o">)</span> <span class="p">{</span><p><span class="nt">headers</span> <span class="p">{</span><span class="k">background-color</span><span class="o">:</span> <span class="nb">black</span><span class="p">;</span><span class="p">}</span><span class="p">}</span> </p></pre><pre>經過「Import Inlining」處理的檔案將變成如下</pre><pre></pre>&gt; <pre></pre><pre><span class="nt">headers</span> <span class="p">{</span><span class="k">background-color</span><span class="o">:</span> <span class="nb">orange</span><span class="p">;</span><span class="p">}</span><p></p><p><span class="k">@media</span> <span class="o">(</span><span class="nt">min-width</span><span class="o">:</span> <span class="nt">768px</span><span class="o">)</span> <span class="p">{</span><span class="nt">headers</span> <span class="p">{</span><span class="k">background-color</span><span class="o">:</span> <span class="nb">black</span><span class="p">;</span><span class="p">}</span><span class="p">}</span></p></pre><pre></pre><pre></pre><pre></pre><pre><span class="p"></span> </pre><pre>處理後原來共三個檔案會縮減為一個檔案，達成一樣使用效果的同時，還避免了效能上的疑慮。</pre><pre> </pre><pre><a href="https://github.com/gasolin/provecss" target="_blank" rel="noopener">在 provecss</a> 專案，「Import Inlining」是其中一個主要與 <a href="https://github.com/segmentio/myth" target="_blank" rel="noopener">myth</a> 不同的特性。</pre><pre></pre><pre>如何安裝provecss</pre>&gt; npm install -g provecss使用命令行操作provecss imprt.css imprt.out.css --import加入「–import」參數即可啟用 import inlining 功能。<p></p></blockquote><p>此外 <a href="https://github.com/gasolin/provecss" target="_blank" rel="noopener">provecss</a> 還可以作為 node 函式庫或是 Grunt plugin 呼叫，更詳細的使用說明請參考  <a href="https://github.com/gasolin/provecss" target="_blank" rel="noopener">provecss</a> 的 README。</p><pre></pre>]]></content>
      
      
        <tags>
            
            <tag> mobile </tag>
            
            <tag> FirefoxOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>來自未來的CSS - CSS 變量</title>
      <link href="/2014/05/05/%E4%BE%86%E8%87%AA%E6%9C%AA%E4%BE%86%E7%9A%84CSS-CSS-%E8%AE%8A%E9%87%8F/"/>
      <url>/2014/05/05/%E4%BE%86%E8%87%AA%E6%9C%AA%E4%BE%86%E7%9A%84CSS-CSS-%E8%AE%8A%E9%87%8F/</url>
      <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables" target="_blank" rel="noopener"> CSS變量(CSS Variable)</a>是我最近才注意到的新玩意。它要解決的問題其實跟已經行之有年的LESS或SASS相似，即讓 CSS 能用上變量（變數）。</p><p>語法像是這樣</p><blockquote><p>:root { <span class="o"> –</span><span class="n">main</span><span class="o">-</span><span class="k">color</span><span class="o">:</span> <span class="nb">orange</span><span class="p">;</span>}</p><pre><span class="nt">body</span> <span class="p">{</span>  <span class="k">color</span><span class="o">:</span> <span class="n">var</span><span class="p">(</span><span class="o">--</span><span class="n">main</span><span class="o">-</span><span class="k">color</span><span class="p">);</span><span class="p">}</span></pre><pre><span class="p">&nbsp;</span></pre>在一個 CSS 根元素中以「--」開頭定義CSS變量，在一般的CSS 樣式中使用「var(--)」來使用變量。</blockquote><p>就如範例所示，只要改變一個變量的值，就可以改變整份CSS的參數。例如將「<span class="o">–</span><span class="n">main</span><span class="o">-</span><span class="k">color</span><span class="o"></span>」變量的值改為「red」，則整個Body的color就會變成紅色。</p><p>這參考標準草案有多新？在目前所有的瀏覽器中，只有剛發佈的<a href="http://moztw.org/firefox/" target="_blank" rel="noopener">Firefox 29</a>才有正式支援。</p><p>…對於暫時只有在特定瀏覽器上能運作的新功能，一般網頁開發者都是抱著敬謝不敏的態度。就算不提瀏覽器跨平台的支援不足，「CSS變量」一聽起來，跟原本的靜態CSS比起來，感覺就會有效能上的疑慮。</p><p>但是前陣子發現了 <a href="https://github.com/segmentio/myth" target="_blank" rel="noopener">myth</a> 和 <a href="https://github.com/visionmedia/rework-vars" target="_blank" rel="noopener">rework-vars</a>工具，這些工具的作用是對使用標準/新 CSS 語法的 CSS 檔案預處理（pre-processing），將新的CSS變量語法轉換成向前相容的靜態語法。透過這樣的方式，開發者在開發時可以使用最新的CSS語法來撰寫更加結構化的CSS，而不需要使用額外的函式庫。同時在部署時可以透過標準CSS語法預處理器（Pre-processor）來將有瀏覽器相容/效能疑慮的 CSS 轉換成「現實版」的 CSS 語法，好讓現在的所有瀏覽器能識別來自未來的 CSS。</p><p>經過預處理後，CSS樣式表變成如下</p><blockquote><pre><span class="nt">body</span> <span class="p">{</span>  <span class="k">color</span><span class="o">:</span> <span class="nb">orange</span><span class="p">;</span><span class="p">}</span></pre><pre><span class="p">可以看見變量宣告與賦值的部分都直接被整合成靜態CSS了。</span></pre><pre><span class="p"></span></pre></blockquote><p>在開發 Gaia/webapp 的過程中，我們正遇到了類似的狀況：對於在 FIrefoxOS 平台上執行的 webapp 而言，1.4 版（對應Firefox 28）和以前的 FirefoxOS 版本也無法使用 CSS 變量，但是在未來的版本上卻肯定應該試試這些新網頁技術。對於一般的webapp開發者而言亦然。</p><p>於是我建立了 <a href="https://github.com/gasolin/provecss" target="_blank" rel="noopener">provecss</a> 專案，<a href="https://github.com/gasolin/provecss" target="_blank" rel="noopener">provecss</a> 專案吸收了  <a href="https://github.com/segmentio/myth" target="_blank" rel="noopener">myth</a> 的特性，但為 gaia 和 webapp 做了更多的調整。就 CSS 變量這特性而言，與  <a href="https://github.com/segmentio/myth" target="_blank" rel="noopener">myth</a> 不同的地方是 <a href="https://github.com/gasolin/provecss" target="_blank" rel="noopener">provecss</a> 預設並不處理 CSS 變量。<a href="https://github.com/gasolin/provecss" target="_blank" rel="noopener">provecss</a> 其他的功能，將在接下來的文章中進一步做說明。</p><p>如何安裝provecss</p><blockquote><p>npm install -g provecss使用命令行操作</p></blockquote><blockquote><p>provecss vars.css vars.out.css --vars加入「–vars」參數即可啟用 CSS 變量取代功能。</p></blockquote><p>此外 <a href="https://github.com/gasolin/provecss" target="_blank" rel="noopener">provecss</a> 還可以作為 node 函式庫或是 Grunt plugin 呼叫，更詳細的使用說明請參考  <a href="https://github.com/gasolin/provecss" target="_blank" rel="noopener">provecss</a> 的 README。</p>]]></content>
      
      
        <tags>
            
            <tag> mobile </tag>
            
            <tag> FirefoxOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>FoxBox and SummerOfCode14</title>
      <link href="/2014/03/18/FoxBox-and-SummerOfCode14/"/>
      <url>/2014/03/18/FoxBox-and-SummerOfCode14/</url>
      <content type="html"><![CDATA[<p><a href="http://github.com/gasolin/foxbox" target="_blank" rel="noopener">FoxBox</a> is the project that intent to provide a battery included Firefox OS build environment.</p><div class="separator" style="clear: both; text-align: center;">[![](https://github-camo.global.ssl.fastly.net/5a75456bd1293c04434f8c8a2373748a25d5deaf/687474703a2f2f692e696d6775722e636f6d2f465945305045352e706e67)](https://github-camo.global.ssl.fastly.net/5a75456bd1293c04434f8c8a2373748a25d5deaf/687474703a2f2f692e696d6775722e636f6d2f465945305045352e706e67)</div>The goal of <span class="ZmSearchResult" id="DWT1138">foxbox</span> is to try any approach that make new user can do as less as possible to start the FirefoxOS development<p>Our first take is use <a href="http://www.vagrantup.com/downloads" target="_blank" rel="noopener">vagrant</a> with <a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">virtualbox</a> to make major platform users can try FirefoxOS dev in VM.</p><p>It will be great to setup the current version of <span class="ZmSearchResult" id="DWT1140">foxbox</span> in your desktop environment<span class="Object" id="OBJ_PREFIX_DWT1141_com_zimbra_url"><a href="http://github.com/gasolin/foxbox" target="_blank" rel="noopener">http://github.com/gasolin/foxbox</a></span></p><p>And record obstacles you encountered here <span class="Object" id="OBJ_PREFIX_DWT1144_com_zimbra_url"><a href="https://github.com/gasolin/foxbox/issues?state=open" target="_blank" rel="noopener">https://github.com/gasolin/foxbox/issues?state=open</a></span>.There are some issues (but not the limit) that might be worth to do in the future version of <span class="ZmSearchResult" id="DWT1143">foxbox</span>.</p><p>Note that you require a desktop with INTEL VT-x/AMD-V hardware virtualization support(Windows8 or Mac already enabled it), at least 4GB RAM and about 10~40GB disk space(for gaia or full B2G development).</p><p>FoxBox has been approved by the Google Summer of Code administrator <a href="http://wiki.mozilla.org/Community:SummerOfCode14" target="_blank" rel="noopener">http://wiki.mozilla.org/Community:SummerOfCode14</a> , so its perfect time to step up, try FoxBox, fix issues that every others will encounter, save everybody’s time and start make your own Firefox OS phone.</p><p>If you’d like to contribute FoxBox for <a href="http://www.google-melange.com/gsoc/homepage/google/gsoc2014" target="_blank" rel="noopener">SummerOfCode14</a>. We expect you could find out the interesting topic you want to contribute or any other way that can better achieve FoxBox’s goal. </p>]]></content>
      
      
        <tags>
            
            <tag> mobile </tag>
            
            <tag> FirefoxOS </tag>
            
            <tag> Mozilla </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android Wear 周邊</title>
      <link href="/2014/03/18/Android-Wear-%E5%91%A8%E9%82%8A/"/>
      <url>/2014/03/18/Android-Wear-%E5%91%A8%E9%82%8A/</url>
      <content type="html"><![CDATA[<iframe allowfullscreen frameborder="0" height="315" src="//www.youtube.com/embed/1dQf0sANoDw" width="560"></iframe><p><a href="http://developer.android.com/wear/index.html" target="_blank" rel="noopener"><span lang="EN-US" style="color: #1f497d; font-family: &quot;Calibri&quot;,&quot;sans-serif&quot;;">Android Wear</span></a><span style="color: #1f497d;">不是作業系統, </span><span style="color: #1f497d;"><span style="color: #1f497d;">基本上是拿來開發Android周邊所使用的協定。</span>它是把原本需要拿出手機查訊息，變成透過 Notification API傳給手錶。透過</span><span style="color: #1f497d;"> Google Now</span><span style="color: #1f497d;"> </span><span style="color: #1f497d;"><span style="color: #1f497d;">手錶可以收到</span></span><span style="color: #1f497d;"><span style="color: #1f497d;"><span style="color: #1f497d;">推播來的相關訊息或</span></span>透過語音辨識來控制手機應用做事情。</span></p><p><span style="color: #1f497d;">因為 Android Wear + Google Now 帶來的便利性，Google可以再進一步加強圍繞著Play Service/Google Now的生態圈。</span></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>人生就像是遊戲，這篇就是你的攻略指南</title>
      <link href="/2014/02/17/liferpg/"/>
      <url>/2014/02/17/liferpg/</url>
      <content type="html"><![CDATA[<p><img src="http://oliveremberton.com/wp-content/uploads/2014/02/Old-1024x639.png" alt=""> 這篇文章的原文為 <a href="http://oliveremberton.com/2014/life-is-a-game-this-is-your-strategy-guide/" target="_blank" rel="noopener">Life is a game. This is your strategy guide</a>，作者為 Oliver Emberton，譯者為 <a href="http://blog.gasolin.idv.tw/2014/02/blog-post.html">gasolin</a>。已獲得作者的翻譯許可。</p><p><a href="http://oliveremberton.com/wp-content/uploads/2014/02/Cover-shallow-1024x626.png" target="_blank" rel="noopener"><img src="http://oliveremberton.com/wp-content/uploads/2014/02/Cover-shallow-1024x626.png" alt=""></a>(按下開始鍵) 真實的人生就像是遊戲，每個人都身在其中。 但遊戲過程可能會遇到困難，這篇文章就是你的人生攻略指南。</p><p><strong>基礎</strong></p><p>你可能還沒意識到，但真實的生活其實是場策略遊戲。雖然遊戲裡面還包含了許多有趣的小遊戲 – 像是跳舞、開車、跑步、與愛愛 – 但是遊戲勝利的關鍵，其實只在於如何善用你的資源。最重要的是，成功的玩家將他們的時間用在正確的事情上。即使在遊戲的中後階段加入了「金錢」這個要素，但你應該優先考慮的，依然是關於如何運籌帷幄你的時間。</p><p><strong>童年</strong></p><p>人生遊戲開始於你被指派了一個隨機的角色與隨機的環境</p><p><a href="http://oliveremberton.com/wp-content/uploads/2014/02/Select-your-character.png" target="_blank" rel="noopener"><img src="http://oliveremberton.com/wp-content/uploads/2014/02/Select-your-character.png" alt=""></a>(<s>選擇</s>你的角色)遊戲的前15年左右只是新手導引任務。這部分的導覽實在做得不怎麼樣，而且還不提供跳過選項。</p><p><strong>青年階段</strong></p><p>作為一個年輕的玩家，你擁有許多時間與精力，但幾乎沒有經驗。你會發現大部份的東西 – 像是最好的工作、最好的財產、最好的伙伴 – 直到你取得之前都仍然未解鎖。這個階段是可以快速升級你的技能的時機。在之後的階段裡，你再也不會那麼多時間與精力了。為了好好地玩這場遊戲，你的首要任務是將你的時間作最好的分配。每件你做的事情都會影響你的狀態與技能:</p><p><a href="http://oliveremberton.com/wp-content/uploads/2014/02/Drink-vs-code-1024x684.png" target="_blank" rel="noopener"><img src="http://oliveremberton.com/wp-content/uploads/2014/02/Drink-vs-code-1024x684.png" alt=""></a>(喝酒 -健康 -精力 -金錢) 這聽起來很容易，但問題是你不總是知道該選擇做什麼事，而且你的身體不見得總是服從你的命令。這就來一一說明吧：</p><p><strong>如何讓身體服從你的命令</strong></p><p>許多玩家發現，當他們選擇做某個任務時 – 例如「去健身房健身吧」-- 他們的身體完全忽略了這個命令。這並不是一個錯誤（bug）。其實，每個人身上都有一個隱藏的狀態欄，只是你無法直接看到它。這個狀態欄很可能長得像這樣：</p><p><a href="http://oliveremberton.com/wp-content/uploads/2014/02/State.png" target="_blank" rel="noopener"><img src="http://oliveremberton.com/wp-content/uploads/2014/02/State.png" alt=""></a>（健康 精力 意志力) 如果你的某個狀態指數太低，你的身體將抗拒執行你的指令，直到你的需求已被滿足。試著在你又累又餓的時候讀書吧，你會發現你的注意力一直跑到臉書上。</p><p>在這些狀態中，你的意志力指數狀態是最重要的。<a href="http://en.wikipedia.org/wiki/Ego_depletion" target="_blank" rel="noopener">每天起床後，意志力就會隨著時間降低</a>，在吃些東西後會回復少許，只有透過睡一晚好覺才會完全回復。當你的意志力指數很低的時候，你只能做那些你身體想要做的任務。生活中作出每個決定時，都會消耗意志力指數。對於那些你必須要作出不做比較吸引你的任務，而去做較不吸引你的任務的決定（例如不看電視而去健身）需要消耗大量的意志力。</p><p>這邊有許多技巧可以幫助你保持良好狀態：</p><p>**1. 保持良好的狀態. **如果你覺得飢餓、疲憊、或感覺全無樂趣，你的意志力會崩潰。請確保你有持續地好好對待你自己。 **2. 不要一天內消耗太多意志力. <strong>將你最困難的項目分作多天完成，並搭配一些沒那麼難的項目一起做。  </strong> ****3. 每天先做最重要的事. **這會讓其他的事情更困難一些，但這讓你最重要的項目更可能完成。</p><p><strong>4. 透過減少選項來減少消耗意志力.</strong> 如果你試著在可以連上臉書的電腦前工作，你需要更多的意志力來工作，因為你必須持續地選擇做困難的項目而不是選簡單的。消除這些分心的事吧。</p><p>玩這場遊戲的重要部分是平衡你的眾多任務的順序與你的身體狀態。別讓你自己進入隨波逐流的自動導航模式，否則你什麼事都完不成。</p><p><strong>選擇正確的任務</strong></p><p>在正確的時間選擇正確的任務就是這遊戲的精髓。有些任務會影響你的狀態，例如</p><p><a href="http://oliveremberton.com/wp-content/uploads/2014/02/Eating-1024x634.png" target="_blank" rel="noopener"><img src="http://oliveremberton.com/wp-content/uploads/2014/02/Eating-1024x634.png" alt=""></a><div style="text-align: center;">（吃東西 +精力 -飢餓)另外一些任務會影響你的技能:</div></p><p><a href="http://oliveremberton.com/wp-content/uploads/2014/02/Rocking-1024x634.png" target="_blank" rel="noopener"><img src="http://oliveremberton.com/wp-content/uploads/2014/02/Rocking-1024x634.png" alt=""></a>(練搖滾 +音樂性 +臉部彩繪)你需要花時間在那些保證你健康狀態的事情上 - 例如進食與睡眠 - 好讓你的意志力狀態維持高檔。然後你需要發展你尚未俱備的技能。一些技能比其他的技能更有價值。好的技能可以開啓整條升級道路，像是科技樹一樣：</p><p><a href="http://oliveremberton.com/wp-content/uploads/2014/02/Skills.png" target="_blank" rel="noopener"><img src="http://oliveremberton.com/wp-content/uploads/2014/02/Skills.png" alt=""> </a> (電腦技能 -&gt; 電影制作者, 程式設計師, 網頁設計師 -&gt; 臉書創辦人 -&gt;千萬富豪)</p><p>有些技能則是沒有發展性的死路：</p><p><a href="http://oliveremberton.com/wp-content/uploads/2014/02/Dead-skills.png" target="_blank" rel="noopener"><img src="http://oliveremberton.com/wp-content/uploads/2014/02/Dead-skills.png" alt=""></a>(用膝蓋頂球)<a href="http://oliveremberton.com/2013/how-to-succeed-when-you-have-no-special-skills/" target="_blank" rel="noopener">結合多個技能是最有效的</a>。要把一個技能練滿是非常困難的 – 事實上，通常是不可能的。但把一堆相關的技能練到似模似樣就簡單多了。例如：</p><p><a href="http://oliveremberton.com/wp-content/uploads/2014/02/Entrepreneur.png" target="_blank" rel="noopener"><img src="http://oliveremberton.com/wp-content/uploads/2014/02/Entrepreneur.png" alt=""></a>(商業 + 自信 + 心理學 = 企業家)<a href="http://oliveremberton.com/2013/how-to-succeed-when-you-have-no-special-skills/" target="_blank" rel="noopener"></a></p><p><a href="http://oliveremberton.com/wp-content/uploads/2014/02/Ladies-magnet.png" target="_blank" rel="noopener"><img src="http://oliveremberton.com/wp-content/uploads/2014/02/Ladies-magnet.png" alt=""></a> (烹飪 + 跳舞 + 心理學 = 舞男)<a href="http://oliveremberton.com/2013/how-to-succeed-when-you-have-no-special-skills/" target="_blank" rel="noopener"></a>看到心理學如何讓你變得又富有又有魅力了吧？你應該學學這個（笑）。</p><p><strong>你在哪裡生活</strong></p><p>你所生活的環境會持續地影響你的狀態、技能，與你升級的機會。你可以在任何地方把遊戲玩地很好，但在一些地方，要把遊戲玩好卻更簡單。例如如果你是身在某些國家的女性玩家，有許多成就你都不能解鎖。任何玩家生在最佳環境的機會都基本上是零。所以搜索看看你的選擇吧，仔細思考是否要早點移動。環境是你的技能與狀態的一個乘數。在適合的環境中，你的表現會成倍增長。</p><p><strong>尋找伴侶</strong></p><p>「魅力」本身就是個複雜的小遊戲。但大部份伴生於你已經在玩的遊戲。如果你已處在很好的狀態並擁有很好的技能，那麼你已經具備不小的魅力了。一個疲憊、易怒、身無所長的玩家一點都不吸引人，而且可能不該嘗試尋找另一半。</p><p><a href="http://oliveremberton.com/wp-content/uploads/2014/02/Marriage-1024x589.png" target="_blank" rel="noopener"><img src="http://oliveremberton.com/wp-content/uploads/2014/02/Marriage-1024x589.png" alt=""></a> (成就解鎖 快樂 +1 頭痛 x2)</p><p>在這個小遊戲的初期，不管是拒絕其他玩家，或是被其他玩家拒絕都很常見。這是正常的。但不幸地是大部份玩家不太會處理拒絕，這都會降低你的狀態。你需要消耗一些意志力以恢復遊戲，而意志力需要透過睡眠來回復，所以給點時間吧。</p><p>80%要找到另一半的因素，通常歸結於如何讓自己變成最有魅力的自己 – 就像人生遊戲的其他方面一樣 – 意味著將你的時間放在正確的地方。如果你運動、社交、補充營養、發展自己的事業，你的魅力也會自動增加。剩下的20%則是讓自己出現在會遇到對的人的地方。</p><p><strong>錢、錢</strong>**<b>、**錢</b></p><p> 遊戲的稍後階段中你需要管理一種叫做「金錢」的新資源。大多數玩家會發現遊戲的早期階段金錢通常會逐漸增加，但通常這只會造成更多問題，而不是更少。</p><p><a href="http://oliveremberton.com/wp-content/uploads/2014/02/Money-2.png" target="_blank" rel="noopener"><img src="http://oliveremberton.com/wp-content/uploads/2014/02/Money-2.png" alt=""></a>關於處理金錢最重要的規則是_「絕不借錢，除非借了錢能讓你賺更多回來」_。 例如，教育或房貸可能有價值（但得看狀況，並不一定）。借錢買鞋則不是。</p><p>根據你的財務目標，這邊有幾種策略可以參考：</p><ol><li>**不為錢煩惱. <strong>低壓力策略：只要量入為出，並未雨綢繆即可。在你可以存錢的階段時就盡量存錢吧，不然你會後悔的。</strong> **</li><li><strong>小康</strong>. 審慎選擇一個職業與環境，準備經常轉職或升職。你需要大量投資在相關的技能上，這會花掉你許多時間。而且注意別因此操壞你的身體，不然你會提早掛掉的。</li><li><strong>Mega rich</strong>. <a href="http://oliveremberton.com/2013/how-to-become-an-entrepreneur/" target="_blank" rel="noopener">開始自己的生意</a>.  為別人工作幾乎不可能變得富有。自己工作不會變得富有，擁有東西 – 資產 – 才會變得富有。資產會回報比投資時所花費的更多，而且你的公司是你可以從頭建立起的一個有力的資產。 結合你的回報變成更多的資產，最終它們讓你完全不需工作.<strong>晚年階段</strong></li></ol><p>在遊戲進行的過程中，你能選擇的也跟著改變。婚姻和孩子將減少你的時間和精力，而且在遊戲中引入了更多隨機元素（緊急換尿布任務！）這讓你更難以快速地發展你自己。 較年長的角色通常擁有更多的技能、資源，與經驗，能解鎖那些之前無法參與的大任務。例如「擁有一棟房子」，或「寫一本（好）小說」。</p><p><a href="http://oliveremberton.com/wp-content/uploads/2014/02/Old-1024x639.png" target="_blank" rel="noopener"><img src="http://oliveremberton.com/wp-content/uploads/2014/02/Old-1024x639.png" alt=""> </a> (聽力 -1 寬鬆的褲子 +10) 所有的玩家在大概 29000 天，或80年後死去。如果你的狀態和技能良好，你可能可以延長一點時間。但是並沒有作弊碼可以大幅延長遊戲時間。</p><p>在遊戲開始時，你沒有辦法控制你是誰或你在哪裡。在遊戲結束時，你依然無法在這時改變結局。你過去所下的那些決定，會絕大地形塑你最終結局的好壞。如果在你最後的人生中開心、健康、圓滿 – 或不然 – 你都無法再改變什麼。</p><p>這就是為什麼攻略很重要。 因為隨著時間我們大部份人都會瞭解人生遊戲到底怎麼玩，但這時我們已經浪費掉太多精華部分了。</p><p>現在你最好趕緊去玩人生遊戲吧。</p>]]></content>
      
      
        <tags>
            
            <tag> life </tag>
            
            <tag> fun </tag>
            
            <tag> game </tag>
            
            <tag> gamification </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Auto-configured FirefoxOS Build Environment in a VM</title>
      <link href="/2014/02/09/Auto-configured-FirefoxOS-Build-Environment-in-a-VM/"/>
      <url>/2014/02/09/Auto-configured-FirefoxOS-Build-Environment-in-a-VM/</url>
      <content type="html"><![CDATA[<p>I’m pleased to release <a href="https://github.com/gasolin/foxbox/releases" target="_blank" rel="noopener">first FoxBox version </a>that may save a lot of time for people who wants to give <a href="http://www.mozilla.org/firefox/os/" target="_blank" rel="noopener">FirefoxOS</a> development a try.</p><p>For web developer who wants to contribute to gaia might meet a serious problem that they might have limit knowledge of *nix system. But to build gaia, the command line and make script is essential.</p><p>For developer who wants to contribute to B2G project, a bunch of <a href="https://developer.mozilla.org/en-US/Firefox_OS/Preparing_for_your_first_B2G_build" target="_blank" rel="noopener">per-requisite</a> settings must be configured well before really digging into the code.</p><div class="markdown-body">FoxBox could help (currently I mainly focus on) B2G/gaia developer quickly setup a working environment in VM.<p>Generally FoxBox 0.4 provide a <a href="http://www.vagrantup.com/" target="_blank" rel="noopener">Vagrantfile</a> which automatically configure a VM  with bunch of tools you need for building FirefoxOS and gaia  development.</p><p>FoxBox have put a comprehend list of USB vendors, so any Android/FirefoxOS smartphone plugged can be identified.</p><p>With vagrant’s NFS shared folder, developer can use their favorite editor to code.</p><p>FoxBox also bundled with a minimum GUI environment that enable you to  test FirefoxOS in VM. <a href="http://nightly.mozilla.org/" target="_blank" rel="noopener">Firefox Nightly</a> will be pre-installed for you as  well!</p><p>Read <a href="http://github.com/gasolin/foxbox/blob/master/README.md" target="_blank" rel="noopener">README</a> for more detail.</p><p>Happy Hacking!</p><p>Disclaim: Though I work for mozilla, <a href="http://github.com/gasolin/foxbox" target="_blank" rel="noopener">FoxBox</a> is not an official project of Mozilla. Currently its just my side project create around Chinese New Year’s holiday.</p></div>]]></content>
      
      
        <tags>
            
            <tag> FirefoxOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>手機，平板，還是電腦？找出手邊設備隱藏的冨樫病毒</title>
      <link href="/2014/01/26/%E6%89%8B%E6%A9%9F%EF%BC%8C%E5%B9%B3%E6%9D%BF%EF%BC%8C%E9%82%84%E6%98%AF%E9%9B%BB%E8%85%A6%EF%BC%9F%E6%89%BE%E5%87%BA%E6%89%8B%E9%82%8A%E8%A8%AD%E5%82%99%E9%9A%B1%E8%97%8F%E7%9A%84%E5%86%A8%E6%A8%AB%E7%97%85%E6%AF%92/"/>
      <url>/2014/01/26/%E6%89%8B%E6%A9%9F%EF%BC%8C%E5%B9%B3%E6%9D%BF%EF%BC%8C%E9%82%84%E6%98%AF%E9%9B%BB%E8%85%A6%EF%BC%9F%E6%89%BE%E5%87%BA%E6%89%8B%E9%82%8A%E8%A8%AD%E5%82%99%E9%9A%B1%E8%97%8F%E7%9A%84%E5%86%A8%E6%A8%AB%E7%97%85%E6%AF%92/</url>
      <content type="html"><![CDATA[<p>2013年過去，回顧過去幾年使用過不少設備。過去一年手頭上同時使用了Mac、Ubuntu、Firefox OS、Android、BlackBerry等系統的設備。Windows現在只有報稅時用到了。</p><p>到今年初，手上主要在使用的設備剩下了：</p><p>電腦：MacBook Air閱讀器：Kindle Paper White手機：多台切換中</p><p>因為工作性質，平常盯螢幕的時間太久了，因此在9月後買了功能更單純的 Kindle 閱讀器。</p><p>我的Kindle是登入<a href="http://amazon.cn/" target="_blank" rel="noopener">Amazon.cn</a>帳號，因此可以購買些簡體版書籍或消化一些透過<a href="http://calibre-ebook.com/" target="_blank" rel="noopener">Calibre</a>上傳的電子書。但另外一個很重要的用途， 是搭配 <a href="http://fivefilters.org/kindle-it/" target="_blank" rel="noopener">Push to Kindle</a> 瀏覽器插件，將原本會在電腦/平板上閱讀的長文章只留下文章本體並轉寄到Kindle中稍後閱讀。</p><p>說到我主力使用設備其中最主要的改變，還是<strong>整年中有意識地少使用平板</strong>。</p><p>請不要誤會。我說的是「我」的情況。平板是非常適合接收、瀏覽訊息、遊戲的設備。比起PC，大多數人需要的其實是平板。它在許多情況下是更有生產力的選擇。</p><p>但對我來說，前年陸續使用了幾種作業系統的平板。平板比起PC無論是攜帶性還是操作性都非常方便，讓我在這段期間內多吸收了不少資訊。相對地在電腦前的時間也變少了。</p><p>相對地在電腦前的時間也變少了這是好事，也是壞事。對於我的影響主要是表現地像<span class="reference-text"><a href="http://zh.wikipedia.org/wiki/%E5%86%A8%E6%A8%AB%E7%BE%A9%E5%8D%9A" target="_blank" rel="noopener"><strong>冨</strong>樫病毒</a>來襲，手上做的專案數目直線減少了。</span><span class="reference-text">偶而靈感來了的時候，由於手頭上沒有趁手的開發工具就錯過了。 </span></p><p>當我意識到這個情況，嘗試將手邊的平板處理掉後，今年各種想法的達成率確實提升許多。</p><p>當然計劃總是趕不上變化，去年參與了Firefox OS平板Demo版和開發者版的開發，其實平板還是用了不少阿 XD</p>]]></content>
      
      
        <tags>
            
            <tag> mobile </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>template.js</title>
      <link href="/2014/01/12/template-js/"/>
      <url>/2014/01/12/template-js/</url>
      <content type="html"><![CDATA[<p>From <a href="https://groups.google.com/forum/#!topic/mozilla.dev.gaia/wQ8JLkYi7EI" target="_blank" rel="noopener"><span class="GC2AS1XDAWB" id="t-t">Template library from Messages app now available in shared/js</span></a></p><p>Rick <span class="_username"><span class="GIPOEOIOPB g-hovercard" data-name="Rick Waldron" data-userid="117712031197469669749" style="color: #222222;">Waldron post the new <a href="https://github.com/gasolin/gaia/blob/master/shared/js/template.js" target="_blank" rel="noopener">template.js</a> library that works originally for gaia/cummunication apps. Now it’s widely adopted for other apps such as settings.</span></span><span class="_username"><span class="GIPOEOIOPB g-hovercard" data-name="Rick Waldron" data-userid="117712031197469669749" style="color: #222222;"></span></span><span class="_username"><span class="GIPOEOIOPB g-hovercard" data-name="Rick Waldron" data-userid="117712031197469669749" style="color: #222222;">The <a href="https://github.com/gasolin/gaia/blob/master/shared/js/template.js" target="_blank" rel="noopener">template.js</a> library is pretty small and stable for general use. just copy it and put in your library to use it.</span></span><span class="_username"><span class="GIPOEOIOPB g-hovercard" data-name="Rick Waldron" data-userid="117712031197469669749" style="color: #222222;"></span></span><span class="_username"><span class="GIPOEOIOPB g-hovercard" data-name="Rick Waldron" data-userid="117712031197469669749" style="color: #222222;">The syntax is no magic, just inject an single id tag into main html file. And the ‘template’ is just the commented code. It allows general parameters replacement and prevent </span></span><span class="_username"><span class="GIPOEOIOPB g-hovercard" data-name="Rick Waldron" data-userid="117712031197469669749" style="color: #222222;">innerHTML pollution.</span></span><span class="_username"><span class="GIPOEOIOPB g-hovercard" data-name="Rick Waldron" data-userid="117712031197469669749" style="color: #222222;"></span></span><span class="_username"><span class="GIPOEOIOPB g-hovercard" data-name="Rick Waldron" data-userid="117712031197469669749" style="color: #222222;">Here’s the post from Rick:</span></span><span class="_username"><span class="GIPOEOIOPB g-hovercard" data-name="Rick Waldron" data-userid="117712031197469669749" style="color: #222222;"></span></span>Using the Template library is simple:</p><p>1. Add &lt;script src=“shared/js/template.js”&gt;&lt;/script&gt; to your index.html</p><p>2. Create your template as a comment node inside of any type of element,place in index.html:</p><p>  &lt;span id=“emphasis-template”&gt;  &lt;!-- &lt;${tag}&gt;${value}&lt;/${tag}&gt; --&gt;  &lt;/span&gt;</p><p>  &lt;span id=“greeting-template”&gt;  &lt;!-- Hello ${name}! --&gt;  &lt;/span&gt;</p><p>3. In your JavaScript code, initialize an instance of this template:</p><p>  // Template will accept either an id string or a node!  var emphasis = new Template(‘emphasis-template’);  var greeting = new Template(document.getElementById(‘greeting-template’));</p><p>4. Generate a safe markup string with specified values by calling the <code>interpolate</code> method of the template object:</p><p>  greeting.interpolate({    name: ‘World’  });</p><p>  // Hello World!</p><p>Simple partial nesting is supported, just tell <code>interpolate</code> which properties are “safe”:</p><p>  var name = emphasis.interpolate({    tag: ‘b’,    value: ‘World’  });</p><p>  // we know that the value of ‘name’ has already been escaped 😃  greeting.interpolate({ name: name }, { safe: [‘name’] });</p><p>  // Hello &lt;b&gt;World&lt;/b&gt;!</p><p>Markup strings produced by Template are innerHTML safe (unless explicitlymarked otherwise, as shown above):</p><p>  greeting.interpolate({    name: ‘&lt;script&gt;alert(“hi!”)’ + ‘&lt;/script&gt;’  });</p><p>  // &amp;lt;script&amp;gt;alert(&amp;quot;hi!&amp;quot;)&amp;lt;/script&amp;gt;</p><p>Template instances disallow modification of the template string once theobject is initialized, but the toString() method will return the rawtemplate as a string:</p><p>  greeting.toString();</p><p>  // Hello ${name}!</p><p>  emphasis.toString();</p><p>  // &lt;${tag}&gt;${value}&lt;/${tag}&gt;</p><p>It’s important to remember that Template and WebComponent are not at oddswith each other and exist to serve to different purposes; read more here:<span class="Object" id="OBJ_PREFIX_DWT2203_com_zimbra_url"><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=908950#c6" target="_blank" rel="noopener">https://bugzilla.mozilla.org/show_bug.cgi?id=908950#c6</a></span></p>]]></content>
      
      
        <tags>
            
            <tag> FirefoxOS </tag>
            
            <tag> Mozilla </tag>
            
            <tag> webframework </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>UI Demos and reuse Gaia UI elements with Building Blocks</title>
      <link href="/2014/01/12/UI-Demos-and-reuse-Gaia-UI-elements-with-Building-Blocks/"/>
      <url>/2014/01/12/UI-Demos-and-reuse-Gaia-UI-elements-with-Building-Blocks/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;">[![](http://1.bp.blogspot.com/-pY5UVjBXwyU/UiSoZBflAII/AAAAAAAADfY/Vgh66Qya58k/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-09-02+%E4%B8%8B%E5%8D%8811.01.52.png)&nbsp;](http://1.bp.blogspot.com/-pY5UVjBXwyU/UiSoZBflAII/AAAAAAAADfY/Vgh66Qya58k/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-09-02+%E4%B8%8B%E5%8D%8811.01.52.png)</div><div class="separator" style="clear: both; text-align: center;">List of UI elements </div>Though what FirefoxOS encourage developers to develop for the (general) Web, but not for FirefoxOS only. There's still a portion of developers would prefer to start their very first mobile web app with FirefoxOS native look and feel.<p>From Feb 2013, I’ve made my first Firefox/OS marketplace webapp: <a href="https://marketplace.firefox.com/app/ui-demos" target="_blank" rel="noopener">UI Demos</a> , which demonstrate FirefoxOS (gaia) UI Building-Blocks elements and provide correspondent code blocks for reference. (The wrapper version of UI Demos is also available in <a href="https://play.google.com/store/apps/details?id=tw.idv.gasolin.ffosud" target="_blank" rel="noopener">Android Play Store</a>)</p><p>Basically those FirefoxOS(gaia) UI Building-Blocks are a set of UI elements defined purely in CSS. So you can include correspondent styles and see your web changed to a ‘mobile’ looking.</p><div class="separator" style="clear: both; text-align: center;">[![](http://2.bp.blogspot.com/-PfMDOmnaacI/UiSolBxGxmI/AAAAAAAADfg/1wCKVbcfFlM/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-09-02+%E4%B8%8B%E5%8D%8811.02.41.png)&nbsp;](http://2.bp.blogspot.com/-PfMDOmnaacI/UiSolBxGxmI/AAAAAAAADfg/1wCKVbcfFlM/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-09-02+%E4%B8%8B%E5%8D%8811.02.41.png)</div><div class="separator" style="clear: both; text-align: center;">Custom headers </div><div class="separator" style="clear: both; text-align: center;"></div>Since these UI are intended to serve the need of FirefoxOS(gaia) presence, they **looks not well** in other browser. (update: Include `cross_browser.css` if you want your webapp can run on other browsers.)<p>Recently FirefoxOS UI related developers starting a project called “<a href="https://github.com/buildingfirefoxos/Building-Blocks/" target="_blank" rel="noopener">Building-Blocks</a>” to make developers outside of FirefoxOS (gaia) can reuse the same UI more easily.</p><p><a href="https://github.com/buildingfirefoxos/Building-Blocks/" target="_blank" rel="noopener">https://github.com/buildingfirefoxos/Building-Blocks/</a></p><p> 1. Currently you can git clone the code from git <code>https://github.com/buildingfirefoxos/Building-Blocks.git</code></p><p>2. I also register ‘building-blocks’ to bower list so my <a href="https://github.com/gasolin/webapplate" target="_blank" rel="noopener">webapplate</a> project or <a href="http://yeoman.io/" target="_blank" rel="noopener">yeoman</a> generators can reuse it with bower.Use bower (need ran ‘npm install -g bower’ first) to install ‘building-blocks’ into your project is easy$ bower install building-blocks</p><p>Or you can predefined required libraries in ‘<a href="https://github.com/gasolin/webapplate/blob/master/bower.json" target="_blank" rel="noopener">bower.json</a>’ file. then run ‘bower install’ directly.</p><p>For code and demos, please install <a href="https://marketplace.firefox.com/app/ui-demos" target="_blank" rel="noopener">UI Demos</a> by your Desktop Firefox browser or FirefoxOS devices.</p><div class="separator" style="clear: both; text-align: center;">[![](http://4.bp.blogspot.com/-cs8qurTiFCY/UiSpJFpgcvI/AAAAAAAADfo/vYAW8hGRdn0/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-09-02+%E4%B8%8B%E5%8D%8811.05.10.png)&nbsp;](http://4.bp.blogspot.com/-cs8qurTiFCY/UiSpJFpgcvI/AAAAAAAADfo/vYAW8hGRdn0/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-09-02+%E4%B8%8B%E5%8D%8811.05.10.png)</div><div class="separator" style="clear: both; text-align: center;">Reusable code samples</div>]]></content>
      
      
        <tags>
            
            <tag> FirefoxOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>百書完食的第四年</title>
      <link href="/2014/01/01/%E7%99%BE%E6%9B%B8%E5%AE%8C%E9%A3%9F%E7%9A%84%E7%AC%AC%E5%9B%9B%E5%B9%B4/"/>
      <url>/2014/01/01/%E7%99%BE%E6%9B%B8%E5%AE%8C%E9%A3%9F%E7%9A%84%E7%AC%AC%E5%9B%9B%E5%B9%B4/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: left;">2013要過去了，我一直使用[Anobii](http://www.anobii.com/gasolin/books)來記錄我所讀過的書籍與簡單評論，至今也4年多了。</div>回顧過去幾年，不含網路文章與網路小說，大概也都讀超過百多本（包含漫畫）。<div class="separator" style="clear: both; text-align: left;"></div><table class="help_table" style="border-collapse: collapse; border: 1px solid rgb(204, 204, 204); color: black; font-family: 'Lucida Grande', Verdana, 'Lucida Sans Unicode', sans-serif; font-size: 12px; line-height: 19.1875px; margin: 10px 0px; padding: 0px; width: 589px;"><tbody><tr style="border-collapse: collapse; margin: 0px; padding: 0px;"><td style="border-collapse: collapse; border: 1px solid rgb(204, 204, 204); margin: 0px; padding: 3px 5px;">2013</td><td style="border-collapse: collapse; border: 1px solid rgb(204, 204, 204); margin: 0px; padding: 3px 5px;">114</td><td style="border-collapse: collapse; border: 1px solid rgb(204, 204, 204); margin: 0px; padding: 3px 5px;">22533</td></tr><tr style="border-collapse: collapse; margin: 0px; padding: 0px;"><td style="border-collapse: collapse; border: 1px solid rgb(204, 204, 204); margin: 0px; padding: 3px 5px;">2012</td><td style="border-collapse: collapse; border: 1px solid rgb(204, 204, 204); margin: 0px; padding: 3px 5px;">169</td><td style="border-collapse: collapse; border: 1px solid rgb(204, 204, 204); margin: 0px; padding: 3px 5px;">32466</td></tr><tr style="border-collapse: collapse; margin: 0px; padding: 0px;"><td style="border-collapse: collapse; border: 1px solid rgb(204, 204, 204); margin: 0px; padding: 3px 5px;">2011</td><td style="border-collapse: collapse; border: 1px solid rgb(204, 204, 204); margin: 0px; padding: 3px 5px;">204</td><td style="border-collapse: collapse; border: 1px solid rgb(204, 204, 204); margin: 0px; padding: 3px 5px;">44237</td></tr><tr style="border-collapse: collapse; margin: 0px; padding: 0px;"><td style="border-collapse: collapse; border: 1px solid rgb(204, 204, 204); margin: 0px; padding: 3px 5px;">2010</td><td style="border-collapse: collapse; border: 1px solid rgb(204, 204, 204); margin: 0px; padding: 3px 5px;">189</td><td style="border-collapse: collapse; border: 1px solid rgb(204, 204, 204); margin: 0px; padding: 3px 5px;">41606</td></tr></tbody></table><div class="separator" style="clear: both;"></div><div class="separator" style="clear: both;"></div><div class="separator" style="clear: both;">曬一下今年讀完的書，順便從中推薦些好書（由近至遠）</div><div></div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;">[![](http://1.bp.blogspot.com/-CHZUGGRy8rY/UrqfIsoGajI/AAAAAAAADj0/p8_7os7OPAM/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-25+%E4%B8%8B%E5%8D%885.01.19.png)](http://1.bp.blogspot.com/-CHZUGGRy8rY/UrqfIsoGajI/AAAAAAAADj0/p8_7os7OPAM/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-25+%E4%B8%8B%E5%8D%885.01.19.png)</div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: left;">我的主要書籍來源自[台北市圖書館](http://webcat.tpml.edu.tw/)，輔以購書跟電子書。台北市圖書館實在是方便到不行，甚至支援甲地借，乙地還。又離家不遠，不善用實在說不過去。</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;">近期另一個來源是10月入手的Kindle Paperwhite，透過登入大陸Amazon.cn帳號，買了一些簡體書來看。「重說中國近代史」、「我是個算命先生」都很長知識。還在看的「哲學家們都幹了些什麼」更是極佳的作品。透過手機也用零碎時間看完一些如「賈伯斯傳」這種超大部頭的Epub電子書。</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;">「響應式網頁設計」這本也相當推薦給網頁設計者。</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;">[![](http://3.bp.blogspot.com/-xVmU8P_AnNY/UrqfNiArmEI/AAAAAAAADj8/7iH09ufGTXo/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-25+%E4%B8%8B%E5%8D%885.01.29.png)](http://3.bp.blogspot.com/-xVmU8P_AnNY/UrqfNiArmEI/AAAAAAAADj8/7iH09ufGTXo/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-25+%E4%B8%8B%E5%8D%885.01.29.png)</div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: left;">「一句話配一張圖，再複雜都能說清楚」是「餐巾紙的背面」作者新書，也是經典之作。</div><div class="separator" style="clear: both; text-align: left;">王唯工先生的氣血系列作用理工的嚴謹實驗來驗證中醫氣、血、臟腑學說，也非常值得一看。</div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;">[![](http://2.bp.blogspot.com/--dcJUQF04_M/UrqfXKa0-CI/AAAAAAAADkE/khGY1JqFkL8/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-25+%E4%B8%8B%E5%8D%885.02.58.png)](http://2.bp.blogspot.com/--dcJUQF04_M/UrqfXKa0-CI/AAAAAAAADkE/khGY1JqFkL8/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-25+%E4%B8%8B%E5%8D%885.02.58.png)</div><div class="separator" style="clear: both; text-align: center;">[![](http://4.bp.blogspot.com/-qtpvC81lvq0/UrqfgU2TD1I/AAAAAAAADkM/8n-X1IADD-4/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-25+%E4%B8%8B%E5%8D%885.03.40.png)](http://4.bp.blogspot.com/-qtpvC81lvq0/UrqfgU2TD1I/AAAAAAAADkM/8n-X1IADD-4/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-25+%E4%B8%8B%E5%8D%885.03.40.png)</div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: left;">今年Android Play Store、Readmoo等網站也紛紛開張，因此透過各平台也選看了一些書。</div><div class="separator" style="clear: both; text-align: left;">由於選修了MOOC平台上的「Gamification」（遊戲化）課程，因此也看了「加入遊戲因子，解決各種問題」一書，相當新鮮。</div><div class="separator" style="clear: both; text-align: left;">「浪潮之顛」是想了解資訊科學歷史和關聯不可不讀的好書。江山代有科技公司出，IT百年間的龍爭虎鬥與趨勢的轉移，連不諳科技的人都可以讀得津津有味。</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;">[![](http://4.bp.blogspot.com/-X_N3PY06p9c/UrqftVAohcI/AAAAAAAADkU/rMprBSAUjDg/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-25+%E4%B8%8B%E5%8D%885.04.27.png)](http://4.bp.blogspot.com/-X_N3PY06p9c/UrqftVAohcI/AAAAAAAADkU/rMprBSAUjDg/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-25+%E4%B8%8B%E5%8D%885.04.27.png)</div><div class="separator" style="clear: both; text-align: center;">[![](http://4.bp.blogspot.com/-cHqmOyLr_Us/Urqf8B3ARzI/AAAAAAAADkc/miOkYLxrTYQ/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-25+%E4%B8%8B%E5%8D%885.05.32.png)](http://4.bp.blogspot.com/-cHqmOyLr_Us/Urqf8B3ARzI/AAAAAAAADkc/miOkYLxrTYQ/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-12-25+%E4%B8%8B%E5%8D%885.05.32.png)</div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: left;">這些是過年和元旦假期，轉換工作期間的精神「食」糧 XD</div><div class="separator" style="clear: both; text-align: left;"></div>回顧可以發現我也蠻喜歡讀圖文書和手繪風格的作品，是拿來平衡日常生活吧？]]></content>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>讓網頁應用支援多樣設備</title>
      <link href="/2013/11/20/%E8%AE%93%E7%B6%B2%E9%A0%81%E6%87%89%E7%94%A8%E6%94%AF%E6%8F%B4%E5%A4%9A%E6%A8%A3%E8%A8%AD%E5%82%99/"/>
      <url>/2013/11/20/%E8%AE%93%E7%B6%B2%E9%A0%81%E6%87%89%E7%94%A8%E6%94%AF%E6%8F%B4%E5%A4%9A%E6%A8%A3%E8%A8%AD%E5%82%99/</url>
      <content type="html"><![CDATA[<p>Firefox OS 剛出品的設備解析度都是 320x480，但將來當然會支援更多種類的設備。這些設備的螢幕大小和所使用的解析度可能差異較大，所以我們也在思考要如何做才能善用Web技術，做到讓網頁應用/系統支援多重解析度設備。</p><p>前陣子將最近在支援較大螢幕設備的實作經驗整理一下，於謀智台客上發表了幾篇文章：</p><ul><li><a href="http://tech.mozilla.com.tw/posts/2835/%E4%B8%80%E5%80%8B%E6%89%93%E5%8D%81%E5%80%8B-%E8%AE%93-gaia-%E7%B6%B2%E9%A0%81%E6%87%89%E7%94%A8%EF%BC%88webapp%EF%BC%89%E6%94%AF%E6%8F%B4%E5%A4%9A%E9%87%8D%E8%A8%AD%E5%82%99%EF%BC%88%E4%B8%80" target="_blank" rel="noopener">一個打十個 – 讓 Gaia 網頁應用（webapp）支援多重設備（一：像素密度）</a></li><li><a href="http://tech.mozilla.com.tw/posts/2862/%E4%B8%80%E5%80%8B%E6%89%93%E5%8D%81%E5%80%8B-%E8%AE%93-gaia-%E7%B6%B2%E9%A0%81%E6%87%89%E7%94%A8%EF%BC%88webapp%EF%BC%89%E6%94%AF%E6%8F%B4%E5%A4%9A%E9%87%8D%E8%A8%AD%E5%82%99%EF%BC%88%E4%BA%8C" target="_blank" rel="noopener">一個打十個 – 讓 Gaia 網頁應用（webapp）支援多重設備（二：螢幕大小）</a>總而言之，開發者需要根據設備的「像素密度」（Pixel Density）與「螢幕大小」（Screen Size），處理相對應的「排版」與「圖片」問題。</li></ul><p>即使是Web App，要支援多樣設備仍然要花上不少心力哩。</p>]]></content>
      
      
        <tags>
            
            <tag> FirefoxOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>那些 2013 年發佈的 OS</title>
      <link href="/2013/10/28/%E9%82%A3%E4%BA%9B-2013-%E5%B9%B4%E7%99%BC%E4%BD%88%E7%9A%84-OS/"/>
      <url>/2013/10/28/%E9%82%A3%E4%BA%9B-2013-%E5%B9%B4%E7%99%BC%E4%BD%88%E7%9A%84-OS/</url>
      <content type="html"><![CDATA[<p>原來就預期今年會有很多OS出現，但沒想到有那麼多。來簡單整理一下列個表。如果有漏掉的，請路過的讀者幫忙提醒吧。</p><p>後面括號(Mod)表示是 Android 的衍生版本。月份是大概印象，與實際日期可能有出入。</p><p>這些 OS 其中當然有些只是拿來賺眼球，還沒有實際出貨計劃的OS。不過廠商群雄並起逐鹿的感覺，當可確認現在已進入後PC時代無疑。</p><p>3月</p><p><a href="https://www.ouya.tv/" target="_blank" rel="noopener">OUYA</a> (Mod)遊戲機與自有市集</p><p><a href="http://www.smartisan.cn/" target="_blank" rel="noopener">Smartisn OS</a> (錘子OS, Mod)</p><div class="separator" style="clear: both; text-align: center;">[![](http://1.bp.blogspot.com/-RevPzVgQkIc/UkDV1CpqLMI/AAAAAAAADgM/CHHzcCMXKRg/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-09-24+%E4%B8%8A%E5%8D%887.58.52.png)](http://1.bp.blogspot.com/-RevPzVgQkIc/UkDV1CpqLMI/AAAAAAAADgM/CHHzcCMXKRg/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-09-24+%E4%B8%8A%E5%8D%887.58.52.png)</div><p><a href="http://us.blackberry.com/software/smartphones/blackberry-10-os.html" target="_blank" rel="noopener">BlackBerry 10 OS</a><span style="color: blue;">已出兩隻手機</span></p><p>5月</p><p><a href="http://www.android.com/" target="_blank" rel="noopener">Android</a> 4.3 + Google Services各種跨版本可用的 Google 服務，扁平化與卡片式設計<span style="color: blue;">現有設備升級, n台新機</span></p><p><a href="http://www.google.com/intl/en/chrome/devices/" target="_blank" rel="noopener">Chrome OS</a><span style="color: blue;">Pixel筆電與Chrome box</span></p><p>7月</p><p><a href="http://www.mozilla.org/en-US/firefox/os/" target="_blank" rel="noopener">FirefoxOS</a> 1.0.1<span style="color: blue;">ZTE open, TCL One touch Fire</span></p><div class="separator" style="clear: both; text-align: center;">[![](http://3.bp.blogspot.com/--mNV6auf9ck/UkDWFGO15wI/AAAAAAAADgU/YKyAMjFLF3I/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-09-24+%E4%B8%8A%E5%8D%887.59.34.png)](http://3.bp.blogspot.com/--mNV6auf9ck/UkDWFGO15wI/AAAAAAAADgU/YKyAMjFLF3I/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-09-24+%E4%B8%8A%E5%8D%887.59.34.png)</div><p><a href="http://www.ubuntu.com/phone" target="_blank" rel="noopener">Ubuntu Phone</a>相似的概念性界面還有 for <a href="http://www.ubuntu.com/tablet" target="_blank" rel="noopener">Tablet</a>, for <a href="http://www.ubuntu.com/phone/ubuntu-for-android" target="_blank" rel="noopener">Android</a>, for <a href="http://www.ubuntu.com/tv" target="_blank" rel="noopener">TV</a>… </p><div class="separator" style="clear: both; text-align: center;">[![](http://1.bp.blogspot.com/-1aaq0vNXdn4/UkDZhB4J_sI/AAAAAAAADg0/1efCQfTkOm4/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-09-24+%E4%B8%8A%E5%8D%888.14.01.png)](http://1.bp.blogspot.com/-1aaq0vNXdn4/UkDZhB4J_sI/AAAAAAAADg0/1efCQfTkOm4/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-09-24+%E4%B8%8A%E5%8D%888.14.01.png)</div><p>9月<a href="http://www.cyanogenmod.org/" target="_blank" rel="noopener">CyanogenMod</a>  (Mod)宣布公司化</p><p><a href="https://sailfishos.org/" target="_blank" rel="noopener">Sailfish OS</a></p><div class="separator" style="clear: both; text-align: center;">[![](http://3.bp.blogspot.com/-sJ2hgpJoW8M/UkDYU2K7otI/AAAAAAAADgo/KsZl7we8lTo/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-09-24+%E4%B8%8A%E5%8D%888.09.33.png)](http://3.bp.blogspot.com/-sJ2hgpJoW8M/UkDYU2K7otI/AAAAAAAADgo/KsZl7we8lTo/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-09-24+%E4%B8%8A%E5%8D%888.09.33.png)</div><p><a href="http://www.apple.com/tw/ios/" target="_blank" rel="noopener">iOS7</a>iOS 五年來最大的改版<span style="color: blue;">現有設備升級, iPhone 5s, 5c</span></p><div class="separator" style="clear: both; text-align: center;">[![](http://1.bp.blogspot.com/-AnMt5hwgRqo/UkDXifD3YAI/AAAAAAAADgg/6mcA_OSseZw/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-09-24+%E4%B8%8A%E5%8D%888.06.10.png)](http://1.bp.blogspot.com/-AnMt5hwgRqo/UkDXifD3YAI/AAAAAAAADgg/6mcA_OSseZw/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-09-24+%E4%B8%8A%E5%8D%888.06.10.png)</div><p><a href="http://store.steampowered.com/livingroom/SteamOS/" target="_blank" rel="noopener">SteamOS</a>客廳與遊戲用 OS</p><p>10 月</p><p><a href="http://www.mozilla.org/en-US/firefox/os/" target="_blank" rel="noopener">FirefoxOS</a> 1.1</p><iframe allowfullscreen frameborder="0" height="315" src="//www.youtube.com/embed/t_7sTP7IRn4" width="420"></iframe><p><a href="http://en.wikipedia.org/wiki/Aliyun_OS" target="_blank" rel="noopener">Ali OS</a> (阿里OS) 可<a href="http://www.qingcheng.com/index.aspx" target="_blank" rel="noopener">定製手機</a></p><p>11 月</p><p><a href="https://www.tizen.org/" target="_blank" rel="noopener">Tizen</a> <a href="http://mag.udn.com/mag/digital/storypage.jsp?f_MAIN_ID=320&amp;f_SUB_ID=2942&amp;f_ART_ID=482688" target="_blank" rel="noopener">平板</a></p><div class="separator" style="clear: both; text-align: center;">[![](http://twimages.vr-zone.net/2013/10/Systena-Tablet-TIZEN-Indonesia-2.1-6-665x443.jpg)&nbsp;](http://twimages.vr-zone.net/2013/10/Systena-Tablet-TIZEN-Indonesia-2.1-6-665x443.jpg)</div><div class="separator" style="clear: both; text-align: center;"></div>Android 4.4 [KitKat](http://www.android.com/kitkat/index.html)<div class="separator" style="clear: both; text-align: center;"></div>]]></content>
      
      
        <tags>
            
            <tag> FirefoxOS </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>人人能編程是可能的嗎？</title>
      <link href="/2013/10/26/%E4%BA%BA%E4%BA%BA%E8%83%BD%E7%B7%A8%E7%A8%8B%E6%98%AF%E5%8F%AF%E8%83%BD%E7%9A%84%E5%97%8E%EF%BC%9F/"/>
      <url>/2013/10/26/%E4%BA%BA%E4%BA%BA%E8%83%BD%E7%B7%A8%E7%A8%8B%E6%98%AF%E5%8F%AF%E8%83%BD%E7%9A%84%E5%97%8E%EF%BC%9F/</url>
      <content type="html"><![CDATA[<iframe allowfullscreen frameborder="0" height="470px" marginheight="0" marginwidth="0" scrolling="no" src="http://www.slideshare.net/slideshow/embed_code/14011182" style="border: none;" width="490px"></iframe><p>今年的<a href="http://coscup.org/2012/zh-tw/program/" target="_blank" rel="noopener">Coscup</a>活動中，我分享了一個開放的講題「人人能編程是可能的嗎？」。</p><p>在準備講題的過程中參考了很多資料、思考了很多的可能性，最後選擇以現在的方式和大家分享。</p><p>之所以會提出這個講題，其實是自己對我過往在各處分享各種不同講題、寫技術書籍、辦活動的總結。我發現不管我分享的主題為何，似乎這些活動彼此之間有一條驅動我這麼做的暗線存在。就我目前看到驅使我做這些事情的動力，可能是「讓人人能編程」這個願景。</p><p>「人人能編程是可能的嗎？」是個開放結局的問題，每個人都有自己的想法，覺得不可能實現或是有自己相信的可能實現。從講題被接受後，我也一直在尋找要怎麼將各種可能幫助我們達成「人人能編程」的各種可能性組織起來。最後我歸納出可以用「人」、「程式」、「指令」、「機器」四個「從寫程式到在機器上執行」的過程中會遇到的必要元素間的距離來做判斷。用這四個元素間關係所組成的六個維度作為判斷框架，能協助我們判斷每個可能的實現在各個層面對「讓人人能編程」這件事。</p><p>從PC到筆電到智慧手機/平板這條線，改進的是「人與機器的距離」這個維度。</p><p><a href="http://zhpy.blogspot.com/" target="_blank" rel="noopener">周蟒</a>改進的是「人與程式的距離」這個維度。</p><p><a href="http://blockly-demo.appspot.com/blockly/demos/codetw/index.html" target="_blank" rel="noopener">Blockly</a>改進的是「人與程式的距離」（積木化）、「程式與指令的距離」（輸出Python, Javascript）、「指令與機器的距離」(網頁上直接執行)、「人與指令的距離」（開源且Blockly本身積木與輸出都很容易修改）、「人與機器的距離」（開網頁就能用）這些維度。</p><p>因為演講時間有限，沒有辦法把每個想表達的想法都傳達出來，所以特別寫下此文，聊以記之。</p>]]></content>
      
      
        <tags>
            
            <tag> zhpy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>e化政府怎麼做？提供行動版網頁，而不是App</title>
      <link href="/2013/10/25/e%E5%8C%96%E6%94%BF%E5%BA%9C%E6%80%8E%E9%BA%BC%E5%81%9A%EF%BC%9F%E6%8F%90%E4%BE%9B%E8%A1%8C%E5%8B%95%E7%89%88%E7%B6%B2%E9%A0%81%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AFApp/"/>
      <url>/2013/10/25/e%E5%8C%96%E6%94%BF%E5%BA%9C%E6%80%8E%E9%BA%BC%E5%81%9A%EF%BC%9F%E6%8F%90%E4%BE%9B%E8%A1%8C%E5%8B%95%E7%89%88%E7%B6%B2%E9%A0%81%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AFApp/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;">[![](http://4.bp.blogspot.com/-j18X-6Ibttw/Umsa1-3Q5uI/AAAAAAAADig/K9pm03YqabE/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-10-26+%E4%B8%8A%E5%8D%889.28.34.png)](http://4.bp.blogspot.com/-j18X-6Ibttw/Umsa1-3Q5uI/AAAAAAAADig/K9pm03YqabE/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-10-26+%E4%B8%8A%E5%8D%889.28.34.png)</div>台北市有個便民的服務叫 「[1999台北市民當家熱線](http://onestop.taipei.gov.tw/)」，只要是跟公職部門有關的問題，如在公車上丟失東西、查詢號碼，甚至對公家機關服務不滿想投訴，只要拿起電話，撥「1999」，都會有人受理，找到適合的單位回覆，並追蹤處理狀況。一些透過「1999」反映的問題，還會轉化為上級單位的公文，正式行文要求負責單位回覆。<p>原來在公車上丟了東西，要先查對應客運公司服務中心電話/網站，找到電話號碼或網址，才能到對應窗口反映問題；對公家機關服務不滿意想投訴，要先查對應機關的電話或網址，或找到上一級機構聯絡窗口，才能反映問題，而且還要擔心會不會被「吃案」。整個過程的「交易成本」實在太高，讓大多數市民望而怯步，只能在私下抱怨政府不力。</p><p>有了「1999」服務之後，這些「交易成本」被政府吸收，市民只要</p><p>1. 拿起電話2. 反映自己關心的問題3. 等待回覆</p><p>即可，簡直就是人肉版的「<a href="http://www.google.com/landing/now/" target="_blank" rel="noopener">Google Now</a>」。</p><p>姑且不論弄這個服務所費幾何，又造成多少單位的額外負擔。至少就「便民」這結果而言，「1999」讓所有能夠打電話的市民，都有一個非常方便容易取得資訊、反映問題的管道。</p><p>這幾年政府單位開始大量產出各種App。由於政府並沒有相應技術，因此這些App多為外包。然而這些App的下載量似乎都不怎麼樣。這是什麼原因哩? 當然有很多可以抱怨的點，但如果要拿出一個大方向，我覺得一大部份原因也是「<strong>交易成本</strong>」的問題。</p><p>試想，一般民眾的日常生活中，政府單位的服務就像是自來水和電力一樣，除了停水停電外，不會特別意識到這些服務的重要性。當真的需要各單位的特定服務時，通常也只是非持續性的需求。</p><p>在這種使用情境下，該單位為了便民，提供了該單位的App。使用者要用到該單位的服務，「只要」上應用商店搜尋，下載該服務App，開啓App後「就」可以使用了。</p><p>這樣的使用情境其實非常禁不起推敲：</p><p>1. 對於一年只使用幾次的服務，有需要先下載App才能使用嗎？更何況可能下載後打開App，才發現裡面提供的服務都不是我想要的，整個「交易成本」很高。</p><p>2.  使用者使用的系統平台不同。政府資源有限，使用尚未提供對應App系統平台的市民，難道就是二等市民嗎？萬一提供了該系統平台App，而該系統平台並未成功，負責發包的官員會不會哪天被追究圖利特定廠商？</p><p>簡而言之，對於使用頻率不高的服務，多數人還是寧願用行動裝置的瀏覽器直接連上機關的網頁查詢。於是這就牽扯到另一個問題：行動裝置連上政府網頁觀看的體驗不佳。</p><p>不少政府網頁還是上個10年的水準。大面積的圖片、Flash、塞滿整版面的資訊，完全沒考慮到使用行動設備瀏覽的體驗。根據今年的調查，<a href="http://iservice.libertytimes.com.tw/3c/news.php?no=10544&amp;type=5" target="_blank" rel="noopener">台灣行動上網人口已經佔到全部上網人口的4成</a>，而台北市的佔比應該更高。來自由心證一下，應至少5成使用者試過用行動裝置連上政府網站，而政府網站卻不能回應這近半受眾的需求，使得政府網站的功用大打折扣。</p><p>政府開發一款熱門平台的App，所達到的效果只是 854萬（4成上網人口，行動上網使用者） <em>  1/2（平台市佔率）</em> 應用商店到達率 (使用者搜尋到這款 App) * 應用安裝率 (不知乘起來有沒有1/100？) ~= 4萬+，於是除非追加預算特地推廣App，大多數政府App安裝數可能都小於這個數字…</p><p>與其如此，政府是否應顧好「便民」的根本，</p><p>1. 先提供基本款的「行動版網頁」，以服務逐年增加的使用行動設備/小螢幕的市民，2. 並一併重新檢視原本桌面款網頁的機能，以提供更有效率的便民服務。3. 對於使用頻率較高的政府服務，則可以透過「Open Data」，讓各平台開發者得以接取公開的API與資料，提供多樣性的服務。</p>]]></content>
      
      
        <tags>
            
            <tag> mobile </tag>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>開放徽章(OpenBadges)的遊戲化經驗</title>
      <link href="/2013/09/29/%E9%96%8B%E6%94%BE%E5%BE%BD%E7%AB%A0-OpenBadges-%E7%9A%84%E9%81%8A%E6%88%B2%E5%8C%96%E7%B6%93%E9%A9%97/"/>
      <url>/2013/09/29/%E9%96%8B%E6%94%BE%E5%BE%BD%E7%AB%A0-OpenBadges-%E7%9A%84%E9%81%8A%E6%88%B2%E5%8C%96%E7%B6%93%E9%A9%97/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;">[![](http://1.bp.blogspot.com/-fILF-TBujzM/UfcfTRZrRzI/AAAAAAAADaA/2Lei5nDsgLU/s1600/cosoffline.png)](http://1.bp.blogspot.com/-fILF-TBujzM/UfcfTRZrRzI/AAAAAAAADaA/2Lei5nDsgLU/s1600/cosoffline.png)</div><div style="text-align: center;">&nbsp;第一個中文世界的開放徽章</div>「徽章」讓原本難以量化的能力，透過徽章的形式具現化。<p>我一直很留意遊戲化（Gamification）的應用。當越來多多事情變得可以測量之後，很自然的會想在生活中引入遊戲機制，以提高活動的參與度或樂趣。</p><p>最常見的遊戲化（Gamification）應用是 PBS（Point, Badge, Scoreboard）- 積分、徽章、排行榜。這些遊戲化元素在許多遊戲和社交網站中都會出現，如<a href="http://www.khanacademy.org/%E2%80%8E" target="_blank" rel="noopener"> KhanAcademy</a> 或 <a href="http://www.codecademy.com/" target="_blank" rel="noopener">CodeAcademy</a> 等近年湧現的線上學習網站。在站內學習時，每完成一道題目，就可以取得一定的分數；完成了一個學習單元？恭喜！你獲得了一個線上的徽章，可以把聯結展示給你的朋友或潛在僱主看。</p><p>但目前的遊戲化（Gamification）應用有個問題：我已在這平台/遊戲上投入了那麼多時間、精力，（可能還有金錢），一旦不用這平台/遊戲之後，那些我的豐功偉業都不見了。於是使用者/玩家會傾向停留在剛開始選擇的平台中，並減少嘗試其他家服務的意願。於是「Lock in」、大者恆大的現象就出現了。</p><p>也因此 Apple、Google 都仿效 XBox 推出自己的 Game Center，提供積分、徽章（成就）、玩家配對等功能，讓在同一個平台上的玩家更方便嘗試不同遊戲，並且保留遊戲的進度，期望能綁住使用者/玩家。</p><p>這個現象對遊戲或作業系統平台商而言也許是好事，但是如果把目標改成線上學習網站的話…我是希望可以在更專門的網站學習不同的技能啦。而且最好是不管線上或學習實際課程後，我都可以得到徽章/證書，這樣我可以把我收集到的成就展示給我的朋友或潛在僱主看。</p><h4 id="第一個中文世界的開放徽章">第一個中文世界的開放徽章</h4><p>Mozilla 嘗試在推動的 <a href="http://openbadges.org/" target="_blank" rel="noopener">OpenBadges</a>（開放徽章）標準就是一個解決線上/線下，不同網站之間徽章/成就流通，鼓勵使用者多多嘗試的方案。</p><p>前幾週在我講授的 <a href="http://registrano.com/events/coscup-2013-hands-on-gasolin" target="_blank" rel="noopener">COSCUP 課程</a> 上，發出了第一個（?我想應該是吧）中文世界的<a href="http://badg.us/en-US/badges/badge/COSCUP-2013-Hands-on%EF%BC%9A%E4%B8%80%E5%B0%8F%E6%99%82%E7%B6%B2%E9%A0%81-App-%E9%9B%A2%E7%B7%9A%E5%84%B2%E5%AD%98%E5%B0%B1%E4%B8%8A%E6%89%8B" target="_blank" rel="noopener">開放徽章</a>。</p><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;">[](http://3.bp.blogspot.com/-uD172oP5Dk0/Ufcjilm-iqI/AAAAAAAADaQ/6pas-yCzv-o/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-07-30+%E4%B8%8A%E5%8D%8810.22.46.png)</div>發放的流程是這樣的：<p>1. 學員聽完第一個小時課程，並已實際Lab操作一陣子，符合取得徽章的資格2. 提供學員印出的徽章兌換券，上面的內容如下</p><div class="separator" style="clear: both; text-align: center;">[![](http://2.bp.blogspot.com/-atF115kZam4/UfclEC6CR8I/AAAAAAAADag/QkHGQizqlgw/s400/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-07-30+%E4%B8%8A%E5%8D%8810.26.52.png)](http://2.bp.blogspot.com/-atF115kZam4/UfclEC6CR8I/AAAAAAAADag/QkHGQizqlgw/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-07-30+%E4%B8%8A%E5%8D%8810.26.52.png)</div><div style="text-align: center;">徽章兌換券</div>3\. 學員直接使用智慧型手機掃描條碼，或前往 http://badg.us/ 網站輸入兌換碼。4\. 學員登入後可取得徽章<p><a href="http://3.bp.blogspot.com/-uD172oP5Dk0/Ufcjilm-iqI/AAAAAAAADaQ/6pas-yCzv-o/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-07-30+%E4%B8%8A%E5%8D%8810.22.46.png" target="_blank" rel="noopener"><img src="http://3.bp.blogspot.com/-uD172oP5Dk0/Ufcjilm-iqI/AAAAAAAADaQ/6pas-yCzv-o/s640/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-07-30+%E4%B8%8A%E5%8D%8810.22.46.png" alt=""> </a></p><div style="text-align: center;">http://bit.ly/15rbii1</div>5\. 取得的徽章可以直接分享給他的朋友或潛在僱主看，或導出到 [徽章背包](http://backpack.openbadges.org/) (http://backpack.openbadges.org/) 中備份。所有符合 OpenBadges 標準的徽章都可以備份到 [徽章背包](http://backpack.openbadges.org/) 中。學員可以結合其他網站上取得徽章，將這些徽章整理成一個個收藏（Collection），有系統地分享給他的朋友或潛在僱主看。<p>透過這樣的方式，即使是實體的課程，也可以在線上留下印記！學員除了學到課程知識，也得到了一個可以永久保存的紀念章。</p><p>除了讓使用者願意多方嘗試之外，同時也讓一般人擁有發放徽章/證書的能力。從初步的使用經驗來看，開放徽章還有很多的可能性值得探索。</p>]]></content>
      
      
        <tags>
            
            <tag> Mozilla </tag>
            
            <tag> gamification </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如果想免費實習，就去參與Open Source活動吧</title>
      <link href="/2013/08/26/%E5%A6%82%E6%9E%9C%E6%83%B3%E5%85%8D%E8%B2%BB%E5%AF%A6%E7%BF%92%EF%BC%8C%E5%B0%B1%E5%8E%BB%E5%8F%83%E8%88%87Open-Source%E6%B4%BB%E5%8B%95%E5%90%A7/"/>
      <url>/2013/08/26/%E5%A6%82%E6%9E%9C%E6%83%B3%E5%85%8D%E8%B2%BB%E5%AF%A6%E7%BF%92%EF%BC%8C%E5%B0%B1%E5%8E%BB%E5%8F%83%E8%88%87Open-Source%E6%B4%BB%E5%8B%95%E5%90%A7/</url>
      <content type="html"><![CDATA[<p>大企業喜歡名校畢業生並不是沒有原因的。</p><p>我們知道每個人都有自己的偏好，不太可能剛好喜歡每個要學習的科目。成績優秀的學生不只是頭腦好，同時也有辦法控制自己的偏好，能同時把多種不同類型的科目都搞好。</p><p>可以把不見得那麼喜歡的工作也很好地執行，正是許多缺螺絲釘的大企業所需要的。</p><p>還好社會不是只有讀名校-&gt;進大企業這一種出路。不少非名校畢業生在開始工作後，也逬發出驚人的能量，在職場上如魚得水。就我觀察屬於這類型的朋友，通常在做喜歡的事情時都具有非凡的熱情。</p><p>當你對一件事情有熱情，持續投入一萬個小時，你一定會有所專精。當社會剛好需要你的能力，又出的起價錢時，你就算有所成就了。</p><h3 id="找工作與經驗">找工作與經驗</h3><p>有所成就之前要有一步步踏實積累的過程。如果能找到適合的工作，那對實現目標肯定有幫助。而就人力銀行等機構放出的調查來看，要找到適合的工作不容易，而許多工作又要求先有經驗。</p><div></div>現在已經二十一世紀又過十多年了，網路從普及，社交化，到漸漸融入了日常生活。累積經驗的過程已經不只是進企業實習一途。<p>我認識了一些在學業上可能不算頂尖，但在我眼中絕對算優秀的學生，從他們的表現我認識到：對想找ITC資通軟體類工作的大學生來說，開始要工作時，「沒有經驗」只是個借口。</p><p>為什麼我說沒有經驗只是個借口？因為資通軟體類（甚至企劃, 行銷類）累積經驗的機會實在是太多了。</p><h3 id="open-source-相關的實習機會">Open Source 相關的實習機會</h3><p>請試著猜猜以下問題的答案：</p><ul><li>去年有多少APP比賽?</li><li>去年中研院幾個月舉辦一次百人聚會？</li><li>估計台北每個月舉辦的免費聚會/演講數目光2012年，台灣至少有3, 4個App比賽，中研院幾乎每個月都有Conference聚會，台北每個月至少10個以上免費聚會/演講。幫忙聚會的籌備, 招商, 報名, 會議當天的網路, 動線, 飲食, 時間控制，算不算實習經驗？</li></ul><p>參加App比賽，需要企劃，設計，開發，美術，簡報，行銷等技巧，可不可以算實習經驗？協助舉辦百人聚會算不算企劃，行銷類的實習經驗？</p><p>我說我沒有企劃, 行銷背景，但我們辦的 <a href="https://plus.google.com/+GTUGTaipei/posts" target="_blank" rel="noopener">GTUG Taipei專頁</a> 有28000人追蹤，可不可以算實習經驗？</p><p>有志於進軟體公司的學生，那更沒有藉口了。<a href="http://www.github.com/" target="_blank" rel="noopener">Github</a>, <a href="https://code.google.com/hosting/" target="_blank" rel="noopener">GoogleCode</a> 上面有多少大大小小的開源專案，只要在家裡，就可以學到如何使用工作中一定會用上的svn, git等版本控制工具，並透過郵件列表，Issue Tracker等與世界各地一流的工程師直接溝通。可不可以算實習經驗？</p><p>就我來看，這些當然不該算做實習經驗。因為你參與的不只是實習，而是真正有意義，實在的工作經歷。</p><p>我反對缺乏目的的進企業免費實習。但我贊成主動透過參與開源社群，邊貢獻社會邊學習。</p><h3 id="參與-open-source-活動的好處">參與 Open Source 活動的好處</h3><p>用參與Open Source活動作為實習經歷有什麼好處呢？</p><ul><li><strong><b>透過</b></strong><strong>參與活動時<b>扮演不同類型角色</b></strong>，可以摸清楚自己的偏好與特長</li><li><strong>實習的成果公開，可以放在履歷上讓潛在雇主隨時Reference</strong></li><li><strong>查看你的活動記錄，可以看出你的團隊合作技能</strong></li><li><strong>有參與過國外開源專案，你的英文程度至少在書面溝通上沒問題</strong></li><li><strong>「我有貢獻python/android/mozilla專案的經歷」，怎麼看都很威</strong></li><li><strong>和各型各色，但一樣具有熱情的人一起共事的經驗，將會影響你做事與看待事情的態度</strong>何況大型開源專案對貢獻程式碼的流程，與控管程式碼品質的嚴謹程度，遠高於一般台灣軟體公司。此外還有<strong>社會化</strong>的因素：<strong>你的程式碼所有人都看得到，不寫好一點好意思放出去？</strong></li></ul><div></div><div>因此參與開源專案對磨練自己寫程式的水準也很有幫助。<div><h3 id="如何將-open-source-活動貢獻加入經歷">如何將 Open Source 活動貢獻加入經歷</h3><p>透過 <a href="https://www.ohloh.net/" target="_blank" rel="noopener">Ohloh</a> 或是 <a href="http://careers.stackoverflow.com/" target="_blank" rel="noopener">Careers 2.0</a> (by stackoverflow) ，可以追蹤不同來源的開源軟體專案貢獻度。近年也可附上個人<a href="https://github.com/gasolin" target="_blank" rel="noopener">Github頁面</a>。</p><p>國外招聘網站如 <a href="http://www.linkedin.com/" target="_blank" rel="noopener">linkedin</a>，可以在「Projects」或「Experience」中加入Open Source的貢獻成果。</p><div></div><span style="background-color: white; font-size: 15px; line-height: 19.984375px;">參考資料:</span><p><span style="background-color: white; font-family: Helvetica, Arial, sans-serif; font-size: 15px; line-height: 19.984375px;">“Whether or not somebody has contributed to open source is a good indicator of whether they’re a good engineer”</span><span style="background-color: white; font-family: Helvetica, Arial, sans-serif; font-size: 15px; line-height: 19.984375px;">– </span><a href="http://news.cnet.com/8301-10797_3-57495099-235/forget-linkedin-companies-turn-to-github-to-find-tech-talent/" target="_blank" rel="noopener">Companies turn to GitHub to find tech talent</a></p><div></div><h3 id="如何參與-open-source-活動">如何參與 Open Source 活動</h3><p>這樣聽起來還不錯，但以前我都不知道這些資訊，我可以從哪開始參與哩？這邊列出一些很安全的選擇供參考：</p><p>1. 台灣每年固定的大型開源社群活動</p><ul><li><p><a href="http://osdc.tw/" target="_blank" rel="noopener">OSDC.tw</a> </p></li><li><p><a href="http://coscup.org/" target="_blank" rel="noopener">COSCUP</a><div>2. 愛台灣：讓台灣公開資料更易使用</div><div></div></p></li><li><p><a href="http://g0v.tw/" target="_blank" rel="noopener">g0v 零時政府</a></p></li><li><p><a href="http://codefortomorrow.org/" target="_blank" rel="noopener">Code for Tomorrow</a> </p></li></ul></div><div>3. 有組織地協助學生參與開源專案：台灣<a href="http://moztw.org/" target="_blank" rel="noopener">MozTW</a>社群</div><div><p></p><li><p>選擇想了解/參與的Mozilla專案 <a href="http://whatcanidoformozilla.org/" target="_blank" rel="noopener">http://whatcanidoformozilla.org/</a></p></li><li><p>中文moz開發群組 <a href="https://groups.google.com/forum/?fromgroups#!forum/mozilla.dev.general.zh" target="_blank" rel="noopener">mozilla.dev.general.zh</a></p></li></div><div>4. 如果人在台北，對Web或Mobile相關技術有興趣，歡迎來 <a href="http://www.taipei-gtug.org/" target="_blank" rel="noopener">GTUG Taipei</a> 聚聚。</div><div><p></p></div><div>其他我參加過，放心推薦的社群，可以依地域選擇參與</div><div><ul><li><a href="http://www.tossug.org/" target="_blank" rel="noopener">TOSSUG</a>  (北市)</li><li><a href="http://www.hackingthursday.org/" target="_blank" rel="noopener">Hacking Thursday</a> (北市) </li><li><a href="http://kalug.linux.org.tw/" target="_blank" rel="noopener">Kalug</a> (高雄)</li></ul></div><div>不用害羞，我們可以幫到你，為了將來有更棒的夥伴，為了能在台灣一起做更棒的事。</div><div><p>相關文章</p><ul><li><a href="http://sa.ylib.com/MagCont.aspx?Unit=columns&amp;id=2210" target="_blank" rel="noopener">社交網路求職術</a> (by ping)</li></ul></div></div>]]></content>
      
      
        <tags>
            
            <tag> soft </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>開始貢獻開源專案有多簡單？三件暑假都過了你可能還不知道的事</title>
      <link href="/2013/08/18/%E9%96%8B%E5%A7%8B%E8%B2%A2%E7%8D%BB%E9%96%8B%E6%BA%90%E5%B0%88%E6%A1%88%E6%9C%89%E5%A4%9A%E7%B0%A1%E5%96%AE%EF%BC%9F%E4%B8%89%E4%BB%B6%E6%9A%91%E5%81%87%E9%83%BD%E9%81%8E%E4%BA%86%E4%BD%A0%E5%8F%AF%E8%83%BD%E9%82%84%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B/"/>
      <url>/2013/08/18/%E9%96%8B%E5%A7%8B%E8%B2%A2%E7%8D%BB%E9%96%8B%E6%BA%90%E5%B0%88%E6%A1%88%E6%9C%89%E5%A4%9A%E7%B0%A1%E5%96%AE%EF%BC%9F%E4%B8%89%E4%BB%B6%E6%9A%91%E5%81%87%E9%83%BD%E9%81%8E%E4%BA%86%E4%BD%A0%E5%8F%AF%E8%83%BD%E9%82%84%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: left;">&nbsp;[![](http://2.bp.blogspot.com/-YrrBma_bv8o/UhDZPrJvo7I/AAAAAAAADcs/nf5D86feetQ/s400/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-08-18+%E4%B8%8B%E5%8D%881.30.15.png)](http://2.bp.blogspot.com/-YrrBma_bv8o/UhDZPrJvo7I/AAAAAAAADcs/nf5D86feetQ/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-08-18+%E4%B8%8B%E5%8D%881.30.15.png)</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;">暑假都快結束了，你的暑假夠充實嗎？</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;">參與開源專案，其實離身為學生的你沒那麼遠：</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;">（以下拿 Mozilla 跟 g0v 相關專案做範例，當然不止這兩家的開源專案，可以在 [github](http://www.github.com/), [googlecode](http://code.google.com/hosting/) 等開源專案聚集地上找到有很多有趣的開源專案，選這兩家的原因是在台灣你一定找得到人問）</div><h3 id="一-你不見得要懂英文-fluent-english-is-not-essential-criteria">一. 你不見得要懂英文 Fluent English is not essential criteria</h3><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;">剛打出這點，我自己都覺得很扯，跟軟體扯上邊的事情不懂英文怎麼搞？</div><div class="separator" style="clear: both; text-align: left;">但我發現這點還真的成立，因為現在身在台灣就有不少參與開源的機會，這是幾年前難以想像的：</div><div class="separator" style="clear: both; text-align: left;"></div><ul><li>Mozilla 社群參與 <a href="http://mozilla.com.tw/community/" target="_blank" rel="noopener">http://mozilla.com.tw/community/</a></li><li>零時政府 參與我們 <a href="http://g0v.tw/join.html" target="_blank" rel="noopener">http://g0v.tw/join.html</a><div class="separator" style="clear: both; text-align: left;"></div></li></ul><h3 id="二-你不見得要會寫程式-coding-skill-is-not-essential-criteria">二. 你不見得要會寫程式 Coding skill is not essential criteria</h3><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;">如果你的英文還行，大型的開源專案需要各種人才的貢獻，諸如協助新使用者（Helping Users）、多使用並協助找錯誤（Quality Assurance）、協助推廣（Spread the word）、將軟體翻譯成中文（Localization）、改善文件（Documentation）等等，抽點時間出來，選擇自己能做的，就可以為其他人帶來幫助，也幫自己累積經驗。這不只是社會服務，你可以自行選擇參與自己愛用的、相信的開源專案。</div><ul><li><a href="https://www.mozilla.org/en-US/contribute/" target="_blank" rel="noopener">https://www.mozilla.org/en-US/contribute/</a> (en)*   <div class="ace-line gutter-author-p-23034 emptyGutter" id="magicdomid197"><span class="author-p-23034 autolink">我</span><span class="author-p-23034">是… 如何</span><span class="author-p-24336">參與黑客松</span></div><a href="http://hack.g0v.tw/g0vMOE/ciS8hEGw7iu" target="_blank" rel="noopener">http://hack.g0v.tw/g0vMOE/ciS8hEGw7iu</a></li></ul><h3 id="三-你不見得需要先有想法-idea-is-not-essential-criteria">三. 你不見得需要先有想法 Idea is not essential criteria</h3><p>對於會寫程式的人來說，大型專案會有非常多的現有問題需解決，並會為新人提供一些指引。如Mozilla 提供了「what can i do」網頁，讓具備各種不同技能的開發者可以更快地參與能貢獻的專案。</p><ul><li>what can i do <a href="http://www.whatcanidoformozilla.org/" target="_blank" rel="noopener">http://www.whatcanidoformozilla.org/</a> (右上角可以切換語言)例如熟悉JavaScript的開發者，可以參與Firefox OS 使用者界面 <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Firefox_OS/Platform/Gaia" target="_blank" rel="noopener">Gaia</a> 專案、Mozilla網站開發、Firefox界面等。</li></ul><p><a href="http://2.bp.blogspot.com/-x2H8xFJuFZA/UhDZKJIhPGI/AAAAAAAADck/dfUgi-7Mgvc/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-08-18+%E4%B8%8B%E5%8D%881.29.48.png" target="_blank" rel="noopener"><img src="http://2.bp.blogspot.com/-x2H8xFJuFZA/UhDZKJIhPGI/AAAAAAAADck/dfUgi-7Mgvc/s400/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-08-18+%E4%B8%8B%E5%8D%881.29.48.png" alt=""> </a></p><p>熟悉 Java/Android，可以參與 <a href="https://wiki.mozilla.org/Mobile/Get_Involved" target="_blank" rel="noopener">Firefox for Android</a> 版的開發等等。</p><div class="separator" style="clear: both; text-align: center;">[![](http://2.bp.blogspot.com/-I5vx4ExcmZQ/UhDi9F1iI-I/AAAAAAAADc8/L9-mptiiMsI/s400/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-08-18+%E4%B8%8B%E5%8D%8811.06.09.png)](http://2.bp.blogspot.com/-I5vx4ExcmZQ/UhDi9F1iI-I/AAAAAAAADc8/L9-mptiiMsI/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-08-18+%E4%B8%8B%E5%8D%8811.06.09.png)</div><p>有自己的想法想實做當然很好，但在還沒找到之前，不妨先參與看看中大型的專案，查看文件、瞭解文化、學習程式風格、開發流程、與其它開發者互動等學校裡沒教的事，絕對會是很難忘的暑期經驗。</p>]]></content>
      
      
        <tags>
            
            <tag> soft </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>貢獻開源專案？從怪獸（Mozilla）與超人蓋亞（Gaia）開始吧</title>
      <link href="/2013/08/09/%E8%B2%A2%E7%8D%BB%E9%96%8B%E6%BA%90%E5%B0%88%E6%A1%88%EF%BC%9F%E5%BE%9E%E6%80%AA%E7%8D%B8%EF%BC%88Mozilla%EF%BC%89%E8%88%87%E8%B6%85%E4%BA%BA%E8%93%8B%E4%BA%9E%EF%BC%88Gaia%EF%BC%89%E9%96%8B%E5%A7%8B%E5%90%A7/"/>
      <url>/2013/08/09/%E8%B2%A2%E7%8D%BB%E9%96%8B%E6%BA%90%E5%B0%88%E6%A1%88%EF%BC%9F%E5%BE%9E%E6%80%AA%E7%8D%B8%EF%BC%88Mozilla%EF%BC%89%E8%88%87%E8%B6%85%E4%BA%BA%E8%93%8B%E4%BA%9E%EF%BC%88Gaia%EF%BC%89%E9%96%8B%E5%A7%8B%E5%90%A7/</url>
      <content type="html"><![CDATA[<p><img src="http://www.digitalmonsterisland.com/ultraman_gaia_front.jpg" alt=""></p><p>上週在 Coscup 2013 演講的投影片，介紹為何要參與 Open Source專案，基本 Firefox OS架構，和 web 技術人如何運用自己的能力來參與 Gaia 專案開發。</p><iframe allowfullscreen frameborder="0" height="356" marginheight="0" marginwidth="0" mozallowfullscreen="" scrolling="no" src="http://www.slideshare.net/slideshow/embed_code/24906537" style="border-width: 1px 1px 0; border: 1px solid #CCC; margin-bottom: 5px; max-width: 427px;" webkitallowfullscreen="" width="100%"> </iframe> <div style="margin-bottom: 5px;">** [Steps to contribute to firefox os (gaia)](http://www.slideshare.net/gasolin/steps-to-contribute-to-firefox-os-2 "Steps to contribute to firefox os (gaia)")&nbsp;**<p>為這次演講花一個晚上做了一個簡單的 hack demo，在撥打電話時，馬總統會報出正在播的數字。</p><iframe allowfullscreen frameborder="0" height="315" src="//www.youtube.com/embed/EgxpzbgS_cY" width="420"></iframe></div>感謝馬總統跨刀演出。<p>聲音來自 Open Source 的 <a href="http://zhusee2.github.io/bumbler-to-speech/" target="_blank" rel="noopener">Bumbler to speech</a> 專案。</p>]]></content>
      
      
        <tags>
            
            <tag> FirefoxOS </tag>
            
            <tag> Mozilla </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>How to build your own &#39;repo&#39; to Manage project with multiple git repositories</title>
      <link href="/2013/07/29/How-to-build-your-own-repo-to-Manage-project-with-multiple-git-repositories/"/>
      <url>/2013/07/29/How-to-build-your-own-repo-to-Manage-project-with-multiple-git-repositories/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;">[![](http://source.android.com/images/git-repo-1.png)](http://source.android.com/images/git-repo-1.png)</div><p>‘<a href="http://source.android.com/source/developing.html" target="_blank" rel="noopener">repo</a>’ is a good tool to manage project with multiple git repositories. Its developed to serve the need to manage Android Open Source Project (AOSP), which counts on bunch of open source projects. Then the ‘repo’ tool is used for chromium and chromium OS (known as open source version of Chrome browser and Chrome OS). Now Mozilla Boot-to-Gecko (B2G, known as Firefox OS) also adpot the ‘repo’ tool to manage multiple git repositories.</p><p>For a short time of experiment, I find its pretty simple to setup your own ‘repo’ that can help you manage multiple git repositories. Here is my findings.</p><p>To install ‘repo’ command, you can refer to <a href="http://source.android.com/source/downloading.html#installing-repo" target="_blank" rel="noopener">Installing repo</a>.</p><h2 id="make-your-own-repo">Make your own repo</h2><p>All you have to do is:</p><p>1. setup an accessible git repository2. Put a ‘default.xml’ file in it3. Use ‘repo init’ command to access this  git repository.</p><p>Done!</p><p>Here is the default.xml sample, there are three main tags:</p><div class="highlight">> <span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>> <span class="nt">&lt;manifest&gt;</span>> <span class="c">&lt;!-- define hosts --&gt;</span>> <span class="nt">&lt;**remote**</span> <span class="na">name=</span><span class="s">"b2g"</span> <span class="na">fetch=</span><span class="s">"https://github.com/mozilla-b2g/"</span><span class="nt">/&gt;</span>> <span class="c">&lt;!-- default settings  --&gt;</span>> <span class="nt">&lt;**default**</span> <span class="na">sync-j=</span><span class="s">"4"</span><span class="nt">/&gt;</span> <span class="c">&lt;!-- projects --&gt;</span>> <span class="nt">&lt;**project**</span> <span class="na">remote=</span><span class="s">"b2g"</span> <span class="na">revision=</span><span class="s">"refs/heads/master"</span> <span class="na">name=</span><span class="s">"gaia"</span> <span class="na">path=</span><span class="s">"."</span><span class="nt">/&gt;</span>> <span class="nt">&lt;/manifest&gt;</span><span class="nt">Look at the 'project' </span><span class="nt">tag. It describes that we'd like to sync the 'gaia' repository's 'master' branch from remote 'b2g' host. </span></div><h3 id="span-class-nt-explaination-span"><span class="nt">Explaination</span></h3><blockquote><p><span class="cp">&lt;?xml version=“1.0” encoding=“UTF-8”?&gt;</span>&gt; <span class="nt">&lt;manifest&gt;</span>…<span class="nt">&lt;/manifest&gt;</span><span class="nt">The ‘default.xml’ syntax is wrapped by ‘manifest’ tag.</span><span class="nt">It contains three parts of definition:</span></p></blockquote><h4 id="span-class-nt-hosts-span-span-class-nt"><span class="nt">Hosts</span><span class="nt"></span></h4><blockquote><p><span class="nt">&lt;<strong>remote</strong></span> <span class="na">name=</span><span class="s">“b2g”</span> <span class="na">fetch=</span><span class="s">“<a href="https://github.com/mozilla-b2g/" target="_blank" rel="noopener">https://github.com/mozilla-b2g/</a>”</span><span class="nt">/&gt;</span><span class="nt">‘remote’ tag is used to define the hosts that we’d like to use in projects.</span><span class="nt">Note that it’s not the actual git URL, but where the git hosted on.</span><span class="nt">We can specify the actual git URL in ‘project’ tag.</span></p></blockquote><h4 id="span-class-nt-projects-span"><span class="nt">Projects</span></h4><blockquote><p><span class="nt">&lt;<strong>project</strong></span> <span class="na">remote=</span><span class="s">“b2g”</span> <span class="na">revision=</span><span class="s">“refs/heads/master”</span> <span class="na">name=</span><span class="s">“gaia”</span> <span class="na">path=</span><span class="s">&quot;.&quot;</span><span class="nt">/&gt;</span><span class="nt">The file describes that we’ll like to sync the ‘gaia’ repository’s ‘master’ branch from remote ‘b2g’ host.</span></p></blockquote><p><span class="nt">The </span><span class="nt"><span class="na">‘revision’</span> path is defined within the original .git folder. To switch to branch like “v1.0.1”, we could change  </span><span class="s">“refs/heads/master” to </span><span class="s">“refs/heads/v1.0.1”.</span><span class="nt">It’s almost the same as we have to do with git command.</span><span class="s"> </span></p><p><span class="s">By the way, </span><span class="s">default.xml itself is in a git repository, so you can specify versions by branch or whatever you like.</span></p><p><span class="nt">Defaults</span></p><blockquote><p><span class="nt">&lt;<strong>default</strong></span> <span class="na">sync-j=</span><span class="s">“4”</span><span class="nt">/&gt;</span>In default tag we can specify the default values in project tag. ex: revisions, default repositories…, etc.‘sync-j’ means with this setting, ‘repo’ command will download 4 resources at the same time.<span class="nt"></span></p></blockquote><h2 id="the-usage">The usage </h2><p>Create a folder, switch in it, and run the following command:</p><blockquote><p>$ repo init -u https://&lt;your own git URL&gt;.gitThen, fetch the resources with command</p></blockquote><blockquote><p>$ repo syncTo fetch a branch, run command$ repo init -u https://&lt;your own git URL&gt;.git <strong>-b</strong> &lt;branch&gt;Read <a href="http://source.android.com/source/developing.html#git-and-repo-cheatsheet" target="_blank" rel="noopener">Git and repo cheatsheet</a> for more details about how git and repo tool work together.  </p></blockquote><h2 id="sample">Sample</h2><p>Here is a working sample that able you to sync Mozilla Gaia repositorie, and automatically put vendor customization folder into its ‘distribution/’ sub-folder to ease the customization work.</p><p><a href="https://github.com/gasolin/gaia-custom-repo" target="_blank" rel="noopener">https://github.com/gasolin/gaia-custom-repo</a></p><p>Update at 7/29:</p><p>A workable process elaboration in slide format <a href="http://gasolin.github.io/gaia-repo/" target="_blank" rel="noopener">http://gasolin.github.io/gaia-repo/ </a></p>]]></content>
      
      
        <tags>
            
            <tag> FirefoxOS </tag>
            
            <tag> Android </tag>
            
            <tag> repo </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>幫 Bugzilla 換個新佈景</title>
      <link href="/2013/06/30/%E5%B9%AB-Bugzilla-%E6%8F%9B%E5%80%8B%E6%96%B0%E4%BD%88%E6%99%AF/"/>
      <url>/2013/06/30/%E5%B9%AB-Bugzilla-%E6%8F%9B%E5%80%8B%E6%96%B0%E4%BD%88%E6%99%AF/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;">[![](http://3.bp.blogspot.com/-0VVR5A4IMQY/UdAfjA5zb-I/AAAAAAAADTo/KrvHl9_J8Dw/s400/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-06-30+%E4%B8%8B%E5%8D%887.59.19.png)](http://3.bp.blogspot.com/-0VVR5A4IMQY/UdAfjA5zb-I/AAAAAAAADTo/KrvHl9_J8Dw/s1413/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-06-30+%E4%B8%8B%E5%8D%887.59.19.png)</div><div class="separator" style="clear: both; text-align: center;">新的 Bugzilla 樣式</div><div class="separator" style="clear: both; text-align: center;"></div>在來 Mozilla 之前我用得比較多的是 [Redmine](http://www.redmine.org/) 或 [Trac](http://trac.edgewall.org/) 等問題追蹤系統，到了 Mozilla 之後才比較常接觸 [Bugzilla](http://bugzilla.mozilla.org/)。<p>目前大部份 Mozilla 的開源軟體都使用 <a href="http://bugzilla.mozilla.org/" target="_blank" rel="noopener">Bugzilla</a>  來追蹤 issues。所有開發者間針對 issues 的討論、審查、版本間的同步，各種開發相關的資訊都圍繞著這個系統進行，所以要貢獻 Mozilla 相關軟體開發專案，<a href="http://bugzilla.mozilla.org/" target="_blank" rel="noopener">Bugzilla</a> 是必定造訪的中轉站。</p><p><a href="http://bugzilla.mozilla.org/" target="_blank" rel="noopener">Bugzilla</a> 是貨真價實源自上個世紀的古董網站。<a href="http://en.wikipedia.org/wiki/Bugzilla" target="_blank" rel="noopener">Wikipedia</a> 的資料寫著，第一版 Bugzilla 發表於 1998 年，使用 Tcl 語言撰寫。Bugzilla 2.0 則改使用 Perl 語言撰寫。原因是比起 Tcl，當時 Perl 語言更普遍，改成使用 Perl 語言可以吸引更多自願協助改進的開發者。</p><p>這麼老牌的開源軟體當然有很多歷史遺留問題，我們先來看目前版本的模樣</p><p><img src="http://3.bp.blogspot.com/-Uwr3GslLCPU/UdAbzXYlbvI/AAAAAAAADTY/8zlTXnsXCpk/s400/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-06-30+%E4%B8%8B%E5%8D%887.49.57.png" alt=""></p><div class="separator" style="clear: both; text-align: center;">一般預設的 Bugzilla 樣式 </div><p>咳咳…只能說，過去的審美觀跟現在已經不太一樣了。</p><p>還好，Bugzilla 的開發者有意識到這個問題，登入帳號後，點選畫面右上角的 preference（設定） ，把 Bugzilla’s general appearance (skin) 改成 ‘Mozilla’，選擇 Submit Changes（儲存）後，就可以看到新版界面。</p><div class="separator" style="clear: both; text-align: center;">[![](http://2.bp.blogspot.com/-oUdL_UHT0Sw/UdAfp0tEuRI/AAAAAAAADTw/vjhiOJa2VDw/s400/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-06-30+%E4%B8%8B%E5%8D%887.58.47.png)](http://2.bp.blogspot.com/-oUdL_UHT0Sw/UdAfp0tEuRI/AAAAAAAADTw/vjhiOJa2VDw/s1309/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-06-30+%E4%B8%8B%E5%8D%887.58.47.png)</div><div style="text-align: center;">調整設定</div>新的界面與 [Mozilla 官方網站](http://www.mozilla.com/) 風格一致，界面新潮許多。<div class="separator" style="clear: both; text-align: center;">[![](http://4.bp.blogspot.com/-kGbRDqbTuBU/UdAin_8cSJI/AAAAAAAADUA/pObjDExRb00/s400/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-06-30+%E4%B8%8B%E5%8D%888.20.08.png)](http://4.bp.blogspot.com/-kGbRDqbTuBU/UdAin_8cSJI/AAAAAAAADUA/pObjDExRb00/s1405/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-06-30+%E4%B8%8B%E5%8D%888.20.08.png)</div><div style="text-align: center;">新版界面</div><div class="separator" style="clear: both; text-align: center;">[](http://3.bp.blogspot.com/-0VVR5A4IMQY/UdAfjA5zb-I/AAAAAAAADTo/KrvHl9_J8Dw/s1413/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-06-30+%E4%B8%8B%E5%8D%887.59.19.png)</div>對於每天使用的工具，做得更好看一點，真的可以增加使用的樂趣哩。<p>註：<a href="http://www.redmine.org/" target="_blank" rel="noopener">Redmine</a> 或 <a href="http://trac.edgewall.org/" target="_blank" rel="noopener">Trac</a> 剛好都發表於 2006 年，就像 git 與 mercurial 都剛好發表於 2005 年一樣巧。</p>]]></content>
      
      
        <tags>
            
            <tag> Mozilla </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>(Firefox) WebApp自動偵測與安裝腳本</title>
      <link href="/2013/05/13/Firefox-WebApp%E8%87%AA%E5%8B%95%E5%81%B5%E6%B8%AC%E8%88%87%E5%AE%89%E8%A3%9D%E8%85%B3%E6%9C%AC/"/>
      <url>/2013/05/13/Firefox-WebApp%E8%87%AA%E5%8B%95%E5%81%B5%E6%B8%AC%E8%88%87%E5%AE%89%E8%A3%9D%E8%85%B3%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p>這陣子在了解如何開發webapp，其實基本流程很簡單。要把網頁變成webapp，最基本的動作就是<a href="https://marketplace.firefox.com/developers/docs/quick_start" target="_blank" rel="noopener">照著說明</a>寫個 manifest.webapp 檔案，放到網站的根目錄，然後在web server的設定加入對應的MIME type即可。用Github Page放網站的話，最後的MIME設定他們都幫我們弄好了。</p><p>使用者在電腦上透過Firefox安裝webapp後，就會多出一個對應的應用程式圖示，開啓這個WebApp時不會出現瀏覽器框，感覺就像真的應用程式。在Android上透過Firefox for Android(測試版)安裝webapp後，在桌面上則會多出一個bookmark捷徑。</p><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;">[![](http://4.bp.blogspot.com/-zrO9d3BcB30/UVebse9rcaI/AAAAAAAADDU/MSImwCKUE5o/s400/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-03-31+%E4%B8%8A%E5%8D%8810.12.43.png)](http://4.bp.blogspot.com/-zrO9d3BcB30/UVebse9rcaI/AAAAAAAADDU/MSImwCKUE5o/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-03-31+%E4%B8%8A%E5%8D%8810.12.43.png)</div><div style="text-align: center;">圖：在Mac桌面上打開2個webapp，不特別講也分不出來是Web還是App吧</div><p>我在測試的時候，發現寫好了webapp之後，使用者連到網頁時並不會自動詢問使用者是否要安裝webapp。於是寫了以下腳本。</p><p>在Body標簽中引用以下腳本，即可自動偵測使用者是否可安裝webapp (現在只有Firefox Aurora和Firefox OS支援webapp API)</p><blockquote><p>&lt;script type=“text/javascript”&gt;//check if app is installedif( navigator.mozApps != undefined ){var app_stat = navigator.mozApps.getSelf();app_stat.onsuccess = function() {  if (app_stat.result) {        //instsalled  } else {        // not installed        var manifestUrl = location.href.substring(0, location.href.lastIndexOf(’/’))+’/manifest.webapp’;        var app_install = navigator.mozApps.install(manifestUrl);  }};app_stat.onerror = function() {  alert('Error checking installation status: '+ this.error.message);};}&lt;/script&gt; 原始碼包含在<a href="https://github.com/gasolin/webapplate/blob/master/public/js/app_installer.js" target="_blank" rel="noopener"> webapplate</a> 專案中。</p></blockquote><p>透過</p><blockquote><p>location.href.substring(0, location.href.lastIndexOf(’/’))+’/manifest.webapp’;可以自動取得目前的IP或網址。</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> FirefoxOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android書範例更新放到Github</title>
      <link href="/2013/05/12/Android%E6%9B%B8%E7%AF%84%E4%BE%8B%E6%9B%B4%E6%96%B0%E6%94%BE%E5%88%B0Github/"/>
      <url>/2013/05/12/Android%E6%9B%B8%E7%AF%84%E4%BE%8B%E6%9B%B4%E6%96%B0%E6%94%BE%E5%88%B0Github/</url>
      <content type="html"><![CDATA[<p>離上一版Android書的更新已經過一年多了，終於在最近改版的工作告一段落。再過一陣子，就可以看到新版本上市了。</p><p>這次的所有範例改放到 <a href="https://github.com/gasolin/androidbmi5th/" target="_blank" rel="noopener">Github</a> 上。可以前往 <a href="https://github.com/gasolin/androidbmi5th/" target="_blank" rel="noopener">https://github.com/gasolin/androidbmi5th/</a> 下載。</p><p>Github 使用 <a href="http://git-scm.com/" target="_blank" rel="noopener">git</a> 作為版本控制系統，並提供很方便使用的網頁介面。</p><p>例如我使用分支(branch)來管理不同章節的範例程式碼。要在github上查看不同章節的程式碼，只要點選Github左上角的分枝選單，選取對應的章節，即可查看範例程式碼。</p><div class="separator" style="clear: both; text-align: center;">[![](http://4.bp.blogspot.com/-obyD9OEZdM8/UY9SE60t8eI/AAAAAAAADNE/VTQ_7ymRBJc/s400/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-05-12+%E4%B8%8B%E5%8D%884.25.12.png)&nbsp;](http://4.bp.blogspot.com/-obyD9OEZdM8/UY9SE60t8eI/AAAAAAAADNE/VTQ_7ymRBJc/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-05-12+%E4%B8%8B%E5%8D%884.25.12.png)</div><div class="separator" style="clear: both; text-align: center;"><span style="color: #666666;">選取對應的章節，查看範例程式碼</span></div>此外，也可以透過左上角的「zip」按鈕，下載對應的章節範例程式碼。<p>若想透過 git 命令下載，可以使用如</p><blockquote><p>git clone <a href="https://github.com/gasolin/androidbmi5th.git" target="_blank" rel="noopener">https://github.com/gasolin/androidbmi5th.git</a> -b CH36 CH36命令來取得對應章節的範例程式碼。</p></blockquote><p>本書提供的範例無授權問題，可自由用於各種場合。 若對範例有疑問，可以直接在 github 專案的 <a href="https://github.com/gasolin/androidbmi5th/issues" target="_blank" rel="noopener">Issues</a> 中提問。</p><p>從更新的範例中可以看到，第五版本終於做到全書只有「一個」 BMI 範例（包含配對的測試範例）。圍繞著設計BMI應用程式的過程，介紹各種Android系統的運作與常用功能。我覺得新的改版對第一次入門的讀者來說，學習的過程應該更有樂趣。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTML5的基本格式</title>
      <link href="/2013/03/30/HTML5%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A0%BC%E5%BC%8F/"/>
      <url>/2013/03/30/HTML5%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A0%BC%E5%BC%8F/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;">[![](http://www.w3.org/html/logo/downloads/HTML5_Logo_512.png)](http://www.w3.org/html/logo/downloads/HTML5_Logo_512.png)</div>如果你好一陣子沒有關心網頁相關技術，那麼看到下面的code, 可能會揉揉眼睛說：這樣也能跑？<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">”en”</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">utf-8</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>page title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    &lt;!–&lt;link href=”style.css” rel=”stylesheet”&gt;&lt;/link&gt;–&gt;</span><br><span class="line">    &lt;!–&lt;script src=”script.js”&gt;&lt;/script&gt;–&gt;</span><br><span class="line">    &lt;!–&lt;style&gt;&lt;/style&gt;–&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">!–</span> <span class="attr">content</span> –&gt;</span></span><br><span class="line">  &lt;!–&lt;script type=”text/javascript”&gt;&lt;/script&gt;–&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只要有瀏覽器，大家都可以試著寫網頁。我們分行來看看上面的網頁程式碼:</p><h2 id="主要架構">主要架構</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br></pre></td></tr></table></figure><p>HTML5的格式宣告，注意「DOCTYPE」要用大寫才有向前相容喔(請參考<a href="http://shop.oreilly.com/product/0636920026273.do" target="_blank" rel="noopener">HTML5 Hacks</a> 1)。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><p>HTML主標籤，所有HTML頁面的內容都要放在裡面。 html標籤裡的<code>lang</code>是標籤的屬性，<code>lang=&quot;en&quot;</code>代表這張網頁的預設語言是英文(en)。若預設語言是正體中文可以改成<code>lang=&quot;zh-tw&quot;</code>。</p><p>Header參數</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;&lt;/head&gt;</span><br></pre></td></tr></table></figure><p>HTML檔案標頭， 一些頁面相關資訊。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>HTML內容， 顯示給使用者看的頁面內容。</p><h2 id="header參數">Header參數</h2><p>以下是放在header標籤中的參數:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta charset=utf-8&gt;</span><br></pre></td></tr></table></figure><p>聲明這個網頁是以UTF-8格式編碼，多數瀏覽器只在前512 bytes查看文字編碼格式，所以這個標籤務必放在Header標籤的最前頭。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;title&gt;page title&lt;/title&gt;</span><br></pre></td></tr></table></figure><p>頁面標題，通常會顯示在瀏覽器標籤頁上。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link href=”style.css” rel=”stylesheet”&gt;&lt;/link&gt;</span><br><span class="line">&lt;script src=”script.js”&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>透過 link 和 script 標籤，我們可以連結到其他CSS或Javascript檔案。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>script標籤裡可以放Javascript程式碼，style標籤裡可以放CSS定義。</p><h2 id="body參數">Body參數</h2><p>以下是放在body標籤中的參數:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!–- content -–&gt;</span><br></pre></td></tr></table></figure><p>HTML的註解標籤，在「&lt;!–」和「–&gt;」標籤之間的內容不做解析。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script defer type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>當瀏覽器讀取HTML頁面的時候，會先將headers標籤中定義的CSS或Javascript檔案載入後，才會顯示網頁。因此因為效能的緣故，現在新的網頁寫法建議將比較不急著在載入網頁時立即執行的 script 標籤，都放在「body」標籤中。但最好還是將JS與CSS分別放在不同的檔案中，透過link和script標籤連結到這個網頁。</p><p>上面提到的HTML5基本格式只有講到「語義」(Semantic)方面的改進，而所謂的HTML5其實是包含HTML、CSS、Javascript、瀏覽器的全方位改進，更多的資訊可參考 <a href="https://developer.mozilla.org/docs/HTML/HTML5" target="_blank" rel="noopener">Mozilla Developer Network</a></p><p>參考: <a href="http://www.sitepoint.com/a-minimal-html-document-html5-edition/" target="_blank" rel="noopener">A Minimal HTML Document</a></p>]]></content>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> reimaging </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Firefox OS Overview簡報</title>
      <link href="/2013/03/28/Firefox-OS-Overview%E7%B0%A1%E5%A0%B1/"/>
      <url>/2013/03/28/Firefox-OS-Overview%E7%B0%A1%E5%A0%B1/</url>
      <content type="html"><![CDATA[<iframe allowfullscreen frameborder="0" height="356" marginheight="0" marginwidth="0" mozallowfullscreen="" scrolling="no" src="http://www.slideshare.net/slideshow/embed_code/17792569" style="border-width: 1px 1px 0; border: 1px solid #CCC; margin-bottom: 5px;" webkitallowfullscreen="" width="427"> </iframe> <p>話說到職1個多月了，每天都在學習，用從來沒想過的技術去解決各種問題的感覺實在很不錯。</p><p>昨天剛好有機會到成大計中，和修課的同學介紹Firefox OS。也剛好把過去幾個月來對Firefox OS的了解做了一次整理。</p><p>在1小時的簡報之後，還接著2小時的上機實作課程。</p><p>上機課程中我做了一個<a href="https://github.com/gasolin/fxosbmi/tree/gh-pages" target="_blank" rel="noopener">看來很眼熟的範例</a>，搭配Github實際拿來教學的效果也很不錯。</p><p><a href="http://1.bp.blogspot.com/-7QnKwLIIWBg/UVPs3Wa37oI/AAAAAAAADDE/_ZW-J3Pb8aM/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-03-28+%E4%B8%8B%E5%8D%883.10.06.png" target="_blank" rel="noopener"><img src="http://1.bp.blogspot.com/-7QnKwLIIWBg/UVPs3Wa37oI/AAAAAAAADDE/_ZW-J3Pb8aM/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-03-28+%E4%B8%8B%E5%8D%883.10.06.png" alt=""></a></p><p>同天西班牙剛好也有個<a href="http://www.mozilla-hispano.org/firefox-os-app-days-valladolid/" target="_blank" rel="noopener">App Days</a>活動，用整天更深入介紹Firefox OS，簡報也可以下載。</p><p>Firefox OS整個系統運作可以到 <a href="http://www.mozilla-hispano.org/archivos/docs/fxosappdaysvall/arquitectura.pdf" target="_blank" rel="noopener">http://www.mozilla-hispano.org/archivos/docs/fxosappdaysvall/arquitectura.pdf</a> 查看。(工商服務一下，Firefox已經內建PDF viewer，網頁上直接開PDF不用先下載)</p><p>WebAPI簡報 <a href="http://www.mozilla-hispano.org/archivos/docs/fxosappdaysvall/webapis.pdf" target="_blank" rel="noopener">http://www.mozilla-hispano.org/archivos/docs/fxosappdaysvall/webapis.pdf</a></p>]]></content>
      
      
        <tags>
            
            <tag> FirefoxOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>The Web is the Platform - Firefox OS 動手玩</title>
      <link href="/2013/03/04/The-Web-is-the-Platform-Firefox-OS-%E5%8B%95%E6%89%8B%E7%8E%A9/"/>
      <url>/2013/03/04/The-Web-is-the-Platform-Firefox-OS-%E5%8B%95%E6%89%8B%E7%8E%A9/</url>
      <content type="html"><![CDATA[<iframe allowfullscreen frameborder="0" height="315" src="http://www.youtube.com/embed/-9vktI70iHc" width="560"></iframe>(不知道為什麼影片解析度要用360p這麼低)<p>Mozilla Co.的VP of Products Jay sullivan來展示「Firefox OS」目前的版本，其中桌面有個「<a href="http://everything.me" target="_blank" rel="noopener">everything.me</a>」功能，除了可以用來裝Web App外，因為Web的特性，所以不用像其他平台需要先安裝好再試用App，而可以直接點選開始使用App(Web)。把 web 變成不需安裝、反安裝，隨查隨用的一次性 app 的概念還蠻有趣的。</p>]]></content>
      
      
        <tags>
            
            <tag> FirefoxOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>下一站, Mozilla, Firefox OS</title>
      <link href="/2013/02/19/%E4%B8%8B%E4%B8%80%E7%AB%99-Mozilla-Firefox-OS/"/>
      <url>/2013/02/19/%E4%B8%8B%E4%B8%80%E7%AB%99-Mozilla-Firefox-OS/</url>
      <content type="html"><![CDATA[<p>一直以來，在業餘時間裡我做了不少 Mobile App，寫了本Android開發書籍，參與並研究了一些 Web 框架和服務。前年開始也直接將<a href="http://www.playframework.com/" target="_blank" rel="noopener">Play!</a>、<a href="https://www.djangoproject.com/" target="_blank" rel="noopener">Django</a>等Web框架，和Android開發的經驗應用在工作上。</p><p>我相信整合Web與Mobile，以雲為基礎建設，讓連網設備/使用者得以跨平台在各種終端使用的應用，會是接下來技術的趨勢。</p><p>在主持<a href="http://www.taipei-gtug.org/" target="_blank" rel="noopener">GTUG Taipei活動</a>的兩年時間裡，跟著學了很多新東西，從中我也發現，現在已經有許多企業級或跟Mobile App開發相關的技術，都可以歸類到Web技術範疇了：</p><ul><li>越來越多人使用JSON來取代XML</li><li>各種RPC紛紛改成使用RESTFUL API*   non-rel, 適應雲端架構的<a href="http://www.mongodb.org/" target="_blank" rel="noopener">MongoDB</a>也可直接將資料儲存成JSON格式</li><li>Web Server端可以使用 <a href="http://nodejs.org/" target="_blank" rel="noopener">node.js</a> 寫，透過Event callback形式的呼叫，可以得到很好的效能</li><li>可以使用<a href="http://www.phonegap.com/" target="_blank" rel="noopener">PhoneGap</a>/<a href="http://cordova.apache.org/" target="_blank" rel="noopener">Cordova</a>來封裝成各行動平台的App</li><li>最近名字<a href="http://www.businessinsider.com/microsoft-eyes-appcelerator-acquisition-2013-2" target="_blank" rel="noopener">跟Microsoft連在一起</a>的 <a href="http://www.appcelerator.com/" target="_blank" rel="noopener">Titanium</a> 也可以用網頁技術生成各行動平台的App</li></ul><p>因此當我知道Firefox OS在台灣有開發團隊時，我告訴自己：這是個可以待在台灣，同時又有可能改變世界的機會。</p><p>我很幸運，待的<a href="http://www.104.com.tw/jobbank/custjob/index.php?r=job&amp;j=493f47704d4b445b36373f6831593b220414f487049714326262626223e402b2a735j57" target="_blank" rel="noopener">前公司</a>環境與同事也非常好，可以推薦給大家。當然，也歡迎大家來和我<a href="http://www.104.com.tw/jobbank/custjob/index.php?r=cust&amp;j=5e604325345c3e673c423b1d1d1d1d5f2443a363189j01&amp;jobsource=n104bank1" target="_blank" rel="noopener">作伙伴</a>。</p><p>接下來我的分享應該會多出不少Firefox OS相關的心得，敬請期待。</p>]]></content>
      
      
        <tags>
            
            <tag> FirefoxOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 側邊滑動選單效果 (Side Menu Drawer)</title>
      <link href="/2013/01/22/Android-%E5%81%B4%E9%82%8A%E6%BB%91%E5%8B%95%E9%81%B8%E5%96%AE%E6%95%88%E6%9E%9C-Side-Menu-Drawer/"/>
      <url>/2013/01/22/Android-%E5%81%B4%E9%82%8A%E6%BB%91%E5%8B%95%E9%81%B8%E5%96%AE%E6%95%88%E6%9E%9C-Side-Menu-Drawer/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;">[![](http://1.bp.blogspot.com/-WKOpggVsikA/UP3c27pO4OI/AAAAAAAAC9A/ODUnR5JnCuw/s400/slide_menu.png)](http://1.bp.blogspot.com/-WKOpggVsikA/UP3c27pO4OI/AAAAAAAAC9A/ODUnR5JnCuw/s1600/slide_menu.png)</div><div class="tr_bq">幾周前在GTUG Taipei活動，聽了David Wu分享的"A Deep Dive into Android Open Source Project"演講，回來後對Slide Menu效果很感興趣，也在[gPaper改版](http://blog.gasolin.idv.tw/2013/01/app-gpaper-20.html)時使用到這個技巧。</div><iframe allowfullscreen frameborder="0" height="315" src="http://www.youtube.com/embed/gwB8xkTckKc" width="560"></iframe><p>後來我選擇使用的是 Simple Side Drawer 這個Library<a href="https://github.com/adamrocker/simple-side-drawer" target="_blank" rel="noopener">https://github.com/adamrocker/simple-side-drawer</a></p><p>Simple Side Drawer 的好處是只要把它提供的 jar檔放到專案中，就可以搭配如<a href="http://actionbarsherlock.com/" target="_blank" rel="noopener">ActionBarSherlock</a>等函式庫一起使用。</p><h3 id="使用simple-side-drawer">使用Simple Side Drawer</h3><p>使用時首先是下載jar檔放進專案的lib目錄中並匯入。</p><p>接著需要在onCreate中初始化:</p><blockquote><p>protected void onCreate (Bundle data) {   …</p><pre><code>  mSlidingMenu = new SimpleSideDrawer(this);  mSlidingMenu.setBehindContentView(R.layout.behind_menu);`&lt;/pre&gt;&lt;pre&gt;`&amp;nbsp;`&lt;/pre&gt;&lt;pre&gt;`}`&lt;/pre&gt;&lt;pre&gt;`之後在程式裡的任何地方，都可以透過呼叫:`&lt;/pre&gt;&lt;pre&gt;`&amp;nbsp;`&lt;/pre&gt;&gt; &lt;pre&gt;`&lt;code&gt;mSlidingMenu.toggleDrawer();`&amp;nbsp;&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;`</code></pre></blockquote><pre><code>`&lt;/pre&gt;&lt;pre&gt;`來控制側邊欄的開關。下面以常見的點選App圖示來控制側邊滑動選單做例子，來介紹側邊滑動選單可以如何整合到App中。`&lt;/pre&gt;&lt;pre&gt;``&lt;/pre&gt;### `透過點選App圖示控制側邊滑動選單`&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;[![](http://4.bp.blogspot.com/-AChA2Yti7js/UP8y1DSBWeI/AAAAAAAAC9g/Y0hun9R4SSQ/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-01-23+%E4%B8%8A%E5%8D%888.45.22.png)](http://4.bp.blogspot.com/-AChA2Yti7js/UP8y1DSBWeI/AAAAAAAAC9g/Y0hun9R4SSQ/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-01-23+%E4%B8%8A%E5%8D%888.45.22.png)&lt;/div&gt;&lt;pre&gt;``&lt;/pre&gt;&lt;pre&gt;`將Side Menu Drawer設定好之後，並不會有按了App圖示就開啟側邊選單的效果，需要一些程式碼來控制。`&lt;/pre&gt;&lt;pre&gt;``&lt;/pre&gt;&lt;pre&gt;`在程式中的onCreate或onResume裡加入控制碼，強制顯示App圖示旁的小箭頭，作為側邊滑動選單的視覺參照，讓使用者注意到App圖示點選了還有功能：</code></pre><blockquote><p>ActionBar actionBar = this.getSupportActionBar();actionBar.setDisplayHomeAsUpEnabled(true);<pre>在onOptionsItemSelected的判斷裡，加入點選App圖示時的動作：</pre><pre></pre>&gt; case android.R.id.home:    mSlidingMenu.toggleDrawer();    return true;這樣點選App圖示後，就會出現開關側邊滑動選單的效果。</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[App] gpaper 2.0，加入邊欄設計</title>
      <link href="/2013/01/21/App-gpaper-2-0%EF%BC%8C%E5%8A%A0%E5%85%A5%E9%82%8A%E6%AC%84%E8%A8%AD%E8%A8%88/"/>
      <url>/2013/01/21/App-gpaper-2-0%EF%BC%8C%E5%8A%A0%E5%85%A5%E9%82%8A%E6%AC%84%E8%A8%AD%E8%A8%88/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;">[![](http://1.bp.blogspot.com/-UTeuG2hnfvg/UP3dtAHwjdI/AAAAAAAAC9I/LgRerXTf45A/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-01-22+%E4%B8%8A%E5%8D%888.30.18.png)](http://1.bp.blogspot.com/-UTeuG2hnfvg/UP3dtAHwjdI/AAAAAAAAC9I/LgRerXTf45A/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2013-01-22+%E4%B8%8A%E5%8D%888.30.18.png)</div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: left;">前年為了慶祝小朋友出生，寫了[gPaper ](https://play.google.com/store/apps/details?id=tw.idv.gasolin.android.gpaper)(原名gTracingPaper) 這個描圖App。</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;">[gPaper](https://play.google.com/store/apps/details?id=tw.idv.gasolin.android.gpaper)的特色是除了基本的白板、黑板或任意顏色的畫板可供塗鴉之外，還可以匯入圖片或照片當作底圖來照著描繪。</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;">畫好後的圖片可以單獨儲存，或是將底圖一同輸出(如上圖效果)。</div><div class="separator" style="clear: both; text-align: left;"></div>這次改版將諸多原本在子選單裡的功能都放到如同G+、FB的側邊滑動功能選單裡，主界面變得清爽多了，操作時也減少了一次點選步驟。<div class="separator" style="clear: both; text-align: center;">[![](http://1.bp.blogspot.com/-WKOpggVsikA/UP3c27pO4OI/AAAAAAAAC9A/ODUnR5JnCuw/s400/slide_menu.png)](http://1.bp.blogspot.com/-WKOpggVsikA/UP3c27pO4OI/AAAAAAAAC9A/ODUnR5JnCuw/s1600/slide_menu.png)</div><div class="separator" style="clear: both; text-align: left;">gpaper App可以直接從 Play Store 下載。</div>[![Get it on Google Play](https://developer.android.com/images/brand/en_generic_rgb_wo_45.png)](https://play.google.com/store/apps/details?id=tw.idv.gasolin.android.gpaper)]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[App] 台灣當季蔬果</title>
      <link href="/2013/01/18/App-%E5%8F%B0%E7%81%A3%E7%95%B6%E5%AD%A3%E8%94%AC%E6%9E%9C/"/>
      <url>/2013/01/18/App-%E5%8F%B0%E7%81%A3%E7%95%B6%E5%AD%A3%E8%94%AC%E6%9E%9C/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;">[![](http://3.bp.blogspot.com/-YAZLRdtmLlM/UPn5gdSAh_I/AAAAAAAAC8w/ks4LT1tSc7Y/s640/seasonsfood.png)](http://3.bp.blogspot.com/-YAZLRdtmLlM/UPn5gdSAh_I/AAAAAAAAC8w/ks4LT1tSc7Y/s1600/seasonsfood.png)</div><div class="separator" style="clear: both; text-align: center;">[取得台灣當季蔬果App](https://play.google.com/store/apps/details?id=tw.idv.gasolin.seasonfood)</div><div class="separator" style="clear: both; text-align: center;"></div>最近老婆為了讓家裡的小朋友吃得更健康，從圖書館借了一本叫做「[吃當季盛產，最好！](http://www.books.com.tw/exep/assp.php/gasolin/exep/prod/booksfile.php?item=0010535135)」的書。有天，她請我幫忙掃描書後面的當季食材列表出來，以便去市場買蔬菜水果時可以隨時參考。<p>掃描時我一邊看著就來了興趣。不少人都可以隨口講出幾件台灣產的蔬菜水果，但是再進一步討論甚麼時候是&quot;當時&quot;、&quot;當令&quot;蔬果，可能連老一輩人也不一定答得出來。</p><p>於是搜尋了一些網路資料，發現農糧署有提供一些資料，但頗為凌亂，於是寫了些腳本，將台灣產的蔬菜水果分月份整理出來，貼上Facebook與朋友分享。</p><p>在整理之前，是我太少去買蔬果吧，我不曉得台灣產的水果中，其實只有「香蕉」才是一年四季皆有出產的水果。而平常聽到的「空心菜」、「火龍果」等蔬果，在官方資料中是叫做「蕹菜」、「仙蜜果」這類聞所未聞的名字。</p><p>最後我將這些不常見的叫法替換成慣用的蔬果名稱，補上一些來自維基百科的圖片，用 <a href="http://cordova.apache.org/" target="_blank" rel="noopener">Cordova</a> + <a href="http://jquerymobile.com/" target="_blank" rel="noopener">JQuery Mobile</a> 將整理好的結果包成了Android APP，放到Play Store上讓大家方便參考。開啟App的時候會自動列出當月的食材，除了可以按月查詢之外，也可以查詢四季皆出產的蔬果。</p><p>台灣當季蔬果App可以直接從 Play Store 下載。<a href="https://play.google.com/store/apps/details?id=tw.idv.gasolin.seasonfood" target="_blank" rel="noopener"><img src="https://developer.android.com/images/brand/zh-cn_generic_rgb_wo_45.png" alt="Get it on Google Play"></a></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>被下架 - 台北捷運地圖</title>
      <link href="/2013/01/12/%E8%A2%AB%E4%B8%8B%E6%9E%B6-%E5%8F%B0%E5%8C%97%E6%8D%B7%E9%81%8B%E5%9C%B0%E5%9C%96/"/>
      <url>/2013/01/12/%E8%A2%AB%E4%B8%8B%E6%9E%B6-%E5%8F%B0%E5%8C%97%E6%8D%B7%E9%81%8B%E5%9C%B0%E5%9C%96/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;">[![](http://2.bp.blogspot.com/-D6LbWZEZDjA/UPEvzewJxxI/AAAAAAAAC8c/YZyYqFNlS_0/s320/Screenshot_2013-01-12-17-31-06.png)](http://2.bp.blogspot.com/-D6LbWZEZDjA/UPEvzewJxxI/AAAAAAAAC8c/YZyYqFNlS_0/s1600/Screenshot_2013-01-12-17-31-06.png)</div>2013/1/10早上收到Play Store來信，[台北捷運地圖](https://play.google.com/store/apps/details?id=com.gasolin.android.metro.taipei)App被下架了，原因是Alleged copyright  infringement（也就是侵權）。對這結果就法律而言我沒甚麼好抗議的，畢竟這個App確實<span style="color: red;">利</span>用了捷運<span style="color: red;">公司</span>所提供的地圖。<p>但即使這個App是在政府意識到App對民眾的價值前，為方便民眾查詢，提供純公益性質(有清楚標示版權與來源, 無廣告,  純便民)的App，也會因依法行事被台北捷運局舉報。不分善意惡意直接一棒下去，實在是會讓想在政府動起來前先做些什麼的人心灰意冷。</p><p>我一直為自己利用業餘時間，能用自己的技術做公益(Open Source、App)，並從中得到樂趣與技術的精進感到自豪。</p><p>這些年，這App累積了26萬人次下載，12萬實裝次數，也至少有為社會做了點貢獻。</p><p>PS: 做台北捷運地圖時，我也順手做了一個<a href="https://play.google.com/store/apps/details?id=com.gasolin.android.metro.kaoshiung" target="_blank" rel="noopener">高捷版</a>的，現在因為北捷運局的好心督促，我決定幡然悔悟，用更高的道德和法律標準做事情，先自我審查下架了。</p><p>Update 2013/1/12: 今天有點時間，我想還是再多聲明一下</p><p>1. 使用到版權物就是侵權2. 公益不是侵權的正當理由3. 這個App已經達到它的階段使命，在沒有好工具的時候得自己做一個，而現在Market上已經有不少可用的地圖App，不差這個了。我不會多花時間重做地圖再上架，或作其他處理。</p><div></div><div></div>就我粗淺的想法來看，如果有人拿我出版的紙書轉成PDF讓人四處免費下載，想必我不會舒服。但是我卻很歡迎大家把[電子書版](http://code.google.com/p/androidbmi/wiki/DiveIntoAndroid)網址分享出去（[電子書版](http://code.google.com/p/androidbmi/wiki/DiveIntoAndroid)網址上有加創用CC，聲明不歡迎商業使用或轉載，只歡迎連結分享。），因為可以幫到一些人入門Android。而等他們有能力時，可能還會去買一本書，或把這個有用的資源分享給別人。<div></div><div></div>當初會做這個捷運App，一方面是方便自己，方便別人；另一方面對捷運公司而言，如果有人免費印刷捷運地圖送給旅人，讓大眾可以隨時查找附近捷運站與目的地站點，提昇搭乘率，可以讓公司賺更多錢又省下推廣成本。<p>如果人家對此不稀罕，那也不用貼人家的冷屁股。</p><p>Update 2013/1/11: 因為網站也下架了，來為這App做一下回顧好了</p><h3 id="下載">下載</h3><p> 26萬人次下載，12萬實裝次數</p><h3 id="評價">評價</h3><p>五星評價 383四星評價 471三星評價 76三星評價 20一星評價 32</p><h3 id="評論">評論</h3><p>看評論非常有趣，一些人覺得沒價值的東西，在另一堆人眼中卻十分實用。</p><p>五星評論</p><p>201211/23 非常實用 沒有廣告，沒有其他複雜的功能，打開快速不會造成手機的負擔，其實app像這樣簡單就很好用10/26 以後出門忘記捷運坐到哪一站，有了這程式都不怕！10/23 超簡潔 很簡單明瞭，很小巧不到1Mb，完全不必特殊受權。好！10/2 為了新的捷運路線下載 只要能正常使用就好了。沒有任何權限真是好！1/12 把其他複雜的下拉選站名,路線規劃的app刪掉了，其實我只要這樣一張捷運圖就好. 1/6 非常實用 簡單的東西有時候是最好用的東西201110/14 好用 對不是住台北的民眾是非常方便明瞭的 8/16 很方便 一張地圖正是我的需求～ 單點放大也很好用1/31 正好符合我需求，一張圖就好，簡簡單單201010/10 好方便啊！簡單又直覺的設計！</p><p>一星評論20131/8 只是一張圖 好歹也整合一下出口及票價吧，只是張圖的話自己下載不就好了，說好用的人要求會不會太低了?201212/15 就一張圖?4/23 根本不用做成程式 只要放張圖就好了。20112/10 無聊的東西，只是張照片1/29 一張捷運路線圖罷了201010/31 縮放功能很不方便，只有一張地圖要幹嘛</p><p>被檢舉資訊（隱去人名）</p><p><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">AutoDetectedBrowser: Google Chrome </span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">AutoDetectedOS: Windows XP </span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">IIILanguage: zh-Hant </span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">IssueType: lr_dmca </span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">Language: zh-Hant </span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">agree1: checked </span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">agree: checked </span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">android_app_developer_1: gasolin </span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">android_app_name_1: 台北捷運地圖 </span><span class="il" style="background-color: #ffffcc; color: #222222; font-family: arial, sans-serif; font-size: 13px;">Taipei</span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;"> </span><span class="il" style="background-color: #ffffcc; color: #222222; font-family: arial, sans-serif; font-size: 13px;">Metro</span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;"> Map </span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">android_app_url_1: </span><a href="https://play.google.com/store/apps/details?id=com.gasolin.android.metro.taipei&amp;feature=search_result#?t=W251bGwsMSwxLDEsImNvbS5nYXNvbGluLmFuZHJvaWQubWV0cm8udGFpcGVpIl0" target="_blank" rel="noopener">https://play.google.com/store/<u></u><wbr>apps/details?id=com.gasolin.<u></u>an<wbr>droid.<span class="il" style="background-color: #ffffcc; background-position: initial initial; background-repeat: initial initial; color: #222222;">metro</span>.<span class="il" style="background-color: #ffffcc; background-position: initial initial; background-repeat: initial initial; color: #222222;">taipei</span>&amp;feature=<u></u>sea<wbr>rch_result#?t=<u></u>W251bGwsMSwxLDEs<wbr>ImNvbS5nYXNvbG<u></u>luLmFuZHJvaWQubW<wbr>V0cm8udGFpcGVp<u></u>Il0</a><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">. </span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">companyname: 台北大眾捷運股份有限公司 </span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">country_residence: TW </span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">description_of_copyrighted_</span><u style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;"></u><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">wor</span><wbr style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;"><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">k: 「台北捷運地圖 </span><span class="il" style="background-color: #ffffcc; color: #222222; font-family: arial, sans-serif; font-size: 13px;">Taipei</span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;"> </span><span class="il" style="background-color: #ffffcc; color: #222222; font-family: arial, sans-serif; font-size: 13px;">Metro</span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;"> Map」未經本公司 </span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">授權許可，逕自使用本公司之路線圖。 </span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">full_name: 許xx </span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">geolocation: TW </span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">hidden_category: text </span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">hidden_ctx: </span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">hidden_product: googleplay </span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">location_of_copyrighted_work: 「台北捷運地圖 </span><span class="il" style="background-color: #ffffcc; color: #222222; font-family: arial, sans-serif; font-size: 13px;">Taipei</span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;"> </span><span class="il" style="background-color: #ffffcc; color: #222222; font-family: arial, sans-serif; font-size: 13px;">Metro</span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;"> Map」這支APP內容直 </span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">接使用本公司之路線圖。 </span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">represented_copyright_holder: 楊xx </span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">signature: 許xx </span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">signature_date_day: 14 </span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">signature_date_month: 12 </span><span style="background-color: white; color: #222222; font-family: arial, sans-serif; font-size: 13px;">signature_date_year: 2012 </span></p><div class="separator" style="clear: both; text-align: center;"></div>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>個人工具箱2011</title>
      <link href="/2013/01/02/%E5%80%8B%E4%BA%BA%E5%B7%A5%E5%85%B7%E7%AE%B12011/"/>
      <url>/2013/01/02/%E5%80%8B%E4%BA%BA%E5%B7%A5%E5%85%B7%E7%AE%B12011/</url>
      <content type="html"><![CDATA[<p>先記錄下來手邊使用的工具，才有機會從繁雜中歸納出簡單的使用規則。</p><p>整理一下目前最常用的設備與應用</p><p>主要裝備</p><ul><li>Mac Book Pro 13&quot;</li><li>Android平板</li><li>Android手機</li></ul><p><strong>Mac</strong></p><p>軟體選擇方面，主要著眼點是開源、跨平台（Windows、Mac）</p><p>生活</p><ul><li>個人網路硬碟：<strong><a href="http://www.dropbox.com/" target="_blank" rel="noopener">Dropbox</a></strong></li><li>個人記帳：<a href="http://buddi.digitalcave.ca/" target="_blank" rel="noopener">Buddi</a></li><li>主要瀏覽器：<a href="http://www.google.com/chrome" target="_blank" rel="noopener">Chrome</a> （Firefox備用）</li><li>高度檢視：<a href="http://www.tiddlywiki.com/" target="_blank" rel="noopener">Tiddlywiki</a> + GTDTiddlyWiki模版</li></ul><p>常用插件：</p><ul><li>1-Up for Google+，把Google+中的+1按鈕換成加命菇，並播放加命音效</li><li>Android SDK Reference Search，在網址列中輸入&quot;ad 關鍵字&quot;就可以搜尋Android官網的參考文件</li><li>Awesome Screenshot: Capture &amp; Annotate，抓網站圖片</li><li><a href="http://goo.gl" target="_blank" rel="noopener">goo.gl</a> URL Shortener，縮短網址</li><li>Google +1 按鈕，看到感興趣的網頁，可直接記錄或分享到Google+</li><li>Google Track Me，記錄上網狀態，可在Google Analytics查看個人上網狀態</li></ul><p>網站工具</p><ul><li>主要社交網站：<strong><a href="http://gplus.to/gasolin" target="_blank" rel="noopener">Google+</a></strong>、<strong><a href="http://www.facebook.com/" target="_blank" rel="noopener">Facebook</a></strong></li><li><strong><a href="https://mail.google.com/tasks/canvas?pli=1" target="_blank" rel="noopener">Google Tasks</a>、</strong><a href="http://trello.com/" target="_blank" rel="noopener">Trello</a></li><li><strong><a href="http://www.google.com/calendar" target="_blank" rel="noopener">Google日曆</a></strong></li><li><strong><a href="http://mail.google.com/" target="_blank" rel="noopener">GMail</a></strong></li><li><a href="http://www.anobii.com/" target="_blank" rel="noopener">Anobii</a> 看書記錄</li><li><a href="http://www.douban.com/" target="_blank" rel="noopener">豆瓣</a> 看電影記錄</li><li>家庭記帳：<a href="https://docs.google.com/previewtemplate?id=0AvP15xt5RG5edEpqSnlBZll3dldyX2lYY0o3X0lmenc&amp;mode=public" target="_blank" rel="noopener">家計本本</a></li><li>長文蒐集：<a href="http://www.instapaper.com/" target="_blank" rel="noopener">Instapaper</a></li><li>個人網站：使用<a href="http://code.google.com/intl/en/appengine/" target="_blank" rel="noopener">Google App Engine</a>架設，改版容易</li><li>個人書籤網站：Google App Engine，常重複造訪的網站就那幾個，自己用JQuery Mobile寫一個分類書籤列表，在各種設備上都可以使用。在移動設備上的瀏覽器都不需用到書籤功能，當然也不需同步書籤了。</li><li>個人履歷：個人網站、Linkedin</li></ul><p>記事</p><ul><li><a href="http://sourceforge.net/projects/smultron/" target="_blank" rel="noopener"><strike>Smultron</strike></a> <a href="https://github.com/b4winckler/macvim/downloads" target="_blank" rel="noopener">mvim</a>（Windows用Notepad++）</li><li><strong><a href="http://www.evernote.com/" target="_blank" rel="noopener">Evernote</a></strong></li></ul><p>設計</p><ul><li>心智圖：<strong><a href="http://www.xmind.net/" target="_blank" rel="noopener">XMind</a></strong>（FreeMind備用）</li><li>圖表：<a href="http://www.omnigroup.com/applications/omnigraffle" target="_blank" rel="noopener">OmniGraffle</a></li><li>Mockup：<a href="http://www.balsamiq.com/products/mockups" target="_blank" rel="noopener">Balsmiq Mockups</a></li><li>UML：<a href="http://astah.net/editions/community" target="_blank" rel="noopener">Astah Community</a></li><li>StoryLine：<a href="http://gimcrackd.com/etc/src/" target="_blank" rel="noopener">Twine</a></li></ul><p>Office</p><ul><li>簡報：KeyNote (PowerPoint、Google文件、LibreOffice)</li><li>文書：Page (Word、Google文件、LibreOffice)</li><li>試算表：Google文件</li></ul><p>開發</p><ul><li>開發環境：Eclipse+ADT</li><li>版本控制：hg、svn、git</li><li>持續集成：Jenkins</li></ul><p>娛樂</p><ul><li>影片 VLC Player + Perian codecs + Flip4Mac WMV codec</li></ul><p>Android平板</p><p>主要取代電腦拿來看網站、Google Reader、GMail、Youtube、影片、電子書、漫畫等</p><ul><li>主要瀏覽器：Firefox</li></ul><p>Firefox在10&quot;平板上表現很好，還內建將網頁儲存成PDF功能</p><ul><li>個人書籤網站</li><li>Google地圖</li><li>GMail</li><li><strong><a href="https://market.android.com/details?id=tw.idv.gasolin.android.gfolder" target="_blank" rel="noopener">gFolder</a></strong>、Dropbox，用gFolder主要是可以從Dropbox下載任一檔案到Android的指定資料夾下</li><li><a href="https://market.android.com/details?id=tw.idv.gasolin.android.gpaper" target="_blank" rel="noopener">gPaper</a>，畫完後可以寄到自己信箱，選用這個主要是吃自己的狗食</li><li>AttachEmail Pro，存附檔、加附檔到GMail</li><li><strike>Google Reader</strike> (新版無加星號文章列表)</li><li>Youtube</li><li>Google日曆</li><li><strong>Evernote</strong></li><li><strong>Mindjet</strong>，心智圖軟體，修改完用gFolder傳上Dropbox，在電腦上可以用XMind或FreeMind來開</li><li><a href="https://market.android.com/details?id=com.clov4r.android.nil" target="_blank" rel="noopener">MoboPlayer</a>，不用轉檔就可以看RMVB等格式影片</li><li><a href="https://market.android.com/details?id=com.cerience.reader.app" target="_blank" rel="noopener">Repligo</a>，PDF閱讀器</li><li>自製Epub閱讀器（吃自己的狗食）</li><li><a href="https://market.android.com/details?id=com.gasolin.android.anobiit" target="_blank" rel="noopener">Anobiit</a></li><li><a href="https://market.android.com/details?id=org.swiftp" target="_blank" rel="noopener">SwiFTP</a>，FTP Server</li><li><a href="https://market.android.com/details?id=com.gasolin.android.metro.taipei" target="_blank" rel="noopener">台北捷運地圖</a></li><li><strike>ComicBricks</strike> <a href="https://play.google.com/store/apps/details?id=cn.ibuka.hw.ui" target="_blank" rel="noopener">布卡漫畫</a></li></ul><p>Android手機</p><p>主要用來增加辦事效率，或用零散時間看電子書。換了4.3&quot;大螢幕後，拿來看Google+或Facebook的機率提高了</p><ul><li><p>主要瀏覽器：Chrome (內建瀏覽器備用)</p></li><li><p>GMail</p></li><li><p>Google地圖</p></li><li><p>Google Reader</p></li><li><p>Blogger</p></li><li><p>內建相機</p></li><li><p>內建時鐘</p></li><li><p><a href="https://market.android.com/details?id=com.gasolin.android.anobiit" target="_blank" rel="noopener">Anobiit</a>，記錄看書狀況</p></li><li><p><strong>gFolder</strong>、Dropbox</p></li><li><p><a href="https://market.android.com/details?id=org.dayup.gtask" target="_blank" rel="noopener">GTasks</a></p></li><li><p>Mindjet</p></li><li><p><a href="https://market.android.com/details?id=org.openintents.safe" target="_blank" rel="noopener">OI Safe</a>，記錄密碼，備份用gFolder存到Dropbox</p></li><li><p>Repligo</p></li><li><p>自製Epub閱讀器</p></li><li><p><a href="https://market.android.com/details?id=com.wsl.noom" target="_blank" rel="noopener">Noom</a>，整合健康管理工具</p></li><li><p>SwiFTP</p></li><li><p>台北捷運地圖</p></li><li><p>Google+</p></li><li><p>Facebook* 布卡漫畫</p></li></ul>]]></content>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Firefox OS模擬器試玩</title>
      <link href="/2012/11/13/Firefox-OS%E6%A8%A1%E6%93%AC%E5%99%A8%E8%A9%A6%E7%8E%A9/"/>
      <url>/2012/11/13/Firefox-OS%E6%A8%A1%E6%93%AC%E5%99%A8%E8%A9%A6%E7%8E%A9/</url>
      <content type="html"><![CDATA[<p>Firefox OS是Mozilla基金會的新產品，將行動裝置與瀏覽器做更緊密地結合。號稱只要會寫Web App，就能開發Firefox OS App。</p><p>下午剛好看到<a href="http://playpcesor.blogspot.com/2012/11/firefox-os-firefox.html" target="_blank" rel="noopener">介紹文章</a>，裡面提到有提供跨平台能執行的模擬器，就決定動手來試裝看看。</p><p><strong>開發環境設定</strong></p><p>1. 安裝FIrefox 15+版本2. 前往 <a href="http://people.mozilla.org/~myk/r2d2b2g/" target="_blank" rel="noopener">http://people.mozilla.org/~myk/r2d2b2g/</a> 下載並安裝對應版本插件3. 裝完可以透過 選單 &gt; 工具 &gt; 網頁開發者 &gt; Firefox OS Simulator 開啟類似Chrome的開發者頁面</p><div class="separator" style="clear: both; text-align: center;">[![](http://3.bp.blogspot.com/-WvKVHfUGFgw/UJ-0kiB77YI/AAAAAAAACww/3QX7hhUiXzA/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-11-11+%E4%B8%8B%E5%8D%8810.21.17.png)](http://3.bp.blogspot.com/-WvKVHfUGFgw/UJ-0kiB77YI/AAAAAAAACww/3QX7hhUiXzA/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-11-11+%E4%B8%8B%E5%8D%8810.21.17.png)</div>4\. 按下左側Simulator項目，將執行狀態變成Running狀態。等一陣子即可在另一個視窗上看到Firefox Simulator<p><strong>導覽</strong></p><div class="separator" style="clear: both; text-align: center;">[![](http://2.bp.blogspot.com/-NUyk1efVoxc/UJ-1TGdFajI/AAAAAAAACw4/QG6zReO51UQ/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-11-11+%E4%B8%8B%E5%8D%8810.24.55.png)](http://2.bp.blogspot.com/-NUyk1efVoxc/UJ-1TGdFajI/AAAAAAAACw4/QG6zReO51UQ/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-11-11+%E4%B8%8B%E5%8D%8810.24.55.png)</div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: left;">畫面上往右拉可以看到App列表。裡面已經附上不少APP了。</div><div class="separator" style="clear: both; text-align: left;">包含行事曆、鬧鐘、Email、音樂、影片播放器、計算機、PDF閱讀器、地圖、等等。這些都是用WEB相關技術寫的（酷！）。</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: center;">[![](http://4.bp.blogspot.com/-dqZnwTMY8vE/UJ-3ZXnOniI/AAAAAAAACxI/ExJ6v_MnQq0/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-11-11+%E4%B8%8B%E5%8D%8810.33.41.png)](http://4.bp.blogspot.com/-dqZnwTMY8vE/UJ-3ZXnOniI/AAAAAAAACxI/ExJ6v_MnQq0/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-11-11+%E4%B8%8B%E5%8D%8810.33.41.png)</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;">當然瀏覽器附的是Firefox。Android的Application號稱"All Applications are equal"，亦即連官方應用也是用一樣的Application API寫成。不知在Firefox OS上，Firefox Browser App本身算不算Web App，開發者能不能簡單地為Firefox改頭換面寫一個瀏覽器App?</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: center;">[![](http://3.bp.blogspot.com/-ykn7bvfJik0/UJ-25lQ06aI/AAAAAAAACxA/dUgRPpQXhNA/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-11-11+%E4%B8%8B%E5%8D%8810.30.58.png)](http://3.bp.blogspot.com/-ykn7bvfJik0/UJ-25lQ06aI/AAAAAAAACxA/dUgRPpQXhNA/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-11-11+%E4%B8%8B%E5%8D%8810.30.58.png)</div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: left;">由螢幕頂端往下拉可以看到通知欄，下方有快速設定工具列，感覺還不錯。</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: center;">[![](http://2.bp.blogspot.com/-DhwKtWLypfA/UJ-6LWahHZI/AAAAAAAACxY/zA8Jd1Oc2CU/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-11-11+%E4%B8%8B%E5%8D%8810.44.44.png)](http://2.bp.blogspot.com/-DhwKtWLypfA/UJ-6LWahHZI/AAAAAAAACxY/zA8Jd1Oc2CU/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-11-11+%E4%B8%8B%E5%8D%8810.44.44.png)</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;">在首頁往左拉是一堆預載的網頁服務書籤（或是說...網頁應用程式），點了Facebook圖示後半天沒載入畫面，看來還有些待改善之處。</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: center;">[![](http://4.bp.blogspot.com/-5MMOQMES1So/UJ-7bzo9PtI/AAAAAAAACxg/DiTXXnJ15lQ/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-11-11+%E4%B8%8B%E5%8D%8810.51.03.png)](http://4.bp.blogspot.com/-5MMOQMES1So/UJ-7bzo9PtI/AAAAAAAACxg/DiTXXnJ15lQ/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-11-11+%E4%B8%8B%E5%8D%8810.51.03.png)</div><div class="separator" style="clear: both; text-align: left;"></div>整體看來完成度頗高。在可見的未來裡，學會了網頁技術，什麼都能做阿。<p><strong>必須面對的問題：如何保護程式碼？</strong></p><p>比起那些網頁版桌面項目，Firefox OS更有實用價值。但是對開發者來說，使用Web App開發雖容易，但也容易遇到如Web OS遇到的相同問題：「如何保護我的離線Web App的程式碼？」</p><p>在Web OS上，開發者可以找到App的目錄，解開來裡面自然是不需編譯的HTML等資源，有心人可以拿來參考或簡單修改後再發佈。這也是Web OS開發者開發意願不高的原因之一。</p><p>雖然許多開發者並不在乎把原始碼攤開在陽光下，但大廠或部分開發者對此總是有所顧慮。也許未來幾年持續連線的行動網路會便宜地和自來水一樣，到時那些把程式邏輯隱藏在伺服器端的「連網型Web App」可能是個答案。</p><p>參考資料</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Mozilla/Boot_to_Gecko/Application_development" target="_blank" rel="noopener">Firefox OS Application Development</a></li><li><a href="https://wiki.mozilla.org/Gaia/Hacking" target="_blank" rel="noopener">Hacking Gaia</a> (Gaia是Firefox OS前端App運行環境的代號)</li><li><a href="http://ftp.mozilla.org/pub/mozilla.org/b2g/nightly/latest-mozilla-central/" target="_blank" rel="noopener">Nightly Build</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> FirefoxOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Blocklyduino is ready for use</title>
      <link href="/2012/11/12/Blocklyduino-is-ready-for-use/"/>
      <url>/2012/11/12/Blocklyduino-is-ready-for-use/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;">[![](http://4.bp.blogspot.com/-uyoSTORHCJ8/UKEPEtCi0xI/AAAAAAAACxw/pQ4Fg-7IqYQ/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-11-11+%E4%B8%8B%E5%8D%889.55.25.png)](http://4.bp.blogspot.com/-uyoSTORHCJ8/UKEPEtCi0xI/AAAAAAAACxw/pQ4Fg-7IqYQ/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-11-11+%E4%B8%8B%E5%8D%889.55.25.png)</div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: left;">After a month of sprint, BlocklyDuino is open sourced and hosted on [GitHub](https://github.com/gasolin/BlocklyDuino).&nbsp;</div><div class="separator" style="clear: both; text-align: left;">Now it bounds more blocks and have some valid features:</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;"><span style="background-color: white; color: #333333; font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22px;">1\. Programming Arduino with visually drag and drop code blocks.</span></div><div class="separator" style="clear: both; text-align: left;"><span style="background-color: white; color: #333333; font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22px;">2.&nbsp;</span><span style="color: #333333; font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22px;">Generate fully compatible arduino source code.</span></div><div class="separator" style="clear: both; text-align: left;"><span style="color: #333333; font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22px;">3\. Interacive Arduino board with 10+ predefined Grove sensor blocks.</span></div><div class="separator" style="clear: both; text-align: left;"><span style="color: #333333; font-family: Helvetica, arial, freesans, clean, sans-serif; font-size: 14px; line-height: 22px;">4\. Load different on-site examples with url parameters.</span></div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;">When you click the 'Arduino' tab, the mouse will auto-focused to the code area, that means you can use keyboard to select then copy the source to Arduino IDE.</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: center;">[![](http://1.bp.blogspot.com/-9QgdZWDqtT4/UKEQ7jRORWI/AAAAAAAACyA/JWLzI8OCRNY/s320/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2012-10-21+%25E4%25B8%258B%25E5%258D%25882.46.50.png)](http://1.bp.blogspot.com/-9QgdZWDqtT4/UKEQ7jRORWI/AAAAAAAACyA/JWLzI8OCRNY/s1600/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2012-10-21+%25E4%25B8%258B%25E5%258D%25882.46.50.png)</div><div class="separator" style="clear: both; text-align: left;">And now it even support procedures (functions).</div><div class="separator" style="clear: both; text-align: center;">[![](http://4.bp.blogspot.com/-DCfLmSEUN-U/UKEPKswoCKI/AAAAAAAACx4/Cif5my2BsYc/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-11-12+%E4%B8%8B%E5%8D%8810.50.31.png)](http://4.bp.blogspot.com/-DCfLmSEUN-U/UKEPKswoCKI/AAAAAAAACx4/Cif5my2BsYc/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-11-12+%E4%B8%8B%E5%8D%8810.50.31.png)</div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: left;">[BlocklyDuino Google+ page](https://plus.google.com/b/111979846292233941175/111979846292233941175)&nbsp;has been created and will update more frequently then here for new features.</div>]]></content>
      
      
        <tags>
            
            <tag> Blockly </tag>
            
            <tag> BlocklyDuino </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>進Play Store首頁熱門應用心得：主題圖片、宣傳圖片之必要</title>
      <link href="/2012/10/23/%E9%80%B2Play-Store%E9%A6%96%E9%A0%81%E7%86%B1%E9%96%80%E6%87%89%E7%94%A8%E5%BF%83%E5%BE%97%EF%BC%9A%E4%B8%BB%E9%A1%8C%E5%9C%96%E7%89%87%E3%80%81%E5%AE%A3%E5%82%B3%E5%9C%96%E7%89%87%E4%B9%8B%E5%BF%85%E8%A6%81/"/>
      <url>/2012/10/23/%E9%80%B2Play-Store%E9%A6%96%E9%A0%81%E7%86%B1%E9%96%80%E6%87%89%E7%94%A8%E5%BF%83%E5%BE%97%EF%BC%9A%E4%B8%BB%E9%A1%8C%E5%9C%96%E7%89%87%E3%80%81%E5%AE%A3%E5%82%B3%E5%9C%96%E7%89%87%E4%B9%8B%E5%BF%85%E8%A6%81/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;">[![](http://4.bp.blogspot.com/-5uCvQ5tQD9w/UIONNuY70vI/AAAAAAAACv8/40tYpFHTGLo/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-10-21+%E4%B8%8B%E5%8D%881.50.03.png)](http://4.bp.blogspot.com/-5uCvQ5tQD9w/UIONNuY70vI/AAAAAAAACv8/40tYpFHTGLo/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-10-21+%E4%B8%8B%E5%8D%881.50.03.png)</div><p>前陣子（10月初）托台北捷運東門站開通的福，我將過去寫的<a href="https://play.google.com/store/apps/details?id=com.gasolin.android.metro.taipei" target="_blank" rel="noopener">台北捷運地圖</a>App更新上東門站後，在一週時間內，使用者就成長了數萬人，也因此上了<a href="https://play.google.com/store" target="_blank" rel="noopener">Play Store首頁</a>熱門應用區，就排在Rivio的Bad Piggies旁邊。</p><div class="separator" style="clear: both; text-align: center;">[![](http://3.bp.blogspot.com/-twLK-GAMz4s/UIOKRk5OHzI/AAAAAAAACvs/VHuNlNB5QFA/s320/trendapp.png)](http://3.bp.blogspot.com/-twLK-GAMz4s/UIOKRk5OHzI/AAAAAAAACvs/VHuNlNB5QFA/s1600/trendapp.png)</div><p><a href="https://play.google.com/store/apps/details?id=com.gasolin.android.metro.taipei" target="_blank" rel="noopener">台北捷運地圖</a>App功能單純到不行。一進入App，就給你一張每次做捷運時牆上都會貼的捷運路線圖。你可以在地圖上用兩隻指頭，或用一隻指頭長按即可縮放觀看地圖。放大後可以繼續用指頭拖拉至想查詢的位置。</p><p>這個App在前幾次的更新中已經使用了Android 4.0版的介面，相容手機與平板。</p><div class="separator" style="clear: both; text-align: center;">[![](http://3.bp.blogspot.com/wYiY9tut-FXeaM_iE_AA5dKpVG_T3SYr6806C1w-zOTP5Ly2GuOzVtqX2CicHwKpiitU)](http://3.bp.blogspot.com/wYiY9tut-FXeaM_iE_AA5dKpVG_T3SYr6806C1w-zOTP5Ly2GuOzVtqX2CicHwKpiitU)</div><p>其實這次的改版中，就程式本身而言，並沒有做什麼調整，因此能進首頁熱門推薦的原因，可以排除與功能面更新的關連。</p><div class="separator" style="clear: both; text-align: center;"></div>我總結了這次更新能上熱門應用區最大的原因，應該是與Play Store的機制有關。<p><strong>主題圖片、宣傳圖片之必要</strong></p><p><a href="http://4.bp.blogspot.com/-5uCvQ5tQD9w/UIONNuY70vI/AAAAAAAACv8/40tYpFHTGLo/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-10-21+%E4%B8%8B%E5%8D%881.50.03.png" target="_blank" rel="noopener"><img src="http://4.bp.blogspot.com/-5uCvQ5tQD9w/UIONNuY70vI/AAAAAAAACv8/40tYpFHTGLo/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-10-21+%E4%B8%8B%E5%8D%881.50.03.png" alt=""></a></p><p>要上（台灣）熱門推薦的元素如下</p><ul><li>日均下載超過1500~3000次</li><li>提供180*120 宣傳圖片</li><li>提供 1024*500主題圖片</li><li>提供 512*512 高解析度應用程式圖示<div>第一點其實我也很驚訝，原來熱門下載的門檻並不算太高，只要單日數千人次下載就有成為熱門應用的可能。</div><div></div></li></ul><div>後面幾點則是許多個人開發者沒特別留意的。注意到了嗎？在首頁上的圖示和實際程式圖示並不相同。首頁上顯示的是另外上傳的高解析度應用程式圖示。</div><div></div><div>過去Android Market還不是那麼規範的時候，開發完程式丟上去就是了。現在Android Market上的程式已經超過70萬支，要讓使用者找到你的程式，只有多花一些心力，提供消費者更多易於辨識的資訊囉。</div><div></div><div></div><div></div><div>除了[台北捷運地圖](https://play.google.com/store/apps/details?id=com.gasolin.android.metro.taipei)App之外，也請試試看[我的其他App](https://play.google.com/store/apps/developer?id=gasolin)。</div><div>推薦大家試試&nbsp;[gPaper](https://play.google.com/store/apps/details?id=tw.idv.gasolin.android.gpaper#?t=W251bGwsMSwxLDIxMiwidHcuaWR2Lmdhc29saW4uYW5kcm9pZC5ncGFwZXIiXQ..)&nbsp;隨手畫或條碼[盤點機](https://play.google.com/store/apps/details?id=tw.idv.gasolin.android.inventorycounter#?t=W251bGwsMSwxLDIxMiwidHcuaWR2Lmdhc29saW4uYW5kcm9pZC5pbnZlbnRvcnljb3VudGVyIl0.)，都已經更新至Android&nbsp;4.0介面。</div><div></div>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Blockly + Arduino + Grove = Blocklyduino (pre-alpha)</title>
      <link href="/2012/10/06/Blockly-Arduino-Grove-Blocklyduino-pre-alpha/"/>
      <url>/2012/10/06/Blockly-Arduino-Grove-Blocklyduino-pre-alpha/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: left;">Direct link to&nbsp;[Blocklyduino](http://www.gasolin.idv.tw/public/blockly/demos/blocklyduino/index.html)&nbsp;:&nbsp;[http://www.gasolin.idv.tw/public/blockly/demos/blocklyduino/index.html](http://www.gasolin.idv.tw/public/blockly/demos/blocklyduino/index.html)</div><span style="color: #45818e;"></span><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;">[Blockly](http://code.google.com/p/blockly/)&nbsp;is a web-based, graphical programming editor. Users can drag blocks together to build an application.&nbsp;</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;">[Arduino](http://www.arduino.cc/) is an electronics prototyping platform based on flexible, easy-to-use hardware and software.</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;">[Grove](http://www.seeedstudio.com/wiki/index.php?title=GROVE_-_Starter_Bundle_V1.0b#LED_Twig "GROVE_-_Starter_Bundle_V1.0b#LED_Twig")&nbsp;is a modular, safe and easy to use group of items that allow you to minimise the effort required to get started with microcontroller-based experimentation and learning.</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;">With recent blockly update, we can make image blocks in blockly, and its pretty easy to make blocks with [blockfactory](http://blockly-demo.appspot.com/blockly/demos/blockfactory/index.html). I feel it's natural&nbsp;to see the real hardware image while program the arduino firmware.&nbsp;So here is my experimental attempt called&nbsp;[Blocklyduino](http://www.gasolin.idv.tw/public/blockly/demos/blocklyduino/index.html).</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;">Besides the basic arduino language functions, I choose&nbsp;[Grove](http://www.seeedstudio.com/wiki/index.php?title=GROVE_-_Starter_Bundle_V1.0b#LED_Twig "GROVE_-_Starter_Bundle_V1.0b#LED_Twig")&nbsp;blocks to make&nbsp;[Blocklyduino&nbsp;](http://www.gasolin.idv.tw/public/blockly/demos/blocklyduino/index.html)fit for non-electronic/wiring-experience people.</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;">Here's the very early version of examples written by [Blocklyduino](http://www.gasolin.idv.tw/public/blockly/demos/blocklyduino/index.html). which should generate the same code that is correspondent to examples on&nbsp;grove wiki.</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: left;">[Digital Input example](http://www.seeedstudio.com/wiki/Project_Two_-_Digital_Input_v1.0b)</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: center;">[![](http://www.seeedstudio.com/wiki/images/thumb/3/3b/Digitalv1.0b.jpg/500px-Digitalv1.0b.jpg)](http://www.seeedstudio.com/wiki/images/thumb/3/3b/Digitalv1.0b.jpg/500px-Digitalv1.0b.jpg)</div><div class="separator" style="clear: both; text-align: center;">image from grove wiki</div><div class="separator" style="clear: both; text-align: left;"></div><div class="separator" style="clear: both; text-align: center;"></div><div class="separator" style="clear: both; text-align: center;">[![](http://2.bp.blogspot.com/-DIoV-ztuH6I/UG2YHWXyLtI/AAAAAAAACtM/hgeOtAQL0qM/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-10-04+%E4%B8%8B%E5%8D%885.34.07.png)](http://2.bp.blogspot.com/-DIoV-ztuH6I/UG2YHWXyLtI/AAAAAAAACtM/hgeOtAQL0qM/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-10-04+%E4%B8%8B%E5%8D%885.34.07.png)</div><div class="separator" style="clear: both; text-align: center;">code written by&nbsp;[Blocklyduino](http://www.gasolin.idv.tw/public/blockly/demos/blocklyduino/index.html)</div>[Analog Input example](http://www.seeedstudio.com/wiki/Project_Three_%E2%80%93_Analog_Input_v1.0b)<div class="separator" style="clear: both; text-align: center;">[![](http://www.seeedstudio.com/wiki/images/thumb/0/04/Analog_Input_v1.0b.jpg/600px-Analog_Input_v1.0b.jpg)](http://www.seeedstudio.com/wiki/images/thumb/0/04/Analog_Input_v1.0b.jpg/600px-Analog_Input_v1.0b.jpg)</div><div class="separator" style="clear: both; text-align: center;">image from grove wiki</div><div class="separator" style="clear: both; text-align: center;">[![](http://4.bp.blogspot.com/-Vpa9Vcj5B90/UG2YJ97CN-I/AAAAAAAACtU/agwVjRfaxtk/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-10-04+%E4%B8%8B%E5%8D%889.58.01.png)](http://4.bp.blogspot.com/-Vpa9Vcj5B90/UG2YJ97CN-I/AAAAAAAACtU/agwVjRfaxtk/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-10-04+%E4%B8%8B%E5%8D%889.58.01.png)</div><div class="separator" style="clear: both; text-align: center;">code&nbsp;written&nbsp;by&nbsp;[Blocklyduino](http://www.gasolin.idv.tw/public/blockly/demos/blocklyduino/index.html)</div>[Blocklyduino](http://www.gasolin.idv.tw/public/blockly/demos/blocklyduino/index.html)<span style="text-align: center;">&nbsp;will output the arduino&nbsp;</span>source <span style="text-align: center;">code with setup/loop blocks as usual arduino&nbsp;</span>source&nbsp;<span style="text-align: center;">code.</span><div class="separator" style="clear: both;"></div><div class="separator" style="clear: both;">To upload those code to the real hardware and see how it works, you need to get a standard Arduino Uno/Duemilanove board, and a set of [Grove starter-kit](http://www.seeedstudio.com/wiki/index.php?title=GROVE_-_Starter_Bundle_V1.0b#LED_Twig "GROVE_-_Starter_Bundle_V1.0b#LED_Twig")&nbsp;(optional for grove blocks).</div><div class="separator" style="clear: both;"></div><div class="separator" style="clear: both;"></div><div class="separator" style="clear: both;">Currently&nbsp;Support:&nbsp; <span style="color: #45818e;">(10/6 updated)</span> </div><div class="separator" style="clear: both;"></div><ul><li><p>arduino functions:</p></li><li><p>compact Digital/Analog Read/Write syntax</p></li><li><p>auto setup pinMode</p></li><li><p>delay and map</p></li><li><p><span style="color: #45818e;">Build-in LED block, servo </span><span style="color: #45818e;">block</span> *   Grove blocks: LED, Potentiometer, Tilt switch, <span style="color: #45818e;">Piezo Buzzer, Relay</span></p></li></ul><div class="separator" style="clear: both;">Currently Lack of:</div><div class="separator" style="clear: both;"></div><ul><li>Variables support</li><li>Have to copy-n-paste source to arduino IDE to upload to board<div class="separator" style="clear: both;"></div></li></ul><div class="separator" style="clear: both;"></div>]]></content>
      
      
        <tags>
            
            <tag> Arduino </tag>
            
            <tag> Blockly </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3 分鐘學會用 firebug 除錯</title>
      <link href="/2012/08/10/3-%E5%88%86%E9%90%98%E5%AD%B8%E6%9C%83%E7%94%A8-firebug-%E9%99%A4%E9%8C%AF/"/>
      <url>/2012/08/10/3-%E5%88%86%E9%90%98%E5%AD%B8%E6%9C%83%E7%94%A8-firebug-%E9%99%A4%E9%8C%AF/</url>
      <content type="html"><![CDATA[<p>firebug 是 firefox 的一個插件.可以說是當前用來 debug javascript 程式的最佳選擇.firebug 還提供了一些好用的函式可以讓您的測試更順暢.</p><p><a href="http://www.digitalmediaminute.com/screencast/firebug-js/" target="_blank" rel="noopener">這段影片</a> 展示了 firebug 提供的一些好用的函式.</p><p>廢話不多說, 馬上來看看吧:</p><h2 id="印出一般訊息-console-log">印出一般訊息 : console.log</h2><p>就像許多程式語言中的 ‘print’ 語句, firebug 提供的 console.log 語句可以直接印出變數值.例如</p><blockquote><p>console.log(變數);</p></blockquote><p>或者印出包含變數的敘述</p><blockquote><p>console.log(“敘述: %d”%變數);</p></blockquote><h2 id="印出具有提示圖示的訊息-console-info-console-warn-console-error">印出具有提示圖示的訊息 <a href="http://console.info/console.warn/console.error" target="_blank" rel="noopener">console.info/console.warn/console.error</a></h2><p>與印出一般訊息(console.log)使用的方式完全相同, <a href="http://console.info/console.warn/console.error" target="_blank" rel="noopener">console.info/console.warn/console.error</a> 只是會在訊息前加上相應圖示</p><blockquote><p><a href="http://console.info" target="_blank" rel="noopener">console.info</a>(a) 提示圖示console.warn(b) 警示圖示console.error© 錯誤圖示</p></blockquote><h2 id="使用除錯介面-debugger">使用除錯介面 debugger</h2><p>只要在想要除錯的地方前加上一行加上 debugger 語句</p><blockquote><p>debugger;…</p></blockquote><p>執行時就會彈出一個互動式的除錯介面.除錯介面提供了單步執行等功能, 並即時取得當前各相關變數的狀態.也可以看到迴圈每次執行後改變的值</p><h2 id="計算花費時間-console-time-console-timeend">計算花費時間 console.time/console.timeEnd</h2><p>對於 AJAX 程式來說有些動作會花費較多的時間, 使用</p><blockquote><p>console.time(“跑”)…console.timeEnd(“跑”)</p></blockquote><p>將要測試的程式段包起來, 執行時就會印出該段程式所花費的執行時間</p>]]></content>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> firebug </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OpenStack是什麼？</title>
      <link href="/2012/07/18/OpenStack%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F/"/>
      <url>/2012/07/18/OpenStack%E6%98%AF%E4%BB%80%E9%BA%BC%EF%BC%9F/</url>
      <content type="html"><![CDATA[<p>在智慧型手機與平板領域，蘋果和所有的智慧型手機與平板供應商競爭，大部分的供應商只能依靠Android系統作為反擊的基礎。</p><p>在IT系統領域，亞馬遜正在跟所有的IT系統供應商競爭，而大部分的IT系統供應商能依靠的是OpenStack。</p><p>OpenStack專案的初衷是提供類似亞馬遜的ECS(Elastic Computing Service)和S3(Simple Storage Service)開放源始碼實現，讓一般企業也能建置私有網路服務。</p><p>若企業本身或IT系統供應商規模夠大的話，使用OpenStack自建資料中心，就能享受到彈性雲端運算所帶來的好處。</p><p><a href="http://wired.tw/2012/04/11/openstack-1/index.html" target="_blank" rel="noopener">改變世界的免費雲端軟體：OpenStack幕後創造祕辛（上）</a><a href="http://wired.tw/2012/04/12/openstack-2/index.html" target="_blank" rel="noopener">（下）</a></p><p>重點：</p><p>1. OpenStack開源以前叫NASA Nebula2. 後來由Rackspace和NASA合作開發3. 以Apache授權發佈</p><p>關鍵人 Chris C. Kemp(NASA), Rick Clark, Jim Curry(Rackspace), Vivek Kundra（美國第一個資訊長），是他們讓這個專案成真並以開源發佈。</p><p>Swift是OpenStack裡類似S3(Simple Storage Service)的開放源始碼實現</p><ul><li><a href="http://os.51cto.com/art/201205/336852.htm" target="_blank" rel="noopener">Swift架構簡介</a></li><li><a href="http://os.51cto.com/art/201207/347656_1.htm" target="_blank" rel="noopener">Swift架構詳解</a>安裝</li></ul><p>1. <a href="http://devstack.org/" target="_blank" rel="noopener">DevStack</a>2. <a href="http://code.google.com/p/onestack/" target="_blank" rel="noopener">OneStack</a></p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> OpenStack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>好隱喻：自架伺服器或上雲端？</title>
      <link href="/2012/05/23/%E5%A5%BD%E9%9A%B1%E5%96%BB%EF%BC%9A%E8%87%AA%E6%9E%B6%E4%BC%BA%E6%9C%8D%E5%99%A8%E6%88%96%E4%B8%8A%E9%9B%B2%E7%AB%AF%EF%BC%9F/"/>
      <url>/2012/05/23/%E5%A5%BD%E9%9A%B1%E5%96%BB%EF%BC%9A%E8%87%AA%E6%9E%B6%E4%BC%BA%E6%9C%8D%E5%99%A8%E6%88%96%E4%B8%8A%E9%9B%B2%E7%AB%AF%EF%BC%9F/</url>
      <content type="html"><![CDATA[<iframe allowfullscreen frameborder="0" height="315" src="http://www.youtube.com/embed/ncXIC5QWRjM" width="560"></iframe>台灣雲端計算的迷思與挑戰<p>從其他地方聽到過關於&quot;決定要自架伺服器或上雲端&quot;的隱喻，是將&quot;使用雲端&quot;與&quot;自架伺服器&quot;，比做&quot;使用自來水&quot;與&quot;自己到河邊打水/抽地下水&quot;的差別。</p><p>雖然也有很清楚的區別，但還少了一點什麼。</p><div></div>「你覺得把一大筆錢存在銀行比較安穩，還是把一大筆錢放在家裡比較安穩？」<p>政委在這場演講裡提到的隱喻，應該是我目前所聽到最具說服力的隱喻。</p><p>同場加映：要上雲端，先換腦袋</p><iframe allowfullscreen frameborder="0" height="315" src="http://www.youtube.com/embed/92AClPNP_gY" width="560"></iframe>]]></content>
      
      
        <tags>
            
            <tag> cloud </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微軟, Google發佈類Dropbox雲端硬碟的影響</title>
      <link href="/2012/04/24/%E5%BE%AE%E8%BB%9F-Google%E7%99%BC%E4%BD%88%E9%A1%9EDropbox%E9%9B%B2%E7%AB%AF%E7%A1%AC%E7%A2%9F%E7%9A%84%E5%BD%B1%E9%9F%BF/"/>
      <url>/2012/04/24/%E5%BE%AE%E8%BB%9F-Google%E7%99%BC%E4%BD%88%E9%A1%9EDropbox%E9%9B%B2%E7%AB%AF%E7%A1%AC%E7%A2%9F%E7%9A%84%E5%BD%B1%E9%9F%BF/</url>
      <content type="html"><![CDATA[<div class="MsoPlainText"><span lang="EN-US">Dropbox</span><span style="font-family: 新細明體, serif;">提供用一般資料夾的方式存取資料</span><span lang="EN-US">, </span><span style="font-family: 新細明體, serif;">資料夾會自動同步到雲端</span><span lang="EN-US">.<o:p></o:p></span></div><div class="MsoPlainText"><span style="font-family: 新細明體, serif;">現在微軟</span><span lang="EN-US">, Google</span><span style="font-family: 新細明體, serif;">都將原有的</span><span lang="EN-US">SkyDrive, Google Docs</span><span style="font-family: 新細明體, serif;">升級</span><span lang="EN-US">, </span><span style="font-family: 新細明體, serif;">支援類似</span><span lang="EN-US">Dropbox</span><span style="font-family: 新細明體, serif;">這功能</span><span lang="EN-US">.<o:p></o:p></span></div><div class="MsoPlainText"></div><div class="MsoPlainText"><span lang="EN-US"><span style="font-family: 新細明體, serif;">使用微軟</span><span lang="EN-US">, Google的雲端硬碟比起Ｄropbox來有以下好處：</span></span></div><div class="MsoPlainText"></div><ul><li><span style="font-family: 新細明體, serif;">可用原有的</span><span lang="EN-US">Windows Live</span><span style="font-family: 新細明體, serif;">帳號或</span><span lang="EN-US">Google</span><span style="font-family: 新細明體, serif;">帳號登入, 降低了雲端硬碟的入門門檻</span></li><li><span style="font-family: 新細明體, serif;">微軟</span><span lang="EN-US">, Google</span><span style="font-family: 新細明體, serif;">的雲端硬碟仍支援線上版的</span><span lang="EN-US">Word, Powerpoint, Excel</span><span style="font-family: 新細明體, serif;">等原有功能. Google Docs甚至支援上傳圖檔/PDF的文字辨識</span></li><li><span style="font-family: 新細明體, serif;">可預期兩家的雲端硬碟將會像Mac, iPhone預載iCloud一樣整合進Windows/Windows Phone或Android下一代系統中</span></li></ul><div class="MsoPlainText"><span lang="EN-US">在這兩家進入了</span>雲端硬碟<span style="font-family: 新細明體, serif;">服務領域後, 已經</span><span style="font-family: 新細明體, serif;">拉高</span>雲端硬碟<span style="font-family: 新細明體, serif;">服務</span><span style="font-family: 新細明體, serif;">的</span><span style="font-family: 新細明體, serif;">競爭門檻. 開發者可以開始考慮, 該如何應用他們提供的服務, 來開發更便利使用者的應用.</span></div><div class="MsoPlainText"><span style="font-family: 新細明體, serif;"></span></div><div class="MsoPlainText"><span lang="EN-US">參考資料</span></div><div class="MsoPlainText"></div><ul><li><a href="http://dropbox.com/" target="_blank" rel="noopener">http://dropbox.com</a> <span style="font-family: 新細明體, serif;">基本</span><span lang="EN-US">2GB, </span><span style="font-family: 新細明體, serif;">支援</span><span lang="EN-US">Mac/Win/Linux/Blackberry/Android/iPad/iPhone/Windows Phone</span></li><li><a href="https://skydrive.live.com/" target="_blank" rel="noopener">https://skydrive.live.com/</a> <span style="font-family: 新細明體, serif;">基本</span><span lang="EN-US">7GB</span><span style="font-family: 新細明體, serif;">免費</span><span lang="EN-US">, </span><span style="font-family: 新細明體, serif;">原使用者可免費升</span><span lang="EN-US">25GB, </span><span style="font-family: 新細明體, serif;">支援</span><span lang="EN-US">Mac/Win/iPad/iPhone/Windows Phone</span></li><li><a href="https://drive.google.com/" target="_blank" rel="noopener">https://drive.google.com</a> <span style="font-family: 新細明體, serif;">基本</span><span lang="EN-US">5GB</span><span style="font-family: 新細明體, serif;">免費</span><span lang="EN-US">, </span><span style="font-family: 新細明體, serif;">每年</span><span lang="EN-US">300</span><span style="font-family: 新細明體, serif;">塊升</span><span lang="EN-US">25GB, , </span><span style="font-family: 新細明體, serif;">支援</span><span lang="EN-US">Mac/Win/Android/iPad/iPhone</span></li><li><a href="http://www.techbang.com/posts/9113-google-drive-hard-drive-cloud-official-debut" target="_blank" rel="noopener"><span lang="EN-US">Google Drive </span><span style="font-family: 新細明體, serif;">雲端硬碟登場，實際試玩、付費方案介紹</span></a></li><li><a href="http://playpcesor.blogspot.com/2012/04/google-drive.html" target="_blank" rel="noopener">Google Drive 雲端硬碟 心得：儲存之外，創造合作平台</a></li><li><a href="https://developers.google.com/drive/overview" target="_blank" rel="noopener">Google Drive SDK</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>設定ICS模擬器顯示軟體鍵盤</title>
      <link href="/2012/04/07/%E8%A8%AD%E5%AE%9AICS%E6%A8%A1%E6%93%AC%E5%99%A8%E9%A1%AF%E7%A4%BA%E8%BB%9F%E9%AB%94%E9%8D%B5%E7%9B%A4/"/>
      <url>/2012/04/07/%E8%A8%AD%E5%AE%9AICS%E6%A8%A1%E6%93%AC%E5%99%A8%E9%A1%AF%E7%A4%BA%E8%BB%9F%E9%AB%94%E9%8D%B5%E7%9B%A4/</url>
      <content type="html"><![CDATA[<p>自從Android 3.x發佈後，Android 虛擬機器由於要完整模擬硬體指令，因此在電腦上跑得極慢，慢到去年Google舉辦的Taiwan Android Developer Lab會場上，講者拿「模擬器慢」這理由當作送平板的梗來用。</p><p>最近隨著Android SDK Tools r17的發佈，「Android SDK Manager」裡面多了一個Intel貢獻的「Intel Hardware Accelerated Execution Manager」套件，下載這個套件後，可以自動讓使用Intel CPU的機種用全速跑Android 4.x虛擬機器。安裝前後虛擬機器執行時的速度，確實有極大的差異（從不堪用變成可用）。</p><p>於是有人開始認真使用ICS（Android 4.x）虛擬機器了，一試才發現一些問題：怎麼跑BMI範例時，書上說會彈出軟體鍵盤，但我在ICS虛擬機器上跑，卻沒有彈出來？</p><p>原因是ICS虛擬機器的預設設定改變了。因為只有當系統不提供硬體鍵盤時，畫面上才會彈出軟體鍵盤。而目前版本的ICS虛擬機器的預設設定為「有硬體鍵盤」。由於系統認定你的虛擬機器已經配有硬體鍵盤可用，因此在按下對應欄位時，畫面上當然不會再彈出軟體鍵盤。</p><p>要在虛擬機器中顯示軟體鍵盤，只要在設定虛擬機器時，在「Hardware」欄位加入「Keyboard Support」，並將值設為「no」即可（代表建立的虛擬機器不含硬體鍵盤）。</p><div class="separator" style="clear: both; text-align: center;">[![](http://4.bp.blogspot.com/-0zcn3zX24PY/T3xIlPytIcI/AAAAAAAACU0/1lF0RJs0WbQ/s400/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-04-04+%E4%B8%8B%E5%8D%888.56.10.png)](http://4.bp.blogspot.com/-0zcn3zX24PY/T3xIlPytIcI/AAAAAAAACU0/1lF0RJs0WbQ/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-04-04+%E4%B8%8B%E5%8D%888.56.10.png)</div>啟動後再開啟BMI範例程式，點選欄位時就會看到軟體鍵盤了。<div class="separator" style="clear: both; text-align: center;">[![](http://2.bp.blogspot.com/-qjJ3uApy2Fg/T3xIa18oGfI/AAAAAAAACUs/AR1AUMukNxY/s400/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-04-04+%E4%B8%8B%E5%8D%888.59.14.png)](http://2.bp.blogspot.com/-qjJ3uApy2Fg/T3xIa18oGfI/AAAAAAAACUs/AR1AUMukNxY/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-04-04+%E4%B8%8B%E5%8D%888.59.14.png)</div>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>網頁中嵌入+1按鈕</title>
      <link href="/2012/02/27/%E7%B6%B2%E9%A0%81%E4%B8%AD%E5%B5%8C%E5%85%A5-1%E6%8C%89%E9%88%95/"/>
      <url>/2012/02/27/%E7%B6%B2%E9%A0%81%E4%B8%AD%E5%B5%8C%E5%85%A5-1%E6%8C%89%E9%88%95/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;">[![](https://developers.google.com/images/developers-logo.png)](https://developers.google.com/images/developers-logo.png)</div>要在網頁中嵌入Google+1按鈕很容易。首先，只要在標頭裡（Header）裡加入一段敘述<blockquote><p>&lt;script type=“text/javascript” src=“<a href="https://apis.google.com/js/plusone.js" target="_blank" rel="noopener">https://apis.google.com/js/plusone.js</a>”&gt;&lt;/script&gt;之後在網頁中想顯示+1按鈕的地方，加入</p></blockquote><blockquote><p><span class="webkit-html-tag">&lt;g:plusone&gt;</span><span class="webkit-html-tag">&lt;/g:plusone&gt;</span>敘述，即可在網頁中顯示+1按鈕。</p></blockquote><p><strong>同網頁顯示多個+1按鈕</strong></p><p>另外一個進階的作法，是當同一個網頁中有多個可以+1的對象時，使用</p><blockquote><p>&lt;g:plusone href=“網頁/圖片連結”&gt;&lt;/g:plusone&gt;敘述，來在網頁上顯示/統計多個+1狀態。</p></blockquote><p>因為Google+1的數字直接綁著每個人的Google帳號，因此利用這個特性，線上投票網頁也可以拿Google+1來計票，保證難灌票喔 😃</p><p>當然，+1和<a href="https://developers.facebook.com/docs/reference/plugins/like/" target="_blank" rel="noopener">Facebook Like</a>一樣，也有<a href="http://www.google.com/intl/en/webmasters/+1/button/index.html" target="_blank" rel="noopener">客製化工具</a>啦</p>]]></content>
      
      
        <tags>
            
            <tag> Google Developers </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2011年個人總結</title>
      <link href="/2012/02/23/2011%E5%B9%B4%E5%80%8B%E4%BA%BA%E7%B8%BD%E7%B5%90/"/>
      <url>/2012/02/23/2011%E5%B9%B4%E5%80%8B%E4%BA%BA%E7%B8%BD%E7%B5%90/</url>
      <content type="html"><![CDATA[<div style="background-color: white;"><span style="font-family: Arial, sans-serif;"><span style="line-height: 13px;">Java夜未眠一書裡，蔡學鏞說過：把工作、學習，和娛樂結合在一起，時間就會是別人的三倍。</span></span></div><div style="background-color: white;"><span style="font-family: Arial, sans-serif;"><span style="line-height: 13px;"></span></span></div><div style="background-color: white; font-family: Arial, sans-serif; line-height: 13px;"><span style="background-color: #ebeff9; color: #333333; font-family: arial, sans-serif; line-height: normal;" title="只要找到了逻辑支点，没有什么问题不能解决。">2011年完成的事不算少，除了把個人終身大事解決了之外，因為一些原因，我接過了</span><span style="background-color: #ebeff9; color: #333333; font-family: arial, sans-serif;">Ericsk主持的</span><span style="background-color: #ebeff9; color: #333333; font-family: arial, sans-serif; line-height: normal;" title="只要找到了逻辑支点，没有什么问题不能解决。">Taipei GTUG的棒子，負責規劃並舉</span><span style="background-color: #ebeff9; color: #333333; font-family: arial, sans-serif; line-height: normal;">辦了整年的GTUG活動(</span><span style="background-color: #ebeff9; color: #333333; font-family: arial, sans-serif; line-height: normal;">25場聚會+3~4場合辦活動+1場Hackthon</span><span style="background-color: #ebeff9; color: #333333; font-family: arial, sans-serif; line-height: normal;">)，在過程中認識了不少人，受到許多人的幫助，同時也增強或新學到了關於辦活動、新技術等諸多的經驗與樂趣。</span></div><div style="background-color: white;"><div style="font-family: 'LiHei Pro'; line-height: normal;"><span style="background-color: #ebeff9; color: #333333; font-family: arial, sans-serif;" title="只要找到了逻辑支点，没有什么问题不能解决。"></span></div><div style="font-family: 'LiHei Pro'; line-height: normal;"><span style="background-color: #ebeff9; color: #333333; font-family: arial, sans-serif;" title="只要找到了逻辑支点，没有什么问题不能解决。"><span style="line-height: 13px;">從高中玩社團起就陸續協辦過一些活動，</span></span><span style="background-color: #ebeff9; color: #333333; font-family: arial, sans-serif; line-height: 13px;">雖然說「</span><span style="background-color: #ebeff9; color: #333333; font-family: arial, sans-serif; line-height: 13px;">近廟的懂拜神」，多多少少已有些相關經驗，過去也沒少看管理、組織、行銷等書籍，但總的來說</span><span style="background-color: #ebeff9; color: #333333; font-family: arial, sans-serif; line-height: 13px;">社交或團隊能力是我原本不十分在行的一環。幸好受到小Q、Jehuen、Ted、Shaka</span><span style="background-color: #ebeff9; color: #333333; font-family: arial, sans-serif; line-height: 13px;">等朋友的幫助，</span><span style="background-color: #ebeff9; color: #333333; font-family: arial, sans-serif; line-height: 13px;">2011年陸續與TOSSUG、Cloud TW、Google行動推廣部等單位合作，</span><span style="background-color: #ebeff9; color: #333333; font-family: arial, sans-serif; line-height: 13px;">或</span><span style="background-color: #ebeff9; color: #333333; font-family: arial, sans-serif; line-height: 13px;">策劃或協</span><span style="background-color: #ebeff9; color: #333333; font-family: arial, sans-serif; line-height: 13px;">辦了數場百人聚會，和諸多講者聯繫、討論聚會分享內容，或是更新Taipei GTUG網站、社群網站等，豐富了我下班後的生活。</span></div><span style="color: #333333; font-family: arial, sans-serif;"><span style="line-height: 13px;"></span></span><span style="color: #333333; font-family: arial, sans-serif;"><span style="line-height: 13px;">在工作中，今年也帶領數人的團隊完成了數個專案，過程中</span></span><span style="color: #333333; font-family: arial, sans-serif; line-height: 13px;">訓練新同事、</span><span style="color: #333333; font-family: arial, sans-serif; line-height: 13px;">與同事</span><span style="color: #333333; font-family: arial, sans-serif; line-height: 13px;">溝通</span><span style="color: #333333; font-family: arial, sans-serif; line-height: 13px;">與</span><span style="color: #333333; font-family: arial, sans-serif; line-height: 13px;">合作、與長官溝通和彙報、</span><span style="color: #333333; font-family: arial, sans-serif; line-height: 13px;">與公司各部門或公司外窗口的溝通，都多虧了過去透過書本學習、社群實踐中累積的經驗，讓我即使在公司眼中是新手上路卻能順利上手。</span><span style="color: #333333; font-family: arial, sans-serif;"><span style="line-height: 13px;"></span></span><div style="line-height: normal;"><div><div style="font-family: 'LiHei Pro';"><span style="background-color: #ebeff9; color: #333333; font-family: arial, sans-serif;" title="只要找到了逻辑支点，没有什么问题不能解决。">2011年也是個人數據化更徹底的一年，我記了整年的帳、整年的[成功日記](http://life.gasolin.idv.tw/2011/07/google.html)，</span><span style="background-color: #ebeff9; color: #333333; font-family: arial, sans-serif;" title="只要找到了逻辑支点，没有什么问题不能解决。">透過[Anobii](http://www.anobii.com/gasolin/books)統計共看了203本書</span><span style="color: #333333; font-family: arial, sans-serif;">，總計42193頁；</span><span style="background-color: #ebeff9; color: #333333; font-family: arial, sans-serif;">透過</span>[豆瓣](http://movie.douban.com/)<span style="background-color: #ebeff9; color: #333333; font-family: arial, sans-serif;">統計共看了31部電影</span><span style="background-color: white; color: #333333; font-family: arial, sans-serif;">。</span><span style="background-color: white; color: #333333; font-family: arial, sans-serif;">申請了個人的網域(gasolin.idv.tw)，開通了[Google+](http://gplus.to/gasolin)，上傳了第一個Youtube影片，</span><span style="background-color: white; color: #333333; font-family: arial, sans-serif;">貼了67+18篇博文；改版了一本書，發佈[5款App](https://market.android.com/developer?pub=gasolin)，寫了6期雜誌專欄+為電子報[推薦了一本書](http://www.ithome.com.tw/itadm/article.php?c=70581&amp;s=7)（數位記憶革命），做了11場公開演講，09年累積至今透過Yahoo公益捐助了共25個[公益專案](http://tw.charity.yahoo.com/donator.html?yuid=Z2Fzb2xpbmtpbW8jOGQ-)</span><span style="background-color: white; color: #333333; font-family: arial, sans-serif;">。</span></div></div></div><div style="line-height: normal;"><span style="color: #333333; font-family: arial, sans-serif;"></span></div></div><div style="background-color: white;"><div><span style="font-family: Arial, sans-serif;"><span style="line-height: 13px;">前美國教育部長Richard Riley說：我們必須教導現在的學生，畢業後投入目前還不存在的工作，使用根本還沒發明的科技，解決我們從未想像過的問題。</span></span></div><div><span style="font-family: Arial, sans-serif;"><span style="line-height: 13px;"></span></span></div><div><span style="font-family: Arial, sans-serif;"><span style="line-height: 13px;">這段話對學生們還是未來式，但是在產業劇變的今天，對在業界的我們已是現在進行式。</span></span></div><div style="font-family: Arial, sans-serif; line-height: 13px;"></div></div><span style="font-family: Arial, sans-serif;"><span style="line-height: 13px;">我也準備好繼續和對技術有熱忱的朋友們一起，透過活動，結合工作、學習，和娛樂，</span></span>用網路/資訊技術改善生活、擴大影響力，讓身邊的人與環境一起變得更好。<div></div>]]></content>
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>升級build.xml</title>
      <link href="/2012/02/09/%E5%8D%87%E7%B4%9Abuild-xml/"/>
      <url>/2012/02/09/%E5%8D%87%E7%B4%9Abuild-xml/</url>
      <content type="html"><![CDATA[<p><span class="Apple-style-span" style="background-color: white; font-family: arial, sans-serif; font-size: 14px; line-height: 15px;">用ant來編譯Android專案的開發者，</span><span class="Apple-style-span" style="background-color: white; font-family: arial, sans-serif; font-size: 14px; line-height: 15px;">在2011/10月中升到r14之後版本的開發工具之後，ant檔案的格式又被修改了。</span><span class="Apple-style-span" style="background-color: white; font-family: arial, sans-serif; font-size: 14px; line-height: 15px;"></span><span class="Apple-style-span" style="background-color: white; font-family: arial, sans-serif; font-size: 14px; line-height: 15px;">要升級到新版的 build.xml，記得先把原來的build.xml檔案備份，</span><span class="Apple-style-span" style="background-color: white; font-family: arial, sans-serif; font-size: 14px; line-height: 15px;"></span></p><blockquote><p><span class="Apple-style-span" style="background-color: white; font-family: arial, sans-serif; font-size: 14px; line-height: 15px;">$ mv build.xml oldbuild.xml</span><span class="Apple-style-span" style="background-color: white; font-family: arial, sans-serif; font-size: 14px; line-height: 15px;"></span><span class="Apple-style-span" style="background-color: white; font-family: arial, sans-serif; font-size: 14px; line-height: 15px;">再跑一下命令行 </span><span class="Apple-style-span" style="background-color: white; font-family: arial, sans-serif; font-size: 14px; line-height: 15px;"></span><span class="Apple-style-span" style="background-color: white; font-family: arial, sans-serif; font-size: 14px; line-height: 15px;">$ android update project --path . </span><span class="Apple-style-span" style="background-color: white; font-family: arial, sans-serif; font-size: 14px; line-height: 15px;"></span><span class="Apple-style-span" style="background-color: white; font-family: arial, sans-serif; font-size: 14px; line-height: 15px;">以更新相關檔案。</span><span class="Apple-style-span" style="background-color: white; font-family: arial, sans-serif; font-size: 14px; line-height: 15px;"></span><span style="background-color: white; font-family: arial, sans-serif; font-size: 14px; line-height: 15px;">若有參考到相關的library project的話，在各</span><span style="background-color: white; font-family: arial, sans-serif; font-size: 14px; line-height: 15px;">library project中執行</span></p></blockquote><blockquote><span class="Apple-style-span" style="background-color: white; font-family: arial, sans-serif; font-size: 14px; line-height: 15px;">$ android update lib-project --path .&nbsp;</span><div><span style="font-family: arial, sans-serif;"><span style="font-size: 14px; line-height: 15px;"></span></span></div></blockquote><p><span class="Apple-style-span" style="background-color: white; font-family: arial, sans-serif; font-size: 14px; line-height: 15px;">開啟新的build.xml並加入自用的相關設定後，</span><span class="Apple-style-span" style="background-color: white; font-family: arial, sans-serif; font-size: 14px; line-height: 15px;">最後再執行 </span><span class="Apple-style-span" style="background-color: white; font-family: arial, sans-serif; font-size: 14px; line-height: 15px;"></span></p><blockquote><p><span class="Apple-style-span" style="background-color: white; font-family: arial, sans-serif; font-size: 14px; line-height: 15px;">$ ant clean release</span><span class="Apple-style-span" style="background-color: white; font-family: arial, sans-serif; font-size: 14px; line-height: 15px;"></span><span class="Apple-style-span" style="background-color: white; font-family: arial, sans-serif; font-size: 14px; line-height: 15px;">看看有沒有問題。</span><span class="Apple-style-span" style="background-color: white; font-family: arial, sans-serif; font-size: 14px; line-height: 15px;"></span><span class="Apple-style-span" style="background-color: white; font-family: arial, sans-serif; font-size: 14px; line-height: 15px;">如果沒有問題的話，就恭喜你順利升級囉。</span><span style="font-family: arial, sans-serif;"><span style="font-size: 14px; line-height: 15px;"></span></span></p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>gFolder: 把dropbox當手機外接硬碟</title>
      <link href="/2011/11/15/gFolder-%E6%8A%8Adropbox%E7%95%B6%E6%89%8B%E6%A9%9F%E5%A4%96%E6%8E%A5%E7%A1%AC%E7%A2%9F/"/>
      <url>/2011/11/15/gFolder-%E6%8A%8Adropbox%E7%95%B6%E6%89%8B%E6%A9%9F%E5%A4%96%E6%8E%A5%E7%A1%AC%E7%A2%9F/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;">[![](http://4.bp.blogspot.com/-XSPmGOeZMQs/TsMclHvJa7I/AAAAAAAACLA/YY3Sy4Z3BfY/s320/device-2011-11-07-224212.png)](http://4.bp.blogspot.com/-XSPmGOeZMQs/TsMclHvJa7I/AAAAAAAACLA/YY3Sy4Z3BfY/s1600/device-2011-11-07-224212.png)</div>官方的 Dropbox app可以讓使用者將Dropbox中的檔案存到手機sd卡的dropbox資料夾中，但如果想要將書放到sd卡的books資料夾、音樂放到music資料夾...對於這樣的需求，使用官方Dropbox app就沒辦法辦到了。<p>gFolder可以將SD卡中任一目錄下的任一檔案放到Dropbox上的任一目錄下，也可以將Dropbox任一目錄下的任一檔案放到SD卡的任一目錄下。</p><p>主要介面類似FTP程式，只要點選檔案，即可將檔案傳送到Dropbox或sd卡中。當有網路的時候，使用gFolder起來，就像是在手機上直接插上了一個外接硬碟一樣。</p><p>當使用者跳出程式，下一次再啟動時，gFolder也會記錄上一次sd卡和Dropbox的所在目錄，可以隨時回到上次的操作狀態。</p><p>gFolder同時支援平板和手機，並先使用Android 4.0的統一使用者介面，在手機上也有和平板一樣的使用者介面。</p><p>下載網址: <a href="https://market.android.com/details?id=tw.idv.gasolin.android.gfolder" target="_blank" rel="noopener">https://market.android.com/details?id=tw.idv.gasolin.android.gfolder</a>QRCode:</p><div class="separator" style="clear: both; text-align: center;">[![](http://3.bp.blogspot.com/-LTuTHTi_vzQ/TsJ1gt1bplI/AAAAAAAACK4/9cAjcmbnXYg/s1600/gfolder.png)](http://3.bp.blogspot.com/-LTuTHTi_vzQ/TsJ1gt1bplI/AAAAAAAACK4/9cAjcmbnXYg/s1600/gfolder.png)</div>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 4.0發佈</title>
      <link href="/2011/10/19/Android-4-0%E7%99%BC%E4%BD%88/"/>
      <url>/2011/10/19/Android-4-0%E7%99%BC%E4%BD%88/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;">[![](http://developer.android.com/sdk/images/4.0/face-unlock.png)](http://developer.android.com/sdk/images/4.0/face-unlock.png)</div>Android 4.0 (IceCream Sandwich)如期推出了  這次的改進比較多是在軟體層面，套用Apple的OSX Lion廣告詞：> ICS擁有超過250種全新功能，> 包括臉部解鎖、連續語音辨識、全景照片與影像特效、5倍瀏覽器速度、流量監測...> ICS把Android推向下一個紀元<p>Android 4.0比較重要的新功能已列在 <a href="http://developer.android.com/sdk/android-4.0-highlights.html" target="_blank" rel="noopener">http://developer.android.com/sdk/android-4.0-highlights.html</a></p><iframe allowfullscreen frameborder="0" height="360" src="http://www.youtube.com/embed/-F_ke3rxopc" width="640"></iframe><p>對一般App開發者來說，OS部分的改進如Holo Theme系統佈景主題、Fragment API等都是3.x已經有的，現在套用到手機上。新的連續語音辨識、影像處理API等軟體功能，和Android Beam、Wi-Fi Direct等通訊技術可以玩出一些新花樣。</p><p>開發工具部分則是開始支援WebCam（Windows/Linux only）、新的初次使用設定精靈（Welcome Wizard）、比較好用的Layout編輯器、還有整合了<a href="http://android-ui-utils.googlecode.com/hg/asset-studio/dist/index.html" target="_blank" rel="noopener">Android Asset Studio</a>製作圖示（Icon）的功能。</p><p>整體來看這次推出的功能雖然很多，但在系統整體架構上並沒有多做改變，開發工具也做了些改進，讓開發者更容易使用。比較糟糕的一點是模擬器延續了Android 3.x版的不良傳統，為了完全模擬ARM的指令，而使得模擬器執行相當龜速。要測試Android 3.x版以上的系統時，還是得買實機來跑才比較準。</p><p>順便公告一下: 因為基本的東西都沒有改變，大家可以放心使用「<a href="http://www.books.com.tw/exep/assp.php/gasolin/exep/prod/booksfile.php?item=0010513881" target="_blank" rel="noopener">Google! Android 手機應用程式設計入門</a>」來學習開發相容各種Android版本的應用程式，本書不會因Android 4.0再改版。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>程式屍</title>
      <link href="/2011/10/19/%E7%A8%8B%E5%BC%8F%E5%B1%8D/"/>
      <url>/2011/10/19/%E7%A8%8B%E5%BC%8F%E5%B1%8D/</url>
      <content type="html"><![CDATA[<blockquote><p>程式屍常常待在他天然的巢穴裡，駝背坐在顯示器淡淡的光線中，在文字編輯器中輸入著複雜的標點字元組合。有時候，這個膽小的傢伙會離開他的窩，四處尋找咖啡或比薩。很快的，他就會回到安全的地方，繼續在鍵盤上做他一直在做的事– 編程創藝</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> digest </tag>
            
            <tag> fun </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>技術</title>
      <link href="/2011/08/27/%E6%8A%80%E8%A1%93/"/>
      <url>/2011/08/27/%E6%8A%80%E8%A1%93/</url>
      <content type="html"><![CDATA[<blockquote><p>大部份的技術可以被分為兩大類，一個是使用者真正想要的並且會主動尋求的，而另一種只是為了解決某些問題而推出的基本解決方案。 &gt; 後者經常流於行銷噱頭而最終引不起消費者實際購買的興趣。</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> digest </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Jenkins持續集成與發佈Android應用程式</title>
      <link href="/2011/08/26/%E4%BD%BF%E7%94%A8Jenkins%E6%8C%81%E7%BA%8C%E9%9B%86%E6%88%90%E8%88%87%E7%99%BC%E4%BD%88Android%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F/"/>
      <url>/2011/08/26/%E4%BD%BF%E7%94%A8Jenkins%E6%8C%81%E7%BA%8C%E9%9B%86%E6%88%90%E8%88%87%E7%99%BC%E4%BD%88Android%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>這是上週在<a href="http://coscup.org/2011/zh-tw/" target="_blank" rel="noopener">Coscup 2011</a>活動中演講的主題與投影片。 </p><p>介紹：</p><p>Jenkins (<a href="http://jenkins-ci.org/" target="_blank" rel="noopener">http://jenkins-ci.org/</a>) 是個廣為使用的持續集成（Continue Integration）框架，可以協助軟體工程師統合處理各種圍繞著「寫程式」之外的程式開發工作（如版本控制、環境設定、編譯、測試、發佈）。 </p><p>在這個議程中將和大家分享實際使用Jenkins持續集成與發佈Android App，讓管理多應用程式變得更容易的經驗。</p><div id="__ss_8944298" style="width: 425px;">**[Android + jenkins](http://www.slideshare.net/gasolin/android-jenkins "Android + jenkins")** <iframe frameborder="0" height="355" marginheight="0" marginwidth="0" scrolling="no" src="http://www.slideshare.net/slideshow/embed_code/8944298" width="425"></iframe> <div style="padding: 5px 0 12px;">View more [presentations](http://www.slideshare.net/) from [gasolin](http://www.slideshare.net/gasolin) </div></div>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AppInventor+愛無赦?（台客舞App開發心得）</title>
      <link href="/2011/08/21/AppInventor-%E6%84%9B%E7%84%A1%E8%B5%A6-%EF%BC%88%E5%8F%B0%E5%AE%A2%E8%88%9EApp%E9%96%8B%E7%99%BC%E5%BF%83%E5%BE%97%EF%BC%89/"/>
      <url>/2011/08/21/AppInventor-%E6%84%9B%E7%84%A1%E8%B5%A6-%EF%BC%88%E5%8F%B0%E5%AE%A2%E8%88%9EApp%E9%96%8B%E7%99%BC%E5%BF%83%E5%BE%97%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><a href="http://appinventor.googlelabs.com/" target="_blank" rel="noopener">AppInventor</a> 是GoogleLab中一個有趣的工具，可以讓一般人簡單地透過像堆積木的方式寫出一個Android App。（剛好<a href="http://www.makezine.com.tw/2011/08/16/%E6%B7%BA%E8%AB%87%E6%96%87%E5%AD%97%E5%BC%8F%E8%88%87%E5%9C%96%E5%BD%A2%E5%8C%96%E7%A8%8B%E5%BC%8F%E9%96%8B%E7%99%BC%E4%BB%8B%E9%9D%A2%E4%B8%8A%E7%AF%87-%E4%BB%A5google-app-inventor%E7%82%BA/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=%25e6%25b7%25ba%25e8%25ab%2587%25e6%2596%2587%25e5%25ad%2597%25e5%25bc%258f%25e8%2588%2587%25e5%259c%2596%25e5%25bd%25a2%25e5%258c%2596%25e7%25a8%258b%25e5%25bc%258f%25e9%2596%258b%25e7%2599%25bc%25e4%25bb%258b%25e9%259d%25a2%25e4%25b8%258a%25e7%25af%2587-%25e4%25bb%25a5google-app-inventor%25e7%2582%25ba" target="_blank" rel="noopener">Make雜誌也出了AppInventor報導</a>）  這週三Taipei GTUG舉辦了<a href="http://www.taipei-gtug.org/meetings/meeting2011/20110817" target="_blank" rel="noopener">AppInventor Bootcamp</a>， 由我先簡單介紹如何安裝與使用AppInventor後， 再將時間交給大家，創作具備台灣特色，或能展現台灣特色與風格的App。  首先當然是拿大家熟悉的BMI，重現在AppInventor上  <div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-bYTU-9XHLWw/TkzAIbMkfqI/AAAAAAAACEA/TgOdgqOtKYw/s1600/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2011-08-18+%25E4%25B8%258B%25E5%258D%25883.32.25.png" target="_blank" rel="noopener"><img src="http://4.bp.blogspot.com/-bYTU-9XHLWw/TkzAIbMkfqI/AAAAAAAACEA/TgOdgqOtKYw/s320/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2011-08-18+%25E4%25B8%258B%25E5%258D%25883.32.25.png" alt=""></a></div>  接著則是介紹程式積木部分，程式積木部分做到了原BMI程式大部分的功能。 可以看到用拖拉積木的方式寫一個轉換數值程式，是蠻厚工的一件事。  （剛剛要截圖才發現這部份原始碼被覆蓋掉了Orz，等影片轉出來再把錄到的畫面嵌在這）  接著活動就進入Hacking模式。今天不少人都在問：用AppInventor寫好的App要怎麼轉換成程式碼？答案是目前沒有這樣的功能，也許年底<a href="http://androidcommunity.com/google-app-inventor-discontinued-will-become-open-source-instead-20110809/" target="_blank" rel="noopener">AppInventor Open Source</a>了之後，會有好心人寫出來吧…    昨晚Hack的成果，是「台客舞App」。  台客舞App簡介：  看過jolin的<a href="http://www.youtube.com/watch?v=KMqfVNnDSD0" target="_blank" rel="noopener">愛無赦MV</a>嗎？ <div class="separator" style="clear: both; text-align: center;"> </div><object style="height: 390px; width: 640px;"> <embed src="http://www.youtube.com/v/KMqfVNnDSD0?version=3" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="640" height="390"></object>   裡面的電音舞曲和掌心燈是不是很搶眼而讓人一見難忘呢？  <a href="http://4.bp.blogspot.com/-BgbN_T0_EAQ/TkzCzakF4aI/AAAAAAAACEE/sGsWTkKf9KU/s1600/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2011-08-18+%25E4%25B8%258B%25E5%258D%25883.18.48.png" target="_blank" rel="noopener"><img src="http://4.bp.blogspot.com/-BgbN_T0_EAQ/TkzCzakF4aI/AAAAAAAACEE/sGsWTkKf9KU/s320/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2011-08-18+%25E4%25B8%258B%25E5%258D%25883.18.48.png" alt=""></a> 這個AppInventor作品結合了電音舞曲播放和掌心燈的功能， 只要你擁有Android手機，就可以隨時跳一首台客舞曲～   夠台味吧XD  這個程式很簡單，主體是兩個按鈕和一個聲音檔案。  <div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-ZI0dsxEj4d0/TkzEDzW9YDI/AAAAAAAACEI/n1uj_OvZDas/s1600/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2011-08-18+%25E4%25B8%258B%25E5%258D%25883.45.09.png" target="_blank" rel="noopener"><img src="http://3.bp.blogspot.com/-ZI0dsxEj4d0/TkzEDzW9YDI/AAAAAAAACEI/n1uj_OvZDas/s320/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2011-08-18+%25E4%25B8%258B%25E5%258D%25883.45.09.png" alt=""></a></div> 聲音檔案的部份，AppInventor目前只接受小於2MB的檔案，因此先用<a href="http://audacity.sourceforge.net/" target="_blank" rel="noopener">Audacity</a>工具裁減了一小段轉成MP3檔，然後加入這個專案中。  另外兩個按鈕，一個「播放」（Play）按鈕放在最上頭，按了之後即開始播放音樂。再按一次後就停止。  另一個按鈕則是佔用大部分的螢幕，並將底色改為和背景同樣的黑色， 在按下後會變換成白色，以模擬掌心燈的開、關狀態。  <div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-yDXwCYRc2oQ/TkzLjE2hskI/AAAAAAAACEM/gZJ92vgs5EY/s1600/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2011-08-18+%25E4%25B8%258B%25E5%258D%25884.20.54.png" target="_blank" rel="noopener"><img src="http://4.bp.blogspot.com/-yDXwCYRc2oQ/TkzLjE2hskI/AAAAAAAACEM/gZJ92vgs5EY/s320/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2011-08-18+%25E4%25B8%258B%25E5%258D%25884.20.54.png" alt=""></a></div>  有興趣看現場DEMO的人，可以參加<a href="http://registrano.com/events/61c494" target="_blank" rel="noopener">(Coscup BoF) Appinventor Hack &amp;amp; Show</a> 活動（希望有人願意拿著現場秀一段台客舞XD）。  程式可以到<a href="http://showinventor.appspot.com/main/gallery" target="_blank" rel="noopener">http://showinventor.appspot.com/main/gallery</a>下載，供大家娛樂一下。 （Android Market就算了吧）   <div class="separator" style="clear: both; text-align: center;"> </div></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> GTUG </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 3.x與手機?</title>
      <link href="/2011/08/12/Android-3-x%E8%88%87%E6%89%8B%E6%A9%9F/"/>
      <url>/2011/08/12/Android-3-x%E8%88%87%E6%89%8B%E6%A9%9F/</url>
      <content type="html"><![CDATA[<p>因為有一些人對Android 3與手機的關聯無法搭上線，在這邊記錄一些FAQ：</p><blockquote><p>1. 手機應該和android 3無關吧！小弟還特別到官網讀了正式文件，確認android 3是給平板電腦用的，android 2才是給手機用的，後續或許會整合，但那是以後的事了不是嗎？Android 3是Android最新版號，而且向下相容多數API。用Android 3.2 SDK來開發2.x版本（手機）的應用程式完全沒有問題。</p></blockquote><p>第四版主要使用3.x的SDK，只有要使用手機的虛擬機器時，才使用2.x SDK提供的虛擬機器（因為3.x SDK中只附了平板虛擬機器，沒有附手機版的虛擬機器）。採用本書寫法的話，程式在平板和手機上都能正常運行。您可以拿您手邊現有的任一開發中App來測、或等拿到書的時候照著試試，看看是不是確實能在3.x SDK上開發手機應用程式。</p><blockquote><p>2. 本書既然叫Android 3，卻沒有講平板用的fragment API？首先，這是一本入門書。這本書內容和其他同類書籍不同，關注的是跨版本的基礎知識（所以書名叫「入門」）。封面說明的部份有寫，想傳達的是用這本入門，就算是更新的版本拿來一樣適用。在寫現在版本時想的是善用開發工具、與市面上主流版本相容，而非關注新功能。</p></blockquote><div><span class="Apple-style-span" style="font-family: arial, sans-serif;"><span class="Apple-style-span" style="font-size: 14px; line-height: 15px;"></span></span>而現在平板在Android系統中的市佔率 1.2%，要撐起書市還不到時機（個人意見）。一般入門的開發者（本書的預設讀者群）會專為了1.2%的使用者而開發？我認為不會。<p>有些開發基礎，而又看過我的書的人，應該知道我一貫建議去官方網站查這些進階的API，而不是苦苦等中文書。</p><p>平板的fragment API（將畫面分隔的API）有兩種版本，一種是向後相容版，可以跑在Android 2.x 機種上。另一種是原生版，只能跑在3.x Tablet上。根據我個人的評估，這兩種API還會有某種程度的改動，除非是專為了平板而開發，不然學習fragment API還不是時候（也許等到Ice Cream Sandwich?）</p><div></div>> 3\. 看第四版的目錄好像沒有講到Android 3的特性？<div>其實各種新東西講了不少，但都已經整合在各個章節中，融入了整個學習過程裡。</div><div><div></div><div>在主要開發手機應用程式的情況下， 2.x 和 3.x 還有什麼差別哩？3.x版為了平板做很多事情，若是還繼續用 2.x SDK開發，程式放到Tablet上會有些"不太Native"的感覺，如選單會出現在平板的下方，而不是如其他內建應用程式顯示Action Bar在上方。</div><div></div><div>比起專為平板設計一份程式碼，在Android上要解決這些問題較容易。本入門書第四版的目標是「寫一次，就能在手機、平板、Google TV等設備上執行」。</div><div></div><div>因此我是以這樣的想法，以手機為主，在維持本書架構的開發過程中，加入更多實際經驗與技巧，來協助Android應用程式開發的入門者或剛接觸平板等機種的開發者。第四版除了圖片重新擷取之外，內容大概有30~40%的改動。新版加入了一些新章節，介紹了選單、關連選單、App Widget（桌面小工具）與平板相容設定。還加上了AsyncTask、Admob等章節，在主要使用者為手機的情形下，也能讓平板的使用者得到不錯的使用經驗。</div></div>「雖然平板等機種的數量少，但如果不麻煩的話，還是盡可能支援吧？」如果您贊同這樣的想法，那看這本書可以得到您想要的。<p>不必懷疑，<a href="http://www.books.com.tw/exep/assp.php/gasolin/exep/prod/booksfile.php?item=0010513881" target="_blank" rel="noopener">這是我的誠意之作</a>。</p><p>PS: 本書歷版以來都追求和市面其他書籍不同，不求全，只追求初學者透過本書能確實理解Android應用程式開發，並能投入實用。我一直以支持入門者的想法來改版或寫作。除非是spam，不然大可不必揣測我會隨意砍誰的回覆。</p></div>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>樂手與程序員</title>
      <link href="/2011/07/30/%E6%A8%82%E6%89%8B%E8%88%87%E7%A8%8B%E5%BA%8F%E5%93%A1/"/>
      <url>/2011/07/30/%E6%A8%82%E6%89%8B%E8%88%87%E7%A8%8B%E5%BA%8F%E5%93%A1/</url>
      <content type="html"><![CDATA[<blockquote><p>想要找一份穩定安逸工作的音樂人成不了音樂家。音樂這行很殘酷，壓根也不可能安逸。能成為專業樂手的人都想成名。一名樂手要不就努力想成名，要不就根本別踏進這一行。 &gt; 經常有人問我為什麼很多優秀的樂手同時又是很棒的軟體開發工程師。這絕對不是因為這兩種職業使用一樣的腦部功能，也不是因為他們都是追求細節和創造力的工作，而是因為一個渴望成功的人肯定要比那些只是單純完成工作的人更有可能成功。 &gt; 即使我們不能成為Linus Torvalds那樣的人，但確定高目標至少可以讓我們不再平凡。 &gt; – Chad Fowler , The passionate Programmer</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> digest </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Play! Framework在GAE上架網站</title>
      <link href="/2011/07/24/%E4%BD%BF%E7%94%A8Play-Framework%E5%9C%A8GAE%E4%B8%8A%E6%9E%B6%E7%B6%B2%E7%AB%99/"/>
      <url>/2011/07/24/%E4%BD%BF%E7%94%A8Play-Framework%E5%9C%A8GAE%E4%B8%8A%E6%9E%B6%E7%B6%B2%E7%AB%99/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;">[![](http://2.bp.blogspot.com/-jhvha3uwV_U/ThfaiWRMlZI/AAAAAAAAB7Q/EyIiGiHvdt0/s320/ae_gwt_java-499x386.png)](http://2.bp.blogspot.com/-jhvha3uwV_U/ThfaiWRMlZI/AAAAAAAAB7Q/EyIiGiHvdt0/s1600/ae_gwt_java-499x386.png)</div>今年自己在網站開發方面做了很多改變。<p>第一件是Domain name續約並全面採用 <a href="http://www.gasolin.idv.tw/" target="_blank" rel="noopener">gasolin.idv.tw</a> 系列網址。</p><p>本如部落格網址可由 <a href="http://blog.gasolin.idv.tw/">blog.gasolin.idv.tw</a> 連結，Android書籍/應用相關訊息可由 <a href="http://android.gasolin.idv.tw/" target="_blank" rel="noopener">android.gasolin.idv.tw</a> 連結。</p><p>第二件是使用的網頁框架改變。</p><p>個人的首頁 <a href="http://www.gasolin.idv.tw/" target="_blank" rel="noopener">www.gasolin.idv.tw</a> 仍然架在<a href="http://code.google.com/appengine/" target="_blank" rel="noopener">Google App Engine</a>上頭，但背後使用的技術，也從Python based的 <a href="http://gaeo.org/" target="_blank" rel="noopener">GAEO</a> ，改為使用Java based的 <a href="http://www.playframework.org/" target="_blank" rel="noopener">Play! Framework</a>。</p><p>使用 <a href="http://www.playframework.org/" target="_blank" rel="noopener">Play! Framework</a> 的好處是它並不像<a href="http://gaeo.org/" target="_blank" rel="noopener">GAEO</a>一樣完全捆綁在<a href="http://code.google.com/appengine/" target="_blank" rel="noopener">Google App Engine</a>上，而是隨時可以搬離GAE獨立運作。</p><p>再者<a href="http://www.playframework.org/" target="_blank" rel="noopener">Play!</a>的專案架構和使用方法很接近<a href="http://www.turbogears.org/" target="_blank" rel="noopener">TurboGears</a>、<a href="http://www.rubyonrails.org/" target="_blank" rel="noopener">Django</a>等現代的網頁框架，因此熟悉現代網頁框架的開發者應該能很快地上手。開發的時候可以在本地端開發，而且修改後的結果也能即時自動編譯並顯示，用起來非常接近使用動態語言開發的使用經驗。（<a href="http://www.playframework.org/" target="_blank" rel="noopener">Play!</a>的命令行工具是用Python寫的:)）</p><p><a href="http://www.playframework.org/" target="_blank" rel="noopener">Play!</a> 的另一個好處是有很好的模組（Module）架構。要將網站發佈在<a href="http://code.google.com/appengine/" target="_blank" rel="noopener">Google App Engine</a>上時，透過<a href="http://www.playframework.org/modules/gae" target="_blank" rel="noopener">GAE</a>模組和搭配<a href="http://www.playframework.org/modules/siena" target="_blank" rel="noopener">Siena</a>（提供ORM層）、<a href="http://www.playframework.org/modules/crudsiena" target="_blank" rel="noopener">crudsiena</a>（提供自動Admin管理頁面）模組，可以不被<a href="http://code.google.com/appengine/" target="_blank" rel="noopener">Google App Engine</a>的一堆限制所制約，從而得到完整的開發經驗。</p><p><a href="http://www.playframework.org/" target="_blank" rel="noopener">Play!</a> 的官方網站上有很齊全的<a href="http://www.playframework.org/documentation/" target="_blank" rel="noopener">文件</a>可供參考。所謂的「齊全」到了什麼地步呢？除了簡介、教學、模組介紹之外，甚至還有<a href="http://www.playframework.org/documentation/1.2.2/cheatsheet/commandLine" target="_blank" rel="noopener">cheatsheet</a> !</p><p>要從頭開始建立一個Play網頁程式到發佈在GAE，要做以下6幾點</p><p><span class="Apple-style-span" style="font-size: large;">1. 建立專案</span></p><p>$ play new  [project name]</p><p><span class="Apple-style-span" style="font-size: large;">2. 安裝相關模組</span></p><p>執行</p><p>$ play install gae-版本$ play install siena-版本$ play install crudsiena-版本</p><p><span class="Apple-style-span" style="font-size: large;">3. 修改模組依存關係</span></p><p>進入專案目錄, 修改 conf/dependencies.yml 檔案</p><div class="p1"># Application dependencies</div><div class="p2"></div>> require<span class="s1">:</span><span class="s1">&nbsp; &nbsp; </span>- play -&gt; play [1.2.1,)> &nbsp; &nbsp; - play -&gt; secure> &nbsp; &nbsp; - play -&gt; siena [2.0.0,)> &nbsp; &nbsp; - play -&gt; crudsiena [2.0.0,)> &nbsp; &nbsp; - play -&gt; gae 1.4<div class="p4"><span class="Apple-style-span" style="font-size: large;">4\. 自動檢查模組依存關係</span></div><div class="p4"></div><div class="p4">執行</div><div class="p4"></div><div class="p4">$ play deps</div><div class="p4"></div><div class="p4"><span class="Apple-style-span" style="font-size: large;">5\. 修改GAE相關設定</span></div><div class="p4"></div><div class="p4">根據[GAE](http://www.playframework.org/modules/gae)模組提供的文件做相應的GAE發佈設定（指定要deploy的GAE代號）</div><div class="p4"></div><div class="p4"><span class="Apple-style-span" style="font-size: large;">6\. 發佈</span></div><div class="p4"></div><div class="p4"></div><div class="p4">執行</div><div></div><div>$ play gae:deploy --gae=[app engine java sdk path]</div><div></div><div>如此即完成整套使用[Play!](http://www.playframework.org/)&nbsp; +&nbsp;[Google App Engine](http://code.google.com/appengine/)&nbsp;的配置流程。</div><div></div>Update 2011/7/20: 在Taipei GTUG活動中和大家分享了Play! on GAE的相關經驗，並公開投影片<div id="__ss_8642014" style="width: 425px;">**[Play Framework on Google App Engine](http://www.slideshare.net/gasolin/play-framework-on-google-app-engine "Play Framework on Google App Engine")** <iframe frameborder="0" height="355" marginheight="0" marginwidth="0" scrolling="no" src="http://www.slideshare.net/slideshow/embed_code/8642014" width="425"></iframe> <div style="padding: 5px 0 12px;">View more [presentations](http://www.slideshare.net/) from [gasolin](http://www.slideshare.net/gasolin) </div></div>]]></content>
      
      
        <tags>
            
            <tag> webframework </tag>
            
            <tag> GAE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AttachEmail: 從SD卡中加檔案到Email附件</title>
      <link href="/2011/07/10/AttachEmail-%E5%BE%9ESD%E5%8D%A1%E4%B8%AD%E5%8A%A0%E6%AA%94%E6%A1%88%E5%88%B0Email%E9%99%84%E4%BB%B6/"/>
      <url>/2011/07/10/AttachEmail-%E5%BE%9ESD%E5%8D%A1%E4%B8%AD%E5%8A%A0%E6%AA%94%E6%A1%88%E5%88%B0Email%E9%99%84%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>(不知道為什麼系統沒直接提供這功能)</p><p>昨晚上花了幾個鐘頭做了一版出來。功能非常單一：主要就是從檔案列表裡選擇任一檔案，而所有檔案左側都會有一個迴紋針符號，只要點選項目，就可以把檔案當做 Email 附件，這樣以後SD卡就不用拔來拔去了。</p><p>大家有需要可以到 Android Market 搜尋 AttachEmail 下載。</p><p>Update 2011/7/10:</p><p>新版本的<a href="https://market.android.com/details?id=com.gasolin.android.attachemail" target="_blank" rel="noopener">AttachEmail</a> (&gt;1.5.2)除了可以選擇任意附檔之外，還可以從GMail儲存任意附檔到SD卡中。<a href="https://market.android.com/details?id=com.gasolin.android.attachemail" target="_blank" rel="noopener">AttachEmail Pro</a>版本還支援直接從GMail附加檔案，同時可以設定在AttachEmail中預設顯示的目錄，讓「處理Email附檔」這件事變得更方便。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>對Google關掉台灣Android Market付費App下載的觀察</title>
      <link href="/2011/07/02/%E5%B0%8DGoogle%E9%97%9C%E6%8E%89%E5%8F%B0%E7%81%A3Android-Market%E4%BB%98%E8%B2%BBApp%E4%B8%8B%E8%BC%89%E7%9A%84%E8%A7%80%E5%AF%9F/"/>
      <url>/2011/07/02/%E5%B0%8DGoogle%E9%97%9C%E6%8E%89%E5%8F%B0%E7%81%A3Android-Market%E4%BB%98%E8%B2%BBApp%E4%B8%8B%E8%BC%89%E7%9A%84%E8%A7%80%E5%AF%9F/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;">[![](http://3.bp.blogspot.com/-CDc8XsUKuk4/Tg_dVlGj1TI/AAAAAAAAB6A/j6NixnqDa8k/s1600/Ice-Cream-Sandwich-Yum-300x225.jpg)](http://3.bp.blogspot.com/-CDc8XsUKuk4/Tg_dVlGj1TI/AAAAAAAAB6A/j6NixnqDa8k/s1600/Ice-Cream-Sandwich-Yum-300x225.jpg)</div><div class="separator" style="clear: both; text-align: center;">[圖片來源](http://www.abetterbagofgroceries.com/tag/ice-cream-sandwiches/)</div>今天Google Android Market關掉台灣付費App下載的新聞動靜不小，也有一些相關的討論出來。但不管[法規合不合理](http://ysl-paradise.blogspot.com/2011/06/app.html)，明顯政府短期內都不太可能修法。<p><strong>影響的App類型</strong></p><p>在談這個事件的影響之前，我們可以先界定「退費」（refund）機制的影響範圍。在允許48小時，24小時，15分鐘，或是7天無條件退費的爭議上，有最大影響的是那些「用過即丟」的App（如早期iPhone上的iFart模擬放屁聲程式）和遊戲、內容App。</p><p>對於高品質的應用程式等原本就用不太到退費機制的App來說，影響不大。但這次Google關掉了台灣使用者付費機制，對這些原本用不到退費機制的App也造成了影響。</p><p>「用過即丟」的App價格很便宜，一杯珍奶的價格（$0.99，接近30元台幣）可以讓下載的使用者開心幾分鐘。有數天無條件鑑賞期存在的話，大多數的使用者肯定會在這期間退掉。這確實可以減少使用者覺得「被詐騙」的感覺。因此在這樣的法律下，這類App將沒有生存空間。</p><p>遊戲App方面，大多數移動遊戲的遊玩時間都不長，模式也較簡單。在不耐玩的情況下，允許的退貨時間長短，對這類App的盈利結果也會有很大的影響。</p><p>這幾年內容App（如App電子書）的消費方式都跟著數位音樂走，但數位內容和數位音樂的消費方式還是有些不同。我們會重複地聽音樂，但很少會重複地看同樣的內容。對這類App來說，退貨規則是48小時，24小時，15分鐘，或是7天，就成為很關鍵的問題了。</p><p><strong>影響</strong></p><p>我們了解了受影響App的範圍，那麼在現行狀況下，我們可以觀察看看政府和Google兩方的舉措，會對台灣Android應用程式市場造成的影響。</p><p>消費者</p><p>1. Google把Android Market台灣的付費關掉了，除了無法再看到付費App之外，消費者之前買過的App都無法下載，傷害了消費者對Android Market的信心。有一就有可能有二。之後就算再開啟Market付費功能，消費者在消費前也要再多想想，是不是哪天這種鳥事又再來一次。</p><p>update: 已購買過的程式還是可以透過Web版的Android Market再下載。</p><p>其他市集業者</p><p>2. 在Apple、Google都得照辦的新聞出來，面對大無畏的政府，中華、遠傳等電信商自有的市集是否也得儘快跟進，否則政府也會將鐵腕轉向這些大電信商，用同樣的標準來要求，用100萬連續開罰？</p><ul><li><a href="http://mag.udn.com/mag/digital/storypage.jsp?f_ART_ID=327164" target="_blank" rel="noopener">針對付費App退費 台灣電信三雄正式回應</a></li></ul><p>開發者</p><p>3. 市場是否還存在？開發者是否還願意開發付費版的台灣專用App？</p><p>4. 若Android Market再開放，但要在台灣販售得遵守台灣7天鑑賞期的法規，國外開發者是否願意勾選在台灣開賣他的付費應用程式？</p><p>政府</p><p>5. 台灣政府的反應，為什麼是台北市出面要求和罰金？</p><p>update: 消保官是行政院指派, 隸屬地方政府管轄。因為Google公司登記在台北市，所以由台北市管轄。</p><div></div>相關連結<ul><li><a href="http://mag.udn.com/mag/digital/storypage.jsp?f_MAIN_ID=323&amp;f_SUB_ID=2952&amp;f_ART_ID=326777" target="_blank" rel="noopener">買蘋果App 可試用7天</a></li><li><a href="http://www.cpc.gov.tw/knowledgebase_query/ShowCategoryTree_Query_390.asp?SpecialID=416" target="_blank" rel="noopener">消費者保護法</a></li><li><a href="http://news.pchome.com.tw/public/taipei/20110627/index-13091040001792112601.html" target="_blank" rel="noopener">Google停售付費APP 拒絕遵循臺灣法律 臺北市重罰一百萬</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Taipei GTUG活動簡介</title>
      <link href="/2011/06/02/Taipei-GTUG%E6%B4%BB%E5%8B%95%E7%B0%A1%E4%BB%8B/"/>
      <url>/2011/06/02/Taipei-GTUG%E6%B4%BB%E5%8B%95%E7%B0%A1%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p>今年初接了<a href="taipei-gtug.org">Taipei GTUG</a>活動的Organizer，開始更頻繁地和開發者們相處，並學習如何組織各式<a href="https://sites.google.com/a/taipei-gtug.org/www/meetings/meeting2011" target="_blank" rel="noopener">對開發者有幫助的活動</a>。</p><p><a href="http://www.taipei-gtug.org/" target="_blank" rel="noopener">台北GTUG(Taipei GTUG)</a>組織的全名是「Taipei Google Technique User Group」，為非Google官方的組織。GTUG主要參與者是開發者（developer），討論Google相關技術議題(Web, Mobile)，在<a href="http://www.gtugs.org/" target="_blank" rel="noopener">全世界</a>都有類似的組織。隔週三晚間7:30聚會，每個月盡量安排一場Android（Mobile）相關主題，和一場Web（Chrome, App Engine…）相關主題。所有活動會公告在網站和各種社群網站（<a href="http://twitter.com/#%21/Taipei_GTUG" target="_blank" rel="noopener">Twitter</a>, <a href="http://www.plurk.com/Taipei_GTUG" target="_blank" rel="noopener">Plurk</a>, <a href="http://www.facebook.com/Taipei.GTUG" target="_blank" rel="noopener">Facebook</a>）上。</p><p>在五月<a href="http://www.taipei-gtug.org/events/20110511" target="_blank" rel="noopener">Google IO Extended同樂會活動</a>開始時，我有製作一個Taipei GTUG活動的簡介（英文）來和與會者(和全世界)介紹Taipei GTUG活動。在昨天<a href="http://www.taipei-gtug.org/events/mobile-ad-practice-2011" target="_blank" rel="noopener">Android 應用盈利模式及成功案例</a>活動中，我再將這份活動簡介更新一番，以中文來介紹我們的台北GTUG，並鼓勵大家來參與<a href="http://www.google.com/moderator/?hl=zh-TW#16/e=8d4fd" target="_blank" rel="noopener">Google IO 2011影片分享讀書會</a>活動。</p><p>在北部的開發者們，對Google相關技術有興趣的話，都歡迎查看時間，前來Taipei GTUG和其他開發者聊聊喔:)</p><div style="width:425px" id="__ss_8179794">**[Taipei gtug opening](http://www.slideshare.net/gasolin/taipei-gtug-opening "Taipei gtug opening")** <iframe src="http://www.slideshare.net/slideshow/embed_code/8179794" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe> <div style="padding:5px 0 12px">View more [presentations](http://www.slideshare.net/) from [gasolin](http://www.slideshare.net/gasolin) </div></div>]]></content>
      
      
        <tags>
            
            <tag> GTUG </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[投影片]Google IO 2011回顧 (Android部分)</title>
      <link href="/2011/05/29/%E6%8A%95%E5%BD%B1%E7%89%87-Google-IO-2011%E5%9B%9E%E9%A1%A7-Android%E9%83%A8%E5%88%86/"/>
      <url>/2011/05/29/%E6%8A%95%E5%BD%B1%E7%89%87-Google-IO-2011%E5%9B%9E%E9%A1%A7-Android%E9%83%A8%E5%88%86/</url>
      <content type="html"><![CDATA[<p>今年的 <a href="http://www.google.com/events/io/2011/sessions.html" target="_blank" rel="noopener">Google IO</a>議程中有太多好東西，但是每個議程都是一個鐘頭，對大多數人來說也是個負擔。</p><p>上週六在癮科技主辦的<a href="http://chinese.engadget.com/2011/05/28/x-android-android/" target="_blank" rel="noopener">非手機 Android 聚會</a>上分享了「Google IO 2011回顧」(Android)投影片。從Google IO 2011活動中找出一些我已經看過的有趣內容，在30分鐘之內分享給大家。</p><p>同時也在會場公開了接下來會在<a href="http://www.taipei-gtug.org/" target="_blank" rel="noopener">Taipei-GTUG</a>舉辦的「<a href="http://www.google.com/moderator/?hl=zh-TW#16/e=8d4fd" target="_blank" rel="noopener">Google IO 2011演講分享讀書會（系列）</a>」活動。</p><p>讀書會的目的是希望發起由參加者認領一至數個Google IO中的演講，再用5~1­0分鐘和大家分享精華，讓參與的人可以用更短的時間綜合了解Goo­gle IO的內容。</p><p>歡迎有興趣一起學習的人報名參與喔 😃</p><div style="width:425px" id="__ss_8145303">**[Io2011 recap 20110528](http://www.slideshare.net/gasolin/io2011-recap-20110528 "Io2011 recap 20110528")**<object id="__sse8145303" width="425" height="355"><param name="movie" value="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=io2011recap20110528-110529194942-phpapp01&stripped_title=io2011-recap-20110528&userName=gasolin"><param name="allowFullScreen" value="true"><param name="allowScriptAccess" value="always"><embed name="__sse8145303" src="http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=io2011recap20110528-110529194942-phpapp01&stripped_title=io2011-recap-20110528&userName=gasolin" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="355"></object><div style="padding:5px 0 12px">View more [presentations](http://www.slideshare.net/) from [gasolin](http://www.slideshare.net/gasolin).</div></div>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HoneyComb Highlights</title>
      <link href="/2011/05/14/HoneyComb-Highlights/"/>
      <url>/2011/05/14/HoneyComb-Highlights/</url>
      <content type="html"><![CDATA[<p>在Google I/O 2011大會上，Romain Guy作了「HoneyComb Highlight」演講，把大多數HoneyComb版的新功能都講到了。</p><p>投影片</p><div style="width:425px" id="__ss_7945793">**[Google I/O 2011, Android Honeycomb Highlights](http://www.slideshare.net/romainguy/google-io-2011-android-honeycomb-highlights "Google I/O 2011, Android Honeycomb Highlights")** <iframe src="http://www.slideshare.net/slideshow/embed_code/7945793" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe> <div style="padding:5px 0 12px">View more [presentations](http://www.slideshare.net/) from [Romain Guy](http://www.slideshare.net/romainguy) </div></div>錄影<iframe width="480" height="300" src="http://www.youtube.com/embed/sTx-5CGDvM8" frameborder="0" allowfullscreen></iframe>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>正面迎擊，看 Google I/O 2011 Day1 Keynote 感想</title>
      <link href="/2011/05/10/%E6%AD%A3%E9%9D%A2%E8%BF%8E%E6%93%8A%EF%BC%8C%E7%9C%8B-Google-I-O-2011-Day1-Keynote-%E6%84%9F%E6%83%B3/"/>
      <url>/2011/05/10/%E6%AD%A3%E9%9D%A2%E8%BF%8E%E6%93%8A%EF%BC%8C%E7%9C%8B-Google-I-O-2011-Day1-Keynote-%E6%84%9F%E6%83%B3/</url>
      <content type="html"><![CDATA[<p>看完這次的<a href="http://www.google.com/events/io/2011/index-live.html" target="_blank" rel="noopener">Android I/O Keynote</a>(咦，好像名字不是這個)，Android Market平台除了已推出的應用程式（App）、書籍（Book）之外，現在將提供使用者影片租賃（Movie Rental）、<a href="http://music.google.com/about" target="_blank" rel="noopener">音樂(Music)</a>這兩種線上服務。</p><p>同時Google TV也將接入Android Market。這些努力將對手尚未在iOS平台上開通的服務一次補足，同時Android開發者也首次有了可以向iOS開發者說嘴的優勢（可以開發App for TV）。</p><p>更重要的宣告是<a href="http://developer.android.com/intl/zh-TW/sdk/android-3.1.html" target="_blank" rel="noopener">Android 3.1</a>和<a href="http://developer.android.com/sdk/android-2.3.4.html" target="_blank" rel="noopener">Android 2.3.4</a>的推出，全力支援iOS碰都不碰的<a href="http://developer.android.com/reference/android/hardware/usb/package-summary.html" target="_blank" rel="noopener">USB相關技術</a>。</p><p>首先是支援<a href="http://developer.android.com/reference/android/hardware/usb/UsbDevice.html" target="_blank" rel="noopener">USB Host</a>，讓數位相機可以直接接到平板上，把照片傳進平板。</p><p>再來是支援<a href="http://developer.android.com/reference/android/hardware/usb/UsbAccessory.html" target="_blank" rel="noopener">USB Accesories</a> API，讓周邊設備可以直接透過USB與Android設備連線，與Android設備中的應用程式互動。當Android設備透過USB接上周邊時，會自動列出支援的App或是App的下載連結。</p><p>接著Android@Home Framework則是在USB、網路等周邊的基礎上切入智慧家電領域。</p><p>Google的三螢一雲已經成形，而Google的三螢一雲不僅只侷限在手機、PC、電視、Web上而已，Google的三螢一雲具備著更通用的涵義：<strong>移動、定點、家庭、雲端</strong>。</p><p>對開發者而言，可以用同個系統開發App for Mobile（手機、行動裝置）、App for Tablet（平板）、App for TV（電視）、App for Accesory（周邊）、App for Home（家庭），學習Android系統的吸引力無疑大大地增加。</p><p>看到這次Android 3.1的發佈，我第一次有Android OS開始追上了iOS的感覺。面對這樣的正面迎擊，其他廠商該要擁抱它呢？還是也不落人後地端出什麼好料呢？Google I/O才剛開始，後續值得期待。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>程式設計工藝</title>
      <link href="/2011/04/24/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E5%B7%A5%E8%97%9D/"/>
      <url>/2011/04/24/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E5%B7%A5%E8%97%9D/</url>
      <content type="html"><![CDATA[<blockquote><p>我傾向於將程式設計看做是一種工藝–它需要技巧、手藝、訓練和經驗。它的產品具有一定的功能，並且很漂亮。程式設計還含有藝術元素，它是一個創造性的過程。與這種藝術性結合在一起的，還有對工具和技術的掌握-- 這些是工匠所具備的特徵。–編程創藝</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> digest </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Virtualenv 簡單入門</title>
      <link href="/2011/03/26/Virtualenv-%E7%B0%A1%E5%96%AE%E5%85%A5%E9%96%80/"/>
      <url>/2011/03/26/Virtualenv-%E7%B0%A1%E5%96%AE%E5%85%A5%E9%96%80/</url>
      <content type="html"><![CDATA[<p><strong>功用</strong></p><p>使用 <a href="http://pypi.python.org/pypi/virtualenv" target="_blank" rel="noopener">Virtualenv</a> 可以讓你預先建立一個虛擬環境，在虛擬環境中開發 Python 程式，可以保持 Python path 乾淨，並減少因為機器上需要同時支援不同版本函式庫，造成各函式庫彼此之間相依性的困擾。</p><p>而且使用虛擬環境後，到時要將環境轉移到別台機器上，也減少很多設定上的問題。</p><p><strong>安裝</strong></p><blockquote><p>$ easy_install virtualenv<strong>設定環境</strong></p></blockquote><blockquote><p>$ virtualenv --no-site-packages [dev_place]即建立一個名為 [dev_place] 的資料夾（中括號裡的名稱自行填寫取代）。</p></blockquote><p><strong>切換到虛擬環境</strong></p><p>進入 [dev_place] 目錄，輸入命令：</p><blockquote><p>$ source bin/activate若看到路徑提示前多了個（[dev_place]）符號，即表示已經進入了虛擬環境。</p></blockquote><p>這時我們可以使用預設提供的 easy_install 工具安裝要使用的函式庫、或是安裝各種 Python 程式。</p><p>安裝的函式庫會被放到 [dev_place]/lib/Python[版本]/site-packages/ 目錄中，跟一般的 Python 函式庫配置方式相似。</p><p><strong>離開虛擬環境</strong></p><p>要離開虛擬環境，只需輸入命令：</p><blockquote><p>$ deactivate即可回到預設的命令行狀態。</p></blockquote><p><strong>其他操作</strong></p><p>如果你的電腦上有裝多個 Python 版本，在下 virtualenv 命令時加上「–python=python[版本] 」當作參數，例如建立2.6版的虛擬環境命令為</p><blockquote><p>$ virtualenv --no-site-packages [dev_place] --python=python2.6也可以建立出不同版本的 Python 虛擬環境，讓你可以更容易地在多個 Python 版本間做測試。</p></blockquote><p>其他使用方法可以輸入「virtualenv --help」參考印出的說明。</p><p><strong>Python3</strong></p><p>目前 virtualenv 官方還不支援 Python 3.x, 但是有開發中版本可用，可使用Mercural下載來安裝</p><blockquote><h1>hg clone <a href="https://bitbucket.org/brandon/virtualenv3" target="_blank" rel="noopener">https://bitbucket.org/brandon/virtualenv3</a></h1><h1>cd virtualenv3</h1><h1>python3 <a href="http://setup.py" target="_blank" rel="noopener">setup.py</a> install</h1></blockquote>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>理解Open ID</title>
      <link href="/2011/03/07/%E7%90%86%E8%A7%A3Open-ID/"/>
      <url>/2011/03/07/%E7%90%86%E8%A7%A3Open-ID/</url>
      <content type="html"><![CDATA[<p>Open ID簡而言之，就是在瀏覽到某個網站時，不用在這個網站先註冊帳號，只要透過OpenID機制用自己現成的Yahoo、Google等大網站的帳號登入，就可以開始使用這個網站所提供的個人化服務。而且自己Yahoo、Google等帳號的密碼也不會透露給這個網站知道。讓使用者可以更放心嘗試各種新的網站應用服務。</p><p>在使用者登入這個網站後，這個網站還是可以在自己的資料庫中記錄關於這個使用者的各種訊息。</p><p>對應到現實世界的例子，就好比我們只要持有台灣護照，到日本、加拿大遊玩時免填簽證，就可以進入該國家。只要在該國海關前出示護照，表明我們是來自台灣的遊客，海關確認護照後即准予通行，於是我們就可以進入他們的國家。</p><p>回到網路的世界，舉Google為例，我們也可以查看Google提供的各種外部網站(外國)接取Google帳號(Google護照)來登入的方式</p><p>Third-party web sites and applications can now let visitors sign in using their Google user accounts.</p><p><a href="http://code.google.com/apis/accounts/docs/OpenID.html" target="_blank" rel="noopener">http://code.google.com/apis/accounts/docs/OpenID.html</a></p><p>Facebook Connect 也是使用類似的機制，提供外部網站可以使用Facebook帳號登入，有五億潛在使用者(Facebook國民)可以更容易地使用這個網站(外國)提供的應用服務.<a href="http://www.facebook.com/help/?page=730" target="_blank" rel="noopener">http://www.facebook.com/help/?page=730</a></p><p><a href="http://developers.facebook.com/docs/guides/web/" target="_blank" rel="noopener">http://developers.facebook.com/docs/guides/web/</a></p>]]></content>
      
      
        <tags>
            
            <tag> webframework </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 3.0公布</title>
      <link href="/2011/02/08/Android-3-0%E5%85%AC%E5%B8%83/"/>
      <url>/2011/02/08/Android-3-0%E5%85%AC%E5%B8%83/</url>
      <content type="html"><![CDATA[<p>Android平板快出了，Google在許多不同場合宣告了這個消息。</p><iframe title="YouTube video player" width="640" height="390" src="http://www.youtube.com/embed/RfJuigJebRg" frameborder="0" allowfullscreen></iframe><p>Android 3.0(HoneyComb)引入了部件(Fragment)的概念，讓同一個畫面中可以顯示多個區塊(在同一個Activity中包含多個mini-Activity)。區塊與區塊之間可以做各式互動。要達成直、橫顯示時不同的平版配置方式，只需巧妙地搭配從Android 1.6版引入的多重Layout和Android 3.0版引入的Fragment功能。<a href="http://android-developers.blogspot.com/2011/02/android-30-fragments-api.html" target="_blank" rel="noopener">Google Blog上的文章</a>介紹了實際使用的方法。</p><p>同時Android 3.0平板的「桌面」功能更強大了，各式新型桌面Widget開發也將成為另一個新的亮點。</p><p>製造商們面對iPad龐大的壓力，勢必對Android平板趨之若騖。現在要問的是，開發者們準備好隨之起舞了嗎？</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>白象禮物交換</title>
      <link href="/2010/12/23/%E7%99%BD%E8%B1%A1%E7%A6%AE%E7%89%A9%E4%BA%A4%E6%8F%9B/"/>
      <url>/2010/12/23/%E7%99%BD%E8%B1%A1%E7%A6%AE%E7%89%A9%E4%BA%A4%E6%8F%9B/</url>
      <content type="html"><![CDATA[<blockquote><p>白象禮物的交換派對，所謂的白象禮物, 指的是家中不論新舊, 只要是完好可用的東西, 用禮物袋裝一裝或包裝精美後就可以帶去派對與人交換. 當然一人限量一份禮物。</p><p>交換規則:每個人抽一張號碼牌, 依序選擇一份禮物. 每樣禮物必須當場拆開, 每樣禮物只能被轉手換人兩次. 也就是說, 輪到我時, 我可以任選我前面的人已拆封的禮物(假設這個禮物是第一次轉手換人); 但我後面的人也可以選擇我的禮物, 而成為這份禮的最後擁有者, 因為這次的轉手換人是限制的第二次. 倘使你的禮物被選走了, 你可以馬上再選一份未開封的禮物, 或其他人已拆封的禮物.聖誕節到了同事們要交換禮物。剛開始是想抽籤有點麻煩，於是用 Python 寫了個簡單的 Script 來滿足抽籤的需求：</p></blockquote><blockquote><blockquote><blockquote><blockquote><p>import randomorder = [“alice”, “betty”, “cindy”, “deby”]random.shuffle(order)order[‘deby’, ‘cindy’, ‘alice’, ‘betty’]</p></blockquote></blockquote><blockquote><blockquote><p>random.shuffle(order)order[‘alice’, ‘cindy’, ‘deby’, ‘betty’]這麼一來每次執行 random.shuffle(order) 都可以亂數得到一個順序囉。</p></blockquote></blockquote></blockquote></blockquote><p>不過一旦當活動牽扯到人的話，還是靠真的抽籤比較有趣阿！</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>App Inventor 開放</title>
      <link href="/2010/12/23/App-Inventor-%E9%96%8B%E6%94%BE/"/>
      <url>/2010/12/23/App-Inventor-%E9%96%8B%E6%94%BE/</url>
      <content type="html"><![CDATA[<blockquote><p>當某人發明一套神奇的新程式產生工具，聲稱可以大幅提昇效率。這時有人就會出來說：「應該要先學會如何手動進行，然後才用這個神奇的工具來節省時間。」</p><p>程式產生工具假裝將某些東西抽象化，這和其他所有抽象機制一樣都有漏洞，而唯一能適當處理漏洞的方法，就是弄懂該抽像原理以及所隱藏的東西。所以抽象機制雖然替我們節省了工作的時間，不過，學習的時間是無法省的。– <a href="http://www.books.com.tw/exep/assp.php/gasolin/exep/prod/booksfile.php?item=0010467041" target="_blank" rel="noopener">約耳趣談軟體</a>Google 提出的 Android 拖拉放程式設計工具 <a href="http://appinventor.googlelabs.com/about/" target="_blank" rel="noopener">App Inventor</a> 已經開放使用了。目前版本還有<a href="http://appinventor.googlelabs.com/learn/userfaq.html" target="_blank" rel="noopener">諸多限制</a>，例如做出來的Apk無法上傳到Android Market、無法直接用模擬器而非實機測試等，但已可以作為簡單的程式教學工具。</p></blockquote><p>Android 2.3 版發佈之後，開發工具裡的使用者介面設計工具已經有所進展（但還是很陽春），參照 App Inventor 的開發經驗，明年再來看官方開發工具的時後，也許可以再提昇一些水準。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 2.3 Google 應用程式的改進</title>
      <link href="/2010/12/18/Android-2-3-Google-%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E7%9A%84%E6%94%B9%E9%80%B2/"/>
      <url>/2010/12/18/Android-2-3-Google-%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E7%9A%84%E6%94%B9%E9%80%B2/</url>
      <content type="html"><![CDATA[<p>Android 2.3 除了這些系統層面的改進外，Google 出的應用程式也多有修改，而且都已經放上 Android Market 供舊版本也能直接使用。這次各種應用程式的更新目標都是更貼近桌面端的使用經驗。幸好Google有「Release Early, Release Often」的哲學，我們才不必等到手機商出了新Firmware後才能享受到這些應用程式更新的好處。</p><p>1. <strong>Android Market 更新了</strong>，能查看版本更新、查看相關的應用程式、支援平板，並修改了一些使用條款，現在退款時限從48小時退化到只剩15分鐘。當然，還有台灣的 使用者可以買App，開發者可以賣App。</p><p><object width="640" height="385"><param name="movie" value="http://www.youtube.com/v/S41bPVQJgyY?fs=1&amp;hl=zh_TW"><param name="allowFullScreen" value="true"><param name="allowscriptaccess" value="always"><embed src="http://www.youtube.com/v/S41bPVQJgyY?fs=1&amp;hl=zh_TW" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="640" height="385"></object></p><p>2. <strong><a href="http://googlemobile.blogspot.com/2010/12/youtube-21-app-now-available-on-android.html" target="_blank" rel="noopener">YouTube 更新了</a></strong>。</p><p><object width="640" height="385"><param name="movie" value="http://www.youtube.com/v/6AAFF9PN-WU?fs=1&amp;hl=zh_TW"><param name="allowFullScreen" value="true"><param name="allowscriptaccess" value="always"><embed src="http://www.youtube.com/v/6AAFF9PN-WU?fs=1&amp;hl=zh_TW" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="640" height="385"></object></p><p>3. <strong><a href="http://googlemobile.blogspot.com/2010/12/gmail-for-android-better-priority-inbox.html" target="_blank" rel="noopener">Gmail 更新了</a></strong>，加入 Priority Box 支援</p><p><object width="640" height="385"><param name="movie" value="http://www.youtube.com/v/Ztasj8_gTpI?fs=1&amp;hl=zh_TW"><param name="allowFullScreen" value="true"><param name="allowscriptaccess" value="always"><embed src="http://www.youtube.com/v/Ztasj8_gTpI?fs=1&amp;hl=zh_TW" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="640" height="385"></object></p><p>4. <strong><a href="http://googlemobile.blogspot.com/2010/11/personally-yours-on-go-personalized.html" target="_blank" rel="noopener">Google Maps 更新了</a></strong>，可以為地點打分數。還有斜角3D顯示。</p><p><object width="640" height="385"><param name="movie" value="http://www.youtube.com/v/TAh4yiCzgKw?fs=1&amp;hl=zh_TW"><param name="allowFullScreen" value="true"><param name="allowscriptaccess" value="always"><embed src="http://www.youtube.com/v/TAh4yiCzgKw?fs=1&amp;hl=zh_TW" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="640" height="385"></object></p><p>5. <strong><a href="http://googlemobile.blogspot.com/2010/11/create-and-edit-your-google-docs-on-the.html" target="_blank" rel="noopener">Google Docs 更新了</a></strong>，支援手機線上編輯</p><p><object width="640" height="385"><param name="movie" value="http://www.youtube.com/v/eAr5VoYdVBo?fs=1&amp;hl=zh_TW"><param name="allowFullScreen" value="true"><param name="allowscriptaccess" value="always"><embed src="http://www.youtube.com/v/eAr5VoYdVBo?fs=1&amp;hl=zh_TW" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="640" height="385"></object></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 2.3 釋出</title>
      <link href="/2010/12/12/Android-2-3-%E9%87%8B%E5%87%BA/"/>
      <url>/2010/12/12/Android-2-3-%E9%87%8B%E5%87%BA/</url>
      <content type="html"><![CDATA[<p><object width="640" height="385"><param name="movie" value="http://www.youtube.com/v/Jx3pdWBlZ34?fs=1&amp;hl=zh_TW"><param name="allowFullScreen" value="true"><param name="allowscriptaccess" value="always"><embed src="http://www.youtube.com/v/Jx3pdWBlZ34?fs=1&amp;hl=zh_TW" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="640" height="385"></object></p><p>上週 Google 釋出了 Android 2.3 版 SDK 與開發工具，2.3版新增了SIP協定以支援網路語音通訊;支援更多種感測器(sensor)，並支援了&quot;xlarge&quot;(7吋+)大小的螢幕，讓 Android 系統適用於更多種類的設備。</p><p>開發工具的部分也做了許多更新，在 AVD Manager 的畫面裡，各種函式庫又區分地更細了，而且第一次加入除了 Google 之外的 Third Party API (Samsung Galaxy)。對用的到的開發者來說這是一個進步，也顯示了Android OS確實不只是Google一家在玩而已，而是背後有<a href="http://www.openhandsetalliance.com/" target="_blank" rel="noopener">OHA</a>聯盟廠商的支援。從工程師的角度來看這個安裝工具也越來越正規化（與版本不直接相關的功能都可以拆成不同安裝包）了。但對新手來說卻是越來越不清楚第一次安裝時應該選些什麼來裝。相信如果 ADT 的開發哲學沒有改變的話，這個安裝開發工具過程變得越來越複雜的趨勢會一直持續下去。</p><p>大部分開發工具的修改對使用Eclipse+ADT的開發者來講沒什麼明顯差別，影響比較大的卻是使用命令行來編譯程式的開發者。原本在 tools 資料夾下的命令都轉到 platform-tools 資料夾下，而且編譯 release 版本時預設會使用 <a href="http://proguard.sourceforge.net/" target="_blank" rel="noopener">proguard</a> 來預做程式碼混淆的動作，省下開發者不少功夫。對原本就在使用命令行工具來編譯程式的開發者來說，需要一些修改才能順利編譯。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mercurial 介紹簡報</title>
      <link href="/2010/12/03/Mercurial-%E4%BB%8B%E7%B4%B9%E7%B0%A1%E5%A0%B1/"/>
      <url>/2010/12/03/Mercurial-%E4%BB%8B%E7%B4%B9%E7%B0%A1%E5%A0%B1/</url>
      <content type="html"><![CDATA[<iframe src="https://docs.google.com/present/embed?id=ajkxs9k6pqxr_1104fbg5nwc6" frameborder="0" width="410" height="342"></iframe><p>今天在 TWJUG 做的 Mercurial 簡報</p>]]></content>
      
      
        <tags>
            
            <tag> hg </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>提問的智慧App電子書</title>
      <link href="/2010/11/03/%E6%8F%90%E5%95%8F%E7%9A%84%E6%99%BA%E6%85%A7App%E9%9B%BB%E5%AD%90%E6%9B%B8/"/>
      <url>/2010/11/03/%E6%8F%90%E5%95%8F%E7%9A%84%E6%99%BA%E6%85%A7App%E9%9B%BB%E5%AD%90%E6%9B%B8/</url>
      <content type="html"><![CDATA[<p>「提問的智慧(How To Ask Questions The Smart Way)」是由知名黑客 Eric S. Raymond 所撰寫，被廣泛轉錄，可以很容易地透過Google搜尋到。</p><p>花了一整天把 Eric S. Raymond 的 '提問的智慧’中文版修訂到和<a href="http://www.catb.org/~esr/faqs/smart-questions.html" target="_blank" rel="noopener">原文</a>一樣的 3.6 版(<a href="http://mis.ndhu.edu.tw/docu/question.htm" target="_blank" rel="noopener">上一版</a>正體中文是2001年D.H.Grand翻譯的)，翻譯的過程中也參考了<a href="http://www.beiww.com/doc/oss/smart-questions.html" target="_blank" rel="noopener">簡體中文版</a>的翻譯。</p><p>先做成 Android App, <strike>等有空再來弄個網站放內文以供連結吧…</strike> 網站版文件也<a href="http://code.google.com/p/smartquestions/wiki/Disclaimer" target="_blank" rel="noopener">已放到 GoogleCode</a>。</p><p><a href="http://market.android.com/search?q=pname:com.gasolin.android.smartquestions.tw" target="_blank" rel="noopener">Market 連結</a></p><p><a href="http://qrcode.kaywa.com/img.php?s=8&amp;d=http%3A%2F%2Fmarket.android.com%2Fsearch%3Fq%3Dpname%3Acom.gasolin.android.smartquestions.tw" target="_blank" rel="noopener">QRCode</a></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>從過去遙望未來</title>
      <link href="/2010/10/31/%E5%BE%9E%E9%81%8E%E5%8E%BB%E9%81%99%E6%9C%9B%E6%9C%AA%E4%BE%86/"/>
      <url>/2010/10/31/%E5%BE%9E%E9%81%8E%E5%8E%BB%E9%81%99%E6%9C%9B%E6%9C%AA%E4%BE%86/</url>
      <content type="html"><![CDATA[<blockquote><p>但這是 Internet 對我們未來生活真正的影響嗎？我覺得不是。如果我們著眼於大眾，就會發現真正大的影響還沒有開始。</p><p>如果 Internet 的意義確如 Bill Gates 說的 “Information at your fingertips” (彈指間立得訊息)，我們就該進一步追問大眾平日最多的「訊息行為」是什麼？</p><p>想想看，普通老百姓最常見的「訊息行為」是不是「買東西」和「看電視看報紙」呢？這裡我們才看到一個新技術與生活型態的未來。– 詹宏志, E時代, 1999</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> digest </tag>
            
            <tag> fun </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>改善力和重構</title>
      <link href="/2010/10/29/%E6%94%B9%E5%96%84%E5%8A%9B%E5%92%8C%E9%87%8D%E6%A7%8B/"/>
      <url>/2010/10/29/%E6%94%B9%E5%96%84%E5%8A%9B%E5%92%8C%E9%87%8D%E6%A7%8B/</url>
      <content type="html"><![CDATA[<blockquote><p>豐田採取的是剔除每次到生產線場所發現的浪費，再重新調整佈署的生產方式。剔除浪費使流程更順暢之後，再回到現場去看，又會發現不同的浪費之處。每去一次就設立新的標準以避免浪費，這就是豐田的「改善」方式。</p><p>「浪費會以不同的形態出現。浪費是會進化的。」一旦剔除了浪費之處，它就會以不同的形態再度出現。豐田採行的就是將進化的浪費再次摘除的作法。不斷重複這種過程，就會創造出更好的環境，這就是豐田的「改善」方式。–<a href="http://www.books.com.tw/exep/assp.php/gasolin/exep/prod/booksfile.php?item=0010348197" target="_blank" rel="noopener">規劃力</a>寫程式時做「重構」的目的，和在生產線上做「改善」的目標，不也是一致的嗎？</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> digest </tag>
            
            <tag> coding </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>選戰也進入移動世代</title>
      <link href="/2010/10/11/%E9%81%B8%E6%88%B0%E4%B9%9F%E9%80%B2%E5%85%A5%E7%A7%BB%E5%8B%95%E4%B8%96%E4%BB%A3/"/>
      <url>/2010/10/11/%E9%81%B8%E6%88%B0%E4%B9%9F%E9%80%B2%E5%85%A5%E7%A7%BB%E5%8B%95%E4%B8%96%E4%BB%A3/</url>
      <content type="html"><![CDATA[<p>繼前幾天在 Android Market 上看到某五都候選人的 App，裡面除了候選人簡介、官網新聞、還有參選地的一些吃喝地點分享等等，還算實用。</p><p>在著實被這種宣傳方式驚訝了一番之後，昨日取用某日隨手拿到的一位市議員參選人的面紙宣傳品時，又有了意外發現。</p><p>這份宣傳品不同的地方是，面紙袋背面印有QRCode（！），還一併附上了候選人的Gmail信箱（！！），更精采的是用手機掃瞄QRCode進去後，連到的不是理所當然的候選人個人首頁，而是該候選人的Facebook（！！！），連進去可以看到一些該候選人跑基層的照片和個人感想。</p><p>民國到了100年，基層選舉也正在進化，明天還是很美好阿。</p><p>PS: 為了避免政治口水，請別在此問我是哪幾位候選人，也請不要在這邊吵支持誰的問題。我支持全民最大黨 😄</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>DropBox &amp; SparkleShare</title>
      <link href="/2010/09/27/DropBox-SparkleShare/"/>
      <url>/2010/09/27/DropBox-SparkleShare/</url>
      <content type="html"><![CDATA[<p><a href="http://linuxtoy.org/archives/sparkleshare-beta.html" target="_blank" rel="noopener">http://linuxtoy.org/archives/sparkleshare-beta.html</a></p><p><a href="http://www.dropbox.com/referrals/NTExNTc4ODk5" target="_blank" rel="noopener">DropBox</a>是種結合了本地和雲端, 能改變使用者習慣的重要技術。</p><p><a href="http://www.dropbox.com/referrals/NTExNTc4ODk5" target="_blank" rel="noopener">DropBox</a>讓使用者可以用原本的形式來處理檔案和文件, 只要在各種作業系統上安裝<a href="http://www.dropbox.com/referrals/NTg3MDc3Njk" target="_blank" rel="noopener">DropBox</a>提供的軟體，登入<a href="http://www.dropbox.com/referrals/NTg3MDc3Njk" target="_blank" rel="noopener">DropBox</a>帳號後即會在本地建立一個資料夾。這個資料夾中的所有檔案都會自動同步到<a href="http://www.dropbox.com/referrals/NTExNTc4ODk5" target="_blank" rel="noopener">DropBox</a>伺服器。如果你有多台設備(電腦, iPad, 智慧手機)，並都登入了同一帳號，那麼當資料夾中的任一檔案被更新後，其他台設備很快就也能接收到這些檔案的更新。<a href="http://www.dropbox.com/referrals/NTExNTc4ODk5" target="_blank" rel="noopener">DropBox</a>真正做到了隨處可得。</p><p>很方便的是，不管是對檔案、文件夾改名，或是刪除檔案都難不倒它。如果在其中一台刪除了檔案，其他台的檔案也會一併被刪除。為了解決客戶對誤操作的擔憂，<a href="http://www.dropbox.com/referrals/NTg3MDc3Njk" target="_blank" rel="noopener">DropBox</a>還提供了類似蘋果電腦上的時光回溯(Time Machine)功能(技術上基本就是將檔案操作結合版本控制系統)，若是做了誤操作，可以登入到<a href="http://www.dropbox.com/referrals/NTg3MDc3Njk" target="_blank" rel="noopener">DropBox</a>網站上將上次的誤操作回復到之前狀態，真是非常安心。</p><p>另外，放在<a href="http://www.dropbox.com/referrals/NTExNTc4ODk5" target="_blank" rel="noopener">DropBox</a>檔案夾下的檔案，除了可以像以前的作法用網芳分享給在同個網域下的朋友外，還可以直接將一個資料夾分享給其他同樣有<a href="http://www.dropbox.com/referrals/NTExNTc4ODk5" target="_blank" rel="noopener">DropBox</a>帳號的朋友，真正是天涯若彼鄰。</p><p><a href="http://sparkleshare.org/" target="_blank" rel="noopener">SparkleShare </a>則是它的 open source 替代品，後端使用GIT版本控制系統。</p><p>PS: 大家看了我上面的介紹，可以知道我真的很愛這種東西。因為研究所時我也花過一段時間研究，並發過一篇一樣為解決多台設備間資料同步問題的 paper，而人家真的做出來了 😄</p>]]></content>
      
      
        <tags>
            
            <tag> hg </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>分散式版本控制的合作模式</title>
      <link href="/2010/09/10/%E5%88%86%E6%95%A3%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%9A%84%E5%90%88%E4%BD%9C%E6%A8%A1%E5%BC%8F/"/>
      <url>/2010/09/10/%E5%88%86%E6%95%A3%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%9A%84%E5%90%88%E4%BD%9C%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>傳統的版本控制系統(Version Control System, VCS)只有一台單一的版本庫（repository），所有的版本控制都必須經由這台版本庫主機才能管理。新一代的分散式版本控制系統(Distributed Version Control System, DVCS)如 git, Mercurial 則每份抓下來的 code 都可起到等同於版本庫的作用，使得在離線時做版本控制，並能容易地合併回主版本庫的工作模式成為可能。</p><p>因為分散的特性，也衍生出各種可能的合作模式。git 有 <a href="http://nvie.com/git-model" target="_blank" rel="noopener">A successful Git branching model</a>，Mercurial有 <a href="http://stevelosh.com/blog/2010/02/mercurial-workflows-branch-as-needed/" target="_blank" rel="noopener">Workflows: Branch As Needed</a>, <a href="http://stevelosh.com/blog/2010/05/mercurial-workflows-stable-default/" target="_blank" rel="noopener">Stable &amp; Default</a>, <a href="http://stevelosh.com/blog/2010/06/mercurial-workflows-translation-branches/" target="_blank" rel="noopener">Translation Branches</a> 等方式。</p><p>實際上該採用哪種方式比較好？先看看其他人怎麼做，從中選擇，或是加點創意，找出適合自己團隊使用的方法吧。</p>]]></content>
      
      
        <tags>
            
            <tag> hg </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mercurial, 分支與合併很簡單</title>
      <link href="/2010/09/10/Mercurial-%E5%88%86%E6%94%AF%E8%88%87%E5%90%88%E4%BD%B5%E5%BE%88%E7%B0%A1%E5%96%AE/"/>
      <url>/2010/09/10/Mercurial-%E5%88%86%E6%94%AF%E8%88%87%E5%90%88%E4%BD%B5%E5%BE%88%E7%B0%A1%E5%96%AE/</url>
      <content type="html"><![CDATA[<p><a href="http://mercurial.selenic.com/" target="_blank" rel="noopener">Mercurial(Hg)</a> 一直是我很愛用的版本控制工具。以前自己最常用的用途是拿來取代 <a href="http://subversion.tigris.org/" target="_blank" rel="noopener">svn</a>，單純享受單機/離線使用版本控制系統開發的樂趣。</p><p>要單機使用版本控制系統開發，照著<a href="http://inet6.blogspot.com/2007/04/mercurial-mozilla.html" target="_blank" rel="noopener">水銀分散式版本控制系統的使用概念</a>做就行了。</p><p>最近看了<a href="http://hginit.com/top/" target="_blank" rel="noopener">Hg init</a>和<a href="http://progit.org/book/zh/" target="_blank" rel="noopener">ProGit</a>兩份分別講Hg和Git分散式版本控制的書，裡面都相當推崇「分支(Branch)開發」的概念。所謂「分支開發」，就是將主幹(trunk)保持在穩定可運作的版本（雖然本來就該這麼做），在開發任何新功能時都另建新分支(branch)，開發到一段落之後再合併回主幹。能支援這樣的開發模式，是因為Hg或Git這些分散式版本控制系統做開分支、合併等動作的額外開銷都很低。</p><p>那麼要實際使用時該怎麼做呢？</p><p><strong>開分支</strong></p><p>我有一個名為「ZAKU」（薩克）的目錄，主幹版本代號為3, 現在要實作一個將綠色變成紅色的功能，這時我們可以建立一個新分支來繼續開發這個新功能。分支命令的格式為：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; $ hg branch [branch name]</span><br></pre></td></tr></table></figure><p>因此要建立一個名為「red」的分支，可以使用以下命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; $ hg branch red</span><br><span class="line">&gt; marked working directory as branch red</span><br></pre></td></tr></table></figure><p>這麼一來，之後 commit 的 code 都會進入「red」這個分支了。</p><p><strong>查看狀態</strong></p><p>在 commit 進一些 code 之後（版本代號到13），輸入「hg branchs」命令可以列出所有版本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; $ hg branches</span><br><span class="line">&gt; default                       3:e2287f9031a1 (inactive)</span><br><span class="line">&gt; red                           13:e590de4b0dc9</span><br></pre></td></tr></table></figure><p><strong>切換分支</strong></p><p>在開發新功能的同時，也可能會碰上整個專案共通的bug，以前老派的作法是再 check out 一份主幹的程式碼，然後兩邊修正，現在有了hg, 只要先暫時切換回主幹，把bug修正了再合併回分支（或到時一次把分支合併回主幹）。</p><p>要切換回主幹，輸入「hg update default」即可。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; $ hg up default</span><br><span class="line">&gt; 4 files 已更新, 0 files 已合併, 3 files 已移除, 0 files unresolved</span><br></pre></td></tr></table></figure><p><strong>合併</strong></p><p>當我們把「red」分支中的新功能做好後，可以很容易地將這些修改合併回主幹。</p><p>首先，用上面的方法切換回主幹，然後輸入「hg merge red」，即可將「red」分支中的修改加進主幹。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; $ hg merge red</span><br><span class="line">&gt; 5 files 已更新, 0 files 已合併, 0 files 已移除, 0 files unresolved</span><br><span class="line">&gt; (branch merge, don&apos;t forget to commit)</span><br></pre></td></tr></table></figure><p>合併命令的格式為</p><blockquote><p>hg merge [branch name]合併完後確認沒問題，就將程式碼再 commit 進版本庫吧！</p></blockquote><p>如果只想 push 某 branch 的修改到版本庫，可以使用</p><blockquote><p>hg push --rev [version]命令，這樣只會將與指定版本相關的修改上傳到版本庫。</p></blockquote><p><strong>One more thing</strong></p><p>同樣的方法，我們可以再建立一個分支「horn」來開發長角的功能，然後再將「horn」分支合併回主幹。</p><p>別忘了hg還有提供一個離線網頁瀏覽功能，輸入「hg serve -p 5000」，在瀏覽器上輸入「<a href="http://localhost:5000" target="_blank" rel="noopener">http://localhost:5000</a>」就能看到類似 gitweb 的版本控制訊息網頁。點選左側的「graph」標籤，可以用視覺化的方式看到之前所有分支合併的圖形記錄囉！</p><p>學會分支與合併後，你的開發效率會不會也變成三倍速哩？</p><p>參考資料:</p><ul><li><a href="http://stevelosh.com/blog/2009/08/a-guide-to-branching-in-mercurial/" target="_blank" rel="noopener">http://stevelosh.com/blog/2009/08/a-guide-to-branching-in-mercurial/</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> hg </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Mercurial]多來源更新</title>
      <link href="/2010/09/07/Mercurial-%E5%A4%9A%E4%BE%86%E6%BA%90%E6%9B%B4%E6%96%B0/"/>
      <url>/2010/09/07/Mercurial-%E5%A4%9A%E4%BE%86%E6%BA%90%E6%9B%B4%E6%96%B0/</url>
      <content type="html"><![CDATA[<p>在做完「hg clone」（就如同從 Server 端 Check Out 程式碼）後，除了可以對原 Server 做「hg pull」以更新程式碼之外，也可以多加別台 Server 進列表。</p><p>如原來從 Alice 處「hg clone」下來原始碼，而現在也想要從 Bob 處直接取得他的更新，可以使用</p><blockquote><p>$ hg pull [bob server]命令。</p></blockquote><p>另一個好方法是可以在 .hg/hgrc 中定義額外的 Server 別名(alias)。</p><p>例如原來的 .hg/hgrc 長這樣:</p><blockquote><p>[paths]default = [Alice Server]/[project]我們在其後加入 Bob Server 的別名如下:[paths]default = [Alice Server]/[project]bob = [Bob server]/[project]儲存後，要再從 Bob 處直接取得他的更新，可以使用$ hg pull bob命令來直接取得 bob 的原始碼。分散式版本控制是不是很方便呢 😃</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> hg </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>投影展示Android手機畫面</title>
      <link href="/2010/07/27/%E6%8A%95%E5%BD%B1%E5%B1%95%E7%A4%BAAndroid%E6%89%8B%E6%A9%9F%E7%95%AB%E9%9D%A2/"/>
      <url>/2010/07/27/%E6%8A%95%E5%BD%B1%E5%B1%95%E7%A4%BAAndroid%E6%89%8B%E6%A9%9F%E7%95%AB%E9%9D%A2/</url>
      <content type="html"><![CDATA[<div class="separator" style="clear: both; text-align: center;">[![](http://www.adakoda.com/adakoda/android/asm/ASM2_00_Win.png)](http://www.adakoda.com/adakoda/android/asm/ASM2_00_Win.png)</div>去年寫過一篇[Demo Android Phone through your PC/MAC](http://inet6.blogspot.com/2009/02/demo-your-android-phone-through-your.html)，介紹「DroidEx.jar」這個可以透過電腦螢幕展示Android手機畫面的工具。<p>這次要介紹的是 <a href="http://www.adakoda.com/adakoda/android/asm/" target="_blank" rel="noopener">Android Screen Monitor</a> 這個同類型的工具。</p><p><a href="http://www.adakoda.com/adakoda/android/asm/" target="_blank" rel="noopener">Android Screen Monitor</a> 跨平台，從網頁下載之後，先將手機連上電腦，接著只要輸入</p><blockquote><p>java - jar asm.jar即可於螢幕顯示手機畫面，相當方便喔。</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>書不像書的時代</title>
      <link href="/2010/06/15/%E6%9B%B8%E4%B8%8D%E5%83%8F%E6%9B%B8%E7%9A%84%E6%99%82%E4%BB%A3/"/>
      <url>/2010/06/15/%E6%9B%B8%E4%B8%8D%E5%83%8F%E6%9B%B8%E7%9A%84%E6%99%82%E4%BB%A3/</url>
      <content type="html"><![CDATA[<blockquote><p>紙本書變電子書是很小的事，書變得不像書，才是嚴重的事。-- <a href="http://www.facebook.com/note.php?note_id=434741171281&amp;id=194807678300&amp;ref=mf" target="_blank" rel="noopener">紙本書變電子書是很小的事——詹宏志談數位元出版時代</a></p></blockquote><blockquote><p>假如電子書指的是，一個在特殊的閱讀設備上面呈現我們今天在紙本書上所看到的內容和形式的書，那我會說，電子書正在解決過去的問題而沒有解決未來的問題。使用互聯網這件事都佔用了你很大一部分的時間，這個形式連電子書都沒有辦法解決。所以電子書是在解決過去的問題。取得知識的方式如果已經變了，出版還沒變的話，就會慢慢變得不相干。出版者要解決今天的出版困境，他必須到未來的學習者取得知識的地方去做出版，不能繼續使用現在出版的形式，使自己愈來愈跟這個社會不相干。舉個例子，現在全世界最好的百科全書極可能還是大英百科全書，可是最好有什麼用？它現在跟我們大部分年輕人是不相干的。而我也不覺得現在的年輕人用的是維基百科，真正改變他的行為的是搜索引擎。他是先丟出一個要查的東西，如果維基百科在前三條，就點進去，還沒到維基百科，這個事情就已經決定了。當資訊量愈大的時候，導語和評論的價值就愈高。因為你真的沒辦法判斷，問題不在於沒有而在於太多了，多到你不知道誰好。在我看來未來編輯的工作會很不一樣，會加倍重要。一個社會創作生產量愈大總的來講是好事，你可能會嫌他有很多不好的東西，但是數量跟好東西是有關聯性的。披沙揀金的結果，有這麼大量的垃圾，也會有某一個比例的含金量。容易發表的創作，其實是使得很多可能的創作都會跑出來的重要原因。去瞭解你的朋友，現在的年輕人，取得資訊的行為是怎麼一回事，你可以從那裏看出，有什麼東西是你可以做。你怎麼可以忍受看那麼多東西才找到那麼一點點好東西，應該有人幫我做這個事，對不對？應該有各種有判斷能力的人來幫我做這個事，而我會選擇每次判斷都深得我心的編輯來追隨，編輯也會有他的訴求、專長、分工。我們擋掉了很多不要浪費出版資源的東西；可同時，說不定也擋掉了對社會有衝擊的新創作。</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> digest </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何讓應用程式直接安裝到SD卡執行（2.2）</title>
      <link href="/2010/05/21/%E5%A6%82%E4%BD%95%E8%AE%93%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E7%9B%B4%E6%8E%A5%E5%AE%89%E8%A3%9D%E5%88%B0SD%E5%8D%A1%E5%9F%B7%E8%A1%8C%EF%BC%882-2%EF%BC%89/"/>
      <url>/2010/05/21/%E5%A6%82%E4%BD%95%E8%AE%93%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E7%9B%B4%E6%8E%A5%E5%AE%89%E8%A3%9D%E5%88%B0SD%E5%8D%A1%E5%9F%B7%E8%A1%8C%EF%BC%882-2%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>Android 2.2 中新增了應用程式直接安裝到SD卡執行 (不少人稱這個功能作 App2SD)，要使用這個功能只要在目前程式中做幾個設定：</p><p>1. 專案的 Project Build Target 版本設定為 2.2 (API 8)2. 修改 AndroidManifest 清單</p><p><strong>設定 Project Build Target 版本</strong></p><p>在 Eclipse 專案列表中按右鍵，選取 properties 選項，會彈出設定視窗。在上面選擇左側的 Android 標籤，在右側 Build 欄位勾選「Android 2.2」選項（沒有這選項的請參考 <a href="http://code.google.com/p/androidbmi/wiki/ManageSDK" target="_blank" rel="noopener">管理SDK</a> 來升級SDK），如此一來編譯時才能認得我們接下來在 AndroidManifest 清單中所做的設定。</p><p><strong>修改 AndroidManifest 清單</strong></p><p>在 manifest 標籤中加入一個「android:installLocation」屬性，實際程式碼如下</p><blockquote><p>&lt;manifest xmlns:android=“<a href="http://schemas.android.com/apk/res/android" target="_blank" rel="noopener">http://schemas.android.com/apk/res/android</a>”&gt;package=&quot;<a href="http://com.demo.org" target="_blank" rel="noopener">com.demo.org</a>&quot;android:versionName=“1.0” android:versionCode=&quot;1&quot;<strong>android:installLocation=“preferExternal”</strong>&gt;…<strong>說明</strong></p></blockquote><blockquote><p>android:installLocation=&quot;preferExternal&quot;清單中加入以上宣告後，編譯好的程式仍然可以適用於較低版本的機器，只有在程式安裝到 Android 2.2 版之後的系統上，系統才會自動將這個程式安裝到 SD 卡中。</p></blockquote><p>安裝到SD卡中時程式會預作一次加密，讓只有安裝本程式的機器能存取這個程式，避免了程式可能會輕易被盜拷的疑慮。</p><p>沒有用到 Service、桌面小工具（Widget）、或動態桌布（Live Wallpaper）功能的程式比較適合儲存到SD卡，例如遊戲或 BMI 等小程式。</p><p>因為當機器使用 USB 和電腦連線，將SD卡掛載成磁碟機時，這些儲存在SD卡中執行的程式將會被中斷。</p><p>其他提示請參考 Android <a href="http://developer.android.com/guide/appendix/install-location.html" target="_blank" rel="noopener">官方文件</a>。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 2.2，完全版的Android就應該長這樣</title>
      <link href="/2010/05/21/Android-2-2%EF%BC%8C%E5%AE%8C%E5%85%A8%E7%89%88%E7%9A%84Android%E5%B0%B1%E6%87%89%E8%A9%B2%E9%95%B7%E9%80%99%E6%A8%A3/"/>
      <url>/2010/05/21/Android-2-2%EF%BC%8C%E5%AE%8C%E5%85%A8%E7%89%88%E7%9A%84Android%E5%B0%B1%E6%87%89%E8%A9%B2%E9%95%B7%E9%80%99%E6%A8%A3/</url>
      <content type="html"><![CDATA[<p><object height="385" width="640"><param name="movie" value="http://www.youtube.com/v/yAZYSVr2Bhc&color1=0xb1b1b1&color2=0xd0d0d0&hl=en_US&feature=player_embedded&fs=1"><param name="allowFullScreen" value="true"><param name="allowScriptAccess" value="always"><embed src="http://www.youtube.com/v/yAZYSVr2Bhc&color1=0xb1b1b1&color2=0xd0d0d0&hl=en_US&feature=player_embedded&fs=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="640" height="385"></object></p><p>現在在Google I/O 2010 會場看現場發表會。Froyo 真的是非常高完成度的版本，除了機器OS本身之外，還支援了許多對開發者、對使用者都有利的特性：</p><p>開發者：</p><ul><li><p>新版開發工具支援 Library Project，意思是同時開發試用版/正式版時，終於可以共用多數程式碼和資源檔，而不用完全開兩個專案出來</p></li><li><p>支援 Data Backup API，表示任何應用程式都可以使用 Android Cloud 將程式中的資料記錄到雲端上，換到任何其他台手機上都可以備份回來。</p></li><li><p>允許遠端控制機器</p></li><li><p>多種模式的 Mobile AdSense</p></li><li><p>應用程式可以直接安裝到SD卡，得以在Android上實現大型遊戲等應用</p></li><li><p>Google TV 上也能裝 Android 應用程式。這表示什麼？表示開發Android平台遊戲就能打進電視遊戲市場！<div>使用者</div></p></li><li><p>應用程式/網頁都有2~3倍以上的執行速度</p></li><li><p>應用程式能從SD卡中執行</p></li><li><p>在網頁版Market上點選安裝，在機器上即能自動下載</p></li><li><p>語音辨識功能、桌面搜尋功能更強大</p></li><li><p>有新版本應用程式可以自動從 Market 更新</p></li><li><p>搭載Froyo的設備能直接變成行動 AP (tethering)<div>開發者們又很有事情可以做了 😃</div></p></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>自動偵測螢幕大小和解析度</title>
      <link href="/2010/04/13/%E8%87%AA%E5%8B%95%E5%81%B5%E6%B8%AC%E8%9E%A2%E5%B9%95%E5%A4%A7%E5%B0%8F%E5%92%8C%E8%A7%A3%E6%9E%90%E5%BA%A6/"/>
      <url>/2010/04/13/%E8%87%AA%E5%8B%95%E5%81%B5%E6%B8%AC%E8%9E%A2%E5%B9%95%E5%A4%A7%E5%B0%8F%E5%92%8C%E8%A7%A3%E6%9E%90%E5%BA%A6/</url>
      <content type="html"><![CDATA[<p>在 Android 機器上，螢幕的解析度可以用「螢幕大小」和「螢幕點距」兩個參數來表示。</p><p><strong>一般的方法</strong></p><p>在 Android 1.6 版以後，可以使用 config.screenLayout 語句來判斷螢幕大小</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; Configuration config = getResources().getConfiguration();</span><br><span class="line">&gt; if((config.screenLayout&amp;amp;Configuration.SCREENLAYOUT_SIZE_MASK) == Configuration.SCREENLAYOUT_SIZE_NORMAL)&#123;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>UPDATE 2010/4/14: sam 說 「config = new Configuration()」只會回傳預設的Configuration, 而非當前的Configuration. 找了一下最好是使用 getResources().getConfiguration()</p><p>支援的參數與代碼如下</p><ul><li>Configuration.SCREENLAYOUT_SIZE_UNDEFINED 0</li><li>Configuration.SCREENLAYOUT_SIZE_SMALL 1</li><li>Configuration.SCREENLAYOUT_SIZE_NORMAL 2</li><li>Configuration.SCREENLAYOUT_SIZE_LARGE 3要檢查點距，可以使用 DisplayMetrics 語句來判斷螢幕點距</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; DisplayMetrics dm = new DisplayMetrics();&amp;nbsp;</span><br><span class="line">&gt; getWindowManager().getDefaultDisplay().getMetrics(dm);</span><br><span class="line">&gt; if((dm.densityDpi == dm.DENSITY_HIGH))&#123;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; 支援的參數與代碼如下</span><br></pre></td></tr></table></figure><ul><li>DENSITY_HIGH 240 (dpi)</li><li>DENSITY_MEDIUM 160</li><li>DENSITY_LOW 120</li><li>DENSITY_DEFAULT 160<strong>相容 1.5 以下機型</strong></li></ul><p>根據<a href="http://developer.android.com/resources/dashboard/platform-versions.html" target="_blank" rel="noopener">Android 版本使用圖表</a>，2010年1月時 Android 1.5 市佔率還是接近 1/3，但是這1/3的機器上並無法使用上面的API。</p><p><img src="http://chart.apis.google.com/chart?cht=p&amp;chs=400x250&amp;chd=t:0.3,31.0,47.6,0.7,20.4&amp;chl=Android%201.1%7CAndroid%201.5%7CAndroid%201.6%7CAndroid%202.0%7CAndroid%202.0.1&amp;chco=c4df9b,6fad0c" alt=""></p><p>在 1.5 版上，其實仍然可以用 density 語句來判斷螢幕點距比率</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; DisplayMetrics dm = new DisplayMetrics();&amp;nbsp;</span><br><span class="line">&gt; getWindowManager().getDefaultDisplay().getMetrics(dm);</span><br><span class="line">&gt; if((dm.density &amp;gt;= 1.5))&#123;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>density 的值 1 代表一般點距，1.5 代表高點距，0.75代表低點距。要偵測市面上所有的機器是否是高解析度機型，只要運用以上方法，就可以自動偵測出螢幕大小和點距囉。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>无知者的安全</title>
      <link href="/2010/04/12/%E6%97%A0%E7%9F%A5%E8%80%85%E7%9A%84%E5%AE%89%E5%85%A8/"/>
      <url>/2010/04/12/%E6%97%A0%E7%9F%A5%E8%80%85%E7%9A%84%E5%AE%89%E5%85%A8/</url>
      <content type="html"><![CDATA[<blockquote><p>买书时，你不只是为那本书付费，也是在为那些有可能被退回和销毁的书付费无论出版商做不做电子书，他们所拥有的内容的数字版已经存在于网上了。有的是通过扫描＋文字识别技术制作的，而大部分热门书则是网友合力誊抄的。尽管 DRM 的初衷在于保护老板们的权利，防止完美的数字拷贝被非法传播，但实际上它对于盗版毫无作用。每一个人们需要的数字媒体文件都会有人免费供应，不管是通过破解 DRM，还是拷贝未受 DRM 保护的文件，还是从未受保护的类比拷贝重新合成一份数字版本。DRM 唯一的作用就是令合法消费数字媒体的用户感到郁闷，同时遏制了方兴未艾的数字发行市场。为数字媒体文件设置 DRM 是一种在数学、技术和智力上都已经破产的做法。它完全达不到其防止盗版的目的，倒是会带来相当多的负面效果：限制消费者对其通过合法渠道购买的内容所拥有的合法权利，并动辄以民事惩罚或刑事起诉相威胁。按照成本和需求定价是好的，但这个成本和需求应该是你所卖的实际产品的成本和需求，而不是以另外一种成本和需求完全不一样的产品为基准！</p><p>这种做法是不合逻辑的，这不是在卖电子书，而是在确保电子书的销售不影响精装本纸书的销量。–from <a href="http://apple4.us/2010/04/future-reading-siracusa-ebook.html" target="_blank" rel="noopener">[阅读的未来] 电子书的前世今生（上）</a>, <a href="http://apple4.us/2010/04/future-reading-siracusa-ebook-2.html" target="_blank" rel="noopener">下</a></p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> digest </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>自由軟體授權</title>
      <link href="/2010/03/24/%E8%87%AA%E7%94%B1%E8%BB%9F%E9%AB%94%E6%8E%88%E6%AC%8A/"/>
      <url>/2010/03/24/%E8%87%AA%E7%94%B1%E8%BB%9F%E9%AB%94%E6%8E%88%E6%AC%8A/</url>
      <content type="html"><![CDATA[<p>自由軟體授權方式一直是讓許多工程師很困擾的事，OSSF 有提供 <a href="http://swan.iis.sinica.edu.tw/LicenseWizard/index.htm" target="_blank" rel="noopener">License Wizard</a>（授權精靈）這個網頁工具，可以很直觀的查看大家所關心的項目，例如再次散布程式時是否必須提供原始碼等。</p><p>另外有一個類似的是創用CC(Creative Commons)也提供了相似的<a href="http://creativecommons.org.tw/static/choose/license/licwiz" target="_blank" rel="noopener">創用CC授權精靈</a>，在發表文章/圖片/影音到網路上時可以使用。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Android 免費+廣告營利模式</title>
      <link href="/2010/03/02/Android-%E5%85%8D%E8%B2%BB-%E5%BB%A3%E5%91%8A%E7%87%9F%E5%88%A9%E6%A8%A1%E5%BC%8F/"/>
      <url>/2010/03/02/Android-%E5%85%8D%E8%B2%BB-%E5%BB%A3%E5%91%8A%E7%87%9F%E5%88%A9%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>一篇經驗分享文章，分享 Android 上使用 AdMob 廣告營利的經驗與注意事項<a href="http://www.programmer.com.cn/2038/" target="_blank" rel="noopener">2010世界杯，我的Android之旅</a> 蠻不錯的</p><p>另一篇<a href="http://www.programmer.com.cn/2047/" target="_blank" rel="noopener">移动应用排名与开发者的机会</a>亦有可觀</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TAT桌面</title>
      <link href="/2010/02/21/TAT%E6%A1%8C%E9%9D%A2/"/>
      <url>/2010/02/21/TAT%E6%A1%8C%E9%9D%A2/</url>
      <content type="html"><![CDATA[<p>每天使用的桌面需不需要這麼絢麗哩？</p><p><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/bOGmnnGpoqg&hl=zh_TW&fs=1&"><param name="allowFullScreen" value="true"><param name="allowscriptaccess" value="always"><embed src="http://www.youtube.com/v/bOGmnnGpoqg&hl=zh_TW&fs=1&" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="344"></object></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Demo Android Phone through your PC/MAC</title>
      <link href="/2010/02/06/Demo-Android-Phone-through-your-PC-MAC/"/>
      <url>/2010/02/06/Demo-Android-Phone-through-your-PC-MAC/</url>
      <content type="html"><![CDATA[<p><a href="http://www.elmousa.com/images/p_p100n.gif" target="_blank" rel="noopener"><img src="http://www.elmousa.com/images/p_p100n.gif" alt=""></a></p><p><span style="font-weight: bold;">Situation:</span></p><p>I have to demo my Android Phone screen but I don’t have a device projector.<span style="font-weight: bold;">Solution:</span></p><p>Prerequisite:</p><p>Download <a href="http://groups.google.com/group/cw-android/web/DroidEx.jar" target="_blank" rel="noopener">DroidEx.jar</a></p><p>Do:</p><p>1. Connect Phone to your PC/MAC2. Open Eclipse3. Enter your android_sdk/tool folder, and type the following command:</p><blockquote><p>$ java -cp DroidEx.jar:lib/ddmlib.jar com.commonsware.droidex.DroidEx</p></blockquote><p>Done!</p><p>Ref:</p><ul><li><a href="http://androidguys.com/?p=3519" target="_blank" rel="noopener">http://androidguys.com/?p=3519</a></li><li><a href="http://groups.google.com/group/cw-android/browse_thread/thread/d37cac83a2e2476b" target="_blank" rel="noopener">http://groups.google.com/group/cw-android/browse_thread/thread/d37cac83a2e2476b</a>Another similar tool: <a href="http://www.adakoda.com/adakoda/android/asm/" target="_blank" rel="noopener">Android Screen Monitor</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GoogleCode &amp; Mercurial 版本控制介紹</title>
      <link href="/2010/02/03/GoogleCode-Mercurial-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E4%BB%8B%E7%B4%B9/"/>
      <url>/2010/02/03/GoogleCode-Mercurial-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E4%BB%8B%E7%B4%B9/</url>
      <content type="html"><![CDATA[<p>今天在<a href="http://www.taipei-gtug.org/" target="_blank" rel="noopener">台北 GTUG</a> 講「GoogleCode &amp; Mercurial 版本控制介紹」。</p><iframe src="http://docs.google.com/present/embed?id=ajkxs9k6pqxr_10304swnqvgs" frameborder="0" width="410" height="342"></iframe>]]></content>
      
      
        <tags>
            
            <tag> hg </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>分散式版本控制系統大亂鬥</title>
      <link href="/2010/01/19/%E5%88%86%E6%95%A3%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%B5%B1%E5%A4%A7%E4%BA%82%E9%AC%A5/"/>
      <url>/2010/01/19/%E5%88%86%E6%95%A3%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%B5%B1%E5%A4%A7%E4%BA%82%E9%AC%A5/</url>
      <content type="html"><![CDATA[<p>讀到 <a href="http://ldn.linuxfoundation.org/article/dvcs-round-one-system-rule-them-all-part-1" target="_blank" rel="noopener">DVCS Round-Up: One System to Rule Them All?</a> 記錄一下。（還有<a href="http://ldn.linuxfoundation.org/article/dvcs-roundup-one-system-rule-them-all-part-2" target="_blank" rel="noopener">Part II</a>、<a href="http://ldn.linuxfoundation.org/article/dvcs-round-one-system-rule-them-all-part-3" target="_blank" rel="noopener">Part III</a>）這麼長的文章在一般狀況下實在沒什麼耐心看下去。還好 Mac 上的 Text-To-Speech 功能做的非常好用，把預設的語速調快，並設定快速鍵(我設成 Command+~)後，讀一篇長文其實花不了幾分鐘。</p><p>現在最常用的版本控制系統應該是 svn、hg、git 三種。svn(Subversion)、hg(Mercurial) 是自己平時會使用的版本控制系統，由於 hg 跟 svn 的命令幾乎相同，轉換時的學習曲線相當平緩，都是相當方便的工具。<a href="http://code.google.com/hosting/" target="_blank" rel="noopener">google code</a> 剛好也是支援這兩種。git 則是開發 linux 系統時的常用的工具。</p>]]></content>
      
      
        <tags>
            
            <tag> hg </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>甜點師父</title>
      <link href="/2010/01/11/%E7%94%9C%E9%BB%9E%E5%B8%AB%E7%88%B6/"/>
      <url>/2010/01/11/%E7%94%9C%E9%BB%9E%E5%B8%AB%E7%88%B6/</url>
      <content type="html"><![CDATA[<p><a href="http://1.bp.blogspot.com/_2xGPUuRo1sg/S0rVvu9eF2I/AAAAAAAABS4/LqOW5m0ghFk/s1600-h/image.jpeg" target="_blank" rel="noopener"><img src="http://1.bp.blogspot.com/_2xGPUuRo1sg/S0rVvu9eF2I/AAAAAAAABS4/LqOW5m0ghFk/s320/image.jpeg" alt=""></a>蛋糕賣完賣焦糖布丁，書一年改了三版，真是太瘋狂啦！</p><p>當初寫作這本書的目標，就是成為學習 Android 基礎的第一本入門書，我想我有做到最好。對我來說，每個讀者當下拿到書可能只會看一遍。如果看到的內容與新版 Android 有所差距，雖然可以很容易歸因於 Android 改版太快，但我覺得作者也應該負上責任。</p><p>Android 自 1.6 版後，引入了新的 SDK 工具架構，讓整個版本升級更容易。同時因為升級容易，Android 的改版也變得更快速（現在幾乎是一個月出一個新版本），這讓寫作入門書的挑戰變得更大。這次針對 Android 1.6、2.0 之後所引進開發工具新架構的大改版，讓新讀者入門時更順暢、也讓舊讀者能順利熟悉新版 Android 環境，並有足夠知識去使用各種 2.x 版的後續版本更新。</p><p>這個版本加入 SDK 開發工具介紹，說明 Android 各版本與開發工具之間的關係；解釋了多種解析度機種的區別與開發/測試方式。同時因為書籍範例的完成度很高了，也將各章的範例操作完全獨立開來，每章都附有可直接對照進度的程式碼，更易於新手入門時對照學習。</p><p>期望在新的一年裡，可以騰出手來，好好研究一些進階的技術，繼續與大家分享。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nexus One 操作影片</title>
      <link href="/2010/01/05/Nexus-One-%E6%93%8D%E4%BD%9C%E5%BD%B1%E7%89%87/"/>
      <url>/2010/01/05/Nexus-One-%E6%93%8D%E4%BD%9C%E5%BD%B1%E7%89%87/</url>
      <content type="html"><![CDATA[<p><object height="344" width="425"><param name="movie" value="http://www.youtube.com/v/1CJFdG-MARw&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;hl=en_US&amp;feature=player_embedded&amp;fs=1"><param name="allowFullScreen" value="true"><param name="allowScriptAccess" value="always"><embed src="http://www.youtube.com/v/1CJFdG-MARw&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;hl=en_US&amp;feature=player_embedded&amp;fs=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" height="344" width="425"></object></p><div></div><div>看起來確實很順暢<p>還有支援 Flash 10 的影片</p><p><object height="340" width="560"><param name="movie" value="http://www.youtube.com/v/vlWOocHwcLo&hl=zh_TW&fs=1&"><param name="allowFullScreen" value="true"><param name="allowscriptaccess" value="always"><embed src="http://www.youtube.com/v/vlWOocHwcLo&hl=zh_TW&fs=1&" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="560" height="340"></object></p></div>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Invent Your Own Computer Games with Python</title>
      <link href="/2010/01/04/Invent-Your-Own-Computer-Games-with-Python/"/>
      <url>/2010/01/04/Invent-Your-Own-Computer-Games-with-Python/</url>
      <content type="html"><![CDATA[<p>電子書</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Chrome OS 公開原始碼</title>
      <link href="/2009/11/25/Chrome-OS-%E5%85%AC%E9%96%8B%E5%8E%9F%E5%A7%8B%E7%A2%BC/"/>
      <url>/2009/11/25/Chrome-OS-%E5%85%AC%E9%96%8B%E5%8E%9F%E5%A7%8B%E7%A2%BC/</url>
      <content type="html"><![CDATA[<p><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/ANMrzw7JFzA&amp;rel=0&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;feature=player_embedded&amp;fs=1"><param name="allowFullScreen" value="true"><param name="allowScriptAccess" value="always"><embed src="http://www.youtube.com/v/ANMrzw7JFzA&amp;rel=0&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;feature=player_embedded&amp;fs=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="425" height="344"></object></p><div>雖然有一堆文件或介紹影片，但再怎麼口沫橫飛，還是不如看上一段 Chrome OS 實際操作影片來的直覺。</div><div></div><div>總而言之，對專業工作者（繪圖、Coding、玩家）來說，Chrome OS 並不是理想的系統，但看DEMO對一般使用來說，上網聊天種菜儘管夠用了。</div><div><div>我看到 Chrome OS 的幾個重點在<ul><li>Thin Client</li><li>2 partitions for the root file system</li><li>Web Apps + Local Media Player<div><strong>Thin Client</strong></div><div>Chrome OS 真的把所有 OS 中常見的東西都拿掉了。</div><div>桌面基本上就是個 Chrome 瀏覽器。</div><div>但也可以切換桌面，切換桌面就是切換帶有不同頁籤的 Chrome 瀏覽器。</div><div><img src="http://sites.google.com/a/chromium.org/dev/_/rsrc/1258650210340/chromium-os/chromiumos-design-docs/software-architecture/overviewpng" alt=""></div></li></ul></div><div></div><div>**2 partitions for the root file system**</div><div>2個可置換的 root file system 是高階嵌入式系統中常見的配置，有了這樣的備援方式，OS 基本上就很難更新失敗，更新失敗了也可以救回來。</div><div></div><div>**Web Apps + Local Media Player**</div><div>除了閉著眼都猜的到的 Google Gmail/Doc 之外，也內建了 Notes/Tasks Panel。玩遊戲靠 Flash，播SD 卡/線上的 MP3/影片則可以呼叫系統提供的播放工具。有 Local Media Player 至少沒連網路時也不會太糟。</div><div></div><div>對了，登入時一定得用 Google 帳號密碼，登入後使用各種 Google 服務時就不用再登入一次。這種作法有沒必要，可能得再深入點實際使用過才知道。如果我是詐騙集團，現在就趕緊來釋出一版 Chrome OS 下載版，相信可以偷到很多 Gmail 帳號 ;)</div><div></div><div>如果要寫 Chrome OS 上層的應用程式，只能用 HTML5、Javascript、Flash 這些工具，來撰寫網站或是 Chrome Extension。</div><div>![](http://sites.google.com/a/chromium.org/dev/_/rsrc/1258650212610/chromium-os/chromiumos-design-docs/software-architecture/chromepng)</div><div></div><div><div>[Chromium](http://sites.google.com/a/chromium.org/dev/chromium-os/chromiumos-design-docs) 是 Chrome OS 跟 Chrome 的開源專案。</div><div>目前唯一在這個 OS 上開發程式的方式，是透過類似 Firefox Extension 的瀏覽器外掛套件方式達成。</div><div></div></div><div>一些連結實在是不太好找，順便列在此:</div><div><ul><li><a href="http://sites.google.com/a/chromium.org/dev/chromium-os/discussion-groups" target="_blank" rel="noopener">Chrome OS 相關的討論群組</a></li><li><a href="http://code.google.com/chrome/extensions/index.html" target="_blank" rel="noopener">Chrome Extension 開發文件</a></li></ul></div></div>]]></content>
      
      
        <tags>
            
            <tag> chromeos </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 集市大亂鬥</title>
      <link href="/2009/11/20/Android-%E9%9B%86%E5%B8%82%E5%A4%A7%E4%BA%82%E9%AC%A5/"/>
      <url>/2009/11/20/Android-%E9%9B%86%E5%B8%82%E5%A4%A7%E4%BA%82%E9%AC%A5/</url>
      <content type="html"><![CDATA[<blockquote><p>是什麼 Market 並不太重要。使用者在哪裡，開發者就在哪裡。談到 Android Market，非北美/西歐的開發者都有很多意見，主要焦點都集中在能不能放付費軟體上。這點對各 Android 集市皆然。前陣子開始整理了一個<a href="http://code.google.com/p/androidbmi/wiki/ShanzaiMarket" target="_blank" rel="noopener">已公開的各家 Market 一覽表</a>。開發者把應用軟體寫出來了，該選擇放在哪些 Market 上頭呢?</p></blockquote><p><span style="font-weight: bold;">寫應用軟體的目的</span></p><p>開發者開發免費應用程式無非是為了以下幾種目的：</p><ol><li><p>自己要使用</p></li><li><p>增加經驗值(練功)</p></li><li><p>提高名聲/打知名度</p></li><li><p>靠廣告賺錢</p></li><li><p>靠付費版賺錢</p></li></ol><p>在此暫時不分析付費軟體的部份，因為目前還沒有任何一家提供。</p><p>這篇只就免費軟體來談。免費軟體該發佈到哪些 Market 上頭呢?</p><p><span style="font-weight: bold;">殘酷的答案</span></p><p>老實說寫了免費軟體，經過思考之後，我只會丟到 Android Market。</p><p>理由如下:</p><p>以前面寫應用軟體的目的來分析：</p><ul><li><p>自己要使用目前手邊還沒有不預裝 Android Market 的機子。對其他 Market 的需求並不大。</p></li><li><p>增加經驗值(練功)放到哪個 Market 上一樣都是練功。Android Market 背後有 G 社備援，提供網頁管理介面、使用者評論等等，雖然不完美，但至少可以和使用者取得互動。目前大部分其他的 Market 並無提供同級的網頁管理介面。有的 Market 還得自己四處申請、填寫一堆文件、截圖，各 Market 審核後還有可能會退你件，弄得跟到奴隸銀行求職一樣。寫免費軟體的開發者難道是為了得到這樣的經驗值？</p></li><li><p>提高名聲/打知名度</p></li></ul><p>發佈到各家 Market 的下載量，可能還沒有 Android Market 上的 1/100（這是經過美化 n 倍後的數據，請原諒我就是這麼直）</p><ul><li>靠廣告賺錢參考上一點，發到各論壇去，下載數可能也會比在一些 Market 上高。要勤勞到處貼我建議去貼論壇或 PTT。</li></ul><p>以上四點都是 False Impact 的，各 Market 集市的擁有者們看了可能會很沮喪。但其實你們只剩下一個吸引開發者將程式放到自己 Market 的方式：</p><ul><li>靠付費版賺錢各家集市算盤打的精，想拿免費軟體開路，吸引使用者造訪的司馬昭之心再明顯不過。除了電信商推的 Market 之外，其他的 Market 要取得開發者/開發商青睞，自動奉上免費軟體更難。開發者不可能永遠靠佛心來支撐，沒飯吃還是會餓死的。國內哪個 Market 先能收費，對是否能帶動免費軟體進來，衝高軟體數量還是很關鍵的。</li></ul><p>至於國內最後哪些個 Market 會繼續存活，其實只要比較兩件事：</p><p>1. 人潮2. 哪個 Market 能放付費軟體</p><p>我相信沒有回報，只有付出的關係是無法長久的。</p><p>只要誰先推出拆帳合理的付費機制，相信開發者還是會趨之若騖。</p><p>眾家 Market：加油，好嗎？<span style="font-weight: bold;"></span></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>支援不同解析度的 Android Market</title>
      <link href="/2009/11/17/%E6%94%AF%E6%8F%B4%E4%B8%8D%E5%90%8C%E8%A7%A3%E6%9E%90%E5%BA%A6%E7%9A%84-Android-Market/"/>
      <url>/2009/11/17/%E6%94%AF%E6%8F%B4%E4%B8%8D%E5%90%8C%E8%A7%A3%E6%9E%90%E5%BA%A6%E7%9A%84-Android-Market/</url>
      <content type="html"><![CDATA[<p>本來市面上 Android 相關機種一律都是 480<em>320 解析度，在 <a href="http://developer.android.com/intl/en/sdk/android-1.6.html" target="_blank" rel="noopener">Android 1.6</a> 發佈後，也正式發售支援了其他使用不同解析度的機種，例如 QVGA(320</em>240) 或 WVGA(800*480)。</p><p>當然在不同的解析度下，畫面顯示上多少有些不同。為了避免使用者裝到不適合解析度的程式而引發使用上的混亂，Android 1.6 在 AndroidManifest 清單中引入了「supports-screens」宣告。</p><p>一般來說要支援各種解析度，可以在編譯前先將編譯 Target 選為 1.6（專案名&gt;右鍵&gt;Properties&gt;Android&gt;Android 1.6），並在 AndroidManifest 清單中加入如下設定：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[supports-screens </span><br><span class="line">    android:largeScreens=&quot;true&quot; </span><br><span class="line">    android:normalScreens=&quot;true&quot; </span><br><span class="line">    android:smallScreens=&quot;true&quot; </span><br><span class="line">    android:anyDensity=&quot;false&quot;/]</span><br></pre></td></tr></table></figure><p>「normalScreens」代表的是一般解析度（如 G1, Hero），「smallScreens」代表的是較低解析度（如 Tatoo）。</p><p>現在將程式發佈到 Android Market 時若沒做以上設定，你寫的程式將不會顯示在 QVGA/WVGA 機器的 Market 中。<div></div></p><div>那麼其他使用奇怪解析度的設備哩？（例如最近發表的某台 WQVGA 機器...）反正上面也沒有 Android Market, 就留給打算支援這些設備的開發者多傷一份腦筋啦.</div><div></div><div></div><div>PS: 將 Target 設為 1.6 跟在 AndroidManifest 清單中設定 minSdkVersion 最低相容版本並不衝突，只要 minSdkVersion 維持不變，低於 1.6 版的機器還是可以使用你的程式。</div><p>update: 事實上「smallScreens」代表的是小螢幕，「normalScreens」是一般螢幕，「largeScreens」當然是大螢幕。一般三者的分界點大概在3吋跟4吋。所以 Tattoo (2.8&quot;) 被歸在「smallScreens」範疇。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>網路模擬器大亂鬥</title>
      <link href="/2009/11/09/%E7%B6%B2%E8%B7%AF%E6%A8%A1%E6%93%AC%E5%99%A8%E5%A4%A7%E4%BA%82%E9%AC%A5/"/>
      <url>/2009/11/09/%E7%B6%B2%E8%B7%AF%E6%A8%A1%E6%93%AC%E5%99%A8%E5%A4%A7%E4%BA%82%E9%AC%A5/</url>
      <content type="html"><![CDATA[<p>網路模擬界的 M01-like 開箱文 <a href="http://www.cs.wustl.edu/~jain/cse567-08/ftp/simtools/index.html" target="_blank" rel="noopener">A Survey of Network Simulation Tools: Current Status and Future Developments</a></p><p><a href="http://searun.javaeye.com/blog/433681" target="_blank" rel="noopener">對岸網友的心得</a></p>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
            <tag> NS2 </tag>
            
            <tag> network </tag>
            
            <tag> NS3 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>簡體版出版</title>
      <link href="/2009/11/06/%E7%B0%A1%E9%AB%94%E7%89%88%E5%87%BA%E7%89%88/"/>
      <url>/2009/11/06/%E7%B0%A1%E9%AB%94%E7%89%88%E5%87%BA%E7%89%88/</url>
      <content type="html"><![CDATA[<p><a href="http://www.anobii.com/books/Google_Android%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/9787115213945/0160f479e767f835fd/" title="More about Google Android开发入门指南" target="_blank" rel="noopener"><img src="http://image.anobii.com/anobi/image_book.php?type=4&amp;item_id=0160f479e767f835fd&amp;time=1257526138" alt="More about Google Android开发入门指南" title="More about Google Android开发入门指南"></a></p><p>終於簡體版也出版了。</p><p>對應的是繁體的第二版（Android 1.5）。定價 45 RMB，換算回來還不到 200 NT，真是便宜呀。</p><p>希望大陸的朋友們也會喜歡囉 😃</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Eclair (Android 2.0) 發佈</title>
      <link href="/2009/10/27/Eclair-Android-2-0-%E7%99%BC%E4%BD%88/"/>
      <url>/2009/10/27/Eclair-Android-2-0-%E7%99%BC%E4%BD%88/</url>
      <content type="html"><![CDATA[<p><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/opZ69P-0Jbc&color1=0xb1b1b1&color2=0xcfcfcf&hl=en&feature=player_embedded&fs=1"><param name="allowFullScreen" value="true"><param name="allowScriptAccess" value="always"><embed src="http://www.youtube.com/v/opZ69P-0Jbc&color1=0xb1b1b1&color2=0xcfcfcf&hl=en&feature=player_embedded&fs=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="425" height="344"></object></p><p>想不到才過了一個月，Android 2.0 這麼快就出來了。對開發者來說，主要的變化是開放了原本的一些 internal API，包含 Bluetooth、多點（至多3點）觸控(MotionEvent)、AccountManager、Sync Adapter、Dock（底座）、並強化相機 API、瀏覽器支援 HTML5、支援更多種解析度機器…等。</p><p>除了大家期待已久的藍芽與多點觸控，開放 AccountManager、Sync Adapter、Dock這些 API 表示 Android 系統已經準備好讓開發者們能創造與 Google 以外的網路服務、與其他設備更加緊密結合的應用程式。真是很期待開發者們能怎麼運用這個強大的系統 😃</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OCR 應用</title>
      <link href="/2009/09/22/OCR-%E6%87%89%E7%94%A8/"/>
      <url>/2009/09/22/OCR-%E6%87%89%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/-73jqb0EMA4&amp;rel=0&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;hl=en&amp;feature=player_embedded&amp;fs=1"><param name="allowFullScreen" value="true"><param name="allowScriptAccess" value="always"><embed src="http://www.youtube.com/v/-73jqb0EMA4&amp;rel=0&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;hl=en&amp;feature=player_embedded&amp;fs=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="425" height="344"></object></p><p><a href="http://www.bitquill.net/trac/wiki/Android/OCR" target="_blank" rel="noopener">WordSnap OCR</a></p><p><object width="560" height="340"><param name="movie" value="http://www.youtube.com/v/1gj0GWWaSOg&hl=zh_TW&fs=1&"><param name="allowFullScreen" value="true"><param name="allowscriptaccess" value="always"><embed src="http://www.youtube.com/v/1gj0GWWaSOg&hl=zh_TW&fs=1&" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="560" height="340"></object></p><p><a href="http://www.itwizard.ro/" target="_blank" rel="noopener">Mezzofanti </a></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Donut (Android 1.6) 發佈</title>
      <link href="/2009/09/15/Donut-Android-1-6-%E7%99%BC%E4%BD%88/"/>
      <url>/2009/09/15/Donut-Android-1-6-%E7%99%BC%E4%BD%88/</url>
      <content type="html"><![CDATA[<p><a href="http://developer.android.com/" target="_blank" rel="noopener">Donut (Android 1.6) 發佈了</a>，補完了 Android 1.x 應該有的功能，支援更多的機器。</p><p><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/MBRFkLKRwFw&color1=0x3a3a3a&color2=0x999999&hl=en&feature=player_embedded&fs=1"><param name="allowFullScreen" value="true"><param name="allowScriptAccess" value="always"><embed src="http://www.youtube.com/v/MBRFkLKRwFw&color1=0x3a3a3a&color2=0x999999&hl=en&feature=player_embedded&fs=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="425" height="344"></object></p><p>隨著 Eclipse 3.5、Android 1.6 跟 ADT 0.9.3 推出，到底值不值得再次改版<a href="http://www.books.com.tw/exep/assp.php/gasolin/exep/prod/booksfile.php?item=0010442861" target="_blank" rel="noopener">我寫的入門書</a>呢?</p><p>如我在第二版序中所言的，Android 改版相當快，所有進階的內容很有可能變動，唯有<a href="http://developer.android.com/intl/de/sdk/api_diff/4/changes.html" target="_blank" rel="noopener">基本入門所需的知識並沒有改變太多</a>。因此沒有意外的話，應該會等到 Android 2.0 之後才考慮再改版。</p><p>1.6 新版本相關的新內容將先加在<a href="http://androidbmi.googlecode.com/" target="_blank" rel="noopener">電子書版</a>中。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>樣板表示法</title>
      <link href="/2009/09/05/%E6%A8%A3%E6%9D%BF%E8%A1%A8%E7%A4%BA%E6%B3%95/"/>
      <url>/2009/09/05/%E6%A8%A3%E6%9D%BF%E8%A1%A8%E7%A4%BA%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>在做講解投影片時自然而然寫出</p><blockquote><p>import package</p><p>public class ${Name} extends Activity{…public void onCreate(…){…setContentView(${layout})}}</p></blockquote><p>這樣的 python Template 表示法, 抽象化有時確實有助於理解。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>打鼓</title>
      <link href="/2009/09/04/%E6%89%93%E9%BC%93/"/>
      <url>/2009/09/04/%E6%89%93%E9%BC%93/</url>
      <content type="html"><![CDATA[<p><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/ON1cxNU0K8w&hl=zh_TW&fs=1&"><param name="allowFullScreen" value="true"><param name="allowscriptaccess" value="always"><embed src="http://www.youtube.com/v/ON1cxNU0K8w&hl=zh_TW&fs=1&" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="344"></object></p><p><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/51xPnN91mmM&hl=zh_TW&fs=1&"><param name="allowFullScreen" value="true"><param name="allowscriptaccess" value="always"><embed src="http://www.youtube.com/v/51xPnN91mmM&hl=zh_TW&fs=1&" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="344"></object></p><p><object width="560" height="340"><param name="movie" value="http://www.youtube.com/v/UsnJbIgl_qc&hl=zh_TW&fs=1&"><param name="allowFullScreen" value="true"><param name="allowscriptaccess" value="always"><embed src="http://www.youtube.com/v/UsnJbIgl_qc&hl=zh_TW&fs=1&" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="560" height="340"></object></p>]]></content>
      
      
        <tags>
            
            <tag> fun </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Market</title>
      <link href="/2009/09/03/Market/"/>
      <url>/2009/09/03/Market/</url>
      <content type="html"><![CDATA[<p>新版的 Market 介面改了不少, 看起來是有往好的方向走</p><p><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/8ma9Xh67Eyo&color1=0x3a3a3a&color2=0x999999&hl=en&feature=player_embedded&fs=1"><param name="allowFullScreen" value="true"><param name="allowScriptAccess" value="always"><embed src="http://www.youtube.com/v/8ma9Xh67Eyo&color1=0x3a3a3a&color2=0x999999&hl=en&feature=player_embedded&fs=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="425" height="344"></object></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>麵包師父</title>
      <link href="/2009/09/02/%E9%BA%B5%E5%8C%85%E5%B8%AB%E7%88%B6/"/>
      <url>/2009/09/02/%E9%BA%B5%E5%8C%85%E5%B8%AB%E7%88%B6/</url>
      <content type="html"><![CDATA[<p><a href="http://sites.google.com/site/gasodroid/_/rsrc/1249885258323/Home/androidentry2/droid2.jpeg" target="_blank" rel="noopener"><img src="http://sites.google.com/site/gasodroid/_/rsrc/1249885258323/Home/androidentry2/droid2.jpeg" alt=""></a></p><p>看到第二版書的封面，就知這是筆者轉職成為麵包師父後的第一作（誤）</p><p>「Google！Android 手機應用程式設計入門 2ed」 這本書主要是為了因為想開發 Android 而學 Java 的人寫的。最適合的讀者是有其他語言開發經驗，但對 Java 還不太熟悉的讀者。</p><p>本書第二版上市時間跟前一版只差了 5 個月，主要是因應 Android 1.5 版釋出，加上 Android 開發工具 ADT 大改版到 0.9 而大量改寫，修正許多前一版的 Bug 跟範例程式碼，把整個學習流程弄的更順暢，並加入新章節、新圖例(超過 60 張)、實用小技巧。（當然出版社肯讓我這麼短時間就改版，也是因為賣得還算不錯啦）</p><p>買過本書第一版的您不見得需要買第二版，但是本書第二版當然更適合拿來介紹給其他想入門 Android 的朋友。</p><p>用杯子蛋糕（CupCake）當封面是我的惡趣味，以配合 Android 目前版本的代號，希望能在賞玩本書時帶來樂趣。</p><p><a href="http://www.books.com.tw/exep/assp.php/gasolin/exep/prod/booksfile.php?item=0010442861" target="_blank" rel="noopener">博客來連結</a></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Cool Interactive</title>
      <link href="/2009/08/31/Cool-Interactive/"/>
      <url>/2009/08/31/Cool-Interactive/</url>
      <content type="html"><![CDATA[<p><object width="560" height="340"><param name="movie" value="http://www.youtube.com/v/mUdDhWfpqxg&amp;hl=zh_TW&amp;fs=1&amp;"><param name="allowFullScreen" value="true"><param name="allowscriptaccess" value="always"><embed src="http://www.youtube.com/v/mUdDhWfpqxg&amp;hl=zh_TW&amp;fs=1&amp;" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="560" height="340"></object><div></div></p><div></div><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/0H1zrLZwPjQ&amp;hl=zh_TW&amp;fs=1&amp;"><param name="allowFullScreen" value="true"><param name="allowscriptaccess" value="always"><embed src="http://www.youtube.com/v/0H1zrLZwPjQ&amp;hl=zh_TW&amp;fs=1&amp;" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="344"></object>]]></content>
      
      
        <tags>
            
            <tag> fun </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NoCheatCalls（NCC）可疑電話通報</title>
      <link href="/2009/08/28/NoCheatCalls%EF%BC%88NCC%EF%BC%89%E5%8F%AF%E7%96%91%E9%9B%BB%E8%A9%B1%E9%80%9A%E5%A0%B1/"/>
      <url>/2009/08/28/NoCheatCalls%EF%BC%88NCC%EF%BC%89%E5%8F%AF%E7%96%91%E9%9B%BB%E8%A9%B1%E9%80%9A%E5%A0%B1/</url>
      <content type="html"><![CDATA[<p><a href="http://lh4.ggpht.com/_2xGPUuRo1sg/SpH9qERCd5I/AAAAAAAABCQ/tE6R8Y4XupU/s800/%E5%9C%96%E7%89%87%205.png" target="_blank" rel="noopener"><img src="http://lh4.ggpht.com/_2xGPUuRo1sg/SpH9qERCd5I/AAAAAAAABCQ/tE6R8Y4XupU/s800/%E5%9C%96%E7%89%87%205.png" alt=""></a><div></div></p><div>[寫了篇文章](http://android.cool3c.com/article/11595)介紹前段時間寫的防詐騙公益程式。<div></div><div></div><div></div></div>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>擴增實境</title>
      <link href="/2009/08/19/%E6%93%B4%E5%A2%9E%E5%AF%A6%E5%A2%83/"/>
      <url>/2009/08/19/%E6%93%B4%E5%A2%9E%E5%AF%A6%E5%A2%83/</url>
      <content type="html"><![CDATA[<div></div><div></div><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/b64_16K2e08&amp;rel=0&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;hl=en&amp;feature=player_embedded&amp;fs=1"><param name="allowFullScreen" value="true"><param name="allowScriptAccess" value="always"><embed src="http://www.youtube.com/v/b64_16K2e08&amp;rel=0&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;hl=en&amp;feature=player_embedded&amp;fs=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="425" height="344"></object><div></div><div>[Local Reality Browser](http://www.cyrket.com/package/com.sprx.layar) 是一個擴增實境的應用。透過相機鏡頭，同時展示現實景色與相應的數位資訊。同時像瀏覽器一樣，讓開發者可以在 Android 手機上面自行加入自己的擴增實境網頁（這個軟體稱這些頁面為「圖層」Layer）。</div><div></div><div></div><p><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/zVouwYAKqFk&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;hl=zh_TW&amp;feature=player_embedded&amp;fs=1"><param name="allowFullScreen" value="true"><param name="allowScriptAccess" value="always"><embed src="http://www.youtube.com/v/zVouwYAKqFk&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;hl=zh_TW&amp;feature=player_embedded&amp;fs=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="425" height="344"></object></p><p>微軟的擴增實境</p><p><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/qb3AzXEB1Kg&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;hl=zh_TW&amp;feature=player_embedded&amp;fs=1"><param name="allowFullScreen" value="true"><param name="allowScriptAccess" value="always"><embed src="http://www.youtube.com/v/qb3AzXEB1Kg&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;hl=zh_TW&amp;feature=player_embedded&amp;fs=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="425" height="344"></object></p><p>SONY 的擴增實境</p><p>也可參考 <a href="http://gnn.gamer.com.tw/2/38352.html" target="_blank" rel="noopener">操縱介面的改變</a></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Introduction of Android Scripting Environment</title>
      <link href="/2009/08/16/Introduction-of-Android-Scripting-Environment/"/>
      <url>/2009/08/16/Introduction-of-Android-Scripting-Environment/</url>
      <content type="html"><![CDATA[<iframe src="http://docs.google.com/present/embed?id=ajkxs9k6pqxr_938ffvzq8n2" frameborder="0" width="410" height="342"></iframe><p>On Coscup 2009</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Android </tag>
            
            <tag> zhpy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Google Python Style Guide</title>
      <link href="/2009/08/14/Google-Python-Style-Guide/"/>
      <url>/2009/08/14/Google-Python-Style-Guide/</url>
      <content type="html"><![CDATA[<p><a href="http://google-styleguide.googlecode.com/svn/trunk/pyguide.html" target="_blank" rel="noopener">http://google-styleguide.googlecode.com/svn/trunk/pyguide.html</a></p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Compiling Python for Android Scripting Environment</title>
      <link href="/2009/08/13/Compiling-Python-for-Android-Scripting-Environment/"/>
      <url>/2009/08/13/Compiling-Python-for-Android-Scripting-Environment/</url>
      <content type="html"><![CDATA[<div>Android Scripting Environment (ASE) is the scripting language (BeanShell, Python, Lua, Ruby) environment for Android Operating System.</div><div>This article is about how to compile python for ASE.</div>The following instructions are according to the discussion from [ASE group](http://groups.google.com/group/android-scripting/browse_thread/thread/6a2fcc058fc7a5b1).<p><span style="font-weight: bold;">Compile python</span>** for host**To compile python for ASE, you need a Linux machine, then here goes:</p><p>Download proper python source distribution (according to the python version in ase/python/src) from <a href="http://www.python.org/" target="_blank" rel="noopener">http://www.python.org/</a></p><p>Extract the source and run the following command:</p><blockquote><p>$ cd Python-2.6.2$ ./configure$ makeThen you have a clean python compiled for your PC (called host system).</p></blockquote><p><span style="font-weight: bold;">Compile python</span>** for target**Now we can go to compile python for your Android device (called target system).</p><p>Copy the python executable file and the pgen file into ase/python/src folder</p><blockquote><p>$ cd ~$ cp Python-2.6.2/python ase/python/src/hostpython$ cp Python-2.6.2/Parser/pgen ase/python/src/Parser/hostpgenThen we should prepare the compile tools.</p></blockquote><p>First checkout the android source from <a href="http://source.android.com/" target="_blank" rel="noopener">http://source.android.com/</a> (name as mydroid), we’ll use the cross compile gcc in it’s “prebuilt/linux-x86/toolchain/arm-eabi-4.2.1/bin” folder. Another tool is located in “ase/tools/agcc”.</p><p>Edit .bashrc , add a line to include those compile tools:</p><blockquote><p>export PATH=${PATH}:~/mydroid/prebuilt/linux-x86/toolchain/arm-eabi-4.2.1/bin:~/ase/tools/agccThen start compile python for ASE.</p></blockquote><p>$ cd ase/python$ ./build.py</p><p>**Done!**</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Compiling Android Scripting Environment</title>
      <link href="/2009/08/06/Compiling-Android-Scripting-Environment/"/>
      <url>/2009/08/06/Compiling-Android-Scripting-Environment/</url>
      <content type="html"><![CDATA[<div>Android Scripting Environment (ASE) is the scripting language (BeanShell, Python, Lua, Ruby) environment for Android Operating System.</div><div></div>The following instructions are according to the discussion from [ASE group](http://groups.google.com/group/android-scripting/browse_thread/thread/07905d5d088d237b#).<p><strong>Prerequisites</strong><div>****To compile ASE, you need a Linux machine, then here goes:</div></p><div>1\. Get Android source (read [http://source.android.com/download](http://source.android.com/download) to fetch the source) andname the folder as 'mydroid'(or else you prefer). In the following instructions I assume all the folders are in user's home folder(~) .</div><div>2\. Get Android SDK (download from [http://developer.android.com/](http://developer.android.com/)) andextract it as "android_sdk"(or else you prefer).</div><div>3\. Get Android Scripting Environment source (hg clone from [http://code.google.com/p/android-scripting/source/](http://code.google.com/p/android-scripting/source/)) as "ase"(or else you prefer).</div><div>4\. Enter ase/tools folder and execute "fix_android_sdk.py"to patch the "android_sdk".</div><div>> $ cd ase/tools> $ python fix_android_sdk.py ~/mydroid ~/android_sdk> Copying source from .....mydroid to .....android_sdk/platforms/android-[verison]/sources> Adding android.os.Exec to android.jar> Compiling android.os.Exec to....> Done!</div><div>In addition to modifying the SDK by adding android.os.Exec, the scriptwill also copy the source files into the SDK so that they can bebrowsed in Eclipse.</div><div>**Import Project into Eclipse**</div><div>After executing the script, follow the instructions for developing inEclipse in the [Android developer guide](http://developer.android.com/guide/developing/eclipse-adt.html) to setup a workable Androiddevelopment environment.<p>Change the project build path and specify the BeanShell path to (projectpath)/beanshell/bsh-[version].jar</p></div><div>Compile it, done!<p></p></div><div></div><div>PS: Python and Lua are precompiled and already put in res/raw folder. Youdon't need to setup the cross compile environment unless you want toalso compile Lua and Python yourself.</div>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AppStore Rules</title>
      <link href="/2009/08/05/AppStore-Rules/"/>
      <url>/2009/08/05/AppStore-Rules/</url>
      <content type="html"><![CDATA[<ul><li><a href="http://www.mobileorchard.com/avoiding-iphone-app-rejection-from-apple/" target="_blank" rel="noopener">Avoiding iPhone App Rejection From Apple</a><div>不管在哪個環境下開發給使用者用的應用程式都得先自我審查，過了自己這一關再把程式丟出去。</div></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Zii Egg</title>
      <link href="/2009/07/28/Zii-Egg/"/>
      <url>/2009/07/28/Zii-Egg/</url>
      <content type="html"><![CDATA[<p><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/CZ6It6z05rg&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;feature=player_embedded&amp;fs=1"><param name="allowFullScreen" value="true"><param name="allowScriptAccess" value="always"><embed src="http://www.youtube.com/v/CZ6It6z05rg&amp;color1=0xb1b1b1&amp;color2=0xcfcfcf&amp;feature=player_embedded&amp;fs=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="425" height="344"></object><div></div></p><div>基於 Android 平台擴充，支援 MPEG-4 外接 FullHD 顯示器播放的手持設備（不是手機）</div>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IBM 教學</title>
      <link href="/2009/07/28/IBM-%E6%95%99%E5%AD%B8/"/>
      <url>/2009/07/28/IBM-%E6%95%99%E5%AD%B8/</url>
      <content type="html"><![CDATA[<ul><li><a href="http://www.ibm.com/developerworks/cn/views/web/libraryview.jsp?sort_by=date&amp;show_abstract=true&amp;show_all=false&amp;search_flag=true&amp;topic_by=%E8%AF%B7%E9%80%89%E6%8B%A9%E4%B8%80%E4%B8%AA%E4%B8%BB%E9%A2%98%E6%88%96%E4%BA%A7%E5%93%81&amp;type_by=%E6%89%80%E6%9C%89%E7%B1%BB%E5%88%AB&amp;search_by=%E4%BD%BF%E7%94%A8+jQuery%EF%BC%8C&amp;%E6%90%9C%E7%B4%A2.x=0&amp;%E6%90%9C%E7%B4%A2.y=0&amp;S_TACT=105AGX52&amp;S_CMP=content" target="_blank" rel="noopener">使用 JQuery</a></li><li><a href="http://www.ibm.com/developerworks/cn/views/web/libraryview.jsp?sort_by=date&amp;show_abstract=true&amp;show_all=false&amp;search_flag=true&amp;topic_by=%E8%AF%B7%E9%80%89%E6%8B%A9%E4%B8%80%E4%B8%AA%E4%B8%BB%E9%A2%98%E6%88%96%E4%BA%A7%E5%93%81&amp;type_by=%E6%89%80%E6%9C%89%E7%B1%BB%E5%88%AB&amp;search_by=%E4%BD%BF%E7%94%A8+jQuery%EF%BC%8C&amp;%E6%90%9C%E7%B4%A2.x=0&amp;%E6%90%9C%E7%B4%A2.y=0&amp;S_TACT=105AGX52&amp;S_CMP=content" target="_blank" rel="noopener"></a><a href="http://www.ibm.com/developerworks/cn/opensource/theme/android/?open&amp;cm_mmc=5740-_-n-_-vrm_newsletter-_-10104_124692&amp;cmibm_em=dm:0:10623486" target="_blank" rel="noopener">Android 教學</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Guide to put (Hero) Builds to your G1/Magic Android</title>
      <link href="/2009/07/24/Guide-to-put-Hero-Builds-to-your-G1-Magic-Android/"/>
      <url>/2009/07/24/Guide-to-put-Hero-Builds-to-your-G1-Magic-Android/</url>
      <content type="html"><![CDATA[<p><a href="http://forum.xda-developers.com/showthread.php?t=533505" target="_blank" rel="noopener">http://forum.xda-developers.com/showthread.php?t=533505</a></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>All About Python and Unicode</title>
      <link href="/2009/07/11/All-About-Python-and-Unicode/"/>
      <url>/2009/07/11/All-About-Python-and-Unicode/</url>
      <content type="html"><![CDATA[<p><a href="http://boodebr.org/main/python/all-about-python-and-unicode" target="_blank" rel="noopener">這篇</a>完整講解了 Python Unicode 的作法,</p><p>例如為什麼都已經是 Unicode 了還會有 encode, decode 的需求?答案是因為電腦內部以二進制儲存 Unicode, 而一般網頁等程式能處理的是經過&quot;文字編碼&quot;後的 text code (utf-8, big5, gbk).</p><p>而為什麼常看到 UTF-8?因為 UTF-8 這套文字編碼相容英文最常用的 ASCII 文字編碼, 所以大多數英文程式不需要改寫就能沿用.</p><p>所以從網頁/程式存中文到資料庫(電腦)時要做 data.encode(‘big5’) 的動作來存到電腦中.</p><blockquote><blockquote><blockquote><p>h = ‘哈囉’h’\xab\xa2\xc5o’</p></blockquote></blockquote><blockquote><blockquote></blockquote></blockquote></blockquote><p>從電腦中取出的中文 data 要做 data.decode(‘big5’) 的動作,</p><blockquote><blockquote><blockquote><p>print h哈囉</p></blockquote></blockquote><blockquote><blockquote><p>h.decode(‘big5’)u’\u54c8\u56c9’</p></blockquote></blockquote><blockquote><blockquote><p>print h.decode(‘big5’)哈囉</p></blockquote></blockquote><blockquote><blockquote></blockquote></blockquote></blockquote><p>那麼為什麼有時候用一些程式不需要自己處理這些事情呢?那是因為這些程式的作者已經預幫你處理了 XD</p><p>不知道預設的編碼時, 可以試試用 <a href="http://chardet.feedparser.org/" target="_blank" rel="noopener">Universal Encoding Detector</a> 來猜測所使用的編碼.<div></div></p><div>Update:</div><div><ul><li><a href="http://www.amk.ca/python/howto/unicode" target="_blank" rel="noopener">Unicode HOWTO</a></li><li><a href="http://evanjones.ca/python-utf8.html" target="_blank" rel="noopener">How to Use UTF-8 with Python</a></li></ul></div><div></div>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> unicode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTC HERO</title>
      <link href="/2009/06/24/HTC-HERO/"/>
      <url>/2009/06/24/HTC-HERO/</url>
      <content type="html"><![CDATA[<p><object width="560" height="340"><param name="movie" value="http://www.youtube.com/v/FKTDSfbcbBU&hl=zh_TW&fs=1&"><param name="allowFullScreen" value="true"><param name="allowscriptaccess" value="always"><embed src="http://www.youtube.com/v/FKTDSfbcbBU&hl=zh_TW&fs=1&" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="560" height="340"></object></p><p>介面進化多了</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OPhone 的 Web 3.0 架構</title>
      <link href="/2009/06/24/OPhone-%E7%9A%84-Web-3-0-%E6%9E%B6%E6%A7%8B/"/>
      <url>/2009/06/24/OPhone-%E7%9A%84-Web-3-0-%E6%9E%B6%E6%A7%8B/</url>
      <content type="html"><![CDATA[<p><a href="http://www.oms-sdn.com/uploads/Image/5.14(1).jpg" target="_blank" rel="noopener"><img src="http://www.oms-sdn.com/uploads/Image/5.14(1).jpg" alt=""></a></p><div></div><div>中國移動基於 Android 自行訂製的 OPhone 系統終於釋出了 SDK。</div><div>[OPhone 的 SDK](http://www.oms-sdn.com/) 相容於 Android 1.0 API ，使用 ADT 0.8 版開發工具（不支援 Android 1.1、1.5 和 ADT 0.9.x 以上版本的開發工具），並需要安裝它提供的 OPhone SDK 還有 WDT （桌面小程式開發工具 Widget Development Toolkit）這個 Eclipse Plugin。</div><div></div><div>無獨有偶的，OPhone 弄出了一個跟 [Opera Unite](http://unite.opera.com/) 相似的「客戶端即伺服器」架構，叫做「Mobileyou」[手機網頁伺服器](http://www.oms-sdn.com/article/show/24;jsessionid=9D59902E76E53BB69A5691043B726B8B)。我乾脆把這類架構稱為「網頁P2P」，或「pWeb」（Personal Web、Peer-2-Peer Web）。</div><div></div><div>這類「pWeb」服務架構的本質，簡單說來是在電腦或手機上裝個網頁伺服器，以提供各種以網頁為介面的服務，再結合個人電腦或手機上提供的個人資訊，提供異化的功能性網站。</div><div></div><div>中國移動或 Opera 這些服務提供者端，將使用某種動態 DNS 轉址機制（Dynamic DNS），以提供一個統一的網址，如「http://官方網址/個人暱稱/服務」這樣的連結，讓網路上所有的人都可以用這個網址連上 pWeb 網站，以解決使用者該透過哪個網址訪問的問題。</div><div></div><div>OPhone 提供的「Mobileyou」，跟 Android 上另一個「i-jetty」應用程式很類似。裝了之後都可以存取手機上的功能，透過網頁介面來管理個人通訊錄、查看簡訊等。</div><div></div><div>有了這樣的服務以後，女朋友要看男朋友有沒有偷吃，就不用再偷偷拿他的手機查看簡訊，只要到個人手機上的網站查看就行了（怎麼覺得舉的是個反例 :p）</div><div></div><div></div>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>學走</title>
      <link href="/2009/06/13/%E5%AD%B8%E8%B5%B0/"/>
      <url>/2009/06/13/%E5%AD%B8%E8%B5%B0/</url>
      <content type="html"><![CDATA[<!--StartFragment-->  <p><span style="font-family:&quot;儷宋 Pro&quot;;mso-fareast-language:ZH-TW"></span></p><blockquote><p><span style="font-family:&quot;儷宋 Pro&quot;;mso-fareast-language:ZH-TW">程式設計領域裡，每一個人都想飛。但是，還沒學會走之前，不要跑！<span lang="EN-US">&lt;o:p&gt;&lt;/o:p&gt;</span></span><span lang="EN-US" style="font-size:10.0pt;font-family:&quot;儷宋 Pro&quot;;mso-ansi-language:EN-US;mso-fareast-language:ZH-TW">–侯捷</span><span lang="EN-US" style="font-size:10.0pt;font-family:&quot;儷宋 Pro&quot;;mso-ansi-language:EN-US;mso-fareast-language:ZH-TW"></span><!--EndFragment--></p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> digest </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Anobiit</title>
      <link href="/2009/06/08/Anobiit/"/>
      <url>/2009/06/08/Anobiit/</url>
      <content type="html"><![CDATA[<table style="width:auto;"><tbody><tr><td>[![](http://lh4.ggpht.com/_2xGPUuRo1sg/Sit69HbA0eI/AAAAAAAAAz0/uCZtl9xl5zU/s800/front.jpg)](http://picasaweb.google.com.tw/lh/photo/cwlwFVNYWxRJSMxOWlECFA?feat=embedwebsite)</td></tr><tr><td style="font-family:arial,sans-serif; font-size:11px; text-align:right"></td></tr></tbody></table>[寫了篇文章](http://android.cool3c.com/article/8940)，介紹自己寫的小軟體 Anobiit]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Google 救甘興 -- Google 應用服務引擎（App Engine）中文文件</title>
      <link href="/2009/05/22/Google-%E6%95%91%E7%94%98%E8%88%88-Google-%E6%87%89%E7%94%A8%E6%9C%8D%E5%8B%99%E5%BC%95%E6%93%8E%EF%BC%88App-Engine%EF%BC%89%E4%B8%AD%E6%96%87%E6%96%87%E4%BB%B6/"/>
      <url>/2009/05/22/Google-%E6%95%91%E7%94%98%E8%88%88-Google-%E6%87%89%E7%94%A8%E6%9C%8D%E5%8B%99%E5%BC%95%E6%93%8E%EF%BC%88App-Engine%EF%BC%89%E4%B8%AD%E6%96%87%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p><a href="http://4.bp.blogspot.com/_2xGPUuRo1sg/ShZt3Q4u9YI/AAAAAAAAAwc/BwzU9kxxXf8/s1600-h/google-app-engine.png" target="_blank" rel="noopener"><img src="http://4.bp.blogspot.com/_2xGPUuRo1sg/ShZt3Q4u9YI/AAAAAAAAAwc/BwzU9kxxXf8/s400/google-app-engine.png" alt=""></a></p><p>Google 對他的應用服務引擎（App Engine）推廣不遺餘力，除了在四月多發佈 Java 版的應用服務引擎之外，前幾天竟然把官方網站上的文件全部翻譯成了中文！</p><p>學網頁開發再也不用自己架設伺服器（Server）、安裝網頁伺服器（Web Server）、伺服器語言、和資料庫（Database），有了 Google 應用服務引擎通通一次搞定。</p><p>對 Google 應用服務引擎有興趣的人可以連至<a href="http://code.google.com/intl/zh-TW/appengine/articles/" target="_blank" rel="noopener">Google 應用服務引擎官方網站</a> （中文）查看。</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> GAE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTC 自製介面影片</title>
      <link href="/2009/05/19/HTC-%E8%87%AA%E8%A3%BD%E4%BB%8B%E9%9D%A2%E5%BD%B1%E7%89%87/"/>
      <url>/2009/05/19/HTC-%E8%87%AA%E8%A3%BD%E4%BB%8B%E9%9D%A2%E5%BD%B1%E7%89%87/</url>
      <content type="html"><![CDATA[<p><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/6OMrSTEBeyI&color1=0xb1b1b1&color2=0xcfcfcf&hl=en&feature=player_embedded&fs=1"><param name="allowFullScreen" value="true"><embed src="http://www.youtube.com/v/6OMrSTEBeyI&color1=0xb1b1b1&color2=0xcfcfcf&hl=en&feature=player_embedded&fs=1" type="application/x-shockwave-flash" allowfullscreen="true" width="425" height="344"></object></p><p><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/2B4u7P4L6qE&color1=0xb1b1b1&color2=0xcfcfcf&feature=player_embedded&fs=1"><param name="allowFullScreen" value="true"><embed src="http://www.youtube.com/v/2B4u7P4L6qE&color1=0xb1b1b1&color2=0xcfcfcf&feature=player_embedded&fs=1" type="application/x-shockwave-flash" allowfullscreen="true" width="425" height="344"></object></p><p>HTC 自製介面的影片流出了，與 Android 標準介面有些不同。</p><p>就像 Linux 發佈套件（Ubuntu, OpenSUSE, RedHat）一樣，當 OS 都免費取得時，要與其他廠商作區隔就得在使用介面（3D 效果）、易用性（各式工具，如 PDF Reader、HTC Mail）、特有功能（與 Extrange 整合）等方面來著墨。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解決 Android 版本相容性問題1</title>
      <link href="/2009/05/05/%E8%A7%A3%E6%B1%BA-Android-%E7%89%88%E6%9C%AC%E7%9B%B8%E5%AE%B9%E6%80%A7%E5%95%8F%E9%A1%8C1/"/>
      <url>/2009/05/05/%E8%A7%A3%E6%B1%BA-Android-%E7%89%88%E6%9C%AC%E7%9B%B8%E5%AE%B9%E6%80%A7%E5%95%8F%E9%A1%8C1/</url>
      <content type="html"><![CDATA[<!--StartFragment-->  <p>Android 系統改版相當快，使用者拿到的手機上往往也搭載著不同版本的 Android 系統。當我們用到新版本 SDK 所提供的功能時，也代表我們放棄了所有使用舊版本 OS 的使用者。為了讓最多的使用者能用上我們所寫的應用程式，我們應該盡可能地讓應用程式做到向下相容。</p><p>那麼我們最好向下相容到那個版本的 SDK 哩？簡單的答案是：</p><p>在 2010 年以前，以 SDK 1.1 為基礎來開發可以享受到最新版的開發工具的便利，同時也可以支援最多使用者。</p><p>若只要寫供中文版手機使用的應用程式，則可以直接基於 SDK 1.5 來開發，能使用 SDK 1.5 版的所有功能（因為第一支 Android 中文手機內建的版本就是 1.5 版）。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android SDK 1.5 發佈</title>
      <link href="/2009/04/28/Android-SDK-1-5-%E7%99%BC%E4%BD%88/"/>
      <url>/2009/04/28/Android-SDK-1-5-%E7%99%BC%E4%BD%88/</url>
      <content type="html"><![CDATA[<p><a href="http://developer.android.com/sdk/1.5_r1/index.html" target="_blank" rel="noopener">Android SDK 1.5 發佈囉！</a></p><p>主要可查覺的變化有稍微美化的介面，模擬器的操作有些改動，還有期待已久的輸入法與桌面小工具（appWidget）功能。</p><p>1.5 SDK 中，叫起模擬器的方法也改變了。新版支援多個不同版本模擬器共存，各廠商可以提供不同的自製模擬器。例如 Google Map 等 Google API 就被另外抽出來放到了（加入了） Google API 的模擬器上。</p><p>所幸前陣子使用 1.5 pre 測試時<a href="http://www.books.com.tw/exep/assp.php/gasolin/exep/prod/booksfile.php?item=0010429598" target="_blank" rel="noopener">書中</a>所提的範例都仍然可適用，在這段遷移往 1.5 平台的期間，請對照查看<a href="http://code.google.com/p/androidbmi/wiki/DiveIntoAndroid" target="_blank" rel="noopener">線上版</a>的更新。</p><div>Update: 電子書版先支援 1.5 啦，主要的改動有</div><div><ul><li><a href="http://code.google.com/p/androidbmi/wiki/InstallAndroid" target="_blank" rel="noopener">安裝 Android 開發工具</a></li><li><a href="http://code.google.com/p/androidbmi/wiki/OpenProject" target="_blank" rel="noopener">開啟現有專案</a></li><li><a href="http://code.google.com/p/androidbmi/wiki/PlayEmulator" target="_blank" rel="noopener">操作 Android 模擬器(Emulator)</a></li></ul></div>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在 Ubuntu 9.04 上連接 G1 開發</title>
      <link href="/2009/04/24/%E5%9C%A8-Ubuntu-9-04-%E4%B8%8A%E9%80%A3%E6%8E%A5-G1-%E9%96%8B%E7%99%BC/"/>
      <url>/2009/04/24/%E5%9C%A8-Ubuntu-9-04-%E4%B8%8A%E9%80%A3%E6%8E%A5-G1-%E9%96%8B%E7%99%BC/</url>
      <content type="html"><![CDATA[<p>參考<a href="http://www.maximyudin.com/2009/04/24/android/connecting-and-debugging-g1-on-ubuntu-904/" target="_blank" rel="noopener">這篇</a>。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>非官方 SDK 與新的模擬器</title>
      <link href="/2009/04/13/%E9%9D%9E%E5%AE%98%E6%96%B9-SDK-%E8%88%87%E6%96%B0%E7%9A%84%E6%A8%A1%E6%93%AC%E5%99%A8/"/>
      <url>/2009/04/13/%E9%9D%9E%E5%AE%98%E6%96%B9-SDK-%E8%88%87%E6%96%B0%E7%9A%84%E6%A8%A1%E6%93%AC%E5%99%A8/</url>
      <content type="html"><![CDATA[<p><a href="http://2.bp.blogspot.com/_2xGPUuRo1sg/Sdydlt2xTqI/AAAAAAAAArY/9nCp-GiGx-4/s1600-h/%E5%9C%96%E7%89%87+2.png" target="_blank" rel="noopener"><img src="http://2.bp.blogspot.com/_2xGPUuRo1sg/Sdydlt2xTqI/AAAAAAAAArY/9nCp-GiGx-4/s400/%E5%9C%96%E7%89%87+2.png" alt=""></a></p><p><a href="http://andappstore.com/AndroidPhoneApplications/sdk/" target="_blank" rel="noopener">AndAppStore</a> 4/7 日起提供非官方的 Android SDK BT 種子下載（需要註冊），有 Windows、Mac、Linux 版本。</p><p>在目前非官方 SDK 1.5 上可以看到繁簡體中文支援了，只是目前這個版本 Image 還有些問題，像是不支援網路等功能。</p><p>使用這版本的 emulator 前，需要建立一個 avd 模擬器 image 檔案。這表示不像目前模擬器只能換面板，骨子裡是同一台模擬器。SDK 1.5 發佈後，開發時可以自訂現在要模擬的機器是否支援諸如相機、GPS 等特性。也就是新版本在支援模擬多種不同的手機上跨進了一步。</p><p>建立方法是在 SDK 的 tools 目錄下執行以下命令：</p><blockquote><p>$ android create avd --target 1 --name cupcake-dev-vm</p></blockquote><p>自訂完手機模擬器 image 檔案 avd 後，就可以啟動 emulator</p><blockquote><p>emulator -avd cupcake-dev-vm</p></blockquote><p>PS: 還好<a href="http://www.books.com.tw/exep/assp.php/gasolin/exep/prod/booksfile.php?item=0010429598" target="_blank" rel="noopener">書裡面</a>有先見之明，全使用 Eclipse 來操作，而不是用 terminal 來控制模擬器或編譯 Android 應用程式，不然馬上就包很大了 XD</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Google! Android 手機應用程式設計入門 封面</title>
      <link href="/2009/04/13/Google-Android-%E6%89%8B%E6%A9%9F%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E5%85%A5%E9%96%80-%E5%B0%81%E9%9D%A2/"/>
      <url>/2009/04/13/Google-Android-%E6%89%8B%E6%A9%9F%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E5%85%A5%E9%96%80-%E5%B0%81%E9%9D%A2/</url>
      <content type="html"><![CDATA[<div style="float: right; margin-left: 10px; margin-bottom: 10px;">[![](http://farm4.static.flickr.com/3354/3327041647_80623f98d3_m.jpg)](http://www.flickr.com/photos/gasolin/3327041647/ "photo sharing")<span style="font-size: 0.9em; margin-top: 0px;">[P0904703.jpg](http://www.flickr.com/photos/gasolin/3327041647/)</span></div>新書封面設計好囉，全書應該這幾週就會上市啦！到時懇請讀者們支持喔 :)<p>Update: 3/10 已經 <a href="http://www.books.com.tw/exep/assp.php/gasolin/exep/prod/booksfile.php?item=0010429598" target="_blank" rel="noopener">在博客來上架了</a> 😃</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>平行處理概觀</title>
      <link href="/2009/04/02/%E5%B9%B3%E8%A1%8C%E8%99%95%E7%90%86%E6%A6%82%E8%A7%80/"/>
      <url>/2009/04/02/%E5%B9%B3%E8%A1%8C%E8%99%95%E7%90%86%E6%A6%82%E8%A7%80/</url>
      <content type="html"><![CDATA[<p>很棒的<a href="http://www.zdnet.com.tw/white_board/intel/video-1.htm" target="_blank" rel="noopener">平行處理概觀講座</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>搜尋</title>
      <link href="/2009/03/29/%E6%90%9C%E5%B0%8B/"/>
      <url>/2009/03/29/%E6%90%9C%E5%B0%8B/</url>
      <content type="html"><![CDATA[<blockquote><p>The main rationale was that the world is more complicated.Now programmers spend more time researching libraries than writing everything from scratch.</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> digest </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Django Pinax</title>
      <link href="/2009/03/22/Django-Pinax/"/>
      <url>/2009/03/22/Django-Pinax/</url>
      <content type="html"><![CDATA[<p><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/1J91Ownq-7g&color1=0xb1b1b1&color2=0xcfcfcf&hl=en&feature=player_embedded&fs=1"><param name="allowFullScreen" value="true"><embed src="http://www.youtube.com/v/1J91Ownq-7g&color1=0xb1b1b1&color2=0xcfcfcf&hl=en&feature=player_embedded&fs=1" type="application/x-shockwave-flash" allowfullscreen="true" width="425" height="344"></object></p><p><a href="http://pinaxproject.com/" target="_blank" rel="noopener">Pinax</a> 是一套可重用的 Django app，看起來真是方便。</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Internet History</title>
      <link href="/2009/02/19/Internet-History/"/>
      <url>/2009/02/19/Internet-History/</url>
      <content type="html"><![CDATA[<p><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/9hIQjrMHTv4&color1=0xb1b1b1&color2=0xcfcfcf&hl=de&feature=player_embedded&fs=1"><param name="allowFullScreen" value="true"><embed src="http://www.youtube.com/v/9hIQjrMHTv4&color1=0xb1b1b1&color2=0xcfcfcf&hl=de&feature=player_embedded&fs=1" type="application/x-shockwave-flash" allowfullscreen="true" width="425" height="344"></object></p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTC Dream</title>
      <link href="/2009/02/17/HTC-Dream/"/>
      <url>/2009/02/17/HTC-Dream/</url>
      <content type="html"><![CDATA[<p><object width="480" height="295"><param name="movie" value="http://www.youtube.com/v/QBbu_FR6XPU&hl=zh_TW&fs=1"><param name="allowFullScreen" value="true"><param name="allowscriptaccess" value="always"><embed src="http://www.youtube.com/v/QBbu_FR6XPU&hl=zh_TW&fs=1" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="480" height="295"></object></p><p>第二台 Android 手機，一樣的 HVGA，機身變薄、512 MB 記憶體、虛擬鍵盤（無實體鍵盤）。</p><p>mmm…太普通了。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在 Android 程式中切換介面語系</title>
      <link href="/2009/02/04/%E5%9C%A8-Android-%E7%A8%8B%E5%BC%8F%E4%B8%AD%E5%88%87%E6%8F%9B%E4%BB%8B%E9%9D%A2%E8%AA%9E%E7%B3%BB/"/>
      <url>/2009/02/04/%E5%9C%A8-Android-%E7%A8%8B%E5%BC%8F%E4%B8%AD%E5%88%87%E6%8F%9B%E4%BB%8B%E9%9D%A2%E8%AA%9E%E7%B3%BB/</url>
      <content type="html"><![CDATA[<p>在 Android 1.5 版發佈之後，我們就可以用<a href="http://code.google.com/android/devel/resources-i18n.html" target="_blank" rel="noopener">官方文件中教的方法</a>來定義不同語系的資源文件，並根據語言設定，在使用者螢幕上顯示出對應的語言。在此之前，我們可以在 onCreate 中加入下面的程式片段，來測試不同語系的介面：</p><blockquote><p>Resources res = getResources();Configuration conf = res.getConfiguration();conf.locale = <span style="font-weight: bold;">Locale.TRADITIONAL_CHINESE</span>;DisplayMetrics dm = res.getDisplayMetrics();res.updateConfiguration(conf, dm);<br>這段程式碼還可以搭配 Preference 設定，讓使用者在程式中自己選擇想要的語系。</p></blockquote><p>update: 要針對不同語系做處理時，可以直接判斷</p><blockquote><p>if (conf.locale == Locale.TRADITIONAL_CHINESE)</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CupCake screencast in Emulator</title>
      <link href="/2009/01/29/CupCake-screencast-in-Emulator/"/>
      <url>/2009/01/29/CupCake-screencast-in-Emulator/</url>
      <content type="html"><![CDATA[<p><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/hfsvXJUVlY0&color1=0xb1b1b1&color2=0xcfcfcf&feature=player_embedded&fs=1"><param name="allowFullScreen" value="true"><embed src="http://www.youtube.com/v/hfsvXJUVlY0&color1=0xb1b1b1&color2=0xcfcfcf&feature=player_embedded&fs=1" type="application/x-shockwave-flash" allowfullscreen="true" width="425" height="344"></object></p><p>CupCake (Android 1.5) screencast in Emulator</p><p><a href="http://nullwire.com/try_out_cupcake_yourself" target="_blank" rel="noopener">這裡</a>可以抓到 Android 1.5 的 Emulator。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Jythonroid works on Dev Phone!</title>
      <link href="/2009/01/18/Jythonroid-works-on-Dev-Phone/"/>
      <url>/2009/01/18/Jythonroid-works-on-Dev-Phone/</url>
      <content type="html"><![CDATA[<p><a href="http://2.bp.blogspot.com/_2xGPUuRo1sg/SXNIc0PVM6I/AAAAAAAAAcQ/odAxGXphfSs/s1600-h/jythonroid.png.jpg" target="_blank" rel="noopener"><img src="http://2.bp.blogspot.com/_2xGPUuRo1sg/SXNIc0PVM6I/AAAAAAAAAcQ/odAxGXphfSs/s400/jythonroid.png.jpg" alt=""></a></p><p>Just got my Dev Phone 1 and tried to run <a href="http://inet6.blogspot.com/2008/11/jythonroid-jython-runs-successfully-on.html" target="_blank" rel="noopener">Jythonroid</a> on it.</p><p>The procedure is</p><p>1. download sourcecode</p><p>$ svn co -r 51 <a href="http://jythonroid.googlecode.com/svn/branches/Jythonroid" target="_blank" rel="noopener">http://jythonroid.googlecode.com/svn/branches/Jythonroid</a></p><p>2. import project into eclipse</p><p>3. connect Dev Phone and computer with USB</p><p>4. setup eclipse debug setting to run jythonroid in real Dev Phone</p><p>Now I got jythonroid installed in Dev Phone. Here’s how to play with jythonroid:</p><p>1. Install Terminal Emulator to use the shell</p><p>2. just follow the screenshot to say ‘Hello Android!’ 😃</p><p><a href="http://1.bp.blogspot.com/_2xGPUuRo1sg/SXNIr2LQ6kI/AAAAAAAAAcY/LGX1fEmJ1Rs/s1600-h/helloandroid.png.jpg" target="_blank" rel="noopener"><img src="http://1.bp.blogspot.com/_2xGPUuRo1sg/SXNIr2LQ6kI/AAAAAAAAAcY/LGX1fEmJ1Rs/s400/helloandroid.png.jpg" alt=""></a></p><p>in java we import Toast widget with</p><blockquote><p>import android.widget.Toast;In jython(roid), just type in interpreter:</p><blockquote><blockquote><blockquote><p>from android.widget import ToastPython rocks!</p></blockquote></blockquote></blockquote></blockquote>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 應用程式排行</title>
      <link href="/2009/01/12/Android-%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E6%8E%92%E8%A1%8C/"/>
      <url>/2009/01/12/Android-%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E6%8E%92%E8%A1%8C/</url>
      <content type="html"><![CDATA[<p><a href="http://www.android.com/market/" target="_blank" rel="noopener">Android Market </a> 本身尚未提供網頁版本，只能透過實機來查看應用程式的下載與評論狀況。這對於還沒有拿到實機的開發者來說相當不方便。</p><p>還好現在網路上已經出現了一些解決方法：</p><p><a href="http://www.cyrket.com/" target="_blank" rel="noopener">cyrket</a> 提供了 Android Market 的網頁介面版本。可以透過 <a href="http://www.cyrket.com/" target="_blank" rel="noopener">cyrket</a>  來查看最近的使用者評論。</p><p>要得知最熱門應用程式，可以參考 <a href="http://atrackdog.a0soft.com/" target="_blank" rel="noopener">aTrackDog</a> 網站提供的排行榜。</p><p>想看各個應用程式的下載總數排行，則可以參考 <a href="http://androidstats.com/ranking/applications" target="_blank" rel="noopener">Android Market Place Rankings</a> （均不提供詳細下載數目）。</p><p>PS：下載數可以從側面顯示應用程式的普及率。但是應用程式的排行最理想的參考數值，則應該是使用者下載之後仍然保留在機器中繼續使用的數目（即 Active Install 數目）。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>緊湊</title>
      <link href="/2008/12/29/%E7%B7%8A%E6%B9%8A/"/>
      <url>/2008/12/29/%E7%B7%8A%E6%B9%8A/</url>
      <content type="html"><![CDATA[<blockquote><p>Keep in mind the screen size of 480 x 320 pixels and use that as a motivation to focus the user interface on the essentials. You don’t have the room to include design elements that aren’t absolutely necessary, andcrowding user interface elements makes your application unattractive and difficult to use.螢幕就只有 480x320 這麼點大，促使我們必須盡量合理地利用每吋的空間。在設計時我們不該在螢幕上放置不必要元素。擁擠的螢幕配置讓我們的程式變得難用而不吸引人。– iphone Human Interface Guidelines</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> design </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OMNET++ 4.0</title>
      <link href="/2008/12/24/OMNET-4-0/"/>
      <url>/2008/12/24/OMNET-4-0/</url>
      <content type="html"><![CDATA[<p>原來 OMNET++ 4.0 <a href="http://www.omnest.com/webdemo/ide/" target="_blank" rel="noopener">有 IDE 可用了</a>呀，真是相當驚人。</p><p>另外，3.2 版也有 <a href="http://www.dlr.de/kn/en/desktopdefault.aspx/tabid-4979/8336_read-14161/" target="_blank" rel="noopener">xMIPv6 Framework</a> 可以用了，可以根據 xMIPv6 修改，來支援 HMIPv6、SMIPv6、甚至是 NEMO 等衍生 protocol。整個 Framework 是從 INET 修改而來，<a href="http://www.kn.e-technik.uni-dortmund.de/content/view/232/lang,de/" target="_blank" rel="noopener">說明在這</a>。要是早幾年出來，我的論文就不必用麻煩的 NS-2 模擬啦。</p>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>雲端運算</title>
      <link href="/2008/12/20/%E9%9B%B2%E7%AB%AF%E9%81%8B%E7%AE%97/"/>
      <url>/2008/12/20/%E9%9B%B2%E7%AB%AF%E9%81%8B%E7%AE%97/</url>
      <content type="html"><![CDATA[<p>幾年前學的 Grid Computing，現在換個名字重出江湖，拿出比較實質的內容了。</p><p><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/3NAP5rk9Nzs&hl=zh_TW&fs=1"><param name="allowFullScreen" value="true"><embed src="http://www.youtube.com/v/3NAP5rk9Nzs&hl=zh_TW&fs=1" type="application/x-shockwave-flash" allowfullscreen="true" width="425" height="344"></object></p><p><a href="http://docs.google.com/TeamPresent?id=dfqs8fqs_1039gv9s7qfs&amp;fe=false" target="_blank" rel="noopener">簡報</a></p><p>2008/12/21 Update: 講者 Ping 說 Grid Computing 跟 Cloud Computing 並不是同個換湯不換藥的東西。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>aTrackDog: 來養隻幫你追蹤軟體更新的狗吧</title>
      <link href="/2008/12/18/aTrackDog-%E4%BE%86%E9%A4%8A%E9%9A%BB%E5%B9%AB%E4%BD%A0%E8%BF%BD%E8%B9%A4%E8%BB%9F%E9%AB%94%E6%9B%B4%E6%96%B0%E7%9A%84%E7%8B%97%E5%90%A7/"/>
      <url>/2008/12/18/aTrackDog-%E4%BE%86%E9%A4%8A%E9%9A%BB%E5%B9%AB%E4%BD%A0%E8%BF%BD%E8%B9%A4%E8%BB%9F%E9%AB%94%E6%9B%B4%E6%96%B0%E7%9A%84%E7%8B%97%E5%90%A7/</url>
      <content type="html"><![CDATA[<table style="width:auto;"><tr><td>[![](http://lh4.ggpht.com/_2xGPUuRo1sg/SUrsr1JeDhI/AAAAAAAAAa0/07XuZHc9Ot0/s800/%E5%9C%96%E7%89%87%208.png)](http://picasaweb.google.com/lh/photo/xk1ybHysinwtNviKrdN-vw?feat=embedwebsite)</td></tr><tr><td style="font-family:arial,sans-serif; font-size:11px; text-align:right">From [aTrackDog](http://picasaweb.google.com/gasolin/ATrackDog?feat=embedwebsite)</td></tr></table><p>第一次跑去<a href="http://bbs.cool3c.com/article/1795" target="_blank" rel="noopener">癮科科</a>發文，介紹我跟 <a href="http://ysl-paradise.blogspot.com" target="_blank" rel="noopener">Sam Lu</a> 合作寫的追蹤 Android 軟體更新程式：aTrackDog。</p><p>這個程式的前身是 Palm 版的 TrackDog。不同之處在於 aTrackDog （Android）可以直接通過網路更新，而 TrackDog （Palm）更多是透過桌面 Sync 來更新，這也是明顯時代在進步之處呀…。</p><p>連結：<a href="http://bbs.cool3c.com/article/1795" target="_blank" rel="noopener">http://bbs.cool3c.com/article/1795</a></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Demo 導向開發（Demo Driven Development）</title>
      <link href="/2008/12/08/Demo-Driven-Development/"/>
      <url>/2008/12/08/Demo-Driven-Development/</url>
      <content type="html"><![CDATA[<blockquote><p>DEMOS ARE GOOD</p></blockquote><p><embed src="http://blip.tv/play/Ad3zMYr8fA" type="application/x-shockwave-flash" width="480" height="320" allowscriptaccess="always" allowfullscreen="true"></p><p>Kevin Danger 做了一個關於如何發展社群（Growing Your Community）的演講，裡面提到了為了增加專案的可用性，可以運用「Embarrassment Driven Development」（丟臉導向開發）的觀念。亦即為了在上台時講到自己的東西不至於丟臉，會想辦法為台下聽講者加上一些感覺很好用的功能。例如用 quickstart 命令建立一個專案框架，在專案中打幾個指令就可以直接啟動 Web server 等等。</p><p>我覺得不妨把這個方法叫做「Demo 導向開發」（Demo Driven Development, 簡寫為 DDD? 3D?），感覺更為貼切。</p><ul><li>其一, 是多在可以 Demo 的場合發佈自己的專案，這樣可以增加群眾與開發者們接觸這個專案的機會（沒錯…有了魔獸/異塵餘生3 誰還天天在改自己的 Open Source 專案？當然是要有事件驅動呀！）。</li><li>其二, 是為了在 Live Demo 中少出錯，在準備 Demo 時的壓力會激發許多靈感。</li><li>其三, 是與聽眾互動的結果，也可以反過來促進專案的進步。</li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>保持簡單</title>
      <link href="/2008/12/04/%E4%BF%9D%E6%8C%81%E7%B0%A1%E5%96%AE/"/>
      <url>/2008/12/04/%E4%BF%9D%E6%8C%81%E7%B0%A1%E5%96%AE/</url>
      <content type="html"><![CDATA[<blockquote><p>進行優化必須付出增加空間或計算時間之開銷的代價。 Python 開發人員發現，有些地方長期來看，進行簡單的實做會比「乍看之下更吸引人的額外優化」更好。簡言之，讓事物保持簡單，通常會有所收穫–美麗程式：Python 的辭典</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> digest </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>As time goes by</title>
      <link href="/2008/12/03/As-time-goes-by/"/>
      <url>/2008/12/03/As-time-goes-by/</url>
      <content type="html"><![CDATA[<blockquote><p>I have always wished that my computer would be as easy to use as my telephone.My wish has come true.I no longer know how to use my telephone.</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> digest </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 上的 3DMark</title>
      <link href="/2008/12/03/Android-%E4%B8%8A%E7%9A%84-3DMark/"/>
      <url>/2008/12/03/Android-%E4%B8%8A%E7%9A%84-3DMark/</url>
      <content type="html"><![CDATA[<p><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/RqKCam7wgws&color1=0xb1b1b1&color2=0xcfcfcf&feature=player_embedded&fs=1"><param name="allowFullScreen" value="true"><embed src="http://www.youtube.com/v/RqKCam7wgws&color1=0xb1b1b1&color2=0xcfcfcf&feature=player_embedded&fs=1" type="application/x-shockwave-flash" allowfullscreen="true" width="425" height="344"></object></p><p>Qualcomm 做的名為「Neocore」的 3D Mark 程式，用來推他們公司的圖型晶片。原來 G1 的 3D 能力也很驚人呀。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>不含 Google 服務的 Android 山寨機</title>
      <link href="/2008/11/27/%E4%B8%8D%E5%90%AB-Google-%E6%9C%8D%E5%8B%99%E7%9A%84-Android-%E5%B1%B1%E5%AF%A8%E6%A9%9F/"/>
      <url>/2008/11/27/%E4%B8%8D%E5%90%AB-Google-%E6%9C%8D%E5%8B%99%E7%9A%84-Android-%E5%B1%B1%E5%AF%A8%E6%A9%9F/</url>
      <content type="html"><![CDATA[<p><a href="http://img1.cache.netease.com/mobile/2008/11/27/qiji_07.jpg" target="_blank" rel="noopener"><img src="http://img1.cache.netease.com/mobile/2008/11/27/qiji_07.jpg" alt=""></a>(圖片來自該網站)</p><p><a href="http://tech.163.com/mobile/08/1127/10/4ROIG2RF0011179O.html" target="_blank" rel="noopener">http://tech.163.com/mobile/08/1127/10/4ROIG2RF0011179O.html</a></p><p>在 Android 平台公布原始碼後，對岸的手機廠短時間內就將介面自行簡體中文化，並加入簡單的中文輸入法功能（非官方），組合出一套可以販賣的產品。</p><p>Android 平台是完全免費的（對山寨機廠來說，WM 好像也是完全免費的 冏）。由於暫時還沒有 Google 授權，所以這台機器上沒有 Android Market、GMail 這些 Google 自有的應用程式。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android SQLite</title>
      <link href="/2008/11/20/Android-SQLite/"/>
      <url>/2008/11/20/Android-SQLite/</url>
      <content type="html"><![CDATA[<p>在寫 SQLite 與實做 CRUD 介面教學的初稿。為了講清楚整個觀念<a href="http://code.google.com/p/androidbmi/wiki/AfterWard" target="_blank" rel="noopener">竟然花了 5 章</a>，還不包含講 ContentProvider，估計 ContentProvider 也要再加 2、3 章才夠 XD</p><p>一個 NotePad 背後需要好多技術，為什麼其他人寫教學可以把 SQL+CRUD+Content Provider 合在一起一篇講完呀? Android 初學者每個都這麼強大嗎? Orz</p><p>還是大家都太著急，希望有捷徑可走？</p><p>要不是我這個人太笨，Java 技巧太虛了，就是其他教的人都太聰明吧。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>什麼是 REST?</title>
      <link href="/2008/11/19/%E4%BB%80%E9%BA%BC%E6%98%AF-REST/"/>
      <url>/2008/11/19/%E4%BB%80%E9%BA%BC%E6%98%AF-REST/</url>
      <content type="html"><![CDATA[<p>Google 開發者講什麼是 Atom Publishing Protocol (AtomPub)<object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/T04fKsD56LU&hl=zh_TW&fs=1"><param name="allowFullScreen" value="true"><param name="allowscriptaccess" value="always"><embed src="http://www.youtube.com/v/T04fKsD56LU&hl=zh_TW&fs=1" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="344"></object></p><p>Google 開發者講什麼是 REST<object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/YCcAE2SCQ6k&hl=zh_TW&fs=1"><param name="allowFullScreen" value="true"><param name="allowscriptaccess" value="always"><embed src="http://www.youtube.com/v/YCcAE2SCQ6k&hl=zh_TW&fs=1" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="344"></object></p><p>Google 開發者講如何使用 Google Data Python Client Library</p><p><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/avk93IXH12I&hl=zh_TW&fs=1"><param name="allowFullScreen" value="true"><param name="allowscriptaccess" value="always"><embed src="http://www.youtube.com/v/avk93IXH12I&hl=zh_TW&fs=1" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="425" height="344"></object></p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flash demo on Android</title>
      <link href="/2008/11/18/Flash-demo-on-Android/"/>
      <url>/2008/11/18/Flash-demo-on-Android/</url>
      <content type="html"><![CDATA[<p>以後網頁上的 Flash 廣告或以 Flash 開發的遊戲也可以在 Android 上執行了。</p><p><object height="344" width="425"><param name="movie" value="http://www.youtube.com/v/ghIGj9r3_vc&amp;hl=zh_TW&amp;fs=1"><param name="allowFullScreen" value="true"><param name="allowscriptaccess" value="always"><embed src="http://www.youtube.com/v/ghIGj9r3_vc&amp;hl=zh_TW&amp;fs=1" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" height="344" width="425"></object></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Jythonroid: Jython runs successfully on Android Emulator</title>
      <link href="/2008/11/16/Jythonroid-Jython-runs-successfully-on-Android-Emulator/"/>
      <url>/2008/11/16/Jythonroid-Jython-runs-successfully-on-Android-Emulator/</url>
      <content type="html"><![CDATA[<p><span style="font-weight: bold;">What is jythonroid</span></p><p>Jythonroid is a project for porting jython on Android platform. Created by ClassFoo.</p><p>Jythonroid is for console-only at this time. It means oneday Android has console/terminal app in device, you could use jython on real android phone. (or please point me if there’s an exist console/terminal app for Android)</p><p>Jythondroid was worked on m5-build but outdated when 1.0 SDK comes out. Now Jythonroid (branch) works on 1.0 SDK &amp; Android Emulator again. Since there’s no GUI yet, you could checked out the code, run the emulator(install in emulator), and use adb shell on PC to try jythonroid.</p><p><span style="font-weight: bold;">Project Url</span></p><p><a href="http://jythonroid.googlecode.com/" target="_blank" rel="noopener">http://jythonroid.googlecode.com</a></p><p><span style="font-weight: bold;">Howto </span></p><p>1. check out the source</p><p>use svn to check out the project source</p><blockquote><p>$ svn co <a href="http://jythonroid.googlecode.com/svn/branches/Jythonroid" target="_blank" rel="noopener">http://jythonroid.googlecode.com/svn/branches/Jythonroid</a> jythonroid</p></blockquote><p>2. import project</p><p>In Eclipse, select “File &gt; Import &gt; Existing Projects into Workspace” in tool bar to import jythonroid project into your workspace.</p><p>3. setup emulator and run</p><p>setup debug settings and press “Debug/Run” button to install jythonroid into Emulator.</p><p>4. Run with adb shell</p><p>WARN: Since jythonroid is in its early phase, at this time it could only be evaluated on dalvik vm/emulator.</p><p>open adb shell, enter data/app folder, and run jythonroid</p><blockquote><p>$ adb shell</p><h1>cd data/app</h1><h1>dalvikvm -classpath org.classfoo.apk org.python.util.jython</h1></blockquote><p>Here’s the screenshot:</p><p><a href="http://2.bp.blogspot.com/_2xGPUuRo1sg/SSEGsza7S7I/AAAAAAAAAXw/k57NuDV-LQY/s1600-h/%E5%9C%96%E7%89%87+1.png" target="_blank" rel="noopener"><img src="http://2.bp.blogspot.com/_2xGPUuRo1sg/SSEGsza7S7I/AAAAAAAAAXw/k57NuDV-LQY/s400/%E5%9C%96%E7%89%87+1.png" alt=""></a></p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移動網路的進展</title>
      <link href="/2008/11/16/%E7%A7%BB%E5%8B%95%E7%B6%B2%E8%B7%AF%E7%9A%84%E9%80%B2%E5%B1%95/"/>
      <url>/2008/11/16/%E7%A7%BB%E5%8B%95%E7%B6%B2%E8%B7%AF%E7%9A%84%E9%80%B2%E5%B1%95/</url>
      <content type="html"><![CDATA[<p>畢業以後用了許多時間玩了各種技術，發現還是無法忘懷小丑魚 (NEMO，Network Mobility)。我的熱情可能還是在網路移動技術上吧。</p><p>花了些時間察看 <a href="http://www.nautilus6.org/doc/nepl-howto/" target="_blank" rel="noopener">NEPL (NEMO Platform for Linux) HOWTO</a> 以了解最近 Mobile IPv6 的更新情況，發現現在 MIPv6 for Linux (MIPL) 專案似乎已經被 <a href="http://www.linux-ipv6.org/" target="_blank" rel="noopener">USAGI</a> 接管了。新的專案名稱叫 <a href="http://umip.linux-ipv6.org/" target="_blank" rel="noopener">UMIP</a>，並直接包含 NEMO 的功能。</p><p>(以後待續…)</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>試玩 Sphinx 之 2</title>
      <link href="/2008/11/13/%E8%A9%A6%E7%8E%A9-Sphinx-%E4%B9%8B-2/"/>
      <url>/2008/11/13/%E8%A9%A6%E7%8E%A9-Sphinx-%E4%B9%8B-2/</url>
      <content type="html"><![CDATA[<p>之前提到過 <a href="http://www.python.org" target="_blank" rel="noopener">Python</a> 2.6 新採用了一套叫做 <a href="http://sphinx.pocoo.org/" target="_blank" rel="noopener">Sphinx</a> 的 rst 文件生成系統來管理 Python 語言官方的文件資料，用 sphinx 所生成的文件網站除了頁面能自訂樣式，自訂文件導覽順序，甚至還有附有搜尋功能。</p><p>已經寫過一篇 <a href="http://inet6.blogspot.com/2007/11/sphinx.html" target="_blank" rel="noopener">試玩 Sphinx</a>。</p><p>而現在值得再提的是，<a href="http://sphinx.pocoo.org/" target="_blank" rel="noopener">Sphinx</a> 專案已經獨立出來了，可以將 sphinx 應用在任何需要文件網站的情況裡。</p><p>1. 安裝</p><blockquote><p>easy_install sphinx</p></blockquote><p>2. 打開命令列，找個目錄，鍵入</p><blockquote><p>sphinx-quickstart</p></blockquote><p>照著互動提示輸入一些生成訊息後， sphinx 會在目錄中生成幾個簡單的檔案。</p><p>目錄中生成幾個簡單的檔案其內容為：</p><ul><li><a href="http://conf.py" target="_blank" rel="noopener">conf.py</a></li></ul><p><a href="http://conf.py" target="_blank" rel="noopener">conf.py</a> 中的內容大部分是我們剛剛在互動提示中填入的資訊，在此都可以修改。</p><p>0.5 版之後支援中文介面(我丟的 Patch)，只要在 <a href="http://conf.py" target="_blank" rel="noopener">conf.py</a> 中指定「language = ‘zh_TW’」即可。</p><ul><li>MAKEFILE</li></ul><p>給 linux 或 mac 用的 make 檔。</p><ul><li>index.rst</li></ul><p>index.rst 等於是整個文件站台的主頁</p><ul><li>.template</li></ul><p>文件站台的樣板，要自訂樣板就修改這。</p><ul><li>.static</li></ul><p>靜態文件，如圖片等內容。</p><ul><li>.build</li></ul><p>建立(編譯)好的文件在此。</p><p>.template/.static/.build 這樣的檔案在 windows 下不易辨識，可以在互動提示中詢問 “Name prefix for templates and static dir [.]:” 時，將 ‘.’ 改成 ‘_’。 那麼生成的資料夾就會變成 _template/_static/_build。</p><p>3. 建立文件</p><p>sphinx 會在目錄中生成 make 檔，輸入</p><blockquote><p>make html</p></blockquote><p>即能產生完整的 html 文件站台。</p><p>如此一來，整個完整的站台都能用 rst 格式來構成啦，實在便利。</p><p>沒有寫過 rst (結構化)文件的人，也可以參考 <a href="http://sphinx.pocoo.org/rest.html" target="_blank" rel="noopener">reStructuredText Primer</a>。</p><p>PS: 順帶一提， Pylons 與 TurboGears2 都已經有 sphinx 支持了。 TurboGears2 的部份(這個是我加進去的)可以用原始碼 docs 目錄中的 get_tgdoc.py 從 <a href="http://docs.turbogears.org" target="_blank" rel="noopener">docs.turbogears.org</a> 自動下載 rst 格式文件，然後再用上面提到的 ‘make html’ 轉成 html 文件檔。</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> rst </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android Maps</title>
      <link href="/2008/11/03/Android-Maps/"/>
      <url>/2008/11/03/Android-Maps/</url>
      <content type="html"><![CDATA[<p><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/_YFw9p0TjT8&color1=0xb1b1b1&color2=0xcfcfcf&hl=en&fs=1"><param name="allowFullScreen" value="true"><embed src="http://www.youtube.com/v/_YFw9p0TjT8&color1=0xb1b1b1&color2=0xcfcfcf&hl=en&fs=1" type="application/x-shockwave-flash" allowfullscreen="true" width="425" height="344"></object></p><p>在學 Android 1.0 版的地圖應用方面碰到很多麻煩。</p><p>其一是 Android 1.0 版的地圖功能，在開發中就需要由金鑰申請 Map Key。其二是各種版本(M3、M5、0.9、1.0)下來幾乎很難確認哪本書、哪段 Tutorial 到現在還是正確的。</p><p>SQLite 資料庫應用亦是有相同問題。</p><p>雖然遇到很多挫折，但看看 Android Map 的實際功能影片，會覺得不管怎樣，還是該學會這麼強悍的東西呀 😄</p><p>Update: 地圖部分已經搞定了。草稿也寫了些。接著來搞定 SQLite 資料庫吧 😄</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android Market 上架第一天成果</title>
      <link href="/2008/11/01/Android-Market-%E4%B8%8A%E6%9E%B6%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%88%90%E6%9E%9C/"/>
      <url>/2008/11/01/Android-Market-%E4%B8%8A%E6%9E%B6%E7%AC%AC%E4%B8%80%E5%A4%A9%E6%88%90%E6%9E%9C/</url>
      <content type="html"><![CDATA[<p><a href="http://3.bp.blogspot.com/_2xGPUuRo1sg/SQf4D46ClOI/AAAAAAAAAV4/ve8ua_aPhdU/s1600-h/icon_128.png" target="_blank" rel="noopener"><img src="http://3.bp.blogspot.com/_2xGPUuRo1sg/SQf4D46ClOI/AAAAAAAAAV4/ve8ua_aPhdU/s200/icon_128.png" alt=""></a></p><p>在「Android Market」開放給開發者上傳應用程式的第一天（美國時間10/27），我就將「<a href="http://code.google.com/p/androidbmi/wiki/DiveIntoAndroid" target="_blank" rel="noopener">深入淺出 Android – Google 手持設備應用程式設計</a>」電子書中的兩個範例程式「aBMI」(英制)（還沒釋出的範例）、「gBMI」(公制)（基礎、中階的範例）「身高體重指數計算」程式上傳到「Android Market」上。考慮到當時使用者(美國)主要集中在使用英制的國家，因此我預期「aBMI」應用程式會得到比較好的評價。</p><p>果然，在第一天結束之後，截圖如下</p><p><a href="http://3.bp.blogspot.com/_2xGPUuRo1sg/SQf2ca1InDI/AAAAAAAAAVw/ul_OyKtgdSs/s1600-h/AndroidMarket.png" target="_blank" rel="noopener"><img src="http://3.bp.blogspot.com/_2xGPUuRo1sg/SQf2ca1InDI/AAAAAAAAAVw/ul_OyKtgdSs/s200/AndroidMarket.png" alt=""></a></p><p>「aBMI」(英制)得到 732 次下載，目前「active installs」(仍安裝在機器上)的人數為 452 人（比率 61%）。共有 25 個人平均給予 3 顆星的評價。就一個運作相當簡單的應用程式而言，比起其他書籍範例的完成度，3 顆星的評價還是算相當可接受的。至於「gBMI」(公制)則因為不是針對目標使用者設計，得到 602 次下載，「active installs」的人數為 193 人(比率 32%)。只有 11 個人平均給 2 顆星的評價。因此可以明顯看到，「gBMI」不論是下載的人數、安裝後繼續使用的比率，或是整體評價都要比「aBMI」差一個檔次。當 Android 手機在使用「公制」的國家開賣後，相信比例或評價會再次變化。</p><p>在設計兩個應用程式時，同樣需花上差不多的時間，但是卻得到有相當明顯差別的結果。由此可以看出，手機應用程式需針對使用者的特性來設計的重要性。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Q1 2009，繁體中文版 Android 手機?</title>
      <link href="/2008/10/23/Q1-2009%EF%BC%8C%E7%B9%81%E9%AB%94%E4%B8%AD%E6%96%87%E7%89%88-Android-%E6%89%8B%E6%A9%9F/"/>
      <url>/2008/10/23/Q1-2009%EF%BC%8C%E7%B9%81%E9%AB%94%E4%B8%AD%E6%96%87%E7%89%88-Android-%E6%89%8B%E6%A9%9F/</url>
      <content type="html"><![CDATA[<p><a href="http://phandroid.com/wp-content/uploads/2008/10/andrroid_keyboard.png" target="_blank" rel="noopener"><img src="http://phandroid.com/wp-content/uploads/2008/10/andrroid_keyboard.png" alt=""></a></p><p>前幾天 Android 平台 <a href="http://source.android.com/" target="_blank" rel="noopener">開放了原始碼</a>，同時也提供了 <a href="http://source.android.com/roadmap" target="_blank" rel="noopener">RoadMap</a>。裡面有很值得玩味的訊息。</p><p>在 Q1 2009，Android 平台將會加入以下支援：</p><p>1. Localization</p><p>French, Italian, es_es, <span style="font-weight: bold;">zh_TW</span>, Ja, NL, CZ</p><p>2. IMF &amp; IME (輸入法框架、虛擬鍵盤)</p><p>如果照著 Android 系統之前隨機子釋出的慣例來看，2009 Q1 很可能會有繁體中文版的 Android 手機喔。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>開放</title>
      <link href="/2008/10/10/%E9%96%8B%E6%94%BE/"/>
      <url>/2008/10/10/%E9%96%8B%E6%94%BE/</url>
      <content type="html"><![CDATA[<blockquote><p>不管是專屬軟體還是開放源碼軟體，除錯絕對不會是免費的。即使沒有實際付錢，還是有機會成本和時間成本。投入開放源碼計畫的志願性程式人力是有限的，所有開放源碼計畫都在爭取同一群有限的程式設計資源，只有最具吸引力的計畫才能擁有超過需要的志願開發者。– <a href="http://local.joelonsoftware.com/mediawiki/index.php/The_Joel_on_Software_Translation_Project:%E7%AD%96%E7%95%A5%E6%9B%B8%E4%B9%8B%E4%BA%94" target="_blank" rel="noopener">Joel on Software</a></p></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title>機油 (GAEO) 0.2 alpha 版發佈</title>
      <link href="/2008/10/09/%E6%A9%9F%E6%B2%B9-GAEO-0-2-alpha-%E7%89%88%E7%99%BC%E4%BD%88/"/>
      <url>/2008/10/09/%E6%A9%9F%E6%B2%B9-GAEO-0-2-alpha-%E7%89%88%E7%99%BC%E4%BD%88/</url>
      <content type="html"><![CDATA[<p><a href="http://doc.gaeo.org/_/rsrc/1220443094048/config/app/images/customLogo/customLogo.gif?revision=1" target="_blank" rel="noopener"><img src="http://doc.gaeo.org/_/rsrc/1220443094048/config/app/images/customLogo/customLogo.gif?revision=1" alt=""></a></p><p>開發過 Google App Engine 網頁應用程式的 Python 開發者，可能都有種被縛手縛腳的感覺。因為現成 Python 的網頁框架在 Google App Engine 上，有些地方因為 Google App Engine  的限制而無法作用，因此用起來不是很順手。</p><p><a href="http://code.google.com/p/google-app-engine-oil/" target="_blank" rel="noopener">GAEO (Google App Engine Oil)</a> 是個專門作用在 Google App Engine 上的框架，免去 Google App Engine 一切得自己手動建造的麻煩。</p><p><span style="font-size:180%;">安裝</span></p><p>使用</p><blockquote><p>easy_install gaeo命令就可以安裝好。</p></blockquote><p>安裝完提供 gaeo 跟 gaeogen 兩個命令。</p><p><span style="font-size:180%;">建立新專案</span></p><p>使用</p><blockquote><p>gaeo &lt;專案名稱&gt;來建立一個新專案，新專案中除了基本 Google App Engine 的設定檔案外，還複製了一個 gaeo 檔案夾，提供  gaeo 相關的函式庫。</p></blockquote><p>建立後進入專案，啟動 Google App Engine 開發工具的 server 就可以看到運行的網站。</p><p>還可以改使用</p><blockquote><p>gaeo --eclipse &lt;專案名稱&gt;來順便建立 pydev+eclipse 開發環境用的專案資訊。</p></blockquote><p><span style="font-size:180%;">程式碼組織方式</span>GAEO 組織程式碼的方式一樣是網頁框架常見的 Controller/Model/Templates 組織方式。剛建立的資料夾主要內容如下：</p><blockquote><p><a href="http://main.py" target="_blank" rel="noopener">main.py</a>application/controllers/welcome.pyapplication/template/welcome/index.html</p></blockquote><p><a href="http://main.py" target="_blank" rel="noopener">main.py</a> 中可以透過 initRoutes() 函式來修改 url 對應的類別(class)。template 中的 welcome 資料夾則是直接對應到  controllers 中的 <a href="http://welcome.py" target="_blank" rel="noopener">welcome.py</a>。<span style="font-size:180%;">新增函式</span></p><p>要新增一個 url 處理函式，可以用</p><blockquote><p>gaeogen controller blog view post命令，會在 application/controllers 中建立 <a href="http://blog.py" target="_blank" rel="noopener">blog.py</a> 檔案，裡面有一個 ‘blog’ class，class 中包含 'view’和 ‘post’ 兩個 method。另外 application/template 中也會建立一個 blog 資料夾，裡面包含 view.html 和 post.html 兩個 Django template 檔案。</p></blockquote><p><span style="font-size:180%;">技術</span></p><p>技術上 gaeo 樣板使用 django template，而整個 routing 是採用「一頁樣板(template) 對應一個方法 (method) 」的組織方式，可以用類似 route 的方式添加新方法。0.2 版除了提供 scaffold (鷹架)之外，也提供 plugin 系統，整個很有 Ruby on Rail 的感覺。</p><p>照著<a href="http://doc.gaeo.org/" target="_blank" rel="noopener">官方文件</a>說明做一遍，一個多小時內就可以上手開發 Google App Engine 上的網頁應用程式啦。</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> GAE </tag>
            
            <tag> GAEO </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>建立自己的程式碼群圖</title>
      <link href="/2008/09/28/%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%BE%A4%E5%9C%96/"/>
      <url>/2008/09/28/%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E7%A8%8B%E5%BC%8F%E7%A2%BC%E7%BE%A4%E5%9C%96/</url>
      <content type="html"><![CDATA[<p><a href="http://2.bp.blogspot.com/_2xGPUuRo1sg/SN-oEarrX1I/AAAAAAAAAUE/K7ljVZQJFDE/s1600-h/code_swarm-00335.png" target="_blank" rel="noopener"><img src="http://2.bp.blogspot.com/_2xGPUuRo1sg/SN-oEarrX1I/AAAAAAAAAUE/K7ljVZQJFDE/s400/code_swarm-00335.png" alt=""></a></p><p>看了 <a href="http://amix.dk/blog/viewEntry/19350" target="_blank" rel="noopener">Creating your own code swarm</a> 這篇文章，照著弄了一套程式碼群圖(Code Swarm) ，真的很簡單有趣。</p><p>程式碼群圖是指從 svn, git, hg 上取得更新 log，由 CodeSwarm 程式分析，產生出以時間為單位的一張張截圖。</p><p>上圖是周蟒的程式碼群圖。</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> fun </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>手指操作介面的更新: Android Todo List Demo</title>
      <link href="/2008/09/26/%E6%89%8B%E6%8C%87%E6%93%8D%E4%BD%9C%E4%BB%8B%E9%9D%A2%E7%9A%84%E6%9B%B4%E6%96%B0-Android-Todo-List-Demo/"/>
      <url>/2008/09/26/%E6%89%8B%E6%8C%87%E6%93%8D%E4%BD%9C%E4%BB%8B%E9%9D%A2%E7%9A%84%E6%9B%B4%E6%96%B0-Android-Todo-List-Demo/</url>
      <content type="html"><![CDATA[<p>在 <a href="http://pdanewsclip.blogspot.com/" target="_blank" rel="noopener">PDA 簡報夾</a>上寫了一則 <a href="http://pdanewsclip.blogspot.com/2008/09/android.html" target="_blank" rel="noopener">能用手指劃掉項目的 Android 待辦事項應用程式</a></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>T-Mobile G1 和 Android SDK 1.0</title>
      <link href="/2008/09/25/T-Mobile-G1-%E5%92%8C-Android-SDK-1-0/"/>
      <url>/2008/09/25/T-Mobile-G1-%E5%92%8C-Android-SDK-1-0/</url>
      <content type="html"><![CDATA[<p>T-Mobile G1（第一台 Android 實機） 實際使用情況</p><p><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/NTMHJamk5BA&hl=zh_TW&fs=1"><param name="allowFullScreen" value="true"><embed src="http://www.youtube.com/v/NTMHJamk5BA&hl=zh_TW&fs=1" type="application/x-shockwave-flash" allowfullscreen="true" width="425" height="344"></object></p><p>Android SDK 1.0 也釋出了。與 0.9 相比修改不多，有趣的一點是 <a href="http://blogs.zdnet.com/Burnette/?p=662" target="_blank" rel="noopener">Android 的瀏覽器(Chrome Lite)已經內建 Google Gear Plugin 了</a>。支援 Gears 的網頁程式可以在 Android 桌面上留下啟動圖示。</p><p><a href="http://blogs.zdnet.com/Burnette/images/figgearsshort2.png" target="_blank" rel="noopener"><img src="http://blogs.zdnet.com/Burnette/images/figgearsshort2.png" alt=""></a></p><p>使用模擬器時，也可以下載 <a href="http://www.android.encke.net/" target="_blank" rel="noopener">T-Mobile G1 的模擬器佈景</a></p><p><a href="http://www.android.encke.net/images/hvga-l-htc-dream-b.small.png" target="_blank" rel="noopener"><img src="http://www.android.encke.net/images/hvga-l-htc-dream-b.small.png" alt=""></a></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>plurk + jaiku 一起發簡訊</title>
      <link href="/2008/09/18/plurk-jaiku-%E4%B8%80%E8%B5%B7%E7%99%BC%E7%B0%A1%E8%A8%8A/"/>
      <url>/2008/09/18/plurk-jaiku-%E4%B8%80%E8%B5%B7%E7%99%BC%E7%B0%A1%E8%A8%8A/</url>
      <content type="html"><![CDATA[<p>下載 <a href="http://code.google.com/p/plurkapipy/" target="_blank" rel="noopener">plurkapipy</a> 跟 <a href="http://code.google.com/p/python-jaiku/" target="_blank" rel="noopener">python-jaiku</a> 後，再把下面的 python 檔案另存新檔。填入必需的帳號密碼或 apikey 後，就可以同時使用 plurk + jaiku 囉。下面是 console 版本：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; #!/usr/bin/python</span><br><span class="line">&gt; #coding=utf-8</span><br><span class="line">&gt; import plurkapi #http://code.google.com/p/plurkapipy/</span><br><span class="line">&gt; import jaiku #http://code.google.com/p/python-jaiku/</span><br><span class="line">&gt; </span><br><span class="line">&gt; #plurk login infomation</span><br><span class="line">&gt; pnickname = &quot;&quot;</span><br><span class="line">&gt; ppassword = &quot;&quot;</span><br><span class="line">&gt; </span><br><span class="line">&gt; #jaiku login infomation</span><br><span class="line">&gt; jusername = &quot;&quot;</span><br><span class="line">&gt; japikey = &quot;&quot;</span><br><span class="line">&gt; </span><br><span class="line">&gt; message = raw_input(&quot;要送出的訊息：&quot;)</span><br><span class="line">&gt; </span><br><span class="line">&gt; #jaiku</span><br><span class="line">&gt; japi = jaiku.Api(username=jusername, api_key=japikey)</span><br><span class="line">&gt; print japi.PostPresence(message)</span><br><span class="line">&gt; </span><br><span class="line">&gt; # plurk</span><br><span class="line">&gt; papi = plurkapi.PlurkAPI()</span><br><span class="line">&gt; if papi.login(pnickname, ppassword) == False:</span><br><span class="line">&gt;     print &quot;login fail&quot;</span><br><span class="line">&gt; else:</span><br><span class="line">&gt;     print papi.addPlurk(content=message, lang=&quot;tr_ch&quot;)</span><br></pre></td></tr></table></figure><p>再搭配 App Engine 的話，很快就可以寫出一個網頁介面的發訊程式囉。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Will Django Live in separate world?</title>
      <link href="/2008/09/17/Will-Django-Live-in-separate-world/"/>
      <url>/2008/09/17/Will-Django-Live-in-separate-world/</url>
      <content type="html"><![CDATA[<p>Mark Ramm 跑去 Djangocon 踢館的 Screencast XD</p><p><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/fipFKyW2FA4&hl=zh_TW&fs=1"><param name="allowFullScreen" value="true"><embed src="http://www.youtube.com/v/fipFKyW2FA4&hl=zh_TW&fs=1" type="application/x-shockwave-flash" allowfullscreen="true" width="425" height="344"></object></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>「Yahoo!奇摩字典」Ubiquity Script</title>
      <link href="/2008/09/09/%E3%80%8CYahoo-%E5%A5%87%E6%91%A9%E5%AD%97%E5%85%B8%E3%80%8DUbiquity-Script/"/>
      <url>/2008/09/09/%E3%80%8CYahoo-%E5%A5%87%E6%91%A9%E5%AD%97%E5%85%B8%E3%80%8DUbiquity-Script/</url>
      <content type="html"><![CDATA[<p>把下面的 script copy 到 <a href="http://labs.mozilla.com/2008/08/introducing-ubiquity/" target="_blank" rel="noopener">Ubiquity</a> 的 command-editor 中。每當看到不熟的生字，打開 <a href="http://labs.mozilla.com/2008/08/introducing-ubiquity/" target="_blank" rel="noopener">Ubiquity</a>，輸入「fy」，按下「Enter」鍵，即可連結到「<a href="http://tw.dictionary.yahoo.com/" target="_blank" rel="noopener">Yahoo!奇摩字典</a>」看解釋。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; CmdUtils.CreateCommand(&#123;</span><br><span class="line">&gt; name: &quot;fy&quot;,</span><br><span class="line">&gt; homepage: &quot;zhpy.googlecode.com&quot;,</span><br><span class="line">&gt; author: &#123; name: &quot;Fred Lin&quot;, email: &quot;gasolin+ubiquity@gmail.com&quot;&#125;,</span><br><span class="line">&gt; license: &quot;MIT&quot;,</span><br><span class="line">&gt; description: &quot;yahoo dict&quot;,</span><br><span class="line">&gt; help: &quot;fy [keyword]&quot;,</span><br><span class="line">&gt; </span><br><span class="line">&gt; takes: &#123;&quot;keyword&quot;: noun_arb_text&#125;,</span><br><span class="line">&gt; </span><br><span class="line">&gt; preview: function( pblock, directObject ) &#123;</span><br><span class="line">&gt; searchText = jQuery.trim(directObject.text)</span><br><span class="line">&gt; var previewTemplate = &quot;輸入要搜尋的單字 $&#123;query&#125;&quot;;</span><br><span class="line">&gt; var previewData     = &#123;query: searchText&#125;;</span><br><span class="line">&gt; pblock.innerHTML    = CmdUtils.renderTemplate(previewTemplate, previewData);</span><br><span class="line">&gt; &#125;,</span><br><span class="line">&gt; </span><br><span class="line">&gt; execute: function( directObject ) &#123;</span><br><span class="line">&gt; var url = &quot;http://tw.dictionary.yahoo.com/dictionary?s=&#123;QUERY&#125;&quot;</span><br><span class="line">&gt; var urlString = url.replace(&quot;&#123;QUERY&#125;&quot;, directObject.text);</span><br><span class="line">&gt; Utils.openUrlInBrowser(urlString);</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Ubiquity </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我是 Python，10件所有人都想問我的事</title>
      <link href="/2008/08/11/%E6%88%91%E6%98%AF-Python%EF%BC%8C10%E4%BB%B6%E6%89%80%E6%9C%89%E4%BA%BA%E9%83%BD%E6%83%B3%E5%95%8F%E6%88%91%E7%9A%84%E4%BA%8B/"/>
      <url>/2008/08/11/%E6%88%91%E6%98%AF-Python%EF%BC%8C10%E4%BB%B6%E6%89%80%E6%9C%89%E4%BA%BA%E9%83%BD%E6%83%B3%E5%95%8F%E6%88%91%E7%9A%84%E4%BA%8B/</url>
      <content type="html"><![CDATA[<p>Guido 在 <a href="http://jaiku.com/channel/python/presence/42088545" target="_blank" rel="noopener">Jaiku</a> 上提到一篇<a href="http://troutgirl.wordpress.com/2008/08/08/learning-python/" target="_blank" rel="noopener">「Learning Python」文章</a>，</p><p>裡面提到，Python 社群的最大問題就是注意力實在太分散了。相比用 PHP 或 Ruby 語言的人，問他們「對在哪方面使用該語言開發感興趣？」這問題，你幾乎都會聽到「Web 開發」。而在 Python 社群裡隨意抽五個人，問他們對在哪方面使用 Python 語言開發感興趣，則很可能會得到不同的五個答案。</p><p>所以在該文最後也提出了兩個問題:</p><p>1. 舉出 10 件所有人會想用 Python 語言寫而不用其他語言寫的事</p><p>2. 舉出 10 個所有人都會想問的關於 Python 語言的問題。</p><p>經過<a href="http://groups.google.com/group/python-cn/browse_thread/thread/5658c99025660056/126340d98c052fa5?show_docid=126340d98c052fa5#" target="_blank" rel="noopener">一些討論</a>後，在此舉出「 10 件關於 Python 語言所有人都想問的問題」：</p><p>1. 為什麼 Python 既是動態語言又是強型別的語言?2. 用哪個 IDE 寫 Python 比較好?3. 有什麼關於 Python 語言的好書?4. 學 python 語言能找到工作嗎?5. 為什麼用縮排而不是用括弧或「End」來分段?6. 用哪種 GUI 好?7. 為什麼 Python 比 xxx 語言慢?8. 如何開始學習 Python 語言？有什麼好建議嗎？9. 有什麼小巧的 Python source 或專案項目可以參考練手？10. 怎麼在 Windows 上直接跑 Python 程式 (不先安裝 Python)?</p><p>8/12/2008 更新: Guido 採用了這10個問題，並<a href="http://wiki.python.org/moin/Ten_things_people_want_to_know_about_Python" target="_blank" rel="noopener">在 python wiki 上開了專頁</a>。</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>三分鐘教你/妳自製閃光卡</title>
      <link href="/2008/08/08/%E4%B8%89%E5%88%86%E9%90%98%E6%95%99%E4%BD%A0-%E5%A6%B3%E8%87%AA%E8%A3%BD%E9%96%83%E5%85%89%E5%8D%A1/"/>
      <url>/2008/08/08/%E4%B8%89%E5%88%86%E9%90%98%E6%95%99%E4%BD%A0-%E5%A6%B3%E8%87%AA%E8%A3%BD%E9%96%83%E5%85%89%E5%8D%A1/</url>
      <content type="html"><![CDATA[<p><a href="http://tbn0.google.com/images?q=tbn:Uy40wXVANJ4nMM:http://www.3515.com.cn/upfile/product/2006/10/00/2006101340970173.jpg" target="_blank" rel="noopener"><img src="http://tbn0.google.com/images?q=tbn:Uy40wXVANJ4nMM:http://www.3515.com.cn/upfile/product/2006/10/00/2006101340970173.jpg" alt=""></a></p><p>你/妳是否是去死去死團的一員？在這個充滿閃光與柴可夫斯基1812序曲的節日，有種暫時失明的感覺？</p><p>為了對抗這個節日，我們就來自製閃光卡吧！</p><p>這個閃光卡製作的方法，就是寫個單詞記憶程式，並把這個單詞記憶程式命名為 閃光卡 (FlashCard) (*註) XD</p><p>寫一個簡單的記憶程式不用花太多時間：我們只需要一個詞庫，與一個用作檢視與複習詞條的介面。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; #!/usr/bin/python</span><br><span class="line">&gt; # -*- coding: utf-8 -*-</span><br><span class="line">&gt; </span><br><span class="line">&gt; deck = [(&quot;a&quot;,&quot;apple&quot;),</span><br><span class="line">&gt;       (&quot;b&quot;, &quot;boy&quot;),</span><br><span class="line">&gt;       (&quot;c&quot;, &quot;cat&quot;),</span><br><span class="line">&gt;       (&quot;d&quot;,&quot;dog&quot;)] #詞庫，包含4筆詞條</span><br><span class="line">&gt; </span><br><span class="line">&gt; import random</span><br><span class="line">&gt; </span><br><span class="line">&gt; help = &quot;commands: Fail/Lucky/Quit&quot; #支援的命令</span><br><span class="line">&gt; </span><br><span class="line">&gt; while True:</span><br><span class="line">&gt; card = random.choice(deck) # 從詞庫裡挑一個詞條，如 (&apos;d&apos;, &apos;dog&apos;)</span><br><span class="line">&gt; which = random.choice(card) # 從詞條裡挑一個詞，如 (&apos;d&apos;, &apos;dog&apos;) 中挑 &apos;d&apos; 或 &apos;dog&apos;</span><br><span class="line">&gt; </span><br><span class="line">&gt; print which #顯示詞</span><br><span class="line">&gt; print card[0], card[1] #印出完整答案</span><br><span class="line">&gt; </span><br><span class="line">&gt; action = raw_input(&quot;&gt; &quot;).lower() #輸入命令</span><br><span class="line">&gt; if action == &quot;q&quot;: #按其他鍵繼續，按q就跳出迴圈</span><br><span class="line">&gt;    break</span><br><span class="line">&gt; if &quot;f&quot; in action or &quot;l&quot; in action: #忘記時的處理策略</span><br><span class="line">&gt;    print &quot;...recorded.&quot;</span><br><span class="line">&gt;    deck.append(card) #多加本詞條入詞庫中，以提升被選中的頻率</span><br><span class="line">&gt; if &quot;h&quot; in action:</span><br><span class="line">&gt;    print help #印出說明</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>進一步修改參考：</p><ul><li><p>若要用作英文學習的話，不只前項(英文)、後項(中文解釋)，也許還要一欄音標。</p></li><li><p>詞庫應該要可以抽換</p></li><li><p>詞庫應該要可以合併使用(應該支援多詞庫)</p></li><li><p>要用更有效的學習模式，如<a href="http://www.supermemo.com/english/ol/sm2.htm" target="_blank" rel="noopener">sm2</a></p></li><li><p>應該可以用圖片代替文字，以做到支援「音標」等效果。參考資料</p></li><li><p><a href="http://www.shallowsky.com/software/scripts/flashcard/" target="_blank" rel="noopener">flashcard</a></p></li><li><p><a href="http://www.leancrew.com/all-this/2007/11/simple-flashcard-program-in-python/" target="_blank" rel="noopener">Simple flashcard program in Python</a></p></li></ul><p>*註: 英文中， flashcard 就是單詞記憶卡的意思。</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>三分鐘教你/妳自製閃光卡 -- 補充包</title>
      <link href="/2008/08/08/%E4%B8%89%E5%88%86%E9%90%98%E6%95%99%E4%BD%A0-%E5%A6%B3%E8%87%AA%E8%A3%BD%E9%96%83%E5%85%89%E5%8D%A1-%E8%A3%9C%E5%85%85%E5%8C%85/"/>
      <url>/2008/08/08/%E4%B8%89%E5%88%86%E9%90%98%E6%95%99%E4%BD%A0-%E5%A6%B3%E8%87%AA%E8%A3%BD%E9%96%83%E5%85%89%E5%8D%A1-%E8%A3%9C%E5%85%85%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>繼上一篇裡我們<a href="http://inet6.blogspot.com/2008/08/flashcard.html" target="_blank" rel="noopener">製作好閃光卡</a>後，這裡再附送一個補充包： 平假名/片假名詞彙庫，讓閃光卡真正能運用於日常生活中 XD</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; Hiragana = [(&quot;あ&quot;,&quot;a&quot;), (&quot;い&quot;, &quot;i&quot;), (&quot;う&quot;, &quot;u&quot;), (&quot;え&quot;,&quot;e&quot;), (&quot;お&quot;, &quot;o&quot;),</span><br><span class="line">&gt;               (&quot;か&quot;, &quot;ka&quot;), (&quot;き&quot;, &quot;ki&quot;), (&quot;く&quot;, &quot;ku&quot;), (&quot;け&quot;, &quot;ke&quot;), (&quot;こ&quot;, &quot;ko&quot;),</span><br><span class="line">&gt;               (&quot;さ&quot;, &quot;sa&quot;), (&quot;し&quot;, &quot;shi&quot;), (&quot;す&quot;, &quot;shu&quot;), (&quot;せ&quot;, &quot;se&quot;), (&quot;そ&quot;, &quot;so&quot;),</span><br><span class="line">&gt;               (&quot;た&quot;, &quot;ta&quot;), (&quot;ち&quot;, &quot;chi&quot;), (&quot;つ&quot;, &quot;tsu&quot;), (&quot;て&quot;, &quot;te&quot;), (&quot;と&quot;, &quot;to&quot;),</span><br><span class="line">&gt;               (&quot;な&quot;, &quot;na&quot;), (&quot;に&quot;, &quot;ni&quot;), (&quot;ぬ&quot;, &quot;nu&quot;), (&quot;ね&quot;, &quot;ne&quot;), (&quot;の&quot;, &quot;no&quot;),</span><br><span class="line">&gt;               (&quot;は&quot;, &quot;ha&quot;), (&quot;ひ&quot;, &quot;hi&quot;), (&quot;ふ&quot;, &quot;hu&quot;), (&quot;へ&quot;, &quot;he&quot;), (&quot;ほ&quot;, &quot;ho&quot;),</span><br><span class="line">&gt;               (&quot;ま&quot;, &quot;ma&quot;), (&quot;み&quot;, &quot;mi&quot;), (&quot;む&quot;, &quot;mu&quot;), (&quot;め&quot;, &quot;me&quot;), (&quot;も&quot;, &quot;mo&quot;),</span><br><span class="line">&gt;               (&quot;や&quot;, &quot;ya&quot;),                 (&quot;ゆ&quot;, &quot;yu&quot;),                 (&quot;よ&quot;, &quot;yo&quot;),</span><br><span class="line">&gt;               (&quot;ら&quot;, &quot;ra&quot;), (&quot;り&quot;, &quot;ri&quot;), (&quot;る&quot;, &quot;ru&quot;), (&quot;れ&quot;, &quot;re&quot;), (&quot;ろ&quot;, &quot;ro&quot;),</span><br><span class="line">&gt;               (&quot;わ&quot;, &quot;wa&quot;), (&quot;ゐ&quot;, &quot;wi&quot;),              (&quot;ゑ&quot;, &quot;we&quot;), (&quot;を&quot;, &quot;wo&quot;),</span><br><span class="line">&gt;               (&quot;が&quot;, &quot;ga&quot;), (&quot;ぎ&quot;, &quot;gi&quot;), (&quot;ぐ&quot;, &quot;gu&quot;), (&quot;げ&quot;, &quot;ge&quot;), (&quot;ご&quot;, &quot;go&quot;),</span><br><span class="line">&gt;               (&quot;ざ&quot;, &quot;za&quot;), (&quot;じ&quot;, &quot;ji&quot;), (&quot;ず&quot;, &quot;zu&quot;), (&quot;ぜ&quot;, &quot;ze&quot;), (&quot;ぞ&quot;, &quot;zo&quot;),</span><br><span class="line">&gt;               (&quot;だ&quot;, &quot;da&quot;), (&quot;ぢ&quot;, &quot;(ji)&quot;), (&quot;づ&quot;, &quot;(zu)&quot;), (&quot;で&quot;, &quot;de&quot;), (&quot;ど&quot;, &quot;do&quot;),</span><br><span class="line">&gt;               (&quot;ば&quot;, &quot;ba&quot;), (&quot;び&quot;, &quot;bi&quot;), (&quot;ぶ&quot;, &quot;bu&quot;), (&quot;べ&quot;, &quot;be&quot;), (&quot;ぼ&quot;, &quot;bo&quot;),</span><br><span class="line">&gt;               (&quot;ぱ&quot;, &quot;pa&quot;), (&quot;ぴ&quot;, &quot;pi&quot;), (&quot;ぷ&quot;, &quot;pu&quot;), (&quot;ぺ&quot;, &quot;pe&quot;), (&quot;ぽ&quot;, &quot;po&quot;)</span><br><span class="line">&gt;               ] #平假名詞庫</span><br><span class="line">&gt; </span><br><span class="line">&gt; Katakana = [(&quot;ア&quot;, &quot;a&quot;), (&quot;イ&quot;, &quot;i&quot;), (&quot;ウ&quot;, &quot;u&quot;), (&quot;エ&quot;,&quot;e&quot;), (&quot;オ&quot;, &quot;o&quot;),</span><br><span class="line">&gt;               (&quot;カ&quot;, &quot;ka&quot;), (&quot;キ&quot;, &quot;ki&quot;), (&quot;ク&quot;, &quot;ku&quot;), (&quot;ケ&quot;, &quot;ke&quot;), (&quot;コ&quot;, &quot;ko&quot;),</span><br><span class="line">&gt;               (&quot;サ&quot;, &quot;sa&quot;), (&quot;シ&quot;, &quot;shi&quot;), (&quot;ス&quot;, &quot;shu&quot;), (&quot;セ&quot;, &quot;se&quot;), (&quot;ソ&quot;, &quot;so&quot;),</span><br><span class="line">&gt;               (&quot;タ&quot;, &quot;ta&quot;), (&quot;チ&quot;, &quot;chi&quot;), (&quot;ツ&quot;, &quot;tsu&quot;), (&quot;テ&quot;, &quot;te&quot;), (&quot;ト&quot;, &quot;to&quot;),</span><br><span class="line">&gt;               (&quot;ナ&quot;, &quot;na&quot;), (&quot;ニ&quot;, &quot;ni&quot;), (&quot;ヌ&quot;, &quot;nu&quot;), (&quot;ネ&quot;, &quot;ne&quot;), (&quot;ノ&quot;, &quot;no&quot;),</span><br><span class="line">&gt;               (&quot;ハ&quot;, &quot;ha&quot;), (&quot;ヒ&quot;, &quot;hi&quot;), (&quot;フ&quot;, &quot;hu&quot;), (&quot;ヘ &quot;, &quot;he&quot;), (&quot;ホ&quot;, &quot;ho&quot;),</span><br><span class="line">&gt;               (&quot;マ&quot;, &quot;ma&quot;), (&quot;ミ&quot;, &quot;mi&quot;), (&quot;ム&quot;, &quot;mu&quot;), (&quot;メ&quot;, &quot;me&quot;), (&quot;モ&quot;, &quot;mo&quot;),</span><br><span class="line">&gt;               (&quot;ヤ&quot;, &quot;ya&quot;),                 (&quot;ユ&quot;, &quot;yu&quot;),                 (&quot;ヨ&quot;, &quot;yo&quot;),</span><br><span class="line">&gt;               (&quot;ラ&quot;, &quot;ra&quot;), (&quot;リ&quot;, &quot;ri&quot;), (&quot;ル&quot;, &quot;ru&quot;), (&quot;レ&quot;, &quot;re&quot;), (&quot;ロ&quot;, &quot;ro&quot;),</span><br><span class="line">&gt;               (&quot;ワ&quot;, &quot;wa&quot;), (&quot;ヰ&quot;, &quot;wi&quot;),              (&quot;ヱ&quot;, &quot;we&quot;), (&quot;ヲ&quot;, &quot;wo&quot;),</span><br><span class="line">&gt;                                                                          (&quot;ン&quot;, &quot;n&quot;),</span><br><span class="line">&gt;               (&quot;ガ&quot;, &quot;ga&quot;), (&quot;ギ&quot;, &quot;gi&quot;), (&quot;グ&quot;, &quot;gu&quot;), (&quot;ゲ&quot;, &quot;ge&quot;), (&quot;ゴ&quot;, &quot;go&quot;),</span><br><span class="line">&gt;               (&quot;ザ&quot;, &quot;za&quot;), (&quot;ジ&quot;, &quot;ji&quot;), (&quot;ズ&quot;, &quot;zu&quot;), (&quot;ゼ&quot;, &quot;ze&quot;), (&quot;ゾ&quot;, &quot;zo&quot;),</span><br><span class="line">&gt;               (&quot;ダ&quot;, &quot;da&quot;), (&quot;ヂ&quot;, &quot;(ji)&quot;), (&quot;ヅ&quot;, &quot;(zu)&quot;), (&quot;デ&quot;, &quot;de&quot;), (&quot;ド&quot;, &quot;do&quot;),</span><br><span class="line">&gt;               (&quot;バ&quot;, &quot;ba&quot;), (&quot;ビ&quot;, &quot;bi&quot;), (&quot;ブ&quot;, &quot;bu&quot;), (&quot;ベ&quot;, &quot;be&quot;), (&quot;ボ&quot;, &quot;bo&quot;),</span><br><span class="line">&gt;               (&quot;パ&quot;, &quot;pa&quot;), (&quot;ピ&quot;, &quot;pi&quot;), (&quot;プ&quot;, &quot;pu&quot;), (&quot;ペ&quot;, &quot;pe&quot;), (&quot;ポ&quot;, &quot;po&quot;)</span><br><span class="line">&gt;               ] #片假名詞庫</span><br><span class="line">&gt; </span><br><span class="line">&gt; deck = Hiragana</span><br></pre></td></tr></table></figure><p>使用時，依照需求將 deck 改成等於 “Hiragana”、“Katakana”，或&quot;Hiragana+Katakana&quot;即可。</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鐵蟒帶電池 IronPython Batteries Included</title>
      <link href="/2008/08/07/%E9%90%B5%E8%9F%92%E5%B8%B6%E9%9B%BB%E6%B1%A0-IronPython-Batteries-Included/"/>
      <url>/2008/08/07/%E9%90%B5%E8%9F%92%E5%B8%B6%E9%9B%BB%E6%B1%A0-IronPython-Batteries-Included/</url>
      <content type="html"><![CDATA[<p>最新的 <a href="http://www.codeplex.com/IronPython/Release/ProjectReleases.aspx?ReleaseId=14353" target="_blank" rel="noopener">IronPython</a> 2.0 Beta4 版除了提供安裝包之外，也包含了<span style="font-weight:bold;">所有</span>的 Python 標準模組庫。看來用 Windows 平台的朋友，已經沒有什麼理由不玩玩它了。</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>scapy</title>
      <link href="/2008/08/07/scapy/"/>
      <url>/2008/08/07/scapy/</url>
      <content type="html"><![CDATA[<p><a href="http://trac.secdev.org/scapy" target="_blank" rel="noopener">scapy</a> 是個相當好用的封包產生工具,只是因為有幾個用到的函式庫需要手動尋找並安裝, 還蠻不方便的.Windows 下使用的限制更多.</p><p><a href="http://trac.secdev.org/scapy" target="_blank" rel="noopener">scapy</a> 雖然只有一個檔案卻可以產生各種 Layer 2 以上的封包.封包中有用到時會自行填入mac, ip, checksum 等訊息, 實在太省事了.<a href="http://trac.secdev.org/scapy" target="_blank" rel="noopener">scapy</a> 允許自訂封包欄位來設計自己的協定, 或改變封包的內容.裝上一些圖形處理函式庫後還可以輸出 protocol 欄位圖形等等.</p><p>在此列出需求函式庫的連結. (Mac 環境下需安裝)</p><p>pcap<a href="http://code.google.com/p/pypcap/" target="_blank" rel="noopener">http://code.google.com/p/pypcap/</a>libdnet<a href="http://sourceforge.net/projects/libdnet/" target="_blank" rel="noopener">http://sourceforge.net/projects/libdnet/</a></p><p>gnuplot<a href="http://sourceforge.net/projects/gnuplot/" target="_blank" rel="noopener">http://sourceforge.net/projects/gnuplot/</a>gnuplot-py<a href="http://sourceforge.net/projects/gnuplot-py/" target="_blank" rel="noopener">http://sourceforge.net/projects/gnuplot-py/</a>pyx<a href="http://sourceforge.net/projects/pyx/" target="_blank" rel="noopener">http://sourceforge.net/projects/pyx/</a></p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>設計先行</title>
      <link href="/2008/08/01/%E8%A8%AD%E8%A8%88%E5%85%88%E8%A1%8C/"/>
      <url>/2008/08/01/%E8%A8%AD%E8%A8%88%E5%85%88%E8%A1%8C/</url>
      <content type="html"><![CDATA[<blockquote><p>不要讓效能考量阻止應行的正確事項。你一定找得出讓程式跑快一點的聰明方式，但是，設計不良，就很難復原了。– 美麗程式</p></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title>試玩 Sphinx 之 3</title>
      <link href="/2008/07/30/%E8%A9%A6%E7%8E%A9-Sphinx-%E4%B9%8B-3/"/>
      <url>/2008/07/30/%E8%A9%A6%E7%8E%A9-Sphinx-%E4%B9%8B-3/</url>
      <content type="html"><![CDATA[<p><a href="http://inet6.blogspot.com/search?q=Sphinx" target="_blank" rel="noopener">試玩完前兩部</a>之後，還是不了解 Sphinx 的話，直接來看個 <a href="http://showmedo.com/videos/video?name=2910020&amp;fromSeriesID=291" target="_blank" rel="noopener">Screencast</a> (視頻演示)吧</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> rst </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>wiifit 與瘦身-2</title>
      <link href="/2008/07/26/wiifit-%E8%88%87%E7%98%A6%E8%BA%AB-2/"/>
      <url>/2008/07/26/wiifit-%E8%88%87%E7%98%A6%E8%BA%AB-2/</url>
      <content type="html"><![CDATA[<p>半年前寫了 <a href="http://inet6.blogspot.com/2007/12/wiifit.html" target="_blank" rel="noopener">wiifit 與瘦身</a> 一篇，當時嘗試的結論是失敗的。最近因為實在太胖了，又開始把 wii balance board 搬出來，拿來持續記錄體重，並設定預達成的目標。而不再依靠 wii fit 上面的小遊戲當減肥方法。這次的使用效果卻不錯。</p><p>現在我訂的目標是每隔兩週減 0.5 公斤。</p><p>我的心得如下：</p><p>1. 訂的減重目標不要太遠2. 訂的減重目標不要太大</p><p>1. 訂的減重目標不要太遠</p><p>對胖子而言，不能放開懷抱享受美食是痛苦的事。如果能用短期就能達到目標的快樂，來替代美食入口的誘惑，能達成目標的機會就大的多。</p><p>2. 訂的減重目標不要太大</p><blockquote><p>一個月吃不成一個胖子，一個月也減不成一個瘦子。</p></blockquote><p>當股票大盤一直跌時，想要逆勢賺錢是件很困難的事。同樣地，當體重在不停上升時，想要逆著方向減重，也容易遇到挫折。把控制體重當做是長期的目標，一次 0.5、0.3 公斤，多累積幾次，減掉的重量也會很可觀。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Androbian?</title>
      <link href="/2008/07/26/Androbian/"/>
      <url>/2008/07/26/Androbian/</url>
      <content type="html"><![CDATA[<blockquote><p>How they will merge two platforms that have so many things different about them is beyond us.One is chocolate, the other is peanut butter. Two completely different things. However, we know how good they taste together!</p><p>一邊是巧克力，另一邊是花生醬，兩者是完全不同的東西。但是，我們都知道巧克力花生醬嚐起來是多麼地美味！在 <a href="http://androidguys.com" target="_blank" rel="noopener">AndroidGuy</a> 上看到<a href="http://androidguys.com/2008/07/25/android-and-symbian-destined-to-become-one/" target="_blank" rel="noopener">一篇文章</a>，提起 Android 與 Symbian 將合併的傳言。</p></blockquote><p>傳言本身不太可信(Android、symbian 底層架構完全不同)，但是文章中所用到的比喻實在很精采。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[思考]動態語言與框架，軟體工程師的上帝？</title>
      <link href="/2008/07/26/%E6%80%9D%E8%80%83-%E5%8B%95%E6%85%8B%E8%AA%9E%E8%A8%80%E8%88%87%E6%A1%86%E6%9E%B6%EF%BC%8C%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9A%84%E4%B8%8A%E5%B8%9D%EF%BC%9F/"/>
      <url>/2008/07/26/%E6%80%9D%E8%80%83-%E5%8B%95%E6%85%8B%E8%AA%9E%E8%A8%80%E8%88%87%E6%A1%86%E6%9E%B6%EF%BC%8C%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9A%84%E4%B8%8A%E5%B8%9D%EF%BC%9F/</url>
      <content type="html"><![CDATA[<blockquote><p>在十六世紀，民眾把不可知的一切都歸於上帝的旨意。為什麼榖物收成不好？都是上帝的旨意。為什麼會發生大地震？都是上帝的旨意。為什麼天體如此運行？都是上帝的旨意。但是到了啟蒙時代，物理、化學、生物等開始發展，人類開始針對宇宙萬象尋求科學上的解釋。這並不是說，人們都變成了無神論者，而是人類對於宇宙運行的方式，有了更深的理解。–從A到A+</p></blockquote><p>同樣的，當我們不去研究任何方便功能其背後的運作機制，而是直接將之歸因於「動態語言」或「框架」所提供的方便性時，我們和十六世紀的民眾其實沒有什麼差別，等於承認自己的無知。</p><p>每次我們兩手一攤，說：「答案一定是語言或框架做的手腳了！」我們等於放棄了以科學方式探討原因的機會。</p><blockquote><p>正因為只要生活過得好，我們就心滿意足，所以很少人擁有無與倫比的人生經歷。– 從A到A+</p></blockquote><p>朋友對上面的話提出質疑：瞭解「動態語言」或「框架」背後的機制當然是不錯，但並不是那麼必要。因為就算不懂怎麼製造，還是可以把高階語言把玩的很好。對軟體工程師來說，比較直覺的學習順序，應該是熟悉這些外功後，理解到有些不足，才會去想辦法補足內功的部份。</p><p>我說：就如同在古代人們不知道為什麼天空會降下雨的時候，還是可以先學會蓋房子避雨。有了房子的遮蔽，感到安全的人們，又可以騰出心力來探究天空為什麼會降雨的問題。了解「動態語言」或「框架」，行有餘力時也去了解「動態語言」或「框架」背後的機制，也許也可以讓我們寫出更好的程式碼。</p><p>弄出天氣預報的人，永遠不會是眼光停留在遮風避雨階段的人，或是想著將遮雨的房子蓋的又大又舒服的人（這只是種選擇，無關於好或不好）。這大概就是「從A到A+」一書所說的「優秀是卓越之敵」的理念吧。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>美麗程式</title>
      <link href="/2008/07/25/%E7%BE%8E%E9%BA%97%E7%A8%8B%E5%BC%8F/"/>
      <url>/2008/07/25/%E7%BE%8E%E9%BA%97%E7%A8%8B%E5%BC%8F/</url>
      <content type="html"><![CDATA[<blockquote><p>程式又短又簡單，那就是美麗，原因有很多。也許最重要的就是易於理解，而理解程式比撰寫程式更為困難。沒有什麼地方可以躲藏。此外，程式緊湊，對指令集，I-cache 及 JIT 編譯器而言，也會配合得比較好，因此跑得比較快。– 美麗程式</p></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title>給我五分鐘，教你用中文腳本寫一個 RPG (使用 TextRPG)</title>
      <link href="/2008/07/22/%E7%B5%A6%E6%88%91%E4%BA%94%E5%88%86%E9%90%98%EF%BC%8C%E6%95%99%E4%BD%A0%E7%94%A8%E4%B8%AD%E6%96%87%E8%85%B3%E6%9C%AC%E5%AF%AB%E4%B8%80%E5%80%8B-RPG-%E4%BD%BF%E7%94%A8-TextRPG/"/>
      <url>/2008/07/22/%E7%B5%A6%E6%88%91%E4%BA%94%E5%88%86%E9%90%98%EF%BC%8C%E6%95%99%E4%BD%A0%E7%94%A8%E4%B8%AD%E6%96%87%E8%85%B3%E6%9C%AC%E5%AF%AB%E4%B8%80%E5%80%8B-RPG-%E4%BD%BF%E7%94%A8-TextRPG/</url>
      <content type="html"><![CDATA[<p><a href="http://pypi.python.org/pypi/TextRPG/" target="_blank" rel="noopener">TextRPG</a> 是我最近找到的一個好玩 python 模組，由德國人開發。作用就是用來寫一個純文字的冒險遊戲。目前的版本已包含了 RPG 中常見的對話、戰鬥等元素，整個遊戲可以完全由一個 python 腳本來構成。</p><p>因為實在太簡單了，所以來個五分鐘上手文好了:)</p><p>1. 安裝軟體</p><p>安裝好 Python 與 easy_install 模組後，接著安裝周蟒與 TextRPG</p><blockquote><p>$ easy_install zhpy$ easy_install textrpg</p></blockquote><p>如此安裝好後就可以開始寫 RPG 了。</p><p>2. 準備環境</p><p>新建一個檔案夾，首先，用文字編輯器新增一個 rpg.ini 檔案，裡面內容如下：</p><blockquote><p>[charactor]角色=Char樣板=template名字=name姓名=name說=say詢問=ask動作=act行動=act比較技能=compete_skill取得經驗值=get_exp生命力=bTP生命值==TP攻擊力=attack武器=weapon防具=armor傷害=wounds活著=active[story]故事=story儲存=save給予經驗值=give_exp戰鬥=battle對話=diag將這個檔案儲存起來。接著開啟適當的 python 程式編輯器新建一個任意檔名的檔案 (範例裡將檔案取名為 HelloRPG.twpy)</p></blockquote><p>在檔案開頭加入三行敘述：</p><blockquote><p>#!/usr/bin/env python</p><h1>encoding: utf-8</h1><p>from rpg_lib.textrpg import *好了，我們環境已經準備好了。</p></blockquote><p>3. 撰寫故事</p><p>因為用 TextRPG 寫故事太容易了，這就編一個大雄大戰小叮噹的故事：</p><blockquote><blockquote><p>#!/usr/bin/env python</p></blockquote><h1>encoding: utf-8</h1><p>from rpg_lib.textrpg import *</p><p>大雄 = 角色()大雄.名字=“大雄”</p><p>小叮噹 = 角色()小叮噹.名字=“小叮噹”</p><p>故事(&quot;&quot;“大雄哭著跑進房間”&quot;&quot;)</p><p>大雄.說(&quot;&quot;“嗚嗚~~小叮噹，技安跟阿福欺負我”&quot;&quot;)小叮噹.說(&quot;&quot;“口胡，大雄我受夠你了，來戰吧！”&quot;&quot;)</p><p>大雄.攻擊力 = 3小叮噹.攻擊力 = 90</p><p>大雄.動作(&quot;&quot;“大驚失色，狼狽逃竄”&quot;&quot;)大雄.說(&quot;&quot;“小叮噹，你發什麼瘋！”&quot;&quot;)</p><p>勝利 = 小叮噹.戰鬥(大雄)如果 勝利:____故事(&quot;&quot;“小叮噹打敗了大雄，從此過上清靜的日子”&quot;&quot;)否則:____大雄.動作(“從如廢墟般的房間中爬起”)____大雄.說(&quot;&quot;“呼呼，我還是贏了”&quot;&quot;)____故事(&quot;&quot;“大雄打敗了小叮噹，從此作者掰不下去封筆了。”&quot;&quot;)</p></blockquote><p>註: 上面程式範例中的 “____” 代表4個空格。用空格來表示程式邏輯區塊是 python 的語法。</p><p>好了，我們寫好了故事，接著就是將這個檔案儲存起來。檔案儲存好之後，我們打開 command line 程式，開始執行這個遊戲：</p><blockquote><p>$ zhpy HelloRPG.twpy大雄哭著跑進房間大雄: 嗚嗚~~小叮噹，技安跟阿福欺負我小叮噹: 口胡，大雄我受夠你了，來戰吧！大雄 大驚失色，狼狽逃竄大雄: 小叮噹，你發什麼瘋！</p><p>—battle-stats for 小叮噹—…—/battle-stats—</p><p>大雄 comes closer.小叮噹: Do you want to attack 大雄? (Yes, no)  YesYou attack 大雄.小叮噹: How do you want to fight? (Usual, defensive, target head) Usual</p><p>You won this round.大雄 took 80 points of damage and a critical wound.</p><p>小叮噹打敗了大雄，從此過上清靜的日子</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> game </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pylons 書籍免費下載</title>
      <link href="/2008/07/13/Pylons-%E6%9B%B8%E7%B1%8D%E5%85%8D%E8%B2%BB%E4%B8%8B%E8%BC%89/"/>
      <url>/2008/07/13/Pylons-%E6%9B%B8%E7%B1%8D%E5%85%8D%E8%B2%BB%E4%B8%8B%E8%BC%89/</url>
      <content type="html"><![CDATA[<p><a href="http://pylonsbook.com/cover.jpg" target="_blank" rel="noopener"><img src="http://pylonsbook.com/cover.jpg" alt=""></a></p><p><a href="http://pylonsbook.com/" target="_blank" rel="noopener">http://pylonsbook.com/</a></p>]]></content>
      
      
        <tags>
            
            <tag> pylons </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在 Google App Engine 上跑 Zope</title>
      <link href="/2008/07/13/%E5%9C%A8-Google-App-Engine-%E4%B8%8A%E8%B7%91-Zope/"/>
      <url>/2008/07/13/%E5%9C%A8-Google-App-Engine-%E4%B8%8A%E8%B7%91-Zope/</url>
      <content type="html"><![CDATA[<p><a href="http://mockit.blogspot.com/2008/07/getting-started-with-zope-on-google-app.html" target="_blank" rel="noopener">http://mockit.blogspot.com/2008/07/getting-started-with-zope-on-google-app.html</a></p><p>只能說，這篇看到標題就很驚人了 ＠＠</p><p>原來 Guido 把 <a href="http://code.google.com/p/googleappengine/issues/detail?id=161#c19" target="_blank" rel="noopener">zipimport</a> 在App  Engine 上實做出來了(原來所有 App Engine 上的 module 都不能用 zip 格式調用)。所以多數 Python Framework 理論上應該都能在 GAE 上跑了。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>網頁小工具</title>
      <link href="/2008/07/05/%E7%B6%B2%E9%A0%81%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
      <url>/2008/07/05/%E7%B6%B2%E9%A0%81%E5%B0%8F%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<p>透過網頁小工具，有些小程式，不必再自己在各平台刻了…</p><p><object width="425" height="344"><param name="movie" value="http://www.youtube.com/v/GwoTewe01aE&hl=zh_TW&fs=1"><param name="allowFullScreen" value="true"><embed src="http://www.youtube.com/v/GwoTewe01aE&hl=zh_TW&fs=1" type="application/x-shockwave-flash" allowfullscreen="true" width="425" height="344"></object></p><p><a href="http://docs.google.com/TeamPresent?id=dfqs8fqs_929c42hc3dk&amp;fe=false" target="_blank" rel="noopener">簡報</a></p>]]></content>
      
      
        <tags>
            
            <tag> gadget </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TurboGears 2 Leader find a job to develop TurboGears 2</title>
      <link href="/2008/06/18/TurboGears-2-Leader-find-a-job-to-develop-TurboGears-2/"/>
      <url>/2008/06/18/TurboGears-2-Leader-find-a-job-to-develop-TurboGears-2/</url>
      <content type="html"><![CDATA[<p>恭喜 TurboGears 2 的現任(XD)領頭人 Mark Ramm ，<a href="http://compoundthinking.com/blog/index.php/2008/06/08/tg2-status/" target="_blank" rel="noopener">轉換到一個可以在工作時間開發 TurboGears 2 的工作</a>：）</p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python commit 群(Swarm)圖</title>
      <link href="/2008/06/17/Python-commit-%E7%BE%A4-Swarm-%E5%9C%96/"/>
      <url>/2008/06/17/Python-commit-%E7%BE%A4-Swarm-%E5%9C%96/</url>
      <content type="html"><![CDATA[<p><object width="400" height="302"> <param name="allowfullscreen" value="true"> <param name="allowscriptaccess" value="always"> <param name="movie" value="http://www.vimeo.com/moogaloop.swf?clip_id=1093745&amp;server=www.vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1"> <embed src="http://www.vimeo.com/moogaloop.swf?clip_id=1093745&amp;server=www.vimeo.com&amp;show_title=1&amp;show_byline=1&amp;show_portrait=0&amp;color=&amp;fullscreen=1" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="400" height="302"></object><a href="http://www.vimeo.com/1093745?pg=embed&amp;sec=1093745" target="_blank" rel="noopener">code_swarm - Python</a> from <a href="http://www.vimeo.com/michaelogawa?pg=embed&amp;sec=1093745" target="_blank" rel="noopener">Michael Ogawa</a> on <a href="http://vimeo.com?pg=embed&amp;sec=1093745" target="_blank" rel="noopener">Vimeo</a>.</p><p>有人說，代表人類科學/技術最高的成就，其實都只是繫於那些突出的人手上。他們能吸引其他有共同目標的人聚集在旁邊，提供貢獻。</p><p>不管什麼熱門的 Open Source 專案，在最初期時都是只有一個/幾個人撐起來呀。</p><p>吸引其他人聚集的力量，就是yy小說中所謂的&quot;王霸之氣&quot;嗎 (誤) XD</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Google IO 演講上線</title>
      <link href="/2008/06/12/Google-IO-%E6%BC%94%E8%AC%9B%E4%B8%8A%E7%B7%9A/"/>
      <url>/2008/06/12/Google-IO-%E6%BC%94%E8%AC%9B%E4%B8%8A%E7%B7%9A/</url>
      <content type="html"><![CDATA[<p><a href="http://www.helloandroid.com/node/585" target="_blank" rel="noopener">Google IO Sessions Available Online</a></p><p>Google 把演講影片放 YouTube、講稿放 Google Doc，然後將同個演講相關的內容嵌入一個畫面，雖然離「很棒」還有距離，但這樣能線上瀏覽的感覺還真是不錯呀。</p><p><a href="http://sites.google.com/site/io/" target="_blank" rel="noopener">所有演講列表</a></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>簡單背後的複雜</title>
      <link href="/2008/06/09/%E7%B0%A1%E5%96%AE%E8%83%8C%E5%BE%8C%E7%9A%84%E8%A4%87%E9%9B%9C/"/>
      <url>/2008/06/09/%E7%B0%A1%E5%96%AE%E8%83%8C%E5%BE%8C%E7%9A%84%E8%A4%87%E9%9B%9C/</url>
      <content type="html"><![CDATA[<blockquote><p>We also already knew that <span style="font-weight:bold;">something very simple to use is very challenging to develop.</span>–<a href="http://jquery.com/blog/2008/06/09/jquery-ui-v15-released-focus-on-consistent-api-and-effects/" target="_blank" rel="noopener">JQuery UI team</a></p></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Android 大不同, 與實機 Demo</title>
      <link href="/2008/05/29/Android-%E5%A4%A7%E4%B8%8D%E5%90%8C-%E8%88%87%E5%AF%A6%E6%A9%9F-Demo/"/>
      <url>/2008/05/29/Android-%E5%A4%A7%E4%B8%8D%E5%90%8C-%E8%88%87%E5%AF%A6%E6%A9%9F-Demo/</url>
      <content type="html"><![CDATA[<p>每次看到 Android , 它的介面都改好大 Orz看起來新版也加入了類似 iPhone 的 Widget 功能.</p><p><a href="http://androidcommunity.com/first-live-images-of-fullscreen-android-demo-20080528/" target="_blank" rel="noopener">http://androidcommunity.com/first-live-images-of-fullscreen-android-demo-20080528/</a></p><p><object height="355" width="425"><param name="movie" value="http://www.youtube.com/v/sOSk9TW7z-4&amp;hl=en"><param name="wmode" value="transparent"><embed src="http://www.youtube.com/v/sOSk9TW7z-4&amp;hl=en" type="application/x-shockwave-flash" wmode="transparent" height="355" width="425"></object></p><p>另外這台機器還真是有噱頭 – 內建指南針…, 至少可以用在地圖或街景(Street View)功能上 @_@</p><p>Demo 中也用到了 “實物投影機”.</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tgcrud 下載破千</title>
      <link href="/2008/05/28/tgcrud-%E4%B8%8B%E8%BC%89%E7%A0%B4%E5%8D%83/"/>
      <url>/2008/05/28/tgcrud-%E4%B8%8B%E8%BC%89%E7%A0%B4%E5%8D%83/</url>
      <content type="html"><![CDATA[<p>tgcrud 專案 <a href="http://pypi.python.org/pypi/tgcrud/1.0" target="_blank" rel="noopener">1.0 版</a> 放一年下載竟破千了, 這應該是我自己的開源專案中單一版本最好的紀錄 :p還有<a href="http://www.amazon.com/Professional-Python-Frameworks-Programming-Turbogears/dp/0470138092/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1212028661&amp;sr=8-1" target="_blank" rel="noopener"> 書</a> 花了20多頁介紹它, 我竟然沒再更新了 Orz.剛剛順手丟出個 1.0.1 版, 修正個使用者丟過來的<a href="http://trac.turbogears.org/changeset/4606" target="_blank" rel="noopener">小問題</a>.</p><p>後來我把精力放到 TurboGears 2.0 上. 將來 TurboGears 2.0 開發工具中所包含的 crud 功能,就是基於 tgcrud 的經驗開發的. tgcrud 是基於 kid 模版和 turbogears.widgets , 而 crud 功能則是基於 genshi 模版, toscawidgets 跟 dbsprockets.</p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 大獎賽第一階段揭曉</title>
      <link href="/2008/05/14/Android-%E5%A4%A7%E7%8D%8E%E8%B3%BD%E7%AC%AC%E4%B8%80%E9%9A%8E%E6%AE%B5%E6%8F%AD%E6%9B%89/"/>
      <url>/2008/05/14/Android-%E5%A4%A7%E7%8D%8E%E8%B3%BD%E7%AC%AC%E4%B8%80%E9%9A%8E%E6%AE%B5%E6%8F%AD%E6%9B%89/</url>
      <content type="html"><![CDATA[<p>全文寫到 <a href="http://pdanewsclip.blogspot.com/2008/05/android.html" target="_blank" rel="noopener">PDA 簡報夾</a> 中.</p><p><a href="http://blog.pixnet.net/pmmustknow/post/17583540" target="_blank" rel="noopener">Mr.PM</a> 這邊有對其中一些 App 作較詳細的介紹.</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>程式語言面相學</title>
      <link href="/2008/05/01/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E9%9D%A2%E7%9B%B8%E5%AD%B8/"/>
      <url>/2008/05/01/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E9%9D%A2%E7%9B%B8%E5%AD%B8/</url>
      <content type="html"><![CDATA[<p>要知道哪門程式語言紅不紅，先看程式語言發明者的鬍子！</p><p>程式語言幾乎是現代電腦的基礎。不只是資訊相關工作才會用到，只要讀理工科的碩士班，幾乎也都會因為實驗中需用到電腦模擬，而多多少少學了一些程式語言。電腦/手持設備的換代速度飛快，因此相對應的編寫程式技術與使用的程式語言也更新很快。於是很多人在跌跌撞撞學習程式語言時，心中都難免會存疑：</p><p>「我怎麼樣才能知道，我現在學習的語言，過了幾年以後還仍然熱門有用哩？」</p><p>答案很簡單，卻充滿驚奇：</p><blockquote><p>看程式語言發明者的面相。（特別是鬍子！）</p></blockquote><p>這個非常簡便的方式，可以相當準確地用來檢視我們所使用的程式語言的發展大勢，與判斷這門程式語言是不是值得我們繼續投資學習！</p><p>Tamir Khason 在四年前的 <a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2008/04/28/computer-languages-and-facial-hair-take-two.aspx" target="_blank" rel="noopener">第一篇</a> (<a href="http://www.kuqin.com/language/20070823/594.html" target="_blank" rel="noopener">簡體中文版</a>) 文章中，提出了這個經由歸納而來的假說。其核心理論為：「程式語言的發展，與開發者臉上鬍子的疏密有莫大關係。擁有一個滿臉濃密鬍子的程式語言發明者，該程式語言的發展會比擁有沒蓄鬍子程式語言發明者的程式語言好得多 (Java v.s C#、C++ v.s Object C)」</p><p>Tamir Khason 今年再接再厲發表 <a href="http://blogs.microsoft.co.il/blogs/tamir/archive/2008/04/28/computer-languages-and-facial-hair-take-two.aspx" target="_blank" rel="noopener">第二篇</a>，顯示這幾年程式語言的發展，仍然持續地應證了這個假說的正確性 XD</p><p>你相信這個假說嗎？</p>]]></content>
      
      
        <tags>
            
            <tag> fun </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>inform 7: 像寫小說一樣寫互動文字冒險遊戲</title>
      <link href="/2008/05/01/inform-7-%E5%83%8F%E5%AF%AB%E5%B0%8F%E8%AA%AA%E4%B8%80%E6%A8%A3%E5%AF%AB%E4%BA%92%E5%8B%95%E6%96%87%E5%AD%97%E5%86%92%E9%9A%AA%E9%81%8A%E6%88%B2/"/>
      <url>/2008/05/01/inform-7-%E5%83%8F%E5%AF%AB%E5%B0%8F%E8%AA%AA%E4%B8%80%E6%A8%A3%E5%AF%AB%E4%BA%92%E5%8B%95%E6%96%87%E5%AD%97%E5%86%92%E9%9A%AA%E9%81%8A%E6%88%B2/</url>
      <content type="html"><![CDATA[<p>你可能沒有想過, 在有蘋果麥金塔電腦和單色視窗之前, 電腦遊戲就以文字冒險遊戲(Interactive Fiction, IF)的形式存在了.</p><p>玩這種文字冒險遊戲就像看小說一樣, 所有的場景, 人物, 動作, 怪物, 全都以文字敘述來表示.(比較老一點的玩家可能想起另一種叫 MUD 的網路遊戲. 在 MUD 裡&quot;砍&quot;怪物掉血, 是以&quot;史萊姆被玩家小G砍中失血10點&quot;這樣的文字敘述來表示. 沒錯, MUD 就是從文字冒險遊戲進化來的)</p><p>要設計這種古老的遊戲, 需要一些寫程式的技術, 好來設計文字冒險遊戲中出現的場景, 角色, 房間(D&amp;D)</p><p>這種古老的&quot;技藝&quot;在 2006 年產生了驚奇的改變. <a href="http://www.inform-fiction.org/I7/Welcome.html" target="_blank" rel="noopener">inform 7</a> (之前當然有 inform 6, 5, 4…) 是第一個使用接近普通英語語法寫作, 提供整合式開發工具 (IDE) 讓開發可以互動進行的文字冒險遊戲開發工具.</p><p>例如&quot;設定&quot;冒險小說的標題與作者, 可以直接寫作如下:</p><blockquote><p>“Harry Potter” by J.K Rowling.The story headline is “Harry Potter and the Goblet of Fire”.</p></blockquote><p>要建立一個場景, 在 Inform 裡就等於建立一個&quot;房間&quot;</p><blockquote><p>Hogwarts School is a room</p></blockquote><p>用 inform 7 寫文字冒險遊戲根本不像在寫程式, 一個括弧或是一個判斷語句都沒有!在 IDE 中每寫完一段, 可以按下左上角那個長得像瀏覽器圖示的&quot;Go&quot;按鈕, 右邊的視窗中立即顯示可以玩的文字冒險遊戲!</p><p>inform 7 對於文字冒險遊戲愛好者而言, 真是讓人瞳孔放大的改變呀.</p><p><a href="http://www.onlamp.com/pub/a/onlamp/2006/06/08/inside-inform-7.html" target="_blank" rel="noopener">onlamp 上對 inform 7 的介紹</a></p><p>更新: 如今 Inform 7 發佈剛屆滿兩年，也有更好的教學可看囉<a href="http://www.brasslantern.org/writers/howto/i7tutorial.html" target="_blank" rel="noopener">Write a Text Adventure With Inform 7</a></p>]]></content>
      
      
        <tags>
            
            <tag> game </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>網摘</title>
      <link href="/2008/04/11/%E7%B6%B2%E6%91%98/"/>
      <url>/2008/04/11/%E7%B6%B2%E6%91%98/</url>
      <content type="html"><![CDATA[<p>Google App Engine for developers<a href="http://www.niallkennedy.com/blog/2008/04/google-app-engine.html" target="_blank" rel="noopener">http://www.niallkennedy.com/blog/2008/04/google-app-engine.html</a></p><p>Google App Engine 大量使用了 django 的架構與功能<a href="http://code.google.com/appengine/articles/djangoforms.html" target="_blank" rel="noopener">http://code.google.com/appengine/articles/djangoforms.html</a></p><p>Google App Engine 使用的 Model Types 和 Property Classes<a href="http://code.google.com/appengine/docs/datastore/typesandpropertyclasses.html" target="_blank" rel="noopener">http://code.google.com/appengine/docs/datastore/typesandpropertyclasses.html</a></p><p>直接可用的 Google App Engine 範例<a href="http://code.google.com/p/google-app-engine-django-guestbook/" target="_blank" rel="noopener">http://code.google.com/p/google-app-engine-django-guestbook/</a></p><p>讓  Django 使用者更容易遷移到 app engine<a href="http://code.google.com/p/google-app-engine-django/" target="_blank" rel="noopener">http://code.google.com/p/google-app-engine-django/</a></p><p>app engine group<a href="http://groups.google.com/group/google-appengine" target="_blank" rel="noopener">http://groups.google.com/group/google-appengine</a></p><p>Python 性能調優 ppt<a href="http://www.haokanbu.com/story/17930/" target="_blank" rel="noopener">http://www.haokanbu.com/story/17930/</a></p>]]></content>
      
      
        <tags>
            
            <tag> digest </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WireShark 1.0 發佈</title>
      <link href="/2008/04/06/WireShark-1-0-%E7%99%BC%E4%BD%88/"/>
      <url>/2008/04/06/WireShark-1-0-%E7%99%BC%E4%BD%88/</url>
      <content type="html"><![CDATA[<p><a href="http://www.wireshark.org/" target="_blank" rel="noopener">Wireshark </a> 一直是我工作中不可或缺的軟體，現在終於出 1.0 啦！</p><p>更棒的是 1.0 版同時提供了 intel mac 版! 有圖有真相。</p><p><a href="http://bp0.blogger.com/_2xGPUuRo1sg/R_mRZ-x24KI/AAAAAAAAAMU/VG3U9cWBsNg/s1600-h/%E5%9C%96%E7%89%87+2.png" target="_blank" rel="noopener"><img src="http://bp0.blogger.com/_2xGPUuRo1sg/R_mRZ-x24KI/AAAAAAAAAMU/VG3U9cWBsNg/s400/%E5%9C%96%E7%89%87+2.png" alt=""></a></p><p>看的出來不是 Native Cocoa，而是透過 X 來支援的，所以應該看不到 iphone 版? XD</p>]]></content>
      
      
        <tags>
            
            <tag> soft </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Andbook - Learning Android From Scratch 發佈</title>
      <link href="/2008/03/27/Andbook-Learning-Android-From-Scratch-%E7%99%BC%E4%BD%88/"/>
      <url>/2008/03/27/Andbook-Learning-Android-From-Scratch-%E7%99%BC%E4%BD%88/</url>
      <content type="html"><![CDATA[<p><a href="www.anddev.org">anddev.org</a> 的 plusminus 發佈了免費的 <a href="http://www.anddev.org/announcing_andbook_-_learning_android_from_scratch-t1473.html" target="_blank" rel="noopener">andbook</a> (英文) 電子書 (~62 頁， <a href="http://andbook.anddev.org/files/andbook.pdf" target="_blank" rel="noopener">直接下載</a>)。</p><p>plusminus 從 Android 發佈開始，就持續地經營 <a href="www.anddev.org">anddev.org</a> 網站，提供許多簡易可照著做的 Android 程式範例。如果你已經看完我寫的 <a href="http://code.google.com/p/androidbmi/wiki/DiveIntoAndroid" target="_blank" rel="noopener">深入淺出 Android – Google 手機應用程式設計</a>，那麼你也許會想看看這本更深入介紹 Android 的 <a href="http://www.anddev.org/announcing_andbook_-_learning_android_from_scratch-t1473.html" target="_blank" rel="noopener">andbook</a>。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>試玩 Sphinx</title>
      <link href="/2008/03/25/%E8%A9%A6%E7%8E%A9-Sphinx/"/>
      <url>/2008/03/25/%E8%A9%A6%E7%8E%A9-Sphinx/</url>
      <content type="html"><![CDATA[<p>Sphinx 是 Python 2.6 新採用的 rst 文件生成系統.</p><p>要開始玩首先得下載 Python 原始碼</p><p>svn co <a href="http://svn.python.org/projects/doctools/trunk/" target="_blank" rel="noopener">http://svn.python.org/projects/doctools/trunk/</a>  python</p><p>下載完後進入 Doc 目錄, 輸入</p><p>make html</p><p>則會自動下載 sphinx 與相關程式, 然後自動編譯 rst 檔案.</p><p>如果輸入</p><p>make web</p><p>的話則是產生一個可執行的線上網頁文件程式. 此網站程式甚至還支援搜尋, 真是強悍到有點扯 @@</p><p>Update:</p><p>Sphinx 產生的首頁原來是從 template 中 render 的. 看來拿到其他地方重用的彈性並沒想像中的高.一般使用 rst 時還是繼續用自己寫的 <a href="http://pypi.python.org/pypi/mopowg/" target="_blank" rel="noopener">mopowg</a> 吧.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> rst </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IPTV with IPv6 Multicast</title>
      <link href="/2008/03/24/IPTV-with-IPv6-Multicast/"/>
      <url>/2008/03/24/IPTV-with-IPv6-Multicast/</url>
      <content type="html"><![CDATA[<p>Japan’s IPTV Service goes IPv6: <a href="http://www.ipv6style.jp/en/action/20040902/index.shtml" target="_blank" rel="noopener">IPv6 Multicast Enables IP TV service</a></p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Automated Tests</title>
      <link href="/2008/03/23/Automated-Tests/"/>
      <url>/2008/03/23/Automated-Tests/</url>
      <content type="html"><![CDATA[<blockquote><p>Having good automated tests lets you refactor and re-engineer small parts of big code bases.</p></blockquote><blockquote><p>Test automation is not a panacea, but it can really help stabilize a code base.</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> aglie test </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>魔法</title>
      <link href="/2008/02/13/%E9%AD%94%E6%B3%95/"/>
      <url>/2008/02/13/%E9%AD%94%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>Beacuse the magic is too easy to forget, I have to write it down.</p><blockquote><p>python -c &quot;import SimpleHTTPServer;SimpleHTTPServer.test()</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OLPC 入手</title>
      <link href="/2008/02/01/OLPC-%E5%85%A5%E6%89%8B/"/>
      <url>/2008/02/01/OLPC-%E5%85%A5%E6%89%8B/</url>
      <content type="html"><![CDATA[<p>托朋友從美國帶了台 OLPC 準備拿來當電子書閱讀器，剛拿到的第 3 天來整理一下。</p><p>1. 連上無線網路</p><p>OLPC 主要是設計給缺乏網路基礎設施的地方使用，因此對一般無線網路的支援有限。</p><p>確定能用的設定如下:</p><p>1. 使用固定的 Channel： 選固定的 Channel (1,6,11)，不要用一般 AP 預設的自動選擇(auto)模式。</p><p>2. 最好剛開始是用 open mode (不加密模式) 連線。</p><p><a href="http://wiki.laptop.org/go/Wifi_Connectivity" target="_blank" rel="noopener">http://wiki.laptop.org/go/Wifi_Connectivity</a></p><p>3. 開啟 olpc 後，進入 Group View，每台 AP 或 OLPC 都是一個圓點，在代表你的 AP 的圓點上按’X’鍵一下，olpc 就會開始試著與你的 AP 連線。</p><p>2. 更新軔體</p><p>可以透過</p><blockquote><p>cat /etc/issue命令來看目前的軔體版本。</p></blockquote><p>我拿到的機器預載的版本是 650，要更新版本可至 <a href="http://wiki.laptop.org/go/Olpc-update" target="_blank" rel="noopener">http://wiki.laptop.org/go/Olpc-update</a> 查看更新步驟。指令如下：</p><blockquote><p>su -lolpc-update -rv 656</p></blockquote><p>3. 中文顯示</p><p>開啟 Terminal 程式, 照著以下命令輸入:</p><blockquote><p>su -lmkdir /usr/share/font/twcd /usr/share/font/twwget <a href="http://hep1.phys.ntu.edu.tw/~john/olpc/odosung_o.ttc.bz2" target="_blank" rel="noopener">http://hep1.phys.ntu.edu.tw/~john/olpc/odosung_o.ttc.bz2</a>bunzip2 odosung_o.ttc.bz2</p></blockquote><p>這些命令會在 /usr/share/font 資料夾下開一個新的 tw 資料夾, 並從網路上下載 YChao 所修改適合 OLPC 的字型並解壓縮。</p><p>當以上命令執行完後，就可以透過 Browse 程式瀏覽中文網頁了。</p><p>4. 看英文電子書</p><p>OLPC 可以透過 Browse 程式上網下載，或是插入 SD 卡 / USB 隨身碟來取得 PDF 電子書來源。OLPC 的 Browse 程式還可以當作檔案瀏覽器使用。 在網址列輸入 &gt; /media 就會進到放 SD 卡或隨身碟的檔案目錄中，可以透過網頁介面選擇電子書檔案。</p><p>選到檔案後按下連結就可以將電子書&quot;下載&quot;到 OLPC 上。切換到 Journal 程式時可以看到下載的進度。當下載完成後可以透過 Journal 程式呼叫 Reader 開啟 PDF。</p>]]></content>
      
      
        <tags>
            
            <tag> olpc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2007 年度程式語言 -- Python !</title>
      <link href="/2008/01/29/2007-%E5%B9%B4%E5%BA%A6%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80-Python/"/>
      <url>/2008/01/29/2007-%E5%B9%B4%E5%BA%A6%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80-Python/</url>
      <content type="html"><![CDATA[<p>試譯:</p><p>TIOBE 機構宣佈了 Python 程式語言成為 2007 年度程式語言。今年的競爭相當激烈，但是最終 Python 語言以最高的年成長率(2.04%)拔得頭籌。尚沒有明確原因能解釋為何 Python 語言在 2007 年能獲得那麼大的成長。</p><p>從有紀錄以來，上個月 Python 語言的普及度首次超越了 Perl 語言。這是 Python 語言已成為在系統層級上主流黏合語言的指標。系統管理者與版本管理者特別地喜愛 Python 語言。</p><p>Python 語言也很有可能因為即將發佈的 Python 3，而進一步在 2008 年獲得更高的普及率。</p><p>原文 <a href="http://www.tiobe.com/tpci.htm" target="_blank" rel="noopener">http://www.tiobe.com/tpci.htm</a></p><blockquote><p>Python has been declared as programming language of 2007. It was a close finish, but in the end Python appeared to have the largest increase in ratings in one year time (2.04%). There is no clear reason why Python made this huge jump in 2007. Last month Python surpassed Perl for the first time in history, which is an indication that Python has become the “de facto” glue language at system level. It is especially beloved by system administrators and build managers. Chances are high that Python’s star will rise further in 2008, thanks to the upcoming release of Python 3.</p></blockquote><p>延伸閱讀: <a href="http://www.infoq.com/cn/news/2008/01/tiobe-language-of-year" target="_blank" rel="noopener">TIOBE語言流行度排行顯示混合編程時代到來</a></p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IPv6 Ready Logo 白皮書最終版釋出</title>
      <link href="/2008/01/28/IPv6-Ready-Logo-%E7%99%BD%E7%9A%AE%E6%9B%B8%E6%9C%80%E7%B5%82%E7%89%88%E9%87%8B%E5%87%BA/"/>
      <url>/2008/01/28/IPv6-Ready-Logo-%E7%99%BD%E7%9A%AE%E6%9B%B8%E6%9C%80%E7%B5%82%E7%89%88%E9%87%8B%E5%87%BA/</url>
      <content type="html"><![CDATA[<p><a href="http://www.ipv6forum.com/dl/white/IPv6_Ready_Logo_White_Paper_Final.pdf" target="_blank" rel="noopener">IPv6 Ready Logo 白皮書最終版</a>釋出了，文件中概述了 Phase I、Phase II Logo 的區別，並提供許多要過 Logo 相關的參考連結。</p><p>有測試 IPv6 產品需求的人可以下載來看看。</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>先天與後天程式語言風格</title>
      <link href="/2008/01/08/%E5%85%88%E5%A4%A9%E8%88%87%E5%BE%8C%E5%A4%A9%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E9%A2%A8%E6%A0%BC/"/>
      <url>/2008/01/08/%E5%85%88%E5%A4%A9%E8%88%87%E5%BE%8C%E5%A4%A9%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E9%A2%A8%E6%A0%BC/</url>
      <content type="html"><![CDATA[<p>最近看到一篇 <a href="http://lightyror.thegiive.net/2008/01/ruby-python.html" target="_blank" rel="noopener">Ruby 跟 Python 本質上不同</a></p><p>我也注意到一個現象：</p><p>偏向 c/c++/asp/php 的開發者對 Python 接受度較高，偏向 perl 的使用者則偏好 Ruby。因為不管是 Python 還是 Ruby，要開發網頁都得寫 JavaScript，所以 JavaScript 沒有辨識度。</p><p>Python 像是先天武功密笈，不論資質，學了後一旦出招，都帶有 Pythonic 風格。因為每個人寫起來的 Python 程式風格一致，更容易讓自己專注於內容。而且學了 Pythonic 風格，自己使用其他語言寫作時也會想要盡量同樣簡明。</p><p>Python 社群的 Web 開發上也有更多的選擇，可以由禪入道(TurboGears)、由佛入道(Django)，或從諸多現成的組件中挑選，自行花幾個鐘頭打造一個。</p><p>魔幻語言則是武林密笈，靠著投靠門派，依師父傳授某些密籍(開發、命名方法)來鍛鍊自己的風格。</p><p>例如 Javascript 就從早期混著寫的方式，到近期 AJAX 興起，鼓吹 JS 與 HTML 分離的風格。永遠得追逐著非關語言的變化，來調整自己出招的方式。</p><p>學的好的有了自己的風格，學的不好的如邯鄲學步。</p><p>接了別人開始的案子要維護時，要按自己的風格重改過呢，還是照著前人的風格呢?或是，就這麼接受風格混亂的程式碼，到最後難以維護？</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>網摘2</title>
      <link href="/2008/01/03/%E7%B6%B2%E6%91%982/"/>
      <url>/2008/01/03/%E7%B6%B2%E6%91%982/</url>
      <content type="html"><![CDATA[<p><a href="http://www.dribin.org/dave/blog/archives/2007/12/30/why_mercurial/" target="_blank" rel="noopener">Why I chose Mercurial</a>Mercurial、git 等的比較。</p><p><a href="http://www.chweng.idv.tw/smart-questions.php" target="_blank" rel="noopener">提問的智慧</a><a href="http://vsevolod.balashov.name/middlestorm/" target="_blank" rel="noopener">middlestorm</a>WSGI 的 Storm middleware</p><p><a href="http://www.postneo.com/talks/pycon2006/" target="_blank" rel="noopener">Python in Your Pocket: Python for S60</a>Python for s60 投影片</p><p><a href="http://ironpython-urls.blogspot.com/2008/01/ironpython-on-eee-pc-and-olpc.html" target="_blank" rel="noopener">IronPython on eee PC and OLPC</a>mono 可以在 eee PC 跟 OLPC 上跑了。</p>]]></content>
      
      
        <tags>
            
            <tag> digest </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>開源的 Java 社群正向著水銀遷移</title>
      <link href="/2007/12/27/%E9%96%8B%E6%BA%90%E7%9A%84-Java-%E7%A4%BE%E7%BE%A4%E6%AD%A3%E5%90%91%E8%91%97%E6%B0%B4%E9%8A%80%E9%81%B7%E7%A7%BB/"/>
      <url>/2007/12/27/%E9%96%8B%E6%BA%90%E7%9A%84-Java-%E7%A4%BE%E7%BE%A4%E6%AD%A3%E5%90%91%E8%91%97%E6%B0%B4%E9%8A%80%E9%81%B7%E7%A7%BB/</url>
      <content type="html"><![CDATA[<p>剛剛發現開源的 Java 社群在版本控制系統(version control) 的選擇，正向著 Python mercurial 遷移。</p><p>證據是 <a href="http://www.selenic.com/mercurial/wiki/" target="_blank" rel="noopener">Mercurial 的官方網站</a>上列出了近期的幾個 Sun 的重要專案都採用了 Mercurial：<a href="http://www.selenic.com/mercurial/wiki/" target="_blank" rel="noopener"></a></p><h1>2007-12-12 NetBeans migrates to mercurial</h1><h1>2007-12-05 OpenJDK (aka Java) switches to Mercurial</h1><h1>2006-10-18 OpenSolaris announces ON Mercurial repository mirror</h1><p>包含 Sun 官方的 Java、NetBeans 跟 OpenSolaris 都採用 mercurial 分散式版本控制系統。這對社群有極佳的示範作用。</p><p>試想一下，就跟許多 Linux 發佈套件開始用 BT 來分流一樣。既然都開放下載了，用分散式的版本控制系統有助 Sun 降低其公司的網路流量，應該能省下不少花費。</p><p>另外，在 Windows 上相當有名的 tortoise 系列圖形化版本控制工具也出了 Mercurial 版囉，名叫<a href="http://tortoisehg.sourceforge.net/" target="_blank" rel="noopener">tortoisehg</a>。(另外兩種是 tortoisecvs 跟 tortoisesvn)</p>]]></content>
      
      
        <tags>
            
            <tag> hg </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深入淺出 Android 手機應用程式設計，發佈</title>
      <link href="/2007/12/27/%E6%B7%B1%E5%85%A5%E6%B7%BA%E5%87%BA-Android-%E6%89%8B%E6%A9%9F%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%EF%BC%8C%E7%99%BC%E4%BD%88/"/>
      <url>/2007/12/27/%E6%B7%B1%E5%85%A5%E6%B7%BA%E5%87%BA-Android-%E6%89%8B%E6%A9%9F%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%EF%BC%8C%E7%99%BC%E4%BD%88/</url>
      <content type="html"><![CDATA[<p><a href="http://code.google.com/p/androidbmi/wiki/DiveIntoAndroid" target="_blank" rel="noopener">深入淺出 Android 手機應用程式設計</a> 是我從 11/12 Android 剛發佈即開始著手準備的寫作計畫。</p><p>當 Android 剛發佈時我馬上下載來玩了幾天，發現這是個很有趣的平台：Android 既是手機作業系統，卻有跨多平台(Windows、Mac、Linux)的開發工具；既是 Linux 平台，卻有許多類似 Web 開發的感覺。獨特的行程(Process)管理方式，讓程式運作起來頗有 Palm 平台反應迅速的風範。完整的上網功能，搭配Google 地圖、Gmail 等服務，讓我看到許多不一樣的可能性。手上 Palm Treo650 用了多年，看來下一隻應該就是 Android 手機了。</p><p>我本身有一些 Palm 程式開發經驗、也有一些 Web 開發經驗，從 Android 並不是那麼完整的文件裡，也得到了一些領會。個人自覺程式才華沒有到賺那大獎賽千萬獎金的境界，而快速地理解並與其他人分享才是我的長處。因此，寫些快快樂樂學 Android 教學文件，讓台灣的朋友也能快速上手 Android ，讓大家更有把握去賺那 Android 大獎賽的 1000 萬也許是個好主意。於是有了要寫些什麼的概念後，找了同學 Crota 一起腦力激盪，就開始動鍵盤寫作了。</p><p>寫作的同時當然也有想出書的念頭。透過朋友 Tib 跟 Yu 聯繫過 D 出版社跟 F 出版社，兩個出版社紛紛反應現在書市慘澹。由於手機軟體開發並非一般程式員會接觸到的課題，所以出版社覺得在台灣的市場恐怕不大，暫時沒有出版的計畫。</p><p>我想，既然一時沒有出版的計畫，那麼就乾脆回到原本的初衷，抱著希望讓台灣的朋友也能快速上手 Android 而能去參與比賽的想法，就來公開目前寫好的章節吧 XD</p><p>本書的目標讀者是這些人，你是否也是其中之一呢？</p><ul><li>Windows/Mac/Linux 各平台使用者</li><li>想學寫 Android 手機應用程式的人</li><li>想知道如何取得 Android 免費開發工具與資源的人</li><li>懂英文能上網的人</li><li>想知道怎麼查 Android 線上文件的人</li><li>有點物件導向(OO) 程式經驗的人</li><li>J2ME/Java 學習者/開發者目前已於 <a href="http://code.google.com/p/androidbmi/wiki/DiveIntoAndroid" target="_blank" rel="noopener">GoogleCode</a> 上公開了一部份章節內容，剩下的將慢慢補上。有些部份還只是初步的草稿，請持續關注<a href="http://code.google.com/p/androidbmi/wiki/DiveIntoAndroid" target="_blank" rel="noopener">深入淺出 Android 手機應用程式設計</a> 。並歡迎提供建議。</li></ul><p>PS: <a href="http://code.google.com/p/androidbmi" target="_blank" rel="noopener">androidbmi</a> 專案中的程式碼，即來自於書中的範例。</p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>wiifit 與瘦身</title>
      <link href="/2007/12/20/wiifit-%E8%88%87%E7%98%A6%E8%BA%AB/"/>
      <url>/2007/12/20/wiifit-%E8%88%87%E7%98%A6%E8%BA%AB/</url>
      <content type="html"><![CDATA[<p>有種最簡單的瘦身(減肥)法，就是每天紀錄你的體重曲線。</p><p>這個瘦身法的理論依據應該是這樣子：只要在潛意識裡，我們有在意體重這件事，就自然會節制飲食、注意運動。表現出的結果，自然就是會慢慢趨近理想體重了。</p><p>要實施這個瘦身法，首先要有一台體重計，再來就是準備一個紀錄體重變化的工具。簡單的工具比如紙跟筆、電腦化的工具如 Excel、或線上工具如 <a href="http://www.red-bean.com/fitz/ig/google15/faq.html" target="_blank" rel="noopener">Google 15</a>。你所要做的，就是持之以恆：每天量完體重後，將數值紀錄到這些工具上，然後在意數據(或圖表曲線)的變化。</p><p>當然，現在還有個更簡單的選擇-- wiifit。</p><p>只要站上 wiifit 測量一下，wiifit 就會將你當天的體重與 BMI 值等資訊一起存成圖表。每次打開 wii 玩遊戲前，只要順便打開 wiifit 頻道測一下，持之以恆下來，估計也會有相同的瘦身效果。同時這也是一種從沒有遊戲嘗試過的新體驗。</p><p>在台灣，wiifit 並沒辦法取代健身房，因為 wiifit 只有附日文教練 XD (男女各一喔) 。但是別忘了，許多人想運動卻不想花一筆健身房錢。wiifit 正好讓我圓了請私人運動教練的夢想（還是外國貨 XD)。</p><p>我曾經有段時間會到宿舍附近的大湖公園跑步。跑了一個月，覺得一個人在台北公園跑步無趣的很，出門跑步還要吸廢氣，跑完全身黏黏的還得走一段路回家，相當麻煩。於是我也漸漸停止了慢跑這項運動。</p><p>wiifit 的慢跑運動中，全程配有一個 Mii 教練帶著你跑，每次跑的路線都不盡相同，與平常在外跑步一般都只有固定路線不同。而且 Mii 教練也會根據你跑步的狀態做出一些互動，如我跑步時只要一直保持相同的步調，螢幕下就會出現意思為&quot;現在你的步調很不錯喔&quot;的簡單互動訊息。也許這樣的互動準確度有限，不過確實提供了額外趣味與前進的動力。跑著跑著，路上有各種熟悉的 Mii (上 Mii 投票頻道抓的)迎面跟我打招呼，或在旁舉起手來打氣加油。供慢跑的小島風景怡人，各種不同的地形、坡度，帶來了視覺上的不同刺激，保持了新鮮感；踩到草皮、海水的不同踏步音效，也都帶來了相當的樂趣。</p><p>昨天買到(❤️.7k)，剛才終於跑完慢跑小島一圈模式，開啟了可選跑步時間的模式(10,20,30分)。感覺跑步功能很簡單也很有潛力，希望透過 wiiware 的推出，哪天除了慢跑小島外，還有其他場景可以探索。也許有一天，我也能在馬力歐銀河的場景裡跑步，那一定是個有趣的經驗 😄</p><p>PS: 在原地跑步又沒穿鞋襪的情況，反作用力可能會對腳踝造成較大的負擔。到底能不能持續靠著 wiifit 達到運動效果，我大概還要自己觀察一陣囉。</p><p>12/21 用 2 周活體實驗證明, 人只要胖到一個程度, 雖然有 wiifit 每天運動 30 min , 還是瘦不了 Orz</p>]]></content>
      
      
        <tags>
            
            <tag> game </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pagoda CMS in Python and TurboGears</title>
      <link href="/2007/12/14/Pagoda-CMS-in-Python-and-TurboGears/"/>
      <url>/2007/12/14/Pagoda-CMS-in-Python-and-TurboGears/</url>
      <content type="html"><![CDATA[<p>Pagoda 是使用 TurboGears 框架撰寫的 CMS</p><p><a href="http://www.pagodacms.org/" target="_blank" rel="noopener">http://www.pagodacms.org/</a></p><p>現在網站上僅有他們在 pycon 2007 上的 screencast</p><blockquote><p>Pagoda provides a first-class plugin-based content management system<br>with a Web 2.0 management consolethat integrates instantly with existing TurboGears applications.</p></blockquote><p><a href="http://groups.google.com/group/turbogears/browse_thread/thread/6555cf29f9ede0f3/01a6cbdb894bc7b8?#01a6cbdb894bc7b8" target="_blank" rel="noopener">郵件列表</a>中他們揭示了 Pagoda CMS 的一些特色:</p><ul><li>只需兩行程式碼就能整合進任何使用 turbogears 撰寫的應用程式</li><li>專注於內容管理, 而非取代整個網站</li><li>使用 SQLAlchemy 和 genshi</li><li>多語言內容版本 revisioned content in multiple languages</li><li>友善的介面</li><li>使用易於瞭解的詞彙與控制流程</li><li>頁面可以有附件, 也可以嵌套內容</li><li>直接支持靜態內容 (如文件檔案), 亦提供 turbogears 新聞搜集, 日曆, 相簿, 部落格等應用程式套件</li></ul><p>預計在三月底以 MIT license 發佈.</p><p>… 要是這些特色都能實現的話,因為新聞搜集, 相簿, 部落格等都有現成的 TurboGears 應用程式, 若能用這個軟體全掛在一起,可以完全體現 TurboGears 應用程式開發的優勢.在 Python 網頁框架的佔有率之爭中, 可能會是個扮演 FF7 角色的殺手呀.</p><p>2007.12: 可惜等了 9 個月連 Preview 都沒放出來, 真是 Orz. 感覺 Django 已經吃下大部分新進的 Python Web developer 了.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>自由的古典音樂</title>
      <link href="/2007/12/07/%E8%87%AA%E7%94%B1%E7%9A%84%E5%8F%A4%E5%85%B8%E9%9F%B3%E6%A8%82/"/>
      <url>/2007/12/07/%E8%87%AA%E7%94%B1%E7%9A%84%E5%8F%A4%E5%85%B8%E9%9F%B3%E6%A8%82/</url>
      <content type="html"><![CDATA[<p><a href="http://www.musopensource.com/radio/index.html" target="_blank" rel="noopener">musopen</a> 是個古典音樂網站，它的特色是其上所有的古典音樂都可以自由下載，也可以用線上廣播的方式收聽。</p>]]></content>
      
      
        <tags>
            
            <tag> Music </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GHOP</title>
      <link href="/2007/12/07/GHOP/"/>
      <url>/2007/12/07/GHOP/</url>
      <content type="html"><![CDATA[<blockquote><p>I think I don’t need the introduction, I create Python!– Guido Van Rossum</p></blockquote><p>Google 舉辦多年給大學生/研究生參與的<a href="http://code.google.com/soc/2007/" target="_blank" rel="noopener">「程式碼之夏」(Summer of Code) </a>活動後，上週又推出開放國高中生參與的<a href="http://code.google.com/opensource/ghop/2007-8/" target="_blank" rel="noopener">「GHOP」(Google Highly Open Participation Contest，念成 G-HOP)</a>活動。與「Summer of Code」活動一樣，Google 會從 Open Source 專案中挑選適當的專案，對其中專案有興趣的人可以申請參與。參與專案的方式很多樣，包含程式、教育、文件等方面。</p><p>第一年推出 10 個可參與的專案，其中三門(MoinMoin、Plone、Python)與 Python 語言相關。</p><p>活動剛推出一週，負責 GHOP 的 PM 錄了一段 youtube，<object width="425" height="355"><param name="movie" value="http://www.youtube.com/v/pLA7wU1Kod4&rel=1&border=0"><param name="wmode" value="transparent"><embed src="http://www.youtube.com/v/pLA7wU1Kod4&rel=1&border=0" type="application/x-shockwave-flash" wmode="transparent" width="425" height="355"></object></p><p>在這段視頻中，除了可以看到一個胖阿姨攤在懶骨頭沙發上扭來扭去，也可以看到 Guido Van Rossum (Python 語言發明者)，和在本文最前面 quote 起來的超猛自我介紹。</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第一台能跑 Android OS 的非官方平台出現了 -- Sharp Zaurus SL-C760</title>
      <link href="/2007/12/06/%E7%AC%AC%E4%B8%80%E5%8F%B0%E8%83%BD%E8%B7%91-Android-OS-%E7%9A%84%E9%9D%9E%E5%AE%98%E6%96%B9%E5%B9%B3%E5%8F%B0%E5%87%BA%E7%8F%BE%E4%BA%86-Sharp-Zaurus-SL-C760/"/>
      <url>/2007/12/06/%E7%AC%AC%E4%B8%80%E5%8F%B0%E8%83%BD%E8%B7%91-Android-OS-%E7%9A%84%E9%9D%9E%E5%AE%98%E6%96%B9%E5%B9%B3%E5%8F%B0%E5%87%BA%E7%8F%BE%E4%BA%86-Sharp-Zaurus-SL-C760/</url>
      <content type="html"><![CDATA[<p>除了實際運行圖片外，還有照著做就能安裝成功的 instructions。真是強人 Orz</p><p><a href="http://euedge.com/wp-content/uploads/2007/12/android-zaurus.jpg" target="_blank" rel="noopener"><img src="http://euedge.com/wp-content/uploads/2007/12/android-zaurus.jpg" alt=""></a></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>The day the routers died (2)</title>
      <link href="/2007/11/12/The-day-the-routers-died-2/"/>
      <url>/2007/11/12/The-day-the-routers-died-2/</url>
      <content type="html"><![CDATA[<p>當在車上的上網速度比在家裡還快時…搭配 Google Android 發佈影片, 更明顯感覺世界真的在變化</p><p><object width="425" height="355"><param name="movie" value="http://www.youtube.com/v/1FJHYqE0RDg&rel=1&border=0"><param name="wmode" value="transparent"><embed src="http://www.youtube.com/v/1FJHYqE0RDg&rel=1&border=0" type="application/x-shockwave-flash" wmode="transparent" width="425" height="355"></object></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>有趣的 Geek 歌 -  The day the routers died</title>
      <link href="/2007/11/12/%E6%9C%89%E8%B6%A3%E7%9A%84-Geek-%E6%AD%8C-The-day-the-routers-died/"/>
      <url>/2007/11/12/%E6%9C%89%E8%B6%A3%E7%9A%84-Geek-%E6%AD%8C-The-day-the-routers-died/</url>
      <content type="html"><![CDATA[<p>很久很久以前我還能記得當我的筆記型電腦能在別處連線…</p><p><a href="http://www.youtube.com/watch?v=_y36fG2Oba0#" target="_blank" rel="noopener">http://www.youtube.com/watch?v=_y36fG2Oba0#</a></p><p><object width="425" height="355"><param name="movie" value="http://www.youtube.com/v/_y36fG2Oba0&rel=1"><param name="wmode" value="transparent"><embed src="http://www.youtube.com/v/_y36fG2Oba0&rel=1" type="application/x-shockwave-flash" wmode="transparent" width="425" height="355"></object></p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>周蟒中文程式語言的四不一沒有</title>
      <link href="/2007/10/21/%E5%91%A8%E8%9F%92%E4%B8%AD%E6%96%87%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E7%9A%84%E5%9B%9B%E4%B8%8D%E4%B8%80%E6%B2%92%E6%9C%89/"/>
      <url>/2007/10/21/%E5%91%A8%E8%9F%92%E4%B8%AD%E6%96%87%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E7%9A%84%E5%9B%9B%E4%B8%8D%E4%B8%80%E6%B2%92%E6%9C%89/</url>
      <content type="html"><![CDATA[<p>竊以為<a href="http://code.google.com/p/zhpy/" target="_blank" rel="noopener">周蟒中文程式語言</a>的四不一沒有是:</p><p><span style="font-weight: bold;">一不：不強求完全的中文編程</span></p><p>過猶不及，絕大多數的程式語言是使用英文。周蟒中文程式語言的目標是協助使用者透過中文程式語言學習程式語言，進而接觸世界上大部份的程式語言，而不是脫離現實世界。</p><p><span style="font-weight: bold;">二不：不用中文數字或運算符號 (加, 減, 乘, 除 +, - ,*, / …)</span></p><p>程式語言中使用到數字與運算符號，並不僅只於常用的整數或四則運算符號。</p><p><span style="font-weight: bold;">三不：不用文言文</span></p><p>程式語言是人與電腦溝通的語言，電腦只懂得平鋪直敘的邏輯。所以我們也不用掉書袋，直接用白話溝通。</p><p><span style="font-weight: bold;">四不：不用中文標點符號</span></p><p>由於周蟒是完全兼容 <a href="http://www.python.org.tw/" target="_blank" rel="noopener">Python 程式語言</a>的中文程式語言，而將中文的標點對應到英文標點的歧異不少，反而會造成寫作與辨識的困擾。統一使用英文標點並不影響閱讀，對以後學習其他英文程式語言也不致造成額外障礙。</p><p><span style="font-weight: bold;">一沒有：沒有大括號 {}</span></p><p>周蟒是 Python 程式語言加上中文支援的中文程式語言，而 Python 程式語言本身就是使用結構化的程式區塊來代替以大括號判定程式區塊的語言。也符合中文使用習慣。</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> zhpy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我對測試的態度</title>
      <link href="/2007/10/21/%E6%88%91%E5%B0%8D%E6%B8%AC%E8%A9%A6%E7%9A%84%E6%85%8B%E5%BA%A6/"/>
      <url>/2007/10/21/%E6%88%91%E5%B0%8D%E6%B8%AC%E8%A9%A6%E7%9A%84%E6%85%8B%E5%BA%A6/</url>
      <content type="html"><![CDATA[<p>pycon 2007 裡的 presentation 提到測試金字塔, 由下而上將測試歸為三類：</p><p>單元測試, 功能測試, 應用測試。</p><p>程式測試需要很多的單元測試, 一些功能測試, 少量的應用測試。</p><p>具有某個程度的單元測試可以保證代碼質量。</p><p>周蟒是我第一個包含完整測試的開源專案.然而周蟒也不是一開始就寫了測試用例.</p><p>我的經驗是&quot;先能跑, 再求好&quot;。在一開始先讓功能能跑,之後再想法改善或改寫。</p><p>周蟒改善或改寫的過程中, unittest, doctest(單元測試, 功能測試),與 example test(應用測試)就是主要保證功能穩定的方式。</p><p>我覺得加入測試是我在開發周蟒過程中做出的最好決定。當周蟒程式超過15k後,已經進入難以將整份 code 短時間一次 Review 的階段。這時我決定花時間為周蟒加入一部分測試用例。我發現這麼作提昇了整個小程式的’解析度’-- nosetests 的報表告訴我: 每個簡單的功能都運行。</p><p>當我在周蟒加入了某數量的測試用例後, 周蟒的開發方式就有了質變。</p><p>由於可以提前由自動測試獲得功能結果, 讓周蟒的開發方式變得更大膽,我可以放心地大膽試驗各種新功能, 並隨時能透過測試確認新功能對架構帶來的影響。也得以在早期版本中即輕鬆地透過大規模的重構來增加架構的彈性。</p><p>用幾次就丟的程式/腳本當然沒加入測試的價值.然而要維持一份可維護的程式, 加入測試是很好的方式.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> aglie test </tag>
            
            <tag> zhpy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 語言的縮排迷思</title>
      <link href="/2007/09/27/Python-%E8%AA%9E%E8%A8%80%E7%9A%84%E7%B8%AE%E6%8E%92%E8%BF%B7%E6%80%9D/"/>
      <url>/2007/09/27/Python-%E8%AA%9E%E8%A8%80%E7%9A%84%E7%B8%AE%E6%8E%92%E8%BF%B7%E6%80%9D/</url>
      <content type="html"><![CDATA[<p>Guido 最近在他的 Blog 發佈一個文章連結: “<a href="http://www.secnetix.de/%7Eolli/Python/block_indentation.hawk" target="_blank" rel="noopener">Python: Myths about Indentation</a>”，這篇文章很好地解釋了對 Python 語言縮排的迷思。</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>水銀 (mercurial) 浸入了大恐龍(Mozilla)</title>
      <link href="/2007/09/20/%E6%B0%B4%E9%8A%80-mercurial-%E6%B5%B8%E5%85%A5%E4%BA%86%E5%A4%A7%E6%81%90%E9%BE%8D-Mozilla/"/>
      <url>/2007/09/20/%E6%B0%B4%E9%8A%80-mercurial-%E6%B5%B8%E5%85%A5%E4%BA%86%E5%A4%A7%E6%81%90%E9%BE%8D-Mozilla/</url>
      <content type="html"><![CDATA[<p>最近 mozilla 宣佈要採用 水銀(mercurial, hg) 當作他們未來的版本控制系統.</p><p>我試了一下發現mercurial有用 twist 提供內建的 web server,想用版本控制時再也不用先搞定 apache 設定了, Python 真是好呀</p><p>水銀分散式版本控制系統的使用概念如下:</p><p>0. 開個檔案夾([origin]), 開始 coding.1. 告訴自己這個檔案夾裡放的是版本庫 (hg init).2. 將原始版本中的所有檔案放進版本庫(hg commit *).3. 怕接下來的修改把原始版本改糟了, 所以另外複製一份來改 (hg clone [origin] [dst]).4. 在複製檔案夾上改一改, 覺得弄完一小階段了, 先大致查看一下修改了些甚麼(hg status), 然後儲存修改 (hg commit).5. 重複修改的過程.5.x 哇!遇到錯誤了怎麼辦? 沒關係, 用’快速鍵’將修改復原(hg revert [id]).6. 改得滿意了, 將修改的東西存回原始檔案夾 (hg push [origin]).7. 整理一下原始檔案夾(hg update), 確認修改沒衝突.</p><p>其他應用</p><ul><li>開個 分享讓其他人也可以用(hg serve [-p port])</li><li>看看修改歷程(hg log)</li><li>看看修改的內容 (hg diff)</li><li>修改有衝突了, 進去檔案看看, 解決它 (hg merge)</li><li>接受其他人的修改 (hg pull)</li></ul>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> hg </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Debugging</title>
      <link href="/2007/09/03/Debugging/"/>
      <url>/2007/09/03/Debugging/</url>
      <content type="html"><![CDATA[<blockquote><p>Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.</p><p>剛開始時，除錯比起寫程式要難上兩倍。因此，如果你將程式寫得聰明無比，你必然不夠聰明以至於能除錯這個程式。</p><p>—Brian W. Kernighan, co-author of <em>The C Programming Language</em> and the “K” in “AWK”</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> aglie test </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Code Like a Pythonista</title>
      <link href="/2007/08/01/Code-Like-a-Pythonista/"/>
      <url>/2007/08/01/Code-Like-a-Pythonista/</url>
      <content type="html"><![CDATA[<p>一個 pycon 2007 中的<a href="http://python.net/%7Egoodger/projects/pycon/2007/idiomatic/presentation.html" target="_blank" rel="noopener">簡報</a>,  總結了 Python 語言的編程習慣.看起來相當棒.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ipv6 howto book</title>
      <link href="/2007/07/22/ipv6-howto-book/"/>
      <url>/2007/07/22/ipv6-howto-book/</url>
      <content type="html"><![CDATA[<p>以前同學領導的國科會計畫,提供在 FreeBSD 環境上架設 IPv6 Enable 相關服務的中文書,每個動作都測試過兩遍以上保證可以照著執行, 真是佛心來著@@</p><p>還有附錄教怎麼安裝 FreeBSD</p><p>Index：</p><p><a href="http://louksblog.blogspot.com/2007/06/ipv6-howto-bookchapter-1_8232.html" target="_blank" rel="noopener">Chapter 1： FreeBSD與WinXP的IPv6相關基礎</a><a href="http://louksblog.blogspot.com/2007/06/ipv6-howto-bookchapter-2.html" target="_blank" rel="noopener">Chapter 2： DNS架設 — 使用bind 9-9.3.2</a><a href="http://louksblog.blogspot.com/2007/06/chapter-3-www-apache2.html" target="_blank" rel="noopener">Chapter 3： WWW架設 — 使用apache 2.2.0_7</a><a href="http://louksblog.blogspot.com/2007/06/ipv6-howto-bookchapter-4.html" target="_blank" rel="noopener">Chapter 4： FTP架設 — 使用proftpd-1.3.0.r3</a><a href="http://louksblog.blogspot.com/2007/06/ipv6-howto-bookchapter-5.html" target="_blank" rel="noopener">Chapter 5： Mail Server架設</a><a href="http://louksblog.blogspot.com/2007/06/ipv6-howto-bookchapter-5_27.html" target="_blank" rel="noopener">Chapter 6： NEWS架設 — 使用inn-current-20040118_1</a><a href="http://louksblog.blogspot.com/2007/06/ipv6-howto-bookchapter-7.html" target="_blank" rel="noopener">Chapter 7： 在FreeBSD與WindowsXP上使用Tunnel</a><a href="http://louksblog.blogspot.com/2007/06/ipv6-howto-bookchapter-8.html" target="_blank" rel="noopener">Chapter 8： FreeBSD與KAME project</a><a href="http://louksblog.blogspot.com/2007/06/chapter-9-freebsdipv6-router-ipv6.html" target="_blank" rel="noopener">Chapter 9： FreeBSD上建置IPv6 Router</a><a href="http://louksblog.blogspot.com/2007/07/ipv6-howto-bookchapter-10.html" target="_blank" rel="noopener">Chapter 10： ISATAP Tunnel</a><a href="http://louksblog.blogspot.com/2007/07/ipv6-howto-book-freebsd.html" target="_blank" rel="noopener">附錄： 安裝FreeBSD</a></p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>XML templates 比 Plain-text templates 還快?</title>
      <link href="/2007/06/29/XML-templates-%E6%AF%94-Plain-text-templates-%E9%82%84%E5%BF%AB/"/>
      <url>/2007/06/29/XML-templates-%E6%AF%94-Plain-text-templates-%E9%82%84%E5%BF%AB/</url>
      <content type="html"><![CDATA[<p><a href="http://genshi.edgewall.org/" target="_blank" rel="noopener">genshi</a> 的開發者說 genshi 的 markup 核心用 C 重寫後測效能時比原來快 10%~20%,測試工具所測出來的效能已超越了 Django templates .</p><blockquote><p>yesterday I merged the cspeedups branch into trunk, which adds a Cimplementation of the genshi.core.Markup class. This improvesperformance around 10-20% in the benchmarks (Genshi now outperformsDjango templates in the <a href="http://bigtable.py" target="_blank" rel="noopener">bigtable.py</a> benchmark).</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>trac-subversion 安裝配置設定三合一 (Ubuntu)</title>
      <link href="/2007/06/27/trac-subversion-%E5%AE%89%E8%A3%9D%E9%85%8D%E7%BD%AE%E8%A8%AD%E5%AE%9A%E4%B8%89%E5%90%88%E4%B8%80-Ubuntu/"/>
      <url>/2007/06/27/trac-subversion-%E5%AE%89%E8%A3%9D%E9%85%8D%E7%BD%AE%E8%A8%AD%E5%AE%9A%E4%B8%89%E5%90%88%E4%B8%80-Ubuntu/</url>
      <content type="html"><![CDATA[<p>因為電源不穩的關係, 苦吞 &quot;svn: No such revision 425 &quot; 訊息. svnadmin recover 都不管用, 只好重新 import 一次 Source 啦… 下次一定研究怎麼自動備份 Orz.</p><h1>安裝 install apache</h1><p>$ sudo apt-get install apache2</p><h1>安裝 install subversion</h1><p>$ sudo apt-get install subversion</p><p>$ sudo apt-get install libapache2-svn</p><h2 id="設定-confiigure-subversion">設定 Confiigure subversion</h2><p>Enter menu system/management/user_and_group</p><p>change to group tab, add atwo new group named “www-data”(apache) and &quot;subversion&quot;then add user [your account] and “www-data” to “subversion”'s group members.</p><p>or use command instead::</p><p>$ sudo adduser www-data subversion$ sudo adduser [your account] subversion</p><p>Then we could create svn repository::</p><p>$ sudo svnadmin create /home/svn  (or $ sudo svnadmin /usr/local/svn)</p><p>Then Change the folder owner</p><p>$ sudo chown -R www-data:www-data /home/svn$ sudo chmod -R g+ws /home/svn</p><p>Setup apache host site$ sudo gedit /etc/apache2/mods-enabled/dav_svn.conf</p><p>uncomment following lines:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Location /svn]</span><br><span class="line">DAV svn</span><br><span class="line">SVNPath /home/svn</span><br><span class="line">AuthType Basic</span><br><span class="line">AuthName &quot;Subversion Repository&quot;</span><br><span class="line">AuthUserFile /etc/subversion/passwd</span><br><span class="line">[/Location]</span><br></pre></td></tr></table></figure><p>or add following just above the /location:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[LimitExcept GET PROPFIND OPTIONS REPORT]</span><br><span class="line">    Require valid-user</span><br><span class="line">    [/LimitExcept]</span><br></pre></td></tr></table></figure><p>為 subversion 存取加上密碼:</p><p>sudo htpasswd -c /etc/subversion/passwd user_name</p><p>重開 apache:</p><p>sudo /etc/init.d/apache2 restart</p><p>驗證能取得 svn 檔案:</p><p>$ svn co <a href="http://hostname/svn/myproject" target="_blank" rel="noopener">http://hostname/svn/myproject</a> myproject --username user_name</p><h1>安裝 Install Trac</h1><p>$ sudo apt-get install trac</p><p>$ sudo mkdir /home/trac$ sudo chown www-data:www-data /home/trac</p><p>To add a virtual host to host trac:</p><p>$ sudo gedit /etc/apache2/sites-available/trac</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[VirtualHost *]</span><br><span class="line">     ServerAdmin webmaster@localhost</span><br><span class="line">     ServerName trac.example.com</span><br><span class="line">     DocumentRoot /usr/share/trac/cgi-bin/</span><br><span class="line">     [Directory /usr/share/trac/cgi-bin/]</span><br><span class="line">             Options Indexes FollowSymLinks MultiViews ExecCGI</span><br><span class="line">             AllowOverride All</span><br><span class="line">             Order allow,deny</span><br><span class="line">             allow from all</span><br><span class="line">     [/Directory]</span><br><span class="line">     Alias /trac &quot;/usr/share/trac/htdocs&quot;</span><br><span class="line"></span><br><span class="line">     [Location /]</span><br><span class="line">             SetHandler mod_python </span><br><span class="line">             PythonHandler trac.web.modpython_frontend </span><br><span class="line">             PythonOption TracEnvParentDir /home/trac</span><br><span class="line">             #PythonOption TracEnv /home/trac/singletrac</span><br><span class="line">             PythonOption TracUriRoot /</span><br><span class="line">     [/Location]</span><br><span class="line"></span><br><span class="line">     DirectoryIndex trac.cgi</span><br><span class="line">     ErrorLog /var/log/apache2/error.trac.log</span><br><span class="line">     CustomLog /var/log/apache2/access.trac.log combined</span><br><span class="line"></span><br><span class="line">[/VirtualHost]</span><br></pre></td></tr></table></figure><p>Uncomment the AddHandler line in /etc/apache2/apache2.conf so that the Trac CGI program will be executed:</p><h1>To use CGI scripts outside /cgi-bin/:</h1><h1></h1><p>AddHandler cgi-script .cgi</p><p>Disable the default virtualhost, enable the Trac virtualhost, and restart Apache2:</p><p>sudo a2dissite defaultsudo a2ensite tracsudo  /etc/init.d/apache2 reload</p><h1>Make New Trac Project expose to web</h1><p>sudo trac-admin /home/trac/YourProjectNameHere initenv</p><p>Then the interactive interface was prompt:[specify the repository to /home/svn/YourProjectNameHere]</p><p>sudo chown -R www-data /home/trac/YourProjectNameHere</p><p>Refer to<a href="http://trac.edgewall.org/wiki/TracOnUbuntu" target="_blank" rel="noopener">http://trac.edgewall.org/wiki/TracOnUbuntu</a><a href="http://trac.edgewall.org/wiki/TracModPython" target="_blank" rel="noopener">http://trac.edgewall.org/wiki/TracModPython</a><a href="http://www.blendedtechnologies.com/setting-up-subversion-on-ubuntu/11" target="_blank" rel="noopener">http://www.blendedtechnologies.com/setting-up-subversion-on-ubuntu/11</a><a href="http://philipatswarchy.wordpress.com/2006/11/27/apachesslsubversionpam/" target="_blank" rel="noopener">http://philipatswarchy.wordpress.com/2006/11/27/apachesslsubversionpam/</a></p>]]></content>
      
      
        <tags>
            
            <tag> trac </tag>
            
            <tag> subversion </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>與 NS3 的第一次接觸-2</title>
      <link href="/2007/06/19/%E8%88%87-NS3-%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%B8-2/"/>
      <url>/2007/06/19/%E8%88%87-NS3-%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%B8-2/</url>
      <content type="html"><![CDATA[<p><a href="http://inet6.blogspot.com/2007/06/ns3.html" target="_blank" rel="noopener">前篇</a> 中提到模擬程式跑完會產生 trace  (.tr)檔. 這幾天再仔細看了一下, 模擬程式跑完竟然也會產生 .pcap 檔!</p><p>pcap 封包檔案是用來紀錄網路封包的格式. 這個檔案格式可以使用 tcpdump 或是圖形介面的 wireshark 等工具開啟, 從除錯的角度上來看, 因為有一些現成封包分析工具可用來分析 pcap 封包檔, 因此比起 .tr 檔更容易分析. 對熟悉網路開發的人來說,  pcap 讓人有從真實網路抓封包的錯覺 😄</p><p>一打開 pcap 封包, NS-3 目前的優缺點就無所遁形:</p><p>優點:</p><p>1. 封包格式參照真實封包定義, 擴充性佳</p><p>缺點:</p><p>1. 封包目前只支援 IP, UDP, 沒有 mac 層支援2. 沒計算 checksum (計較起來這其實不算缺點, 沒有那個做網路模擬的還真的去算 checksum)</p><p>另外 NS-3 還比較差的一點是目前的拓樸描述還蠻醜的, 宣告一個網路節點會用到這種鬼語法:</p><blockquote><p>Ptr[node] n0 = Create[internetnode] ();相對8月中預計發佈的 3.0.5 版中可使用的 Python script 版本宣告則是:n0 = ns.MakeInterNetNode()同樣的 simple-p2p 拓樸, Python 版的可能是因為加入較少與實做相關的 code 所以比較好理解.擁有較好可讀性的 Python script 應該是個學習網路模擬的好幫手 😄</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> NS3 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>與 NS3 的第一次接觸</title>
      <link href="/2007/06/19/%E8%88%87-NS3-%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%B8/"/>
      <url>/2007/06/19/%E8%88%87-NS3-%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8E%A5%E8%A7%B8/</url>
      <content type="html"><![CDATA[<p><a href="http://www.nsnam.org/" target="_blank" rel="noopener">NS-3</a>? <strike>跟PS3沒關係</strike> NS(Network Simulator)-3 是已經主宰網路模擬界多年的 <a href="http://www.isi.edu/nsnam/ns/" target="_blank" rel="noopener">NS2</a> 的繼任者. 原來 NS-3 早已悄悄上路. 值得花點時間來瞧瞧 NS-3 有什麼改進.</p><div style="text-align: left;">初接觸的感覺還不錯, NS-3 有個比 NS2 規範多的[網站](http://www.nsnam.org/), 拿掉 otcl 介面描述語言, 使用 C++ 模組化元件並直接用 C++ 來描述拓樸, 有[公開](http://code.nsnam.org/)可參與的程式碼, 有定期的[版本發佈規劃](http://www.nsnam.org/wiki/index.php/Roadmap), 而且有 [Python Binding](http://code.nsnam.org/gjc/ns-3-pybindgen/) (用 Python script 來描述拓樸, 與控制模擬的互動)的規劃!<p>有 Python Binding 這件事其實看了他們的網站並不那麼意外.</p></div>NS-3專案程式碼用 [mercurial](http://www.selenic.com/mercurial/) 管理(用 python 寫的分散式版本控制系統), 所以程式碼可以用"hg clone http://http://code.nsnam.org/ns-3-dev/"抓下來. 預設的編譯程式是一般比較少聽過的 scons, 而在[版本發佈規劃](http://www.nsnam.org/wiki/index.php/Roadmap)中不久就要以另一套 waf 來取代原本的 scons.  scons 跟 waf 都是 Python 版的 "better Make" 程式.總之原本 Makefile 要用 shell script 寫的地方, 都改用 python script 來撰寫, 可讀性較佳之外還可以用到 Python 語言的所有功能.<p>就 NS-3 模組本身而言, NS-3 去掉了 NS-2 中 <strike>討人厭的</strike> 使用 otcl 描述模型的方式, 改成<a href="http://code.nsnam.org/gjc/ns-3-pybindgen/file/1690717820e3/examples/simple-p2p.cc" target="_blank" rel="noopener">直接用 C++ 描述</a>之後, 安裝上簡單了不少, 也不用多學一門沒啥用途的語言. C++ 讓多數基本網路元件可以重用, 像以前各個模組會&quot;綁版本&quot;的情形應可降低很多.</p><p>目前還在開發中的 Python Binding 讓 <a href="http://code.nsnam.org/gjc/ns-3-pybindgen/file/1690717820e3/examples/simple-p2p.py" target="_blank" rel="noopener">網路模型也可以用 Python 描述</a>, 晚上編譯完還沒意識到如何使用 Python 版.  不過編好的 C++ 版一執行就跑出熟悉的 .tr 檔還是蠻有親切感的.</p><p>目前 NS-3 的核心網路元件還不多(不過 node 終於可以有真的IP位址了 XD), 範例較少是比較可惜的. 看看這情形要多久才能改善囉.</p>]]></content>
      
      
        <tags>
            
            <tag> NS3 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Turbogears widgets 介紹 -- 表單篇</title>
      <link href="/2007/05/22/Turbogears-widgets-%E4%BB%8B%E7%B4%B9-%E8%A1%A8%E5%96%AE%E7%AF%87/"/>
      <url>/2007/05/22/Turbogears-widgets-%E4%BB%8B%E7%B4%B9-%E8%A1%A8%E5%96%AE%E7%AF%87/</url>
      <content type="html"><![CDATA[<p>相信在做網頁開發時不少人被表單處理困擾著,cherrypy 的網頁表單處理已經很簡單了,而 TurboGears 更為我們帶來了 widget (網頁元件)這個概念.透過 widget 能簡單地完成產生表單, 欄位驗證, 重用表單等等仔細思考起來相當複雜的動作.</p><p>TurboGears 開發者們宣稱 widget 多麼好用, 但是 widget 的說明文件卻相當缺乏.</p><p>那麼 widget 到底是什麼東西哩?</p><h1><span style="font-weight: bold;">widget 是什麼</span></h1><p>widget 用中文表達簡而言之就是&quot;網頁元件&quot;,TurboGears widget 的功能就是讓使用者重用所有網頁元件.</p><p>那麼網頁元件是什麼? 網頁元件就是網頁的構成元素.</p><p>古代希臘先哲柏拉圖認為風, 火, 水, 土是構成世界的四大元素. 所有的物質最終都可以拆解成這四個元素.</p><p>而在網頁的世界裡, HTML, 表單(Form), CSS, Javascript 則是網頁的四大構成元素.(註)多數的網頁都可以由這四個元素組合產生.</p><h2 id="widget-表單元件">Widget 表單元件</h2><p>Widget 表單屬於 Widget 的一個重要分支. 由以下的基本網頁元件組成:</p><pre><code>* 表單欄位元件 (Field) — 等同於 HTML 表單欄位的基本元素, 如文字欄位 [input type=&quot;text&quot;] 文字區塊欄位 (textarea) 等等. 用來產生基本的表單欄位.* 表單欄位列表元件 (WidgetList) - 用來有機地組合表單欄位元件, 產生欄位列表, 提供表單元件使用.* 表單元件(Form) — 表單欄位, 驗證資訊, 處理方式(post 或 get), 處理函式 (URI) 的集合. 可使用現有的驗證功能 validators.Schema 來做表單驗證.</code></pre><p>除了基本的表單欄位元件, TurboGears 也透過 widget 提供了一些進階的表單欄位元件例如跳頁選單(表單+Javascript), 語法高亮(HTML+CSS+Javascript), 標籤頁(HTML+Javascript)等元件, 這些高級元件(Rich Element) 也都是由這些網頁中最常見的基本元素所組成.</p><p>透過 widget 你可以自己建造自己的網頁元件, 也可以透過 python 的擴充機制, 很容易使用 easy_install 命令取得其他人共享出來的各種元件.</p><p>在使用高級元件之前, 我們回到基本面上,  先來看看如何用 widget 處理表單.</p><h1><span style="font-weight: bold;">用 widget 產生表單欄位</span></h1><p>你可以在互動式直譯器(interactive interpreter)裡試驗 TurboGears widget.</p><p>產生 TextField</p><pre>>>> # TextField>>> from turbogears.widgets import *>>> Field = TextField(label='Main Menu')>>> Field.render()'<input id="widget" class="textfield" name="widget" type="text">'</pre><p>產生 TextArea</p><pre>>>> # TextArea>>> Field2 = TextArea(label="Description", attrs=dict(rows=3, cols=60))>>> Field2 = TextArea(label="Description",...     attrs=dict(rows=3, cols=60))...>>> Field2.render()'<textarea rows="3" cols="60" class="textarea" name="widget" id="widget"></textarea>'>>></pre><p>在 Python 互動式直譯器裡你可以看到用 TurboGears widget 產生一個表單欄位並不困難.</p><h1><span style="font-weight: bold;">用 widget 產生跳頁選單</span></h1><p>我們再來看如何用 widget 產生跳頁選單</p><p>跳頁選單適用於諸如&quot;選擇使用的語言&quot;等等情況,可以在使用者選擇後自動跳至對應的網頁.</p><p>首先, 我們先看看如何產生一般的網頁選單</p><pre>>>> # SingleSelect Field>>> Field3 = SingleSelectField(label="Author",...       options=[(1, "fred"), (2, "Joe")])...>>> Field3.render()'<select class="singleselectfield" name="widget" id="widget">    <option value="1">fred</option><option value="2">Joe</option></select>'>>></pre><p>到現在為止, 我們可以確認產生一般網頁選單的方式與前面生成簡單文字欄位的方式完全一致.</p><p>我們接著來看看如何產生跳頁選單.</p><pre>>>> # JumpMenu>>> from turbogears.widgets import *>>> Form = JumpMenu('Main Menu',options = [...        ('/createNewBatch', 'Create New Batch'),])...>>> Form.render()'<select class="jumpmenu" onchange="TG_jumpMenu(\'parent\',this,0)" id="Main Menu" name="Main Menu">    <option value="/createNewBatch">Create New Batch</option></select>'>>></pre><p>恩, 產生跳頁選單跟產生一般網頁選單的使用方式並無二致.  也同樣是這麼容易.</p><p>跳頁選單無法在 Python 互動式直譯器中完全表現,因為在實際使用時, 跳頁選單元件除了會產生這段 HTML 表單外,嵌入 turbogears 網頁樣板時網頁元件還會自動嵌入相應的 javascript.</p><p>等你熟悉了 Turbogears 之後,透過 widget, 即使是很複雜的 javascript 元件(如所見即所得網頁介面編輯器),你也不必擔心要導入哪些 Javascript library 等瑣事, 透過網頁元件的分享, 你可以直接透過 easy_install 命令即裝即用別人寫好的網頁元件. 然後把時間用在自己網站內容的開發上.</p><h1><span style="font-weight: bold;">用 widget 產生表單</span></h1><p>前面已經講完用 widget 產生表單&quot;欄位&quot;了. 然而一個表單除了基本的各個欄位之外,還包含了一些其他元素. 例如如何組織欄位, 指定上傳方式 (GET/POST), 指定處理動作 (action)等等.</p><p>TurboGears 裡已包含了數種預設表單欄位的格式. 而其中最常見的就是 TableForm 了.</p><h1><span style="font-weight: bold;">用 widget 組織表單欄位</span></h1><pre>可以透過 WidgetsList 來組織表單欄位.>>> class BookFields(WidgetsList):...  title = TextField(label="Title")...  description = TextArea(label="Description")...>>> BookFields()[TextField(name='title', convert=True, field_class='textfield', attrs={}, css_classes=[]), TextArea(name='description', convert=True, rows=7, cols=50, attrs={}, css_classes=[], field_class='textarea')]</pre><p>我們已經組織起了兩個文字欄位, 通過最後一行可以發現 <pre>WidgetsList <span style="font-family:Georgia,serif;">其實</span>只是協助我們產生了一個表單欄位元件的列表.接下來我們就要把這個欄位列表放進表單裡.</pre></p><pre>>>> class BookForm(TableForm):...     #name="Book"...  fields = BookFields()...     #validator = BookSchema()...     #method="post"...  submit_text = "Create"...>>> BookForm()BookForm(name='form', submit_text='Create', convert=True, table_attrs={}, form_attrs={}, action=None, disabled_fields=set([]), method='post')>>> BookForm().render()'.form method="post" class="tableform" name="form".......略......./form.</pre>基本上這產生的就是相當完整的表單了....<p>等等!~~想必你要大聲質疑: 我的 “action” 呢??? 換句話說, 我怎麼指定處理這個表單的 url 呢?</p><h1><span style="font-weight: bold;">widget 與樣板合作</span></h1><p>恩, 好問題. 你可以直接在宣告時就將 action 的值傳給 widget,也可以在樣板 render 時再傳入. 一般我習慣習慣在表單最終產生時(樣板 render時)再指明.</p><p>例如這樣</p><p>在 <a href="http://controllers.py" target="_blank" rel="noopener">controllers.py</a> 中加入</p><pre>model_form = BookForm() # 事先宣告好在重用時不用多次呼叫# 產生實際表單頁面@expose("template.new")def new(self, **kw):return dict(form = model_form)</pre><p>在 “new.kid” 樣板中加入這一行</p><p>${form(action=‘save’)}</p><p>當然有了處理這個表單的 url  , 也需要在 <a href="http://controllers.py" target="_blank" rel="noopener">controllers.py</a> 中加入一個處理 “save” 這個處理表單資料的 method</p><pre>@expose()def save(self, id=None, **kw):....</pre><p>前面講起來好像花了不少篇幅, 但其實看完程式後你會發現使用 widget程式邏輯變得出乎意料之外的清晰.<a href="http://docs.turbogears.org/1.0/CRUDTemplate" target="_blank" rel="noopener">http://docs.turbogears.org/1.0/CRUDTemplate</a></p><h1><span style="font-weight: bold;">用 widget 驗證表單欄位</span></h1><p>驗證表單欄位其實只要在 TableForm 中傳入 validator 參數即可</p><pre>>>> class BookForm(TableForm):...  fields = BookFields()...  validator = BookSchema()...  submit_text = "Create"...>>> BookForm().render().....略....</pre><p>你可以使用 formencode 模組所提供的 “Schema” 完成任何複雜的表單驗證程序.從比較基本的輸入字數長短/類型驗證, 到多欄位密碼確認等都可以簡單地達成.(Turbogears 將 formencode 的 Schema 包裝成 validators.Schema)</p><pre>>>> from turbogears import validators>>> class BookSchema(validators.Schema):...  title = validators.String(not_empty=True, max=30)...  description = validators.String()...>>> BookSchema()<bookschema 114="" object="" chained_validators="[]" fields="{'description':" title="" pre_validators="[]">>>></bookschema></pre><p>上一節中我們在 <a href="http://controllers.py" target="_blank" rel="noopener">controllers.py</a> 裡定義了</p><p>model_form = BookForm()</p><p>現在我們在做表單驗證時也可以用的上.</p><p>用法是簡單地在 “save” 這個 method 上加上 @validate(model_form) 裝飾. 表示要使用 model_form 表單元件所附的表單驗證元件.</p><p>而要順便將輸入錯誤的訊息產生在表單上的話, 只要再加入 @error_handler(new) 裝飾,表示如果有錯誤就跳轉到 new 這個 method (我們的表單頁)處理.</p><pre>@validate(model_form)@error_handler(new)@expose()def save(self, id=None, **kw):....</pre><h1><span style="font-weight: bold;">widget 還可以幹什麼</span></h1><p>widget 可以讓你用最 Pythonic 的方式表現網頁表單, 也可以簡化提供不同 AJAX 函式庫的支援.</p><p>你覺得網頁元件能幹什麼, Turbogears widget 就可以幫助你幹什麼.</p><h1><span style="font-weight: bold;">怎麼知道有哪些 widget</span></h1><p>Turbogears 的網頁工具箱 toolbox 中有網頁元件瀏覽器 (widget browser).使用 $tg-admin toolbox 命令啟動網頁工具箱就會看到網頁元件瀏覽器.在網頁元件瀏覽器中你可以找到所有內建與外掛的網頁元件.</p><p>外掛的網頁元件(widget plugin)可以在 cogbin (<a href="http://www.turbogears.org/cogbin/" target="_blank" rel="noopener">http://www.turbogears.org/cogbin/</a>) 找到.</p><p>註: 嚴格說來, &quot;表單&quot;其實是屬於 HTML 的一部分.所以也可以說網頁的三大基本組成元素是 HTML, CSS, Javascript.</p><p>TurboGears widget 實現表單的方式也是組合這三大基本組成元素.</p><p>然而因為表單的使用與其他 HTML 元素的使用有較大差別.在說明時獨立出來更易於理解.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
            <tag> widgets </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TurboGears 的開發哲學</title>
      <link href="/2007/05/11/TurboGears-%E7%9A%84%E9%96%8B%E7%99%BC%E5%93%B2%E5%AD%B8/"/>
      <url>/2007/05/11/TurboGears-%E7%9A%84%E9%96%8B%E7%99%BC%E5%93%B2%E5%AD%B8/</url>
      <content type="html"><![CDATA[<p>TurboGears 的開發哲學有三:</p><p>1. Keep simple things simple and complex things possible讓簡單的事情維持簡單, 並讓複雜的事情變得可辦到</p><p>2. Give defaults while you give choices提供選擇時一並提供預設值.</p><p>3. Give choices while the one obvious way depends當莫衷一是時就提供選擇.</p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
            <tag> zen </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NDS 上跑 Python</title>
      <link href="/2007/04/02/NDS-%E4%B8%8A%E8%B7%91-Python/"/>
      <url>/2007/04/02/NDS-%E4%B8%8A%E8%B7%91-Python/</url>
      <content type="html"><![CDATA[<p><img src="http://ec1.images-amazon.com/images/P/B000084313.01._AA280_SCLZZZZZZZ_.jpg" alt=""></p><p>(這段是 KUSO 的) 繼 <a href="http://www.amazon.com/Nintendo-45496732530-Pokemon-Ruby/dp/B000084313/ref=sr_1_1/104-3408780-2552749?ie=UTF8&amp;s=toys-and-games&amp;qid=1175423710&amp;sr=8-1" target="_blank" rel="noopener">Ruby</a> 在 GBA 上大顯神威賣破百萬套之後 ,</p><p>(這段是正經的) Python 終於悄悄爬上了 NDS 硬體.</p><p><a href="http://www.disinterest.org/NDS/Python25.html" target="_blank" rel="noopener">http://www.disinterest.org/NDS/Python25.html</a></p><p><img src="http://www.disinterest.org/NDS/files/python25/dualis25.PNG" alt=""></p><p>果然什麼主流平台(NDS 已經賣破一千五百多萬台)上都可以跑 Python 呀.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> nds </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pypy 架構分析 1</title>
      <link href="/2007/04/01/pypy-%E6%9E%B6%E6%A7%8B%E5%88%86%E6%9E%90-1/"/>
      <url>/2007/04/01/pypy-%E6%9E%B6%E6%A7%8B%E5%88%86%E6%9E%90-1/</url>
      <content type="html"><![CDATA[<p>以前已經有些人研究過 Python 原始碼.</p><p><a href="http://tag.csdn.net/tag/python%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/1.html" target="_blank" rel="noopener">python源码剖析</a></p><p><a href="http://tag.csdn.net/tag/python%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/1.html" target="_blank" rel="noopener">python 源码分析</a></p><p><a href="http://tag.csdn.net/tag/python%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/1.html" target="_blank" rel="noopener">python 源码分析</a> 中有列出 Python 語法分析的機制。回顧一下 cPython 的整個處理流程：</p><p>1.     PyTokenizer進行詞法分析，把源程序分解為 Token</p><p>2.     PyParser 根據 Token 創建 CST</p><p>3.     CST 被轉換為 AST</p><p>4.     AST 被編譯為字節碼 ByteCode</p><p>5.     執行字節碼</p><p>這個流程是直譯器 Interpreter 的流程.大體也可以套用在 pypy 的 Python 直譯器上.</p><p><a href="http://codespeak.net/pypy/dist/pypy/doc/architecture.html" target="_blank" rel="noopener">PyPy - Goals and Architecture Overview</a> (pypy 架構) 一文中講到 pypy 有兩大構成部份,其一就是 Python Interpreter(直譯器),其二則是 Translation Framework(轉譯器).</p><p>…寫好的被 Ctrl+Z 吃掉了…待補…  Orz</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pypy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>程式語言中的流氓: pypy</title>
      <link href="/2007/03/30/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E4%B8%AD%E7%9A%84%E6%B5%81%E6%B0%93-pypy/"/>
      <url>/2007/03/30/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E4%B8%AD%E7%9A%84%E6%B5%81%E6%B0%93-pypy/</url>
      <content type="html"><![CDATA[<p><a href="http://codespeak.net/pypy/dist/pypy/doc/release-1.0.0.html%20" target="_blank" rel="noopener">PyPy 1.0 剛發佈</a>PyPy 是:</p><p>1. 使用 Python 語言編寫的 Python 語言 (稱作 rpython).2. 可以將 python 程式碼編譯成原生的 c, CLI (.net 2.0), javascript 或其他語言執行程式, 提高執行速度.3. 可以把 rpython 編譯成 javascript , 用來產生客戶端 javascript/編寫 ajax 應用.4. 可以將 rpython 程式碼流程展示成視圖.5. 可以透過 JIT 產生自訂版本的編譯器.</p><p>為什麼說 pypy 是流氓哩? 因為跟其他程式語言相比, 它根本就是在作弊嘛!</p><ul><li>你說 c 語言寫的程式最快, pypy 可以將程式碼自動轉成 c 版程式. 用 gcc 編譯後僅慢原生 c 執行檔 10~20%.</li><li>你說 .Net 跨平台,  pypy 可以將程式碼自動轉成 .Net 版程式. 編譯後比  <a href="http://www.voidspace.org.uk/python/weblog/arch_d7_2007_03_24.shtml#e674" target="_blank" rel="noopener"> MS 官方提供的 .Net 平台 IronPython 快 100 倍</a>.</li><li>寫好的程式可以透過 pypy 自動幫你畫流程圖.最恐怖的是 pypy 是使用 Python 語言編寫的 Python 語言, 可透過轉譯器編譯成各平台執行程式以取得超過 cpython  的效能.各種語言轉譯器(translator) 也可以用 rpython 本身撰寫. 以後 rpython 語言開發者不用是 C 語言專家也可以參與改進 Python 語言, 與其他語言相比加入各種實驗性新特性的難度簡單了好幾個數量級.</li></ul><p>用 pypy 目前已經可以產生 JavaScript 程式碼, 來支援 AJAX 開發.以後想必也能產生 ActionScript 程式碼, 支援 Flash/Flex/Appolo 開發吧?</p><p>我已經準備要屈服於 pypy 的惡勢力了 XD</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pypy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>來個網摘</title>
      <link href="/2007/03/30/%E4%BE%86%E5%80%8B%E7%B6%B2%E6%91%98/"/>
      <url>/2007/03/30/%E4%BE%86%E5%80%8B%E7%B6%B2%E6%91%98/</url>
      <content type="html"><![CDATA[<p><a href="http://forum.gamebase.com.tw/board_archive.jsp?no=39001&amp;cno=0&amp;amp;upper=107617&amp;level=3" target="_blank" rel="noopener">線上跑團工具-OpenRPG使用心得</a></p><p>OpenRPG 看起來像是 IRC 的一種變形, 提供 Table RPG 相關工具.背後是使用 python 2.5 + pygame 提供跨平台功能.</p><p><a href="http://cleverdevil.org/computing/52/making-a-statement-with-elixir" target="_blank" rel="noopener">Making a Statement with Elixir</a>怎麼用 Elixir 寫增強功能. 跟 <a href="http://www.ibm.com/developerworks/cn/java/j-cb03137/index.html" target="_blank" rel="noopener">跨越边界: 对 Rails 进行扩展</a> 一同服用.</p><p><a href="http://www.hlod-wig.org/index.php/gcpi/" target="_blank" rel="noopener">(GCPi) Google Calendar Python Interface</a>Google 日曆的 Python API</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> digest </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pyGlobus</title>
      <link href="/2007/03/30/pyGlobus/"/>
      <url>/2007/03/30/pyGlobus/</url>
      <content type="html"><![CDATA[<p><a href="http://www.globus.org/" target="_blank" rel="noopener">Globus</a> 是目前網格運算(Grid Computing)的實際標準, 使用 JAVA 實做.</p><p><a href="http://wiki.cogkit.org/index.php/Python_CoG_Kit" target="_blank" rel="noopener">pyGlobus</a> 是Globus 的  Python 接口</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> grid </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>對 HP 收購 Tabblo 的想法</title>
      <link href="/2007/03/24/%E5%B0%8D-HP-%E6%94%B6%E8%B3%BC-Tabblo-%E7%9A%84%E6%83%B3%E6%B3%95/"/>
      <url>/2007/03/24/%E5%B0%8D-HP-%E6%94%B6%E8%B3%BC-Tabblo-%E7%9A%84%E6%83%B3%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>新聞來源: <a href="http://blog.linux.org.tw/%7Ejserv/archives/001888.html" target="_blank" rel="noopener">HP acquires Tabblo</a></p><p>Tabblo 是一個使用 Python 語言下的 Django 網站開發框架製作的圖片分享網站.特點是可以將上傳的圖片輕鬆製作成各種形式精美的套卡. HP 最近將這個以9人團隊組織的網站收購下來.</p><p>Python 語言繼 YouTube 的大成功後,  在使用網站開發框架(Django)上也找到了另一個具說服力的範例. 讓人打消 Python 語言不適合 Web 開發的疑慮.</p><p>話說回來, HP 這家公司難道也想玩 Web 2.0 嗎? 不然為何要買這樣的 .com 公司?</p><p>當然, 連友立(Ulead, 出品 PhotoImpact 的公司) 都有線上圖片分享網站了, HP 這間印表機大廠也來一個有何不可?</p><p>依新聞來源內容來看, 我做個猜測: HP 買 Tabblo 可能不只看在圖片分享網站上, 更看中的應該是 Tabblo 的核心價值.</p><p>Tabblo 的核心價值是什麼? Tabblo 的核心價值是它所提供的獨家&quot;圖片轉精美的套卡&quot;服務.而 Tabblo 是透過 PIL (合理猜測啦) 等圖片處理模組, 才有辦法建立這樣的服務.</p><p>即使哪天 HP 印表機附的光碟裡提供類似 Tabblo 網站提供的圖片-&gt;套卡功能,我一點也不會意外.</p><p>使用 Python 語言開發網站一大優勢就是背後有很多現有執行在作業系統上的高效模組 (ex: PIL) 可以調用.</p><p>單就圖形處理方面, 使用超有彈性又真正跨平台的 Python 語言開發這類原本只有單機才做得到的服務有許多的好處.</p><p>其中最重要的一點是: 同樣的程式, 可以套用在 Tabblo 網站上, 也可以套用在各作業系統的單機版上.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Functional Programming 函數式編程(程式設計)</title>
      <link href="/2007/03/16/Functional-Programming-%E5%87%BD%E6%95%B8%E5%BC%8F%E7%B7%A8%E7%A8%8B-%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/"/>
      <url>/2007/03/16/Functional-Programming-%E5%87%BD%E6%95%B8%E5%BC%8F%E7%B7%A8%E7%A8%8B-%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/</url>
      <content type="html"><![CDATA[<p>Functional Programming 中文一般被翻作&quot;函數式編程(程式設計)&quot;. 看到這個名詞, 我腦袋裡很自然就浮出 “def …” 這樣的語句.因此&quot;函數式編程&quot;一詞所想表達的程式設計概念一直讓我完全摸不著頭腦.</p><p>直到看了<a href="http://www.ibm.com/developerworks/cn/java/j-cb07186.html" target="_blank" rel="noopener">跨越边界: 用 Haskell 研究函数性编程</a>這篇文章, 我才理解&quot;函數式編程&quot;其實就是 &quot;以撰寫數學方程式的方式來編程(程式設計)&quot;的程式設計方式.</p><p>看了內容很自然地發現其實 Python 語言裡可以找到 map, filter, lambda 等這些用起來比較怪異的函數都是在 Python 中可以拿來作函數式編程的基礎工具.</p><p>Python 程式裡有些時候會有用上這些語句的地方, 雖然省了空間,但是命令式/OO編程的習慣卻讓這些段程式較難理解.</p><p>為了更易於學習與理解, python3000 中會將其中一些函數式編程相關函數(lambda)從核心中去掉, 但卻提供了更完整的函數式編程模組 <a href="http://oakwinter.com/code/functional/index.html" target="_blank" rel="noopener">functional </a>的支援. 也許這是個更兩全其美的方式吧.</p><p>最近在準備 <a href="http://OSDC.tw" target="_blank" rel="noopener">OSDC.tw</a> 2007 要用的投影片, 在整理的過程中也產生了不少想法.今天看了&quot;跨越邊界&quot;系列之後.更加感受到要好好理解並運用一種開發方法(不管是函數式編程還是測試驅動編程), 果然還是應該從心法(本質)上著手呀.</p><p>參考資料:</p><ul><li><a href="http://www.ibm.com/developerworks/cn/java/j-cb07186.html" target="_blank" rel="noopener">跨越边界: 用 Haskell 研究函数性编程 (這篇寫的極好, 推薦閱讀)</a></li><li><a href="http://oakwinter.com/code/functional/index.html" target="_blank" rel="noopener">functional 模組</a>, 提供findr, findl 等常見函數式編程支援.</li><li><a href="http://www.amk.ca/python/writing/functional" target="_blank" rel="noopener">Functional Python Tutorial</a></li><li><a href="http://www.ibm.com/developerworks/cn/linux/sdk/python/charm-17/index.html" target="_blank" rel="noopener">可爱的 Python: Python 中的函数编程 (共三篇, 不建議看)</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> functional </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>結構文本(rst)轉網頁投影片(s5)</title>
      <link href="/2007/03/16/%E7%B5%90%E6%A7%8B%E6%96%87%E6%9C%AC-rst-%E8%BD%89%E7%B6%B2%E9%A0%81%E6%8A%95%E5%BD%B1%E7%89%87-s5/"/>
      <url>/2007/03/16/%E7%B5%90%E6%A7%8B%E6%96%87%E6%9C%AC-rst-%E8%BD%89%E7%B6%B2%E9%A0%81%E6%8A%95%E5%BD%B1%E7%89%87-s5/</url>
      <content type="html"><![CDATA[<p>在看 <a href="http://matt-good.net/2007/02/28/pycon-trac-presentation/" target="_blank" rel="noopener">pycon-trac-presentation</a> 時,發現 Matt Good 用 docutils 模組提供的&quot;rst2s5&quot; 套件來將結構文本(rst) 轉換成網頁投影片(s5) 效果還蠻不錯的. 用他客製化的 rst2s5 模組可以透過 pygments 支援程式的語法高亮展示.</p><p>以下提供使用方法</p><h1>下載</h1><p>$ easy_install docutils$ easy_install docutils pygments</p><p>並下載 <a href="http://matt-good.net/2007/02/28/pycon-trac-presentation/" target="_blank" rel="noopener">rst2s5 with code high lighting</a></p><h1>用法</h1><p><a href="http://rst2s5.py" target="_blank" rel="noopener">rst2s5.py</a> [輸入].rst [輸出].html</p><p>i.e.<a href="http://rst2s5.py" target="_blank" rel="noopener">rst2s5.py</a> xxx.rst ooo.html</p><p>會產生的輸出結果是 “ooo.html” 這個檔名的檔案,跟一個包含 s5 投影片 js/css 資料的資料夾.</p><h1>語法備忘</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">=======</span><br><span class="line">標題</span><br><span class="line">=======</span><br><span class="line"></span><br><span class="line">:Author: Fred Lin</span><br><span class="line">:Date:   $Date: 2007-03-16 $</span><br><span class="line"></span><br><span class="line">一張投影片</span><br><span class="line">==========</span><br><span class="line"></span><br><span class="line">.. code-block:: pycon</span><br><span class="line"></span><br><span class="line">  &gt;&gt;&gt; # python console</span><br><span class="line"></span><br><span class="line">.. class:: handout</span><br><span class="line"></span><br><span class="line">   handout 是放註解的地方. 不會 show 到投影片上</span><br><span class="line">   code-block 可用 pygments 提供的各種語法高亮, 如 pycon, python, bash, html...</span><br><span class="line"></span><br><span class="line">投影片再一張</span><br><span class="line">============</span><br><span class="line"></span><br><span class="line">.. class:: incremental</span><br><span class="line"></span><br><span class="line">   * 1st. item</span><br><span class="line">   * 2nd. item</span><br><span class="line"></span><br><span class="line">.. image:: python.png</span><br><span class="line"></span><br><span class="line">.. class:: handout</span><br><span class="line"></span><br><span class="line">   依序顯示重點. image 會嵌入圖片.</span><br><span class="line"></span><br><span class="line">.. include:: pylevels.rst</span><br><span class="line"></span><br><span class="line">語法參考</span><br><span class="line">========</span><br><span class="line"></span><br><span class="line">http://docutils.sourceforge.net/docs/user/slide-shows.html</span><br><span class="line"></span><br><span class="line">.. class:: handout</span><br><span class="line"></span><br><span class="line">   前一張後的 include 語句支援嵌套其他 rst 文件.</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> s5 </tag>
            
            <tag> docutils </tag>
            
            <tag> rst </tag>
            
            <tag> pygments </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 社群的 web 框架開發</title>
      <link href="/2007/03/05/Python-%E7%A4%BE%E7%BE%A4%E7%9A%84-web-%E6%A1%86%E6%9E%B6%E9%96%8B%E7%99%BC/"/>
      <url>/2007/03/05/Python-%E7%A4%BE%E7%BE%A4%E7%9A%84-web-%E6%A1%86%E6%9E%B6%E9%96%8B%E7%99%BC/</url>
      <content type="html"><![CDATA[<p><span style="font-weight:bold;">框架介紹</span>Python 社群中各種 web 框架開發路線都有.<span style="font-weight:bold;">Django</span>目前 Django 框架吸引的使用者最多, 一方面原因是 Django 團隊的性質, Django 有一個像 Rails 那樣的專職團隊在維護, 保證了專案的持續性. 同時不錯的指引文件, 對初學者友善的 Admin 介面, 開發者 Adrian 四處不遺餘力的宣傳也是吸引人的原因.除了持續框架維護的承諾, 宣傳之外, Django 框架傑出的效能也屢屢在網頁框架評比中勝出.python 創造者 Guido 也將 Django 視為 Python 語言的首選網頁框架.</p><p>Django 網頁框架的每個部份都是 Django 開發團隊自行建置.但是在 Django 之外, python 社群其實早已有各式各樣的網頁開發工具. TurboGears 與 pylons 開發者則是致力於將這些開發有年的網頁開發工具&quot;黏起來&quot;, 發揮小兵團結的綜合效應.</p><span style="font-weight:bold;">TurboGears</span>例如使用 TurboGears 框架, 就可免去各模組間合作時的重複設定. 由於各個挑選的模組都經過多年實戰測試, 除了滿足基本的開發需求外. 也比較容易達成較深入或較特殊的需求. <p>構成 TurboGears 框架的組件, 包含 Template, model, URL dispatcher, AJAX library 等等全部可以透過 setuptools 工具簡單安裝與替換. 彈性 100%!</p><p>TurboGears 框架還提供命令列(tg-admin)和網頁工具箱(Toolbox)等可供擴展的輔助工具,從而獲得相當棒的開發體驗. (Toolbox 裡面也有類似 Django Admin 的 Catwalk 工具.)</p><span style="font-weight:bold;">整合 Django 與 TurboGears? </span>那麼這兩個都很棒的框架有沒有整合的可能呢?<p>Kevin Dangoor (TurboGears 框架創造者)在 Pycon 2007 的 web panel 說:</p><blockquote><p>You can have more innovation with individual components with their own maintainers than with a full stack.比起完整的框架, 將各個組件讓各自的維護者維護可以產生更多的創造性</p></blockquote><p>TurboGears 框架的這種開發哲學與 Django 團隊走的路是完全相反的. 加上 Django 團隊堅持在他們的網頁框架中不包含 AJAX 功能並不成問題 (我覺得問題是在其他 Django 用戶沒有什麼很容易的方法提供 Django AJAX 擴充包). 在這種理念完全不同的情況下是不可能整合的.<span style="font-weight:bold;">Pylons</span>TurboGears 跟 Pylons 兩個框架走的路線更相近. 一些擴充模組或樣板引擎早都可以共用了.pylons 差不多就是換掉 controller 核心的 TurboGears.Pylons 框架沒有 TG 的 toolbox 或 Django 的 Admin 介面, 但支援 WSGI, web helpers (學習 Rails), 效能也不錯, 卻還沒找到自己的最佳定位.</p><span style="font-weight:bold;">整合 TurboGears 與 Pylons? </span>那麼這兩個框架有沒有整合的可能呢?<blockquote><p>it’s the style/feel thing that represents the difference between the two framework– Kavin Dangoor</p></blockquote><p><a href="http://www.blueskyonmars.com/2007/03/05/merging-turbogears-and-pylons/" target="_blank" rel="noopener">Kavin Dangoor</a> 和 <a href="http://compoundthinking.com/blog/index.php/2007/03/05/merging-turbogears-and-pylons/" target="_blank" rel="noopener">Mark Ramn</a> 兩位 TurboGears 框架的代表人物在 pycon 2007 後紛紛對 TurboGears 與 Pylons 的整合發表了樂觀的文章. 原因是兩個框架的理念相近, 差別主要在預設選擇的套件不同. 還有實作上所造成的差異.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> webframework </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用 nose 測試工具簡單做測試</title>
      <link href="/2007/03/04/%E4%BD%BF%E7%94%A8-nose-%E6%B8%AC%E8%A9%A6%E5%B7%A5%E5%85%B7%E7%B0%A1%E5%96%AE%E5%81%9A%E6%B8%AC%E8%A9%A6/"/>
      <url>/2007/03/04/%E4%BD%BF%E7%94%A8-nose-%E6%B8%AC%E8%A9%A6%E5%B7%A5%E5%85%B7%E7%B0%A1%E5%96%AE%E5%81%9A%E6%B8%AC%E8%A9%A6/</url>
      <content type="html"><![CDATA[<p><span style="font-weight: bold;">楔子</span></p><p>自從聽說了敏捷方法 (Agile programming)後, 一直很想試試這種&quot;測試先行&quot;的開發方式.但是在 python 上前後試過 unitest, doctest, 都不夠&quot;<span style="font-weight: bold;">簡單到會想常常拿來用</span>&quot;的程度,</p><p>今天拿了一份原型寫得差不多的程式, 試著寫些測試例子 (test case) 後用 nose 測試工具來測試看看, 想不到 nose 還蠻容易使用的.</p><p><span style="font-size:180%;">三步驟使用 nose 開始測試</span></p><p><span style="font-size:130%;">1. 安裝或更新 nose</span><span style="font-weight: bold;">#</span> easy_install -U nose</p><p>沒用過 easy_install ? 你該開始試著用了!</p><p><span style="font-size:130%;">2. 撰寫測試例子 (test case)</span>打開一個新的資料夾, 我們統一在這個新資料夾裡寫主程式與測試例子</p><p>將要測試的內容寫入 <a href="http://something.py" target="_blank" rel="noopener">something.py</a> 這個檔案[註1]:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; class Hello(object):</span><br><span class="line">&gt;       def  __init__(self):</span><br><span class="line">&gt;            self.template = &quot;hello world&quot;</span><br><span class="line">&gt; </span><br><span class="line">&gt;       def render(self):</span><br><span class="line">&gt;           return self.template</span><br></pre></td></tr></table></figure><p>nose 測試工具識別測試例子的條件, 是判斷找到的這個類別或方法的名稱是不是以&quot;test&quot; 或 &quot;Test&quot;開頭. 如果是的話就當成是測試例子. nose 會自動搜尋子目錄下所有符合的測試例子, 並自動開始測試.</p><p>因此我們第一個範例程式用的測試例子只要是函式名稱用 ‘test’ 開頭來命名就可以囉, 我們命名一個檔案 <a href="http://testsomething.py" target="_blank" rel="noopener">testsomething.py</a> (這個檔案名稱以 test 開頭與識別測試例子的條件並無關聯, 只是慣例上放測試的例子的檔名都會加上 test 字樣), 並在裡面寫下:</p><p><a href="http://testsomething.py" target="_blank" rel="noopener">testsomething.py</a>:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;</span><br><span class="line">&gt;     def test_Hello():</span><br><span class="line">&gt;         abc = Hello()</span><br><span class="line">&gt;         assert &quot;hello&quot; in abc.render()</span><br><span class="line">&gt; </span><br><span class="line">&gt;     def test_foreign():</span><br><span class="line">&gt;         abc = Hello()</span><br><span class="line">&gt;         assert &quot;bonjour&quot; not in abc.render()</span><br></pre></td></tr></table></figure><p>assert 是 nose 用來判斷測試結果的語法. 主要有這兩種:</p><ul><li><p>assert 片段 in “結果”</p></li><li><p>assert 片段 not in &quot;結果&quot;對照上面範例, 可以得知上面兩者的意思就是:</p></li><li><p>測試結果&quot;hello&quot;字串應該在 abc.render() 回應的結果裡</p></li><li><p>測試結果&quot;bonjour&quot;字串應該不會在 abc.render() 回應的結果裡如果上面任一種情況不符合 assert 敘述, 這個測試用例就會回報失敗.</p></li></ul><p><span style="font-size:130%;">3. 開始測試</span>切換到檔案在的檔案目錄下, 輸入</p><h1>nosetests</h1><p>結果應該類似這個樣子:</p><blockquote><p>D:\path\pyfile&gt;nosetests…</p><hr><p>Ran 1 tests in 0.020s</p><p>OK那麼如果我們改動了 <a href="http://something.py" target="_blank" rel="noopener">something.py</a> 中 self.template 變數的內容, 在內容裡加上了 “bonjour” 字樣, 會發生什麼事情呢?</p></blockquote><p>有測試工具的好處就是我們只要單純地再次運行 nosetests 命令就好了, 不用花腦力去判斷或思考:) 我們查看訊息時會看到類似以下的訊息:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 2, in runTest</span><br><span class="line">&gt; self.testFunc()</span><br><span class="line">&gt; File &quot;D:\path\pyfile\testsomething.py&quot;, line 90, in test_Hello</span><br><span class="line">&gt; assert &quot;bonjour&quot; not in abc.render()</span><br><span class="line">&gt; AssertionError</span><br><span class="line">&gt; -----------------</span><br><span class="line">&gt; Ran 1 tests in 0.030s</span><br><span class="line">&gt; </span><br><span class="line">&gt; FAILED (failures=1, errors=1)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>上面的報告提醒我們有一件錯誤: &quot;bonjour&quot;字串原本不應該出現在 abc.render() 回應結果中的, 但結果中竟然出現了!</p><p>所以如果我們的測試用例寫的好, 就可以肯定我們剛剛改動 <a href="http://something.py" target="_blank" rel="noopener">something.py</a> 時出了些問題. 測試這件事確實有效!</p><span style="font-weight:bold;">較好的約定</span>我們已經知道, 只要類別或方法的名稱是以"test" 或 "Test"開頭. 就會被 nose 當成是測試例子, 所以其實在一個小程式中, 我們大可把測試例子跟主程式放在同一個檔案裡. <p>但是當你都還不很確定你在幹什麼的時候, 我建議還是將測試例子跟主程式分開. 這麼做除了程式不容易搞混之外, 在切換檔案時, 還可以順便切換撰寫程式與撰寫測試例子時的不同 MindSet.</p><span style="font-weight:bold;">測試驅動</span>那麼如果我們想改寫 hello 函式, 好讓它可以用法語"bonjour"打招呼, 我們該怎麼辦? 記得"測試先行", 考慮加上一個新的測試例子, 而不影響原本的功能吧!<p>加入的測試例子:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;</span><br><span class="line">&gt;     def test_bonjour():</span><br><span class="line">&gt;         abc = Hello(&apos;bonjour&apos;)</span><br><span class="line">&gt;         assert &quot;bonjour&quot; in abc.render()</span><br></pre></td></tr></table></figure><p>接著要做的就是再跑一次 nosetests, 看到這個新的例子跟我們報告錯誤了. OK, 那就開始修改 hello 函式吧![註2]</p><span style="font-weight:bold;">其他的測試</span>nose 支援的測試的方式琳瑯滿目, 可以使用 "nosetests -h" 命令來查看支援的項目.<p>例如另外一個常用的測試方式是使用 doctest:<code>nosetests --with-doctest</code></p><p>那麼 doctest 是什麼樣的測試方式?又該怎麼使用 doctest 呢? 嘿嘿, 4月 <a href="http://osdc.tw/2007/02/post_7.html" target="_blank" rel="noopener">OSDC.tw 07</a> 再開講囉:D</p><p>====</p><p>我知道這個工具已經快半年了, 到今天才有時間, 勇氣真的下去嘗試.讓我白白錯過這樣好用的工具這麼久, 應該怪在 nose 太少文件可以參考的頭上吧?乾脆自己來寫個&quot;三步驟使用 nose 開始測試&quot;的簡易文件好了.</p><p>註1: 這篇文章不講怎麼寫 python 程式, 這部份請自理:P註2: 同註1, 建議妳逛逛 <a href="http://www.python.org.tw" target="_blank" rel="noopener">www.python.org.tw</a> 可以看到更多參考資料</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
            <tag> aglie test </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python 禪學</title>
      <link href="/2007/02/28/python-%E7%A6%AA%E5%AD%B8/"/>
      <url>/2007/02/28/python-%E7%A6%AA%E5%AD%B8/</url>
      <content type="html"><![CDATA[<p>任何安裝好的 python 版本中都包含著 python 禪學(哲學),在任何 python 互動介面(如 IDLE)中輸入</p><blockquote><blockquote><blockquote><blockquote><p>import this</p></blockquote></blockquote></blockquote></blockquote><p>則會出現如下的 python 禪學(哲學)</p><blockquote><p>Python 禪學 (pythoon Zen)</p><p>美觀的比醜陋的好 (Beautiful is better than ugly)直率的比含糊的好 (Explicit is better than implicit)簡單的比繁雜的好 (Simple is better than complex)繁雜的比晦澀的好 (Complex is better than complicated)平直的比巢雜的好 (Flat is better than nested)疏落有致的比櫛次鱗比的好  (Sparse is better than dense)可讀性應當被重視 (Readability counts)</p><p>就算是特例, 也不能壞了規矩 (Special cases aren’t special enough to break the rules)然而能解決問題仍然比維持單純重要 (Although practicality beats purity)</p><p>錯誤不應該被默默地放過 (Errors should never pass silently)除非你是刻意為之 (Unless explicitly silenced)</p><p>面對模稜兩可的情況, 要抗拒猜測的誘惑 (In the face of ambiguity, refuse the temptation to guess)應該會有一個–而且最好只有一個–適當的方式來實現(There should be one-- and preferably only one --obvious way to do it)雖然不是這個語言創造者的妳一開始可能看不出來(Although that way may not be obvious at first unless you’re Dutch)</p><p>現在動手比總是不動手的好 (Now is better than never)然而不動手可能還比沒有準備就動手的好(Although never is often better than <em>right</em> now)</p><p>如果實作方式難以解釋, 那大概是個壞主意 (If the implementation is hard to explain, it’s a bad idea)如果實作方式易於解釋, 那可能是個好主意 (If the implementation is easy to explain, it may be a good idea)名稱空間是一個很棒的主意 – 我們就盡量用吧! (Namespaces are one honking great idea – let’s do more of those!)</p><p>–Tim Peters (gasolin 翻譯)</p></blockquote><p>2007/03/01 更新:參考 <a href="http://wiki.python.org.tw/The_Zen_Of_Python" target="_blank" rel="noopener">http://wiki.python.org.tw/The_Zen_Of_Python</a> 其他人的理解修改</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> zen </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>示範影片: 使用 TurboGears 製作書站</title>
      <link href="/2007/02/24/%E7%A4%BA%E7%AF%84%E5%BD%B1%E7%89%87-%E4%BD%BF%E7%94%A8-TurboGears-%E8%A3%BD%E4%BD%9C%E6%9B%B8%E7%AB%99/"/>
      <url>/2007/02/24/%E7%A4%BA%E7%AF%84%E5%BD%B1%E7%89%87-%E4%BD%BF%E7%94%A8-TurboGears-%E8%A3%BD%E4%BD%9C%E6%9B%B8%E7%AB%99/</url>
      <content type="html"><![CDATA[<p>前幾個禮拜看到 limodou 的 Openbook platform 後弄的 TurboGears 製作書站 screencast (示範影片)</p><p>第一個影片裡示範了如何使用 TurboGears 建立一個專案, 與如何啟動開發用網頁伺服器.並展示了如何透過修改模板快速訂製頁面. 這個 screencast 中完全使用 TurboGears 預設的 CSS style.</p><p>1st. is <a href="http://files.turbogears.org/video/openbook1.swf" target="_blank" rel="noopener">a quickstart demo with hello world template version</a> (6.5MB)</p><p>第二個影片裡示範了如何使用 TurboGears 工具箱 (Toolbox) 中的模型設計工具(Model Designer）和資料編輯工具 (Catwalk) 來建置 TurboGears 動態內容網站</p><p>2nd is <a href="http://files.turbogears.org/video/openbook2.swf" target="_blank" rel="noopener">Model Designer with Catwalk</a> (7.7MB)</p><p>第三個影片中使用到我寫的 TurboGears tgcrud 擴充模組, 透過 tgcrud 擴充模組可以很容易地產生類似 Rails 的 scaffold 介面架構.但與 scaffold 不同的是所有 code 都是 implicit 的, 更加容易修改.</p><p>3rd. is <a href="http://files.turbogears.org/video/openbook3.swf" target="_blank" rel="noopener">tgcrud, the TG’s scaffold</a> (5.2 MB)</p><p>感謝 Elvelind Grandin 協助上傳至 TurboGears 網頁空間.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PyCon SQLAlchemy tutorial 投影片</title>
      <link href="/2007/02/23/PyCon-SQLAlchemy-tutorial-%E6%8A%95%E5%BD%B1%E7%89%87/"/>
      <url>/2007/02/23/PyCon-SQLAlchemy-tutorial-%E6%8A%95%E5%BD%B1%E7%89%87/</url>
      <content type="html"><![CDATA[<p>PyCon 2007 正在舉行, 有一些很不錯的投影片正陸續被釋放出來. 例如</p><p><a href="http://spyced.blogspot.com/2007/02/pycon-sqlalchemy-tutorial-slides.html" target="_blank" rel="noopener">SQLAlchemy tutorial </a>, <a href="http://utahpython.org/jellis/sqlalchemy-tutorial.pdf" target="_blank" rel="noopener">下載</a></p><p>SqlSoup slides, <a href="http://utahpython.org/jellis/sqlsoup.pdf" target="_blank" rel="noopener">下載</a></p><p>還有 TurboGears 書使用的範例程式:<a href="http://www.cleverdevil.org/pycon2007/" target="_blank" rel="noopener">WhatWhat Status</a> (flash 投影片)</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>NTT IPv6 Blog</title>
      <link href="/2007/02/15/NTT-IPv6-Blog/"/>
      <url>/2007/02/15/NTT-IPv6-Blog/</url>
      <content type="html"><![CDATA[<p><a href="http://ipv6.blog.ocn.ne.jp/" target="_blank" rel="noopener">http://ipv6.blog.ocn.ne.jp/</a></p><p>NTT 社員活用 OCN IPv6 服務的 Blog, 目前看到特別有用的幾篇是如何在 Linux 上設定 OCN IPv6 連線 😃</p><p><a href="http://ipv6.blog.ocn.ne.jp/ipv6/2006/04/linuxocn_ipv61_35c9.html" target="_blank" rel="noopener">Linuxで[OCN IPv6]に繋ぐ（1）</a><a href="http://ipv6.blog.ocn.ne.jp/ipv6/2006/04/linuxocn_ipv62_5915.html" target="_blank" rel="noopener">Linuxで[OCN IPv6]に繋ぐ（2）</a><a href="http://ipv6.blog.ocn.ne.jp/ipv6/2006/04/linuxocn_ipv63_7f90.html" target="_blank" rel="noopener">Linuxで[OCN IPv6]に繋ぐ（3）</a></p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 網頁框架出新招, KUSO 圖徵求貢獻文件</title>
      <link href="/2007/02/08/Python-%E7%B6%B2%E9%A0%81%E6%A1%86%E6%9E%B6%E5%87%BA%E6%96%B0%E6%8B%9B-KUSO-%E5%9C%96%E5%BE%B5%E6%B1%82%E8%B2%A2%E7%8D%BB%E6%96%87%E4%BB%B6/"/>
      <url>/2007/02/08/Python-%E7%B6%B2%E9%A0%81%E6%A1%86%E6%9E%B6%E5%87%BA%E6%96%B0%E6%8B%9B-KUSO-%E5%9C%96%E5%BE%B5%E6%B1%82%E8%B2%A2%E7%8D%BB%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>晚上剛看到在 TurboGears 的<a href="http://docs.turbogears.org/DocHelp" target="_blank" rel="noopener">說明文件寫作文件</a>中加上了張圖</p><p><a href="http://docs.turbogears.org/1.0/RoughDocs?action=AttachFile&amp;do=get&amp;target=contribute_docs.jpg" target="_blank" rel="noopener"><img src="http://docs.turbogears.org/1.0/RoughDocs?action=AttachFile&amp;do=get&amp;target=contribute_docs.jpg" alt=""></a></p><p>這張圖上的口號是:</p><blockquote><p>Onward, Documentation Writers!DID YOU CONTRIBUTE SOMETHING TODAY?</p></blockquote><p>可以翻譯成:</p><blockquote><p>前進吧, (寫手)同志們你今天為 (TurboGears 的文件) 革命事業貢獻了些什麼嗎?</p></blockquote><p>TurboGears 用這麼有趣的圖 (萬里大長征) 來徵求貢獻文件, 真是很 KUSO 呀…</p><p>PS: 這週末 (2/10) 有近期的第二次 TurboGears Doc Sprint 喔.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>9 種網頁框架效能比較</title>
      <link href="/2007/02/07/9-%E7%A8%AE%E7%B6%B2%E9%A0%81%E6%A1%86%E6%9E%B6%E6%95%88%E8%83%BD%E6%AF%94%E8%BC%83/"/>
      <url>/2007/02/07/9-%E7%A8%AE%E7%B6%B2%E9%A0%81%E6%A1%86%E6%9E%B6%E6%95%88%E8%83%BD%E6%AF%94%E8%BC%83/</url>
      <content type="html"><![CDATA[<p><a href="http://www.alrond.com/en/2007/jan/25/performance-test-of-6-leading-frameworks/" target="_blank" rel="noopener">The performance test of 6 leading frameworks</a> 這篇文章比較了 Python, Perl, PHP, Ruby 等語言上主要網頁框架的效能. 雖然效能不總是選擇網頁框架時最重要的考量, 不過照 Django(Python) 和 TurboGears(Python) 都佔住前三名的情形來看, Python 語言使用者是幸福的, 比較不用為效能擔心.</p><p>更新, <a href="http://www.alrond.com/en/2007/feb/04/in-addition-to-the-test-of-mvc-frameworks/" target="_blank" rel="noopener">新一輪的 web framework 比較</a> 中, 新加入了3種框架,Django 效能還是穩勝, 而 pylons 也加進來了, 效能亦相當亮眼.</p><p>另外 ROR 1.2.1 在修改配置後效能贏過了 TurboGears 1.0.1</p><p>不過 TurboGears  使用者也不必過於擔心:</p><p>最近因為一些關鍵模組終於完成了 python 2.5 支援,因此最近 TurboGears 也正在完善 python 2.5  支援. 我的 TG 已經可以跑在 python 2.5 上了 (tg 跑 2.5 真的有比較快)</p><p>另外還有人寫了 Optimization 文件指導效能增進方案<a href="http://docs.turbogears.org/1.0/RoughDocs/Optimization" target="_blank" rel="noopener">http://docs.turbogears.org/1.0/RoughDocs/Optimization</a></p><p>再加上傳說中 TG 1.1 porting CP3 後期望的三倍效能, 想必就算不是最快也不會差太多.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OSDC.tw 07 議程公佈</title>
      <link href="/2007/02/05/OSDC-tw-07-%E8%AD%B0%E7%A8%8B%E5%85%AC%E4%BD%88/"/>
      <url>/2007/02/05/OSDC-tw-07-%E8%AD%B0%E7%A8%8B%E5%85%AC%E4%BD%88/</url>
      <content type="html"><![CDATA[<p><a href="http://OSDC.tw" target="_blank" rel="noopener">OSDC.tw</a> 07 的<a href="http://osdc.tw/2007/02/post_7.html" target="_blank" rel="noopener">議程終於公佈</a>了, 有幸在一早(9:00 am–10:20 am)為大家暖場 😛</p><p>瀏覽一下大家的講題, 發現我提供的講題似乎太白爛了些 XD</p><p>先把投稿的演講簡介放上吧</p><p>subject:<span style="font-weight: bold;">Test Driven Python 懶人包</span></p><p>abstract:</p><p>介紹透過 Test Driven programming 的方式.使用簡單易懂的 Python 動態語言和模組來實際撰寫 Console 和網頁程式.</p><blockquote><p>“Test Driven 是什麼?”</p><p>“編寫 Test Case 很麻煩吧.”</p><p>“寫程式已經夠麻煩了, 我不要另外寫 Test Case 啦”</p></blockquote><p>在這個 session 中你可以學到懶人用的測試概念:測試既不麻煩也不用特地學,寫 Test Case 和寫一般函式沒兩樣.程式註釋裡的範例片段也可以拿來當 Test Case</p><p>內容主要涵蓋</p><ul><li>Test Driven 簡介</li><li>簡單測試: 使用 Nose 測試工具</li><li>用寫文件的方式寫測試: 使用 DocTest</li><li>console 程式測試</li><li>使用 Python optparse 標準函式庫來產生 “-- help” 和處理 console 參數</li><li>網頁程式測試: 使用 Nose 測試 TurboGears 程式.</li></ul>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>咬一口 Python 翻譯完成(第一階段)</title>
      <link href="/2007/02/04/%E5%92%AC%E4%B8%80%E5%8F%A3-Python-%E7%BF%BB%E8%AD%AF%E5%AE%8C%E6%88%90-%E7%AC%AC%E4%B8%80%E9%9A%8E%E6%AE%B5/"/>
      <url>/2007/02/04/%E5%92%AC%E4%B8%80%E5%8F%A3-Python-%E7%BF%BB%E8%AD%AF%E5%AE%8C%E6%88%90-%E7%AC%AC%E4%B8%80%E9%9A%8E%E6%AE%B5/</url>
      <content type="html"><![CDATA[<p>終於將 <a href="http://docs.google.com/View?docid=ajkxs9k6pqxr_3fb3njp&amp;revision=_published" target="_blank" rel="noopener">咬一口 Python (Byte Of Python)</a> 翻完一遍啦!</p><p>本書是當前最新的 Python 正體中文書. 共有 17 章.在有簡體中文版可以參照的情況下,照著每一兩週翻譯一章的進度翻下來,還是花了 3 個多月才翻完. 有種發宏願繞境達成的感覺 XD</p><p>內文主體都翻譯好了, 接下來剩修改錯字, 排版, 加入連結等等後續工作囉.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CRUD Template</title>
      <link href="/2007/01/26/CRUD-Template/"/>
      <url>/2007/01/26/CRUD-Template/</url>
      <content type="html"><![CDATA[<p>好久前使用 Ultra Dev (Dreamweaver 4 網頁編輯器時代的東西) 寫ASP網頁時, 那時其中一個超方便的功能就是在與伺服器繫結後, 選擇一個&quot;產生詳細頁面&quot;的 Widget 元件, 稍稍做點設定 Dreamweaver 就幫我產生一個包含資料庫表單內容的頁面. 用同樣類似的方法就能完成製作新增, 刪除網頁等事情. 製作一套動態網頁也不用花太久時間.</p><p>上禮拜回頭去試試 Ruby On Rails 時覺得 ROR 有得分的一大優點是鷹架產生器 (scaffold).</p><p>scaffold 有什麼功能呢? scaffold 可以根據 RoR 的 ORM (Active Record)來產生對應的 Controller/Template 程式碼, 達到能基本的資料建立/修改/檢視/刪除 (Create/Read/Update/Delete, CRUD)的目的. 而且即使在產生出來 scaffold 後再變更資料庫欄位, 產生出來的程式仍然可以正確判斷內容. 使用感覺頗類似 Django 的 admin 介面或 TurboGears 的 Catwalk  / DataController, 但是就可修改性而言我覺得這種作法稍勝一籌.</p><p>只是要拿 ROR 的 scaffold 繼續修改也很容易碰上問題.因為它為了要能自動對應資料庫的改變來反應到 scaffold 介面上, 所以產生出來的 code 除了基本大框架可見之外, 裡面的內容都被包在不可見的單一函式裡.要做任何修改時還是得自己大量改寫 scaffold 產生的內容 (不過還是比全自己寫來的快)</p><p>要搭一個漂亮的鷹架要多久呢?我使用 TurboGears 來重現 scaffold 的各種列表增刪修改介面, 為了取得最高的重用性, 再用 widgets 改寫一遍, 運用 TurboGears 現成的 Widget 已經能幫忙處理新增/修改表單的生成. 弄好這個 CRUD 介面已花了3小時, 而且還不像 Rails 一樣會自動去抓變動的欄位.</p><p>(3小時? 有人開始撇嘴了…)</p><p>寫這個介面當然是有目的的.接下來在開發環境中, 我試著將這個 CRUD 介面做成了 TurboGears 的樣板. 並透過 tg-admin 加入一個 crud 命令. 使用</p><blockquote><p>tg-admin crud [model class name] [controller name]</p></blockquote><p>這樣的語法來產生一個包含了 controller 和 template 的資料夾</p><p>例如 model 中已經定義了一個 BookMark class, 只要在專案資料夾中輸入</p><blockquote><p>$tg-admin crud BookMark admin</p></blockquote><p>就會在專案資料夾中新增一個 admin 資料夾, 在 controller 中使用</p><blockquote><p>from admin import admin就可以將處理 BookMark 資料的介面導入到網站中.</p></blockquote><p>以後每次要做的只是簡單地修改表單欄位(Form field)定義和 list/show 樣板想要顯示的欄位就可以有完整的 CRUD 介面了. 整個過程只要幾分鐘(預設還會自動套用專案預設的 CSS, 啥都不改就蠻漂亮滴 XD).</p><p>目前 tg-admin crud 的做法和 ROR 的 Scaffold 最大的不同在於整份產生的介面不管是controller 或 template 的程式都是明確的, 沒有需要修改時就得重寫的黑盒子.</p><p>接下來應該是進一步降低要修改的地方, 透過 widget 來將重複設定(無論是controller/template)都減到最低程度. 達到足夠成熟度再公開.</p><p>目前的 crud 樣板在這, 已經可以運用了<a href="http://docs.turbogears.org/1.0/CRUDTemplate" target="_blank" rel="noopener">CRUD Template</a></p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WhatWhat Status with sqlite</title>
      <link href="/2007/01/26/WhatWhat-Status-with-sqlite/"/>
      <url>/2007/01/26/WhatWhat-Status-with-sqlite/</url>
      <content type="html"><![CDATA[<p><a href="http://cleverdevil.org/whatwhat/wiki" target="_blank" rel="noopener">WhatWhat Status</a> is a web application for tracking the status of projects acrossan organization. It’s opensource and able to download from <a href="http://cleverdevil.org/whatwhat/wiki" target="_blank" rel="noopener">here</a>.</p><p>I found this project from the <a href="http://www.turbogearsbook.com/" target="_blank" rel="noopener">TurboGears book</a>. WhatWhatStatus’  default setting is for protegres and MySQL, but not for SQLite. I’d like to share my steps to use  SQLite database with  WhatWhat Status.</p><p><span style="font-weight: bold;font-size:24;">1.  check out the source from svn</span></p><p>svn co <a href="http://cleverdevil.org/svn/optio/whatwhat/trunk" target="_blank" rel="noopener">http://cleverdevil.org/svn/optio/whatwhat/trunk</a></p><p><span style="font-weight: bold;font-size:24;">2.  install textile with easy_install command</span></p><p>$ easy_install textile</p><p><span style="font-weight: bold;font-size:24;">3. config the dev.cfg file to use sqlite database</span></p><p>enter the whatwhat status folder, edit <span style="font-weight: bold;font-size:24;">dev.cfg </span><span style="font-size:24;">:</span></p><p>[global]</p><h1>WHATWHAT SPECIFIC</h1><p>whatwhat.uploaddir = ‘%(current_dir_uri)s/whatwhat/static/files’</p><h1>DATABASE</h1><p>sqlobject.dburi=“sqlite://%(current_dir_uri)s/devdata.sqlite”</p><p><span style="font-weight: bold;font-size:24;">4. create database by tg-admin sql sql command</span></p><p>$ tg-admin sql sql (or tg-admin sql create)</p><p><span style="font-weight: bold;font-size:24;">5.  add default user with catwalk</span></p><p>5.1 first you need to start the TurboGears toolbox</p><p>$ tg-admin toolbox</p><p>5.2. choose the catwalk in browser</p><p>5.3 select “Person” in catwalk left side menu</p><p>5.4 click “Add Person” button on top of the page</p><p>5.5 <span style="font-weight: bold;font-size:24;">enter the following informations:</span>displayname: any nameemail: any email<span style="font-weight: bold;font-size:24;"></span>userid:<span style="font-weight: bold;font-size:24;"> admin</span>password:<span style="font-weight: bold;font-size:24;"> 21232f297a57a5a743894a0e4a801fc3</span>Note that the password field is crypted, the verbose password we typed means “admin”<span style="font-weight: bold;font-size:24;">.</span></p><p><span style="font-weight: bold;font-size:24;">6. Start whatwhat status</span>run</p><p>$ whatwhat-start.py<span style="font-weight: bold;font-size:24;"><span style="font-weight: bold;font-size:24;"></span></span></p><p>enter the username/password as “admin”, “admin”, then click login.</p><p>all done!</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TurboGears 書入手</title>
      <link href="/2007/01/24/TurboGears-%E6%9B%B8%E5%85%A5%E6%89%8B/"/>
      <url>/2007/01/24/TurboGears-%E6%9B%B8%E5%85%A5%E6%89%8B/</url>
      <content type="html"><![CDATA[<p>快下班的時候接到一通電話, 聲音甜美的天瓏小姐打來提醒我上次訂的 TurboGears 書已經到貨囉.晚上馬上殺到天瓏去敗了一本, 在附近的漢堡王就看了起來.</p><p>總的來說感覺很不賴, 和網路上的教學文章切入的方向不盡相同, 書中採用了好幾種方法來寫 Hello World, 好讓程式/網頁開發者都能找到切入點.</p><p>比較令我驚訝的是在書中第四章就開始講使用版本控制來管理程式, 並講解 TurboGears 對測試先行（先寫測試再開始開發的方法）的支援;  書中有大概80多頁 (全書450頁左右)講的是 AJAX 函式庫(Mochikit) 的支援, 這都是網站教學文章裡最缺乏的.</p><p>另外一個插曲是我在天瓏附近的簡體書店裡看到 DH 的 Agile Ruby on Rails 簡體中文版, 定價 65 元(*4), 跟手上的這本 $50 元(*30)比起來實在夠便宜呀 Orz</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Basic OMNeT++ TCP/IP Tutorial</title>
      <link href="/2007/01/22/Basic-OMNeT-TCP-IP-Tutorial/"/>
      <url>/2007/01/22/Basic-OMNeT-TCP-IP-Tutorial/</url>
      <content type="html"><![CDATA[<p>A very basic OMNeT++ TCP/IP tutorial from Ahmet Sekercioglu is provided in</p><p><a href="http://ctieware.eng.monash.edu.au/twiki/bin/view/Simulation/Tutorials" target="_blank" rel="noopener">http://ctieware.eng.monash.edu.au/twiki/bin/view/Simulation/Tutorials</a></p>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu Windows 安裝檔</title>
      <link href="/2007/01/21/Ubuntu-Windows-%E5%AE%89%E8%A3%9D%E6%AA%94/"/>
      <url>/2007/01/21/Ubuntu-Windows-%E5%AE%89%E8%A3%9D%E6%AA%94/</url>
      <content type="html"><![CDATA[<p><a href="http://omattos.co.uk/ubuntuscreens/4.JPG" target="_blank" rel="noopener"><img src="http://omattos.co.uk/ubuntuscreens/4.JPG" alt=""></a><a href="https://wiki.ubuntu.com/install.exe/Prototype" target="_blank" rel="noopener">https://wiki.ubuntu.com/install.exe/Prototype</a></p><p>Ubuntu 新推出使用 Bit Torrent 下載的方式,在 Windows 環境下安裝原生的 Linux 系統, 實在是挑戰想像的極限呀.</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Python 的封裝格式 egg 介紹</title>
      <link href="/2007/01/19/Python-%E7%9A%84%E5%B0%81%E8%A3%9D%E6%A0%BC%E5%BC%8F-egg-%E4%BB%8B%E7%B4%B9/"/>
      <url>/2007/01/19/Python-%E7%9A%84%E5%B0%81%E8%A3%9D%E6%A0%BC%E5%BC%8F-egg-%E4%BB%8B%E7%B4%B9/</url>
      <content type="html"><![CDATA[<p>對岸的 黄毅 兄寫了一篇 “<a href="http://codeplayer.blogspot.com/2007/01/build-extensible-application-with-egg.html" target="_blank" rel="noopener">Build extensible application with egg</a>” 參考資料, 介紹 Python 的封裝格式</p><blockquote><p>在 python 社區中 egg 已經是一種廣為人知的格式了。眾所周知對於 python 來說 egg 是一種用來生小蛇的東西，小蛇自然就是 python 軟件包了(純屬瞎扯 😉。</p><p>簡單地說，egg 之於 python 正如 jar 之於 java。是一種軟件包打包的格式</p></blockquote><p>想要讀懂這篇文章的關鍵在 &quot;egg 最重要的作用是给软件包增加元数据！&quot;這句話.</p><p>&quot;软件包&quot;大概大家還能猜得出來是什麼, 不過&quot;元數據&quot;是啥?</p><p>答案是 “MetaData”, Meta-Data 的意思就是資料背後的參考資料.用在這的意思是說, 這個程式的壓縮包裡, 除了提供這個程式的功能外, 還提供了安裝相關的資訊.</p><p>例如我在<a href="http://inet6.blogspot.com/2006/09/blog-post.html" target="_blank" rel="noopener">如何把蛋砸到起司商店?</a>中指出 cheeseshop 的上傳方式, 所有 cheeseshop 上的各個說明欄位都可以事先在你的 <a href="http://setup.py" target="_blank" rel="noopener">setup.py</a> 檔案中填好, 用同樣的</p><blockquote><p><a href="http://setup.py" target="_blank" rel="noopener">setup.py</a> bdist_egg</p></blockquote><p>命令來將程式包裝成 egg 檔.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>EasyEclipse for Python and TurboGears</title>
      <link href="/2007/01/16/EasyEclipse-for-Python-and-TurboGears/"/>
      <url>/2007/01/16/EasyEclipse-for-Python-and-TurboGears/</url>
      <content type="html"><![CDATA[<p><span style="font-size:180%;">EasyEclipse for python</span>People who are used to Microsoft VisualStudio or Java IDE usually criticize that python has no good IDE to cooperate with,</p><p>I think pydev is one of good python IDE, which is based on eclipse platform.But since you try to install it, it’s pretty annoying to set the eclipse and pydev run properly.</p><p>Now <a href="http://www.easyeclipse.org/" target="_blank" rel="noopener">EasyEclipse</a> project provide an easy install pack of <a href="http://www.easyeclipse.org/site/distributions/python.html" target="_blank" rel="noopener">Eclipse for python</a>, it contains:</p><ul><li><p>eclipse platform itself,</p></li><li><p>pydev(eclipse python support),</p></li><li><p>Subclipse(eclipse SVN GUI),</p></li><li><p>and several useful plugins installed by <a href="http://default.It" target="_blank" rel="noopener">default.It</a> really ease the installation and configuration of Eclipse for python.</p></li></ul><p><span style="font-size:180%;">Pydev with Turbogears</span></p><p>Besides that, Pydev developer recently wrote an article for <a href="http://pydev.blogspot.com/2006/07/configuring-pydev-to-work-with.html" target="_blank" rel="noopener">Configuring Pydev to work with Turbogears</a></p><p>It sounds like a right time to try for pydev + TurboGears.</p><p>So I searched and installed the <a href="http://www.easyeclipse.org/site/distributions/python.html" target="_blank" rel="noopener">Eclipse for python</a> and <a href="http://www.easyeclipse.org/site/plugins/eclipse-wtp-web.html" target="_blank" rel="noopener">EasyEclipse Web tools editors</a> for eclipse HTML/CSS editor and an Internal Web Browser.</p><p>The result? It’s not much too say… pretty good:D</p><p><span style="font-size:180%;">Start Up</span></p><p>First create a <span style="font-weight: bold;">pydev project</span>, it will assign a workspace for the project.Open the console, change path to the workspace folder.Use <span style="font-weight: bold;">tg-admin</span> tool to create a TurboGears projects named “<span style="font-style: italic;">projectname</span>” within the  pydev project workspace folder.</p><p>Now the project folder will shown on eclipse Navigator panel. (you may need use right click menu-&gt; refresh)click the start-<span style="font-style: italic;">projectname</span>.pytap F9, then the web server will run.</p><p>You can use the “Open Web Browser” icon which is near with the search icon to open the internal Web Browser. Type <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> to see the welcome page 😃</p><p>Sounds good?</p><p><span style="font-size:180%;">Configurations</span></p><p>Here are a little configuration tips you may intrested…</p><p><span style="font-weight: bold;">Assign the python interpretor</span></p><p>1. open window/preference,select pydev/interpreter-python,click top right “Add” button to select the python.exe path (windows default is C:\python24\pythonw.exe).The proper library and key words will automatically load for you to use.</p><p><span style="font-weight: bold;">Template Association</span></p><p>2. select General/Editors/File Association,click top right “new” button to add “*.kid” file style for kid template.Press the second “Add” button to assign the associate editors to HTML Editor(default) and Internal Web Browser.</p><p><a href="http://photos1.blogger.com/blogger/1345/565/1600/fileassociation.gif" target="_blank" rel="noopener"><img src="http://photos1.blogger.com/blogger/1345/565/400/fileassociation.png" alt=""></a></p><p>I also found a WYSIWYG HTML editor<a href="http://www.easyeclipse.org/site/plugins/ezingbuilder.html" target="_blank" rel="noopener">EasyEclipse eZingBuilder</a>, but I can’t get the kid page present correctly now.</p><p>more tips are welcome</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用 widgets 實現簡單 AJAX</title>
      <link href="/2007/01/14/%E4%BD%BF%E7%94%A8-widgets-%E5%AF%A6%E7%8F%BE%E7%B0%A1%E5%96%AE-AJAX/"/>
      <url>/2007/01/14/%E4%BD%BF%E7%94%A8-widgets-%E5%AF%A6%E7%8F%BE%E7%B0%A1%E5%96%AE-AJAX/</url>
      <content type="html"><![CDATA[<p>IBM developer works 上的 ‘Ajax with Rails’ 一文中提到 Rails 的 helper 裡有一個 link_to_remote 功能, 可以簡單地在使用者按下 link 的情況下, 用 AJAX 的方式取得資料並更新指定的 div 區塊, 從而實現最基本的 AJAX 使用.</p><p>而這些功能使用 TurboGears 的 widgets 並不難實現, 我寫了個 <a href="http://docs.turbogears.org/1.0/RemoteLink" target="_blank" rel="noopener">Wrap AJAX operation in Widgets</a> 例子放在官方網站上</p><p>程式碼/代碼相當簡單, pylons 使用者/用戶也可以將它改寫成 ToscaWidgets 版本.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>The Zen of TurboGears, my version</title>
      <link href="/2007/01/12/The-Zen-of-TurboGears-my-version/"/>
      <url>/2007/01/12/The-Zen-of-TurboGears-my-version/</url>
      <content type="html"><![CDATA[<p>The Zen of TurboGears, by Fred Lin</p><p>Keep simple things simple and complex things possibleGive defaults while you give choicesGive choices while the one obvious way depends</p><p>Make it workMake it rightMake it fast</p><p>Pythonic is better than domain specificEasy configuration is clear than conventionIntegration countsBatteries included rocksFlexibility flow ideas into each part of code</p><p>keep data in Model and seperated logic from TemplateWidgets are one honking great idea – let’s do more of those!</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>從 Ruby 到 Python</title>
      <link href="/2007/01/12/%E5%BE%9E-Ruby-%E5%88%B0-Python/"/>
      <url>/2007/01/12/%E5%BE%9E-Ruby-%E5%88%B0-Python/</url>
      <content type="html"><![CDATA[<p><a href="http://docs.google.com/View?docid=ajkxs9k6pqxr_103cxv7r9" target="_blank" rel="noopener">從 Ruby  到 Python</a> 一文的目的是向 Ruby  語言的使用者介紹 Python 語言.</p><p>文章中標出高亮度的部份是可以修改成目標語言(Java,PHP…等等)的部份. 歡迎使用相同的版型與內容, 群策群力, 創作一系列 “從 xxx 到 Python” 的系列介紹文章.</p><p>有問題或建議請在 <a href="http://groups.google.com/group/pythontw" target="_blank" rel="noopener">Google Group</a> 中提出</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>從 C 到 Python</title>
      <link href="/2007/01/12/%E5%BE%9E-C-%E5%88%B0-Python/"/>
      <url>/2007/01/12/%E5%BE%9E-C-%E5%88%B0-Python/</url>
      <content type="html"><![CDATA[<p><a href="http://docs.google.com/View?docid=ajkxs9k6pqxr_103cxv7r9" target="_blank" rel="noopener">從 C 到 Python</a> 一文的目的是向 C 語言的使用者介紹 Python 語言.</p><p>文章中標出高亮度的部份是可以修改成目標語言(Java,PHP…等等)的部份. 歡迎使用相同的版型與內容, 群策群力, 創作一系列 “從 xxx 到 Python” 的系列介紹文章.</p><p>有問題或建議請在 <a href="http://groups.google.com/group/pythontw" target="_blank" rel="noopener">Google Group</a> 中提出</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Rails &#39;link_to_remote&#39; helper as TurboGears AJAX widgets</title>
      <link href="/2007/01/10/Rails-link-to-remote-helper-as-TurboGears-AJAX-widgets/"/>
      <url>/2007/01/10/Rails-link-to-remote-helper-as-TurboGears-AJAX-widgets/</url>
      <content type="html"><![CDATA[<p>I wrote a doc in <a href="http://docs.turbogears.org/" target="_blank" rel="noopener">TurboGears doc site</a>: <a href="http://docs.turbogears.org/1.0/RemoteLink" target="_blank" rel="noopener">Wrap AJAX operation in Widgets</a>, which demonstrates how to use the widget to do basic AJAX operation as Rails ‘link_to_remote’ helper.</p><p>The RemoteLink widget works differ from Rails ‘link_to_remote’ helper.It’s simple, pure python(while you use it) and fully ‘optional’!‘Optional’ means if you remove the widget, <a href="http://docs.turbogears.org/1.0/Wiki20/Page6" target="_blank" rel="noopener">your site still functional</a>.Thanks to the mochikit cool functions 😃</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TurboGears 在維基百科</title>
      <link href="/2007/01/09/TurboGears-%E5%9C%A8%E7%B6%AD%E5%9F%BA%E7%99%BE%E7%A7%91/"/>
      <url>/2007/01/09/TurboGears-%E5%9C%A8%E7%B6%AD%E5%9F%BA%E7%99%BE%E7%A7%91/</url>
      <content type="html"><![CDATA[<p>剛剛在維基百科加入了一個 <a href="http://zh.wikipedia.org/wiki/TurboGears" target="_blank" rel="noopener">TurboGears 條目</a></p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>wii GOT IT!!</title>
      <link href="/2007/01/09/wii-GOT-IT/"/>
      <url>/2007/01/09/wii-GOT-IT/</url>
      <content type="html"><![CDATA[<p>Python tw 星球上最近刮起了 wii 的風潮,</p><p>我托日本同事買的 wii 也在昨天到了 XD一同購入的是 wii Sports 跟第一次接觸.</p><p>看來有機會辦 python 使用者聚會啦 (一起玩 wii 才是真 XD)</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>回 Ruby on Rails觀察（同樣負面想法，非喜勿視）</title>
      <link href="/2006/12/17/%E5%9B%9E-Ruby-on-Rails%E8%A7%80%E5%AF%9F%EF%BC%88%E5%90%8C%E6%A8%A3%E8%B2%A0%E9%9D%A2%E6%83%B3%E6%B3%95%EF%BC%8C%E9%9D%9E%E5%96%9C%E5%8B%BF%E8%A6%96%EF%BC%89/"/>
      <url>/2006/12/17/%E5%9B%9E-Ruby-on-Rails%E8%A7%80%E5%AF%9F%EF%BC%88%E5%90%8C%E6%A8%A3%E8%B2%A0%E9%9D%A2%E6%83%B3%E6%B3%95%EF%BC%8C%E9%9D%9E%E5%96%9C%E5%8B%BF%E8%A6%96%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>這兩年隨著 Ruby On Rails 爆紅而在各語言上都紛紛出現許多相應的輕量框架 (framework).這些輕量框架由於存在的時間不長, 他們開發的過程都是先從幫助使用者快速上手開始, 接著考量 web 功能的完整性, 再來才是進一步調整框架的效能.(make it work, make it work well, make it small)</p><p>在<a href="http://eddychang.blogspot.com/2006/11/ruby-on-rails.html" target="_blank" rel="noopener">這篇文章</a>的回覆裡看到一段敘述: &quot;我自己都用 c/c++ 寫 apache handler 搞網站, 速度… 熟了, 速度還出不來嗎?&quot;我必須說他講的沒錯, 有沒有框架對高手可能沒差別, 就算使用框架他也可以根據對語言/網站開發的理解自行修改, 達到最好的效能. 因為他對 web 開發的理解已經隨心所欲了 😃</p><p>當然最後當你開發的服務使用的人多了, 還是要回歸效能上來考量.那麼為什麼這些框架卻能吸引這麼多人關注哩?</p><p>個人覺得長久以來的開發方式對比輕量框架開發, 就好像要花數十年苦功才有成的中國功夫對比相對速成的空手道…又或使用有關鍵字加亮的文字編輯器對比使用所見即所得的 Dreamweaver.</p><p>大家看事情的角度不見得相同, 如同大家練功夫的目的不見得都是要靠功夫吃飯. 對於 hobby web programmer 來說效能不是第一考量, 易上手與開發的方便性才是吸引大批人的原因.</p><p>對以網頁開發維生的人而言, RoR 號稱 10 倍效能這點有好有壞. 但無論如何廣告效果達到了;對以興趣為主的開發者來說, 能節省時間的方便開發工具卻代表了在他們休閒時間除了都花在設計自己感興趣的網站外, 還可能空出了陪女朋友看電影的時間.</p><p>我從去年六月多就從 Oreilly OnLamp 網站的 Tutorial 中接觸過 RoR 了, 個人覺得 RoR 的設計觀念相當紮實, 但是進一步的使用上並未感覺有這麼好.</p><p>我認為 RoR 強調的約定高於配置(Convention over Configuration)的觀念很棒, 但是在 RoR 中實在太多約定了, 記不清的約定就變成了需要記憶的 Magic.</p><p>另外個人的原因之一是已經學會了 Python 語言後再看同為動態語言的 Ruby 語言並沒有吸引我的地方. 要掌握好一門語言需要的不只是 20 分鐘的時間. 同為動態語言, 在程式的可讀性上 Python 語言好太多了.</p><p>而且 RoR 太多依賴特用語言 DSL (Domain Specific Language) 了, RHTML, RJS 等等神奇的樣板看起來並不那麼的易讀或可維護.</p><p>另外在學習的過程中我感覺學習 RoR 並不等同於在學習 Ruby 語言.而要進一步深入使用框架, 不瞭解語言是不可想像的.</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>深入觀察 TurboGears</title>
      <link href="/2006/12/16/%E6%B7%B1%E5%85%A5%E8%A7%80%E5%AF%9F-TurboGears/"/>
      <url>/2006/12/16/%E6%B7%B1%E5%85%A5%E8%A7%80%E5%AF%9F-TurboGears/</url>
      <content type="html"><![CDATA[<p>許多人以為 <a href="http://www.turbogears.org/" target="_blank" rel="noopener">TurboGears</a> 能跟 <a href="http://www.djangoproject.com/" target="_blank" rel="noopener">Django</a> 或 <a href="http://www.rubyonrails.org" target="_blank" rel="noopener">Ruby on Rails</a> 比較的地方只是因為一個分散組件, 一個集中開發.</p><p>但 TurboGears 好用的地方並不是在它堆砌了許多開源的 python web 專案(如不曾成功過的 subway),而是真正提出了一個整合這些 python web 開發資源的方法. 並提供相當具有 python 風格(pythonic) 的使用方式.</p><span style="font-weight:bold;">1\. Decorator 形式的 Dispatcher</span><p>TurboGears 的多數的秘密存在於 Decorator (用&quot;＠&quot;符號開頭的敘述) 中. Decorator 是 python 2.4 後才引入的特性,適度使用可以讓程式碼更清晰.</p><p>TurboGears 基本的網頁型態是這樣:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;</span><br><span class="line">&gt;     @expose()</span><br><span class="line">&gt;     def index():</span><br><span class="line">&gt;         return</span><br></pre></td></tr></table></figure><p>基本的 pyhton method 加上 <a href="http://docs.turbogears.org/1.0/ExposeDecorator" target="_blank" rel="noopener">@expose()</a> 這個 decorator 敘述,讓 server 知道這個函式是 public to web 的.</p><p>需要登入認證功能, 就再加一個 <a href="http://docs.turbogears.org/1.0/IdentityDecorator" target="_blank" rel="noopener">@identity</a> 敘述</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; #auth_admin_required = identity.in_group(&quot;admin&quot;)</span><br><span class="line">&gt;     @identity.require(auth_admin)</span><br><span class="line">&gt;     @expose()</span><br><span class="line">&gt;     def index():</span><br><span class="line">&gt;         return</span><br></pre></td></tr></table></figure><p>如此被裝飾到的網頁就有了認證功能.</p><p>同樣形式的還有</p><blockquote><p><a href="http://docs.turbogears.org/1.0/PaginateDecorator" target="_blank" rel="noopener">@paginate</a> # 分頁功能<a href="http://docs.turbogears.org/1.0/ValidateDecorator" target="_blank" rel="noopener">@validate</a> # 表單驗證功能<a href="http://docs.turbogears.org/1.0/ErrorHandling" target="_blank" rel="noopener">@error_handler</a> #錯誤處理功能<a href="http://docs.turbogears.org/1.0/ErrorHandling" target="_blank" rel="noopener">@exception_handeler</a> #例外處理功能</p></blockquote><p>等特殊功能.</p><p>@validate 表單驗證的功能除了驗證表單參數,還負責將參數從字串轉換成 python native 格式, 可以對網頁傳過來的參數直接用 python 做處理.</p><p>@error_handler 和 @exception_handeler 被用來對應表單驗證功能讓我們可在同一個函式裡處理錯誤, 或另外定義函式做錯誤處理</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;</span><br><span class="line">&gt;     @error_handler(&quot;index&quot;)</span><br><span class="line">&gt;     def ex_report():</span><br><span class="line">&gt;         return &quot;exception&quot;</span><br></pre></td></tr></table></figure><span style="font-weight:bold;">2\. 一個函式, 多重輸出</span><p>很多人知道 TurboGears 在樣板選擇上的多樣性,但是卻沒有挖掘到在 TurboGears 的神奇之處.在 TurboGears 中使用同一個函式,就可以針對不同需求, 輸出多種期望的格式.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;</span><br><span class="line">&gt;     # 使用網頁樣板產生網頁介面 </span><br><span class="line">&gt;     @expose(template = &quot;hello.welcome&quot;) </span><br><span class="line">&gt;     # 產生 JSON 格式介面供 AJAX 程式調用</span><br><span class="line">&gt;     @expose(&quot;json&quot;) </span><br><span class="line">&gt;     #使用不同的樣板引擎, 產生RSS格式介面</span><br><span class="line">&gt;     @expose(template = &quot;genshitext:hello.hoho&quot;, as_format=&quot;RSS/XML&quot;) </span><br><span class="line">&gt;     def show(self, **kw):</span><br><span class="line">&gt;         return dict(name = &apos;foo&apos;, url = &apos;boo&apos;)</span><br></pre></td></tr></table></figure><p>這是因為 TurboGears 回傳使用 python 特殊的 “字典 (dict)” 形式,而不是一般常見的字串形式(當然 TurboGears 同樣也可以直接輸出字串).</p><p>當使用者要求網頁的時候, web server 決定好對應的 method 運行後,method 輸出字典型式的返回值到 decorator. 再根據 @expose decorator 的判斷條件,取用適當的樣板配合字典來生成適當的介面.</p><p>原本需要自行將樣板與內容 “串連 (serialize)” 的工作, TurboGears 都幫忙我們完成,讓我們只要專注在程式邏輯上即可.</p><p>要從別的 method 調用這個函式不同的輸出也很容易,只要在返回值裡加上一個 “tg_format” 參數即可手動指定輸出格式.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;</span><br><span class="line">&gt;     @expose()</span><br><span class="line">&gt;     def rss():</span><br><span class="line">&gt;         return rss(tg_format = &quot;RSS/XML&quot;)</span><br></pre></td></tr></table></figure><pre><code>&lt;span style=&quot;font-weight:bold;&quot;&gt;</code></pre><p>3. 簡單設定 </p><p>通常在 TurboGears 中要讓一個資料庫程式運作,只要在 dev.cfg 裡指定好對應的資料庫路徑(dburi), 就可以開始資料庫網站的開發.TurboGears 自會幫忙處理初始化的動作, 並且提供相應工具.</p><p>要改換整個網站的預設樣板引擎, 同樣也是一行設定搞定.</p><blockquote><p>tg.defaultview = “genshi”</p></blockquote><p>程式裡往往會有些可以讓使用者修改預設運行設定的地方,如在程式裡要取得預設的模板引擎, 可以使用&gt; config.get(“tg.defaultview”)</p><p>來取得預設的模板引擎. 取得其他設定值也是使用同樣的方法.</p><p>TurboGears 開發的應用程式在發佈/安裝上相當容易.使用易用的 setuptools python 套件發佈功能,安裝時能自動抓取使用到的 python  modules.<span style="font-weight:bold;">4. 高擴展性</span></p><p>TurboGears 框架是個組合框架 (meta framework),因此設計之初就把高擴展性視為重要目標.只要在 console 中使用 tg-admin info 命令就可以一窺 TurboGears 擴展的面目.你會驚訝地發現其實 TurboGears 大多數的功能都是透過擴展實現.</p><p>TurboGears 使用的擴展方式是透過 python setuptools 的 entrypoint,撰寫自己的擴展並不需要改動 TurboGears 的原始碼.安裝擴展也可以透過 easy_install 命令自動從 python cheese shop 下載組件.</p><span style="font-weight:bold;">5\. 與 Python 社群互利</span><p>TurboGears 並不是一個只取不予的開發框架,一方面 TurboGears 降低了試用各 python web modules 的難度,使得各專案能吸引更多使用者, 也加快了各專案的成熟度;</p><p>另外一方面, 除了多數 python modules 都可配合 TurboGears 使用之外,TurboGears 框架中所開發出來的工具也都盡量朝能獨立於框架外使用的方向邁進.</p><p>近期的成果是 ToscaWidgets, 將 TurboGears 中方便重用的 widgets 獨立出來,可在 pylons, <a href="http://web.py" target="_blank" rel="noopener">web.py</a> 等框架和工具上使用.</p><p>TurboGears 在組合框架上, 不只是達到功能上的滿足, 還達到與 python 語言使用上的一致性.充分使用各種 python 語言的特性與工具, 沒有過多的 Magic. 這是許多追趕的組合框架應該思考的.</p><p>PS: 對 Open Source Project 來說, 一個<a href="http://docs.turbogears.org/1.0" target="_blank" rel="noopener">好的文件網站</a>也很重要</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>水果 vs 企鵝  小提琴 vs 齒輪</title>
      <link href="/2006/12/06/%E6%B0%B4%E6%9E%9C-vs-%E4%BC%81%E9%B5%9D-%E5%B0%8F%E6%8F%90%E7%90%B4-vs-%E9%BD%92%E8%BC%AA/"/>
      <url>/2006/12/06/%E6%B0%B4%E6%9E%9C-vs-%E4%BC%81%E9%B5%9D-%E5%B0%8F%E6%8F%90%E7%90%B4-vs-%E9%BD%92%E8%BC%AA/</url>
      <content type="html"><![CDATA[<p>國外有人將 <a href="http://www.djangoproject.com/" target="_blank" rel="noopener">Django</a> / <a href="http://www.turbogears.org/" target="_blank" rel="noopener">TurboGears</a> 的選擇比做 Mac 跟 Linux 的選擇.</p><p>Mac OSX (Django) 美觀, 從頭打造, 有專職團隊維護,有較好的宣傳與一致的文件.</p><p>Linux (TurboGears) 彈性,python 網頁開發相關模組的有機集合, 可訂製程度高. 文件散見各模組, 皆為自由貢獻, 品質不一.</p><p>雖然 MAC/LINUX (Django/TurboGears) 都是 UNIX (python) 核心, 但是社群的偏向還是有差異的.</p><p>喜歡一體成形, 具有很高一致性方案的人可能就會選擇 Django.有高彈性需求的人可能會比較偏愛 TurboGears.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ren&#39;py : 戀愛派</title>
      <link href="/2006/12/04/Ren-py-%E6%88%80%E6%84%9B%E6%B4%BE/"/>
      <url>/2006/12/04/Ren-py-%E6%88%80%E6%84%9B%E6%B4%BE/</url>
      <content type="html"><![CDATA[<p><a href="http://www.renpy.org/wiki-media/renpy/img/leftlogo.png" target="_blank" rel="noopener"><img src="http://www.renpy.org/wiki-media/renpy/img/leftlogo.png" alt=""></a></p><p>身穿冒險服裝, 身纏蟒蛇的漫畫少女(萌)會讓你聯想到什麼?</p><p>荒島求生, 畢業旅行, 還是純情房東俏房客這些讓人臉紅心跳的日系 AVG 遊戲?</p><p>再怎麼想, 大概也不會想到我要介紹的卻是 <a href="http://www.renpy.org/wiki/renpy/Home_Page" target="_blank" rel="noopener">Ren’py</a> 這個免費的 AVG 冒險遊戲設計工具吧 😄</p><p><a href="http://www.renpy.org/wiki/renpy/Home_Page" target="_blank" rel="noopener">Ren’py</a> 透過主視窗就可以產生新專案, 一個空白的專案就包含了一般 AVG 遊戲常見的選單, 記錄, 讀出等功能 (嗯嗯…可惜沒看到看圖功能 XD) 或是將設計好的遊戲發佈成 Windows, Mac, Linux 等各平台的套件, 非常方便將自己製作的遊戲與其他人分享.</p><p><a href="http://www.renpy.org/wiki/renpy/Home_Page" target="_blank" rel="noopener">Ren’py</a> 的文件還不錯 (甚至還有互動遊戲版說明 😄), 腳本的寫作與編譯也相當方便.而且這個工具支援中文 (另外抓<a href="http://www.study-area.org/apt/firefly-font/" target="_blank" rel="noopener">螢火飛的中文字型</a>即可).  需要進階功能的話, 可以使用 Python 語言撰寫加強程式, 擴展性極佳:-D 如果想要設計一套 AVG 遊戲, Ren’py 實在是相當棒的選擇.</p><p>PS: 看看可愛的蟒蛇還咬著遊戲手把, 有些人可能已經猜到, 這個工具是基於 <a href="http://www.pygame.org/news.html" target="_blank" rel="noopener">pygame</a> 來開發的.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[Firefox 的耶誕時光 ] 預裝版</title>
      <link href="/2006/12/03/Firefox-%E7%9A%84%E8%80%B6%E8%AA%95%E6%99%82%E5%85%89-%E9%A0%90%E8%A3%9D%E7%89%88/"/>
      <url>/2006/12/03/Firefox-%E7%9A%84%E8%80%B6%E8%AA%95%E6%99%82%E5%85%89-%E9%A0%90%E8%A3%9D%E7%89%88/</url>
      <content type="html"><![CDATA[<p><a href="http://mozillalinks.org/wp/wp-content/uploads/christmas_theme.png" target="_blank" rel="noopener"><img src="http://mozillalinks.org/wp/wp-content/uploads/christmas_theme.png" alt=""></a></p><p>聖誕節流行什麼東西呢?</p><p>卡哇伊的聖誕節佈景主題面版 + 業界最新的中文介面 <a href="http://www.msfirefox.com/" target="_blank" rel="noopener">Mlcrosoft Firefox 2007</a> 瀏覽器應該不只能吸引一批批眼睛冒著小星星的女生吧 😄</p><p><a href="http://www.sharebig.com/d/skfmdaahe/0Jf9E2b45724ED006/Firefox-2.0.XmasTheme.zh-TW.installer.exe.htm" target="_blank" rel="noopener">下載頁面於此</a>。(2.0 繁體中文，6.1mb)</p><p>1. 中文版 Firefox 2.0 瀏覽器2. 預裝聖誕版面</p><p><a href="http://blog.pixnet.net/xdriftdoll/post/1202231" target="_blank" rel="noopener">http://blog.pixnet.net/xdriftdoll/post/1202231</a></p><p>BTW, 截圖裡的網站是<a href="http://www.northpole.com" target="_blank" rel="noopener">聖誕老人北極的家</a> ,點玩具工廠的圖示進去, 還可以選要自己讀故事或聽人念故事喔:)</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>TurboGears 簡單存取資料庫的方法</title>
      <link href="/2006/11/29/TurboGears-%E7%B0%A1%E5%96%AE%E5%AD%98%E5%8F%96%E8%B3%87%E6%96%99%E5%BA%AB%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2006/11/29/TurboGears-%E7%B0%A1%E5%96%AE%E5%AD%98%E5%8F%96%E8%B3%87%E6%96%99%E5%BA%AB%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>拿到一個現成的資料庫, 最快速的就是直接存取啦.</p><p>TurboGears 中除了預先定義 schema 外, 也可以直接使用 SQLAlchemy 中的 SqlSoup 模組來直接存取資料庫.</p><p>之前我有寫過<a href="http://inet6.blogspot.com/2006/07/turbogears-with-sqlsoup.html" target="_blank" rel="noopener">英文版</a>的, 今天 trace 一下 sqlsoup 後發現還有更簡單的方法: 直接取用 metadata.</p><p>1. 修改 dev.cfg 中的 sqlalchemy.dburi , 指到對應的資料庫</p><p>2. 在 your project/model.py 中, 寫下</p><blockquote><p>from turbogears.database import metadatafrom sqlalchemy.ext.sqlsoup import SqlSoup</p><p>soup = SqlSoup(metadata)</p></blockquote><p>3. 使用 shell 存取資料</p><p>$ tg-admin shell</p><blockquote><blockquote><blockquote><p>poll = soup.poll.select()print poll</p></blockquote></blockquote></blockquote>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TurboGears with SqlSoup</title>
      <link href="/2006/11/21/TurboGears-with-SqlSoup/"/>
      <url>/2006/11/21/TurboGears-with-SqlSoup/</url>
      <content type="html"><![CDATA[<p><span style="font-size:180%;">Purpose</span><span style="font-weight: bold;"></span></p><p>Have <span style="font-weight: bold;">an exist database</span> and want migrate to TurboGears?Or you’ve been using TurboGears SQLObject model and want to <span style="font-weight: bold;">migrate </span>to <a href="http://www.sqlalchemy.org/" target="_blank" rel="noopener">SQLAlchemy</a>?</p><p><span style="font-size:180%;">Solution</span></p><p>TurboGears newly support SQLAlchemy 0.2 module(&gt;0.9a6), it provide  a slick solution: SqlSoup !</p><p><span style="font-size:130%;">What SqlSoup does?</span></p><p>SqlSoup inspects your database and reflects its contents to class, <span style="font-weight: bold;">no model definitions</span> are necessary!</p><p><span style="font-size:130%;">What does that mean?</span></p><p>It means you only need to specify a uri for database,and call SqlSoup to do the rest.</p><p><span style="font-size:130%;">What’s the Benifits?</span></p><p>SqlSoup maps database tables to classes automatically. I’m not sure how efficient it is, but at least you can use SqlSoup by following ways:</p><ul><li>To <span style="font-weight: bold;">use existing Database</span> design tools to design my database</li><li>To use SqlSoup <span style="font-weight: bold;">in design phase</span>, and code to SQLAlchemy class when the databse is settled down.</li><li>To <span style="font-weight: bold;">painless migrate</span> SQLObject generated database to SQLAlchemy<span style="font-size:130%;">Test Code</span></li></ul><p>Try the test code, it is thin.</p><p>in <a href="http://model.py" target="_blank" rel="noopener">model.py</a></p><blockquote><p>1 from sqlalchemy.ext.sqlsoup import SqlSoup</p><p>2 uri = &quot;sqlite://%(current_dir_uri)s/devdata.sqlite&quot;3 soup = SqlSoup(uri)</p></blockquote><p><span style="font-size:130%;">Explain</span><span style="font-weight: bold;"></span>line 1 import SqlSoup from sqlalchemy module,</p><p>line 2 specify the uri link to the database (I believe it can be improved)</p><p>line 3 the real code calling SqlSoup connect to uri</p><p>line 4 and line 5 shows I call the table “poll” from database</p><p>if you can’t execute is , maybe you should install sqlalchemy first<span style="font-weight: bold;">$ easy_install sqlalchemy</span></p><p>or try the TurboGears way:</p><blockquote><p>1 from turbogears import config2 from sqlalchemy.ext.sqlsoup import SqlSoup</p><p>3 uri = config.get(‘sqlalchemy.dburi’)4 soup = SqlSoup(uri)All you need to do is specify the dburi for sqlsoup.</p></blockquote><p>Let’s test what we got</p><blockquote><blockquote><blockquote><p>poll = soup.poll.select()print poll</p></blockquote></blockquote></blockquote><p><span style="font-weight: bold;"></span><span style="font-size:180%;">Reference</span></p><p>That’s all you need in TurboGears.To get further usage , you can refer to <a href="http://spyced.blogspot.com/2006/04/introducing-sqlsoup.html" target="_blank" rel="noopener"><span class="PostTitle">        Introducing SqlSoup</span></a></p><p>ps: Actually TurboGears has done nothing particularly to support SqlSoup, I just use it as other modules.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python FAQ Zone</title>
      <link href="/2006/11/16/Python-FAQ-Zone/"/>
      <url>/2006/11/16/Python-FAQ-Zone/</url>
      <content type="html"><![CDATA[<p>剛看到一個 <a href="http://effbot.org/pyfaq/index.htm" target="_blank" rel="noopener">Python FAQ 系統</a>. 當然這並不是最好的 FAQ 系統, 不過裡面除了一般的分類索引之外, 還有個非常有趣的功能是 “<a href="http://effbot.org/rpc/random.cgi/pyfaq" target="_blank" rel="noopener">Show me a random article!</a> (隨機文章)”, 這功能有點像一些 IDE 剛開啟的時候出現隨機的 FAQ 視窗, 每次開啟時都有不同的訊息.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TurboEntity 版 SimpleBlog 之二</title>
      <link href="/2006/11/15/TurboEntity-%E7%89%88-SimpleBlog-%E4%B9%8B%E4%BA%8C/"/>
      <url>/2006/11/15/TurboEntity-%E7%89%88-SimpleBlog-%E4%B9%8B%E4%BA%8C/</url>
      <content type="html"><![CDATA[<p>用 <a href="http://turboentity.ematia.de/" target="_blank" rel="noopener">TurboEntity</a> 照著 ‘<a href="http://www.splee.co.uk/2006/10/20/simpleblog-part-2/" target="_blank" rel="noopener">SimpleBlog Part II</a>’ 中的範例改寫後, 獲得以下程式碼 (<a href="http://model.py" target="_blank" rel="noopener">model.py</a>):</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;</span><br><span class="line">&gt; from turboentity import *</span><br><span class="line">&gt; from docutils.core import publish_parts</span><br><span class="line">&gt; </span><br><span class="line">&gt; class Post(Entity): </span><br><span class="line">&gt;     class turboentity:</span><br><span class="line">&gt;         tablename = &quot;posts&quot;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     title = Column(Unicode(50))</span><br><span class="line">&gt;     content = Column(Unicode)</span><br><span class="line">&gt;     post_date = Column(DateTime, default=datetime.now())</span><br><span class="line">&gt;     is_published = Column(Boolean, default=False)</span><br><span class="line">&gt;     comments = OneToMany(&apos;Comment&apos;,backref=&apos;posts&apos;)</span><br><span class="line">&gt; </span><br><span class="line">&gt;     @property</span><br><span class="line">&gt;     def html_content(self):</span><br><span class="line">&gt;         return publish_parts(self.content,writer_name=&quot;html&quot;)[&quot;html_body&quot;]</span><br><span class="line">&gt; </span><br><span class="line">&gt; class Comment(Entity):</span><br><span class="line">&gt;     class turboentity:</span><br><span class="line">&gt;         tablename = &quot;comments&quot;</span><br><span class="line">&gt; </span><br><span class="line">&gt;     author_name = Column(Unicode(255), nullable=False)</span><br><span class="line">&gt;     author_email = Column(Unicode(255), nullable=False)</span><br><span class="line">&gt;     author_url = Column(String(255))</span><br><span class="line">&gt;     comment_date = Column(DateTime, default=datetime.now())</span><br><span class="line">&gt;     content = Column(Unicode)</span><br><span class="line">&gt;     post = ManyToOne(&quot;Post&quot;,backref=&apos;comments&apos;) </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>要表示 post-comments 關係只需分別在兩個類別中宣告 OneToMany - ManyToOne 即可,真是方便呀.</p><p>另外當定義好 <a href="http://turboentity.ematia.de/" target="_blank" rel="noopener">TurboEntity</a> 類別後, 物件自動可以用傳值的方式輸入內容, 不需一個個各別指定喔.</p><p>例如一般的寫法是這樣子:</p><blockquote><blockquote><blockquote><blockquote><p>p = Post.get(1) # 取得條目c = Comment() # 新建一條評論c.post = p # 這條評論屬於 p 條目c.author_name = “CommentDude1” # 這條目的作者是c.author_email = <a href="mailto:%22cd1@example.com" target="_blank" rel="noopener">&quot;cd1@example.com</a>&quot; # 這條目作者的郵件信箱是c.content = “Great post!  Keep them coming!” # 這條目的內容c.flush()可以直接改成</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><p>p = Post.get(1)c = Comment(post=post, author_name=“Bob”, <a href="mailto:author_email=%22bob@example.com" target="_blank" rel="noopener">author_email=&quot;bob@example.com</a>&quot;, content=“Bob loves this site.”, author_url=“<a href="http://bob.example.com/" target="_blank" rel="noopener">http://bob.example.com/</a>”)c.flush()</p></blockquote></blockquote></blockquote></blockquote><p>用<a href="http://turboentity.ematia.de/" target="_blank" rel="noopener">TurboEntity</a>改寫的程式和原本 Tutorial 相比, 可以看出它好用的地方.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何在  Blogger (Blogspot) 上使用 UrMap API</title>
      <link href="/2006/11/15/%E5%A6%82%E4%BD%95%E5%9C%A8-Blogger-Blogspot-%E4%B8%8A%E4%BD%BF%E7%94%A8-UrMap-API/"/>
      <url>/2006/11/15/%E5%A6%82%E4%BD%95%E5%9C%A8-Blogger-Blogspot-%E4%B8%8A%E4%BD%BF%E7%94%A8-UrMap-API/</url>
      <content type="html"><![CDATA[<script type="text/javascript"> function map_details() { var map = new UMap(document.getElementById("urmap")); map.setCenter(new ULatLng(25.035405, 121.520255), 9);}</script><p>參考這篇講<a href="http://ron_larson.blogspot.com/2005/10/google-maps-within-googles-blogger.html" target="_blank" rel="noopener">如何在 Blooger 上使用 GoogleMap API 的文章</a>, 試著使用 <a href="http://www.urmap.com/SearchEngine/api/documentation/" target="_blank" rel="noopener">UrMap API</a> 來看看能不能用.</p><div id="urmap" style="width:400px; height:400px; border:1px solid red;"></div><p>目前的嘗試好像不太成功的樣子 Orz</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>11/17 TWING 聚會</title>
      <link href="/2006/11/13/11-17-TWING-%E8%81%9A%E6%9C%83/"/>
      <url>/2006/11/13/11-17-TWING-%E8%81%9A%E6%9C%83/</url>
      <content type="html"><![CDATA[<p><a href="http://groups-beta.google.com/group/TwingCampAdm/web/CI-N2.png?hl=en&amp;display=thumb&amp;width=200&amp;height=200" target="_blank" rel="noopener"><img src="http://groups-beta.google.com/group/TwingCampAdm/web/CI-N2.png?hl=en&amp;display=thumb&amp;width=200&amp;height=200" alt=""></a></p><p>我剛剛準備好了這周 <a href="http://groups-beta.google.com/group/TwingCampAdm/web/twing?hl=en" target="_blank" rel="noopener">TWING 聚會</a>分享的投影片,標題是&quot;網路新鮮事&quot;, 但做出來的投影片感覺比較像網路商業發展的概觀.</p><p>對於 2000 年和 2005 年網路熱潮,我覺得這些新商業模式的產生是因為這些網站重新發現新技術(和新市場),並擁有使用新技術(和新市場)的創意,透過新的商業模式,塑造了我們與網路結合新的生活模式…</p><p>因此這次我以成功存活下來的網站(企業)為例,把時間花在介紹 “80/20” 的經濟模式與現在熱門的&quot;<a href="http://www.bricklin.com/tailwagsdog.htm" target="_blank" rel="noopener">長尾</a>&quot;市場概念.</p><p>最後用簡單的方式說明 Web 2.0 中熱門的 AJAX, 嵌入(Embed)技術對現在網路服務的影響和作用.</p><p>我盡量不提技術, 試著從商業概念的方式來理解網路,對網路技術不熟悉的人應該不會很難服用吧 XD</p><p>時間地點是週五(11/17) 晚上七點在 TWNIC (臺北市羅斯福路二段9號4樓之2) 的聚會場地.歡迎對網路文化和網路技術潮流感興趣的人來參加</p><p>想知道 TWING 是什麼的人可以前往 <a href="http://groups-beta.google.com/group/TwingCampAdm?hl=en" target="_blank" rel="noopener">TWING 網頁</a>看看</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>TurboGears vs Rails</title>
      <link href="/2006/11/12/TurboGears-vs-Rails/"/>
      <url>/2006/11/12/TurboGears-vs-Rails/</url>
      <content type="html"><![CDATA[<p>明天公司補放國父誕辰紀念日, 所以有空到 Google 翻翻最近有沒什麼有趣的文章. 我找到了一篇 <a href="http://wildmanshore.blogspot.com/2006/01/turbogears-vs-rails.html" target="_blank" rel="noopener">TurboGears vs Rails</a>. 文章名稱夠聳動, 雖然這篇文章有點舊了 (用的是 0.9 的預覽版 TurboGears, 或稱為未進化型態版本 XD), 不過裡面對 TurboGears 和 Rails 的特性確實抓得頗準:</p><blockquote><p>The Pythonic way is “explicit over implicit”. Everything is out for show: you know what modules are imported, you know what methods are exposed, you know what columns are defined and so on. It may take more keystrokes but the extra code let’s you know what is happening when things go wrong.python 語言的風格是 ‘<a href="http://inet6.blogspot.com/2006/10/python.html" target="_blank" rel="noopener">直率的比含糊的好</a>’. 所以所有的過程都可以被檢視: 妳曉得如何導入使用的模組, 函式怎麼對應到網址上, 妳也曉得資料物件如何定義等等. 妳可能需要多打一些字(註: 事實上不多), 但是這些額外的程式碼能讓妳在發生錯誤時更容易地知道自己的程式到底發生了什麼事.</p></blockquote><blockquote><p>The the Rails way is the opposite: take the burden off the developer, don’t bother them with the petty details that get in the way and add to the line noise.Rails 的寫作方式則相反: 把讓開發者困擾的因子都去除掉, 不要在開發中用細節來干擾程式碼.</p></blockquote><p>事實上去年 5 月底時, 我在看過 OnLamp 網站上的 Ruby On Rails 教學後, 相當驚訝現在網頁開發的進步 (之前有一年沒寫動態網頁了). 所以我也趁等待完成論文前的時間歔空寫了篇 Ruby On Rails 教學. 不過在 7 , 8月 Django, TurboGears 這些 Python 框架相繼出現後, 我發現除了可以使用熟悉的 Python 語言風格來寫程式之外, 以後也可以透過網頁介面來使用大量的 Python 模組實在非常吸引我. 而當 TurboGears 框架出現 ToolBox 這神奇的工具箱後, 我開始漸漸投入了 TurboGears 開發的行列.</p><blockquote><p>能展現自我特點的是創意而不是程式碼在我的觀念裡, 能展現自我特點的是創意而不是程式碼 (也許因為我不是個天才程式設計師吧XD). Rails 也是個相當吸引人的框架 (差不多靠一己之力拉拔 Ruby 語言 XD). 但是 python 的 “<a href="http://inet6.blogspot.com/2006/10/python.html" target="_blank" rel="noopener">應該會有一個–最適當的一個的方式來實現</a>” 哲學比較接近我的想法. 在閱讀其他人的 TurboGears 專案時只要不用到太進階的 Python 語言功能, 基本上都非常易於閱讀與修改. (例如目前 TurboGears 最進階的教學文件: SQLalchemy 版的 SimpleBlog, 花一些時間就可以改寫成 TurboEntity 版 SimpleBlog <a href="http://inet6.blogspot.com/2006/10/turboentity-simpleblog.html" target="_blank" rel="noopener">之一</a>, <a href="http://inet6.blogspot.com/2006/11/turboentity-simpleblog.html" target="_blank" rel="noopener">之二</a>)</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>淺談網頁框架的 URL 對映</title>
      <link href="/2006/11/11/%E6%B7%BA%E8%AB%87%E7%B6%B2%E9%A0%81%E6%A1%86%E6%9E%B6%E7%9A%84-URL-%E5%B0%8D%E6%98%A0/"/>
      <url>/2006/11/11/%E6%B7%BA%E8%AB%87%E7%B6%B2%E9%A0%81%E6%A1%86%E6%9E%B6%E7%9A%84-URL-%E5%B0%8D%E6%98%A0/</url>
      <content type="html"><![CDATA[<p>當開始使用 MVC (Model, View, Controller) 的方式設計網站程式後, 組織網站架構的重任就從傳統的分頁換到程式控制部份 (Controller) 的網址-函式對映 (URL Mapper)上.</p><p>舉 python 網頁框架的例子為例, python 的網頁框架很多, 最常聽到的 Django, TurboGears, pylons 都各自有各自不同的網址-函式對映方式.網址-函式對映能將程式控制部份對映到網站架構, 也能依照一些規則將輸入的網址對應成函式的參數, 方便程式使用.</p><p><span id="title"><a href="http://wsgiarea.pocoo.org/colubrid/documentation/applications/" target="_blank" rel="noopener">Colubrid</a> 這個 WSGI 工具的網站上清楚地列出了目前</span>常見的 URL 對映分類:</p><ul><li>使用 正則表達式 (Regular Expression, Regex) 對映 -Django</li><li>使用 物件 (Object) 對映 -TurboGears</li><li>使用 路徑 (Routes) 對映 -pylons</li></ul><p>&quot;-&quot;號後面的補註是我另加上去的, 表示這幾個框架預設的 URL 對映方式.當然有的框架也可以用另外的 URL 對映 (例如 TurboGears 也能使用路徑對應方式).</p><p><span style="font-weight:bold;">範例</span>首先我們先給出一個基本的程式架構, 再來討論如何將這個程式對應到網頁上.本文隱藏了各網頁框架特定的程式碼, 因此在實際運行各種對應方式時需要再加上各自的程式碼.</p><pre>Class Root(object):   def index(self):       return "Front Page"   def profile(self):       return "Profile Page"app = Root()</pre><p>這個類別(Class)包含兩個函式(Method), 我們的目的是讓它顯示成如下的網站架構:</p><pre>/- index- profile</pre><p>例子很淺顯, 我們就開始來嘗試吧</p><p><span style="font-weight: bold;">1.使用 正則表達式 (Regular Expression) 對映</span></p><p>使用時在 Root 類別裡加上正則表達式來對映網頁</p><pre>urls = [         (r'^index,'index'),         (r'^profile,'profile')       ]</pre><p>網頁架構是一串以 (r’網頁名稱’ ,‘函式名稱’) 組成的列表來定義.網頁名稱, 函式名稱部份都可以使用正則表達式</p><p><span style="font-weight: bold;">2.使用 物件對映</span>不必加入特別的對映方式.Root 類別在實例化後等同網站預設的根目錄,Root 類別下的兩個函式直接對映到相應名稱的網頁上.</p><pre>/- Root- index()- profile()</pre><p>訪問 / 或 /index 時就等於訪問 index() 函式,訪問 /profile 時就等於訪問 profile() 函式</p><p><span style="font-weight: bold;">3.使用 路徑對映</span>這種方式是跟 Ruby on Rails 學來的.方法是另外建立一個類別, 專門處理網頁架構.</p><pre>class app(RoutesApplication):  mapping = [      ('/', Root.index),      ('/profile', Root.profile)  ]app = app()</pre><p>網頁架構是以 (‘網頁名稱’ ,‘類別.函式名稱’) 組成的列表來定義.網頁名稱部份可以使用正則表達式.</p><span style="font-weight:bold;">結語</span><p>我在寫本篇之前, 從來沒有看懂其他網頁框架的對應方式, 因此傻瓜式的物件對映方式對我來說是最直覺了, 使用至今還沒什麼感到不方便的地方.</p><p>雖然本篇所作的比較簡單, 無法展現各種對映方式的實際能力,例如本篇沒有比較到輸入參數的對映方式.</p><p>以上三種方法都已經被證明有效而且許多網站正使用著這些方法運行著.希望大家能以本篇為基礎, 就較理解的 URL 對映方式繼續深入學習.</p><p>我很想知道各位看官, 對於用簡單的例子來對的各種 URL 對映方式做說明是不是比較容易理解呢?</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Dual Stack Mobile IPv6 展出!</title>
      <link href="/2006/11/08/Dual-Stack-Mobile-IPv6-%E5%B1%95%E5%87%BA/"/>
      <url>/2006/11/08/Dual-Stack-Mobile-IPv6-%E5%B1%95%E5%87%BA/</url>
      <content type="html"><![CDATA[<p>CEATEC JAPAN 2006 上東京大學的 Ezaki San 的研究室 (<a href="http://www.kame.net" target="_blank" rel="noopener">養海龜</a> 的那間) 又推出了 <a href="http://www.ietf.org/internet-drafts/draft-ietf-mip6-nemo-v4traversal-02.txt" target="_blank" rel="noopener">Dual Stack Mobile IPv6</a> 展示, 可以應用在一般 IPv4 環境中.前陣子看 Draft 時覺得這個方法很棒但是實做也很複雜, 想不到這麼快就有實做展示出現了.</p><p>看展示平台的樣子是拿筆電當作 Home Agent, 拿 Sharp Zaurus 分別當作 IPv4 與 IPv6 環境下的 Mobile Node, 讓兩者可以順暢使用 IPv6 做溝通.</p><p><img src="http://www.ipv6style.jp/files/ipv6/jp/images/20061018/ceatec34.jpg" alt=""></p><p>圖片連結自<a href="http://www.ipv6style.jp/jp/20061018/ceatec3.html" target="_blank" rel="noopener">http://www.ipv6style.jp/jp/20061018/ceatec3.html</a></p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MIPv6 addressing v4 traversal</title>
      <link href="/2006/11/07/MIPv6-addressing-v4-traversal/"/>
      <url>/2006/11/07/MIPv6-addressing-v4-traversal/</url>
      <content type="html"><![CDATA[<p>根據<a href="http://www1.ietf.org/mail-archive/web/nemo/current/msg02525.html" target="_blank" rel="noopener">這封</a>信件所言, IETF 上 又將出現一個新的 Working Group.這篇是他們的 Design team 在 NEMO WG 上的宣告.</p><p>這個 WG 的起因來自於 Edouard LASNIER REDDAN一封雷諾車廠研發 MIPv6 Car 成果的<a href="http://www1.ietf.org/mail-archive/web/nemo/current/msg02524.html" target="_blank" rel="noopener">信件</a>.信中說明在大環境使用 IPv4 的環境下在車輛中使用 MIPv6 的車子已經被開發出來了(用的可能就是 Mobile Router),需要解決的問題除了透過轉換透通機制在純IPv4網域取得HA address外, 還有就是從車廠的角度看, HA不能被通信商把持的問題.</p><p>MIPv6 addressing v4 traversal看起來很值得研究,而HA 不能被通信商把持的問題感覺似乎在未來可以用來加持我的 NEMO-DHA 架構.可惜跟現在我的論文主題方向還是有些差別…</p><p>為了更容易了解這封信的價值…我把雷諾車廠信內提到的主題內容 <div id="mb_0"><wbr>也整理成了投影片大綱了附在<a href="http://inet6.blogspot.com/2005/06/requirement-of-car-manufacturer-for.html" target="_blank" rel="noopener">前一篇</a>中</div></p><p>MIPv6 &amp; traversal/Tunnel 應該將會是蠻熱的題材吧, 要求的背景知識也很高,可惜是實驗室目前要做這題材的話也等於找人重新開始學了,從讀 traversal/Tunnel mechanism, 想idea, 到準備模擬工具,跟其他 lab 比起來已經沒什麼優勢了…殘念</p><p>我想也大概不會有人想做(碩士班做的話從頭學再用功大概2年內對<wbr>這主題也不可能做出好東西, 除非請博班帶著大家分著做), 只是講講有這東西而已.</p><p>要我繼續留下來是辦不到的, 可惜了這麼棒的東西卻不能自己做…</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>TurboGears Quick MindMap Reference</title>
      <link href="/2006/11/07/TurboGears-Quick-MindMap-Reference/"/>
      <url>/2006/11/07/TurboGears-Quick-MindMap-Reference/</url>
      <content type="html"><![CDATA[<p>After watching Mark Ramm’s <a href="http://compoundthinking.com/blog/index.php/2006/01/26/turbogears-one-page-reference/" target="_blank" rel="noopener">TurboGears One Page Reference</a>,</p><p>I made a huge MindMap to track my understanding of TurboGears svnversion,I think this MindMap will help others as well.</p><p>Here are parts of them (that I’ve tracked):</p><p><a href="http://static.flickr.com/34/100028637_bd9be9f6be_o.png" target="_blank" rel="noopener">TurboGears Excuable Commands</a></p><p><a href="http://static.flickr.com/26/100028638_482f789289_o.png" target="_blank" rel="noopener">TurboGears Controller Conventions</a></p><p><a href="http://static.flickr.com/34/100028639_deea274877_o.png" target="_blank" rel="noopener">TurboGears SQLObject Usage</a></p><p><a href="http://static.flickr.com/42/100037560_359d8433bf_o.png" target="_blank" rel="noopener">TurboGears Controller Decorators</a></p><p><a href="http://static.flickr.com/29/100037562_ac215b1703_o.png" target="_blank" rel="noopener">TurboGears Controller Validators (Formencode API)</a></p><p>and related <a href="http://static.flickr.com/30/100028640_c6685db5b6_o.png" target="_blank" rel="noopener">Cherrypy API</a></p><p>Notice that a part of notes in these MindMaps are based on Mark Ramm’sOne Page Reference.</p><p>And it’s even better if someone intrest to make a more fancy quickreference based on those early works.</p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>巫毒編程 (voodoo programming)</title>
      <link href="/2006/11/05/%E5%B7%AB%E6%AF%92%E7%B7%A8%E7%A8%8B-voodoo-programming/"/>
      <url>/2006/11/05/%E5%B7%AB%E6%AF%92%E7%B7%A8%E7%A8%8B-voodoo-programming/</url>
      <content type="html"><![CDATA[<blockquote><p>有兩種設計軟體的方式, 一種設計方式是將軟體設計得很簡單, 因此很明顯地沒有缺點;另一種設計方式是將軟體設計得很複雜, 因此看不出明顯的缺點. ——C.A.R. Hoare</p></blockquote><p>今天到書局買了本簡體的程序員雜誌, 裡面提到了很有趣的 “巫毒編程(voodoo programming)” 方法.</p><p>“巫毒編程(voodoo programming)” 說的是一種很糟糕的寫程式方法.</p><p>感覺&quot;巫毒編程&quot;的形容實在是蠻形象的, 想想當寫程式時要是遇到程式一直跑不出來又找不到原因, 心情超煩悶的時候打鍵盤是不是就痛苦地像在刻咒怨一樣?</p><p>如果這時試著像對草人扎針一樣隨意改些程式的變數, 按下編譯 (Compile) 然後期望程式可以正常跑(詛咒成功).嘿嘿嘿, 是不是很有巫毒儀式的感覺呢?</p><p>update from April/16/2006</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>預定了 TurboGears 書</title>
      <link href="/2006/11/04/%E9%A0%90%E5%AE%9A%E4%BA%86-TurboGears-%E6%9B%B8/"/>
      <url>/2006/11/04/%E9%A0%90%E5%AE%9A%E4%BA%86-TurboGears-%E6%9B%B8/</url>
      <content type="html"><![CDATA[<p><a href="http://www.amazon.com/gp/product/0132433885/ref=wl_it_dp/102-9756128-6643351?ie=UTF8&amp;coliid=I2HRUJ2LOEKLIT&amp;colid=T71I7J0XXSOJ" target="_blank" rel="noopener"><img src="http://ec1.images-amazon.com/images/P/0132433885.01._AA240_SCLZZZZZZZ_V37453096_.jpg" alt=""></a></p><p>今天到天瓏書局預定了 11/9 號出版的 “<a href="http://www.amazon.com/gp/product/0132433885/ref=wl_it_dp/102-9756128-6643351?ie=UTF8&amp;coliid=I2HRUJ2LOEKLIT&amp;colid=T71I7J0XXSOJ" target="_blank" rel="noopener">Rapid Web Applications with TurboGears</a>”.</p><p>其實這本書早在9月多時主要作者 Mark Ramm 透過封閉的 <a href="http://groups.google.com/group/TurboGearsBook" target="_blank" rel="noopener">TurboGearsBook group</a> 提供各章節草稿時我就看過了.</p><p>參與 TurboGearsBook Group 的要求就是在享受預覽草稿的權利同時也要扮演 Reviewer/Editor 的角色提出意見.</p><p>在書籍不是 OpenSource 的情況下, 這種兼顧社群與提昇質量的方式還蠻值得參考的.</p><p>當時內容還不太完整, 不過已經勾勒出大部分的輪廓了. 由於 TurboGears 是個整合許多 Python 模組的框架, 因此裡面除了框架本身內容, 實際範例外, 還專章提到了諸如 TurboGear 如何的使用 CherryPy, SQLObject, SQLAlchemy, Formencode 等模組.</p><p>另外測試的部份除了講到 nosetests 與 TurboGears 為方便 Model, Controller, Viewer 各層測試而加入的 testutils 測試函式庫外, 還提到 Selenium, Mechanize 等使用者經驗測試部份.算是我相當期待的一本書.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TurboEntity 版 SimpleBlog</title>
      <link href="/2006/11/01/TurboEntity-%E7%89%88-SimpleBlog/"/>
      <url>/2006/11/01/TurboEntity-%E7%89%88-SimpleBlog/</url>
      <content type="html"><![CDATA[<p>這幾天 <a href="http://turboentity.ematia.de/" target="_blank" rel="noopener">TurboEntity</a> 這個類似 ActiveMapper 的模組一出現馬上獲得不小的關注.因為它可以用幾乎與 SQLObject 數量相當的程式碼來定義 ORM, 又能完全繼承 SQLAlchemy 的效能和彈性.</p><p><a href="http://www.splee.co.uk/colophon/" target="_blank" rel="noopener"> Lee McFadden</a> 從上上週開始在他的 Blog 上連載了 3 篇 ‘SimpleBlog’ 系列文章, 引導如何使用 SQLAlchemy + TurboGears 製作簡單的 Blog系統.他採用了接近基本<code>&lt;span style=&quot;font-family:Georgia,serif;&quot;&gt; &lt;/span&gt;</code>SQLAlchemy 的設定方式, 因此程式碼有點多.<code>&lt;span style=&quot;font-family:Georgia,serif;&quot;&gt;&lt;/span&gt;</code></p><p>我用 <a href="http://turboentity.ematia.de/" target="_blank" rel="noopener">TurboEntity</a> 照著 ‘<a href="http://www.splee.co.uk/2006/10/14/simpleblog-part-1/" target="_blank" rel="noopener">SimpleBlog Part I</a>’ 中的範例改寫後, 獲得以下程式碼 (<a href="http://model.py" target="_blank" rel="noopener">model.py</a>):</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;</span><br><span class="line">&gt; from turboentity import *</span><br><span class="line">&gt; from docutils.core import publish_parts</span><br><span class="line">&gt; </span><br><span class="line">&gt; class Post(Entity): </span><br><span class="line">&gt;     title = Column(Unicode(50))</span><br><span class="line">&gt;     content = Column(Unicode)</span><br><span class="line">&gt;     post_date = Column(DateTime, default=datetime.now())</span><br><span class="line">&gt;     is_published = Column(Boolean, default=False)</span><br><span class="line">&gt; </span><br><span class="line">&gt;     @property</span><br><span class="line">&gt;     def html_content(self):</span><br><span class="line">&gt;         return publish_parts(self.content,writer_name=&quot;html&quot;)[&quot;html_body&quot;]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>在其它部份保持不變的情形下, 拿來跟原文比較可以發現使用 <a href="http://turboentity.ematia.de/" target="_blank" rel="noopener">TurboEntity</a> 寫的定義 ORM 程式, 就程式碼行數上實在不輸 SQLObject. 難能可貴地是同樣能保持很高的可讀性.</p><p><a href="http://turboentity.ematia.de/" target="_blank" rel="noopener">TurboEntity</a> 網站上還有使用 <a href="http://turboentity.ematia.de/" target="_blank" rel="noopener">TurboEntity</a> 版本做 TurboGears Identity Model 的例子, 看來轉換到從 SQLObject 轉換到 SQLAlchemy 已經不再是太令人躊躇的事了.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一分鐘 TurboGears - Hello TurboGears</title>
      <link href="/2006/10/23/%E4%B8%80%E5%88%86%E9%90%98-TurboGears-Hello-TurboGears/"/>
      <url>/2006/10/23/%E4%B8%80%E5%88%86%E9%90%98-TurboGears-Hello-TurboGears/</url>
      <content type="html"><![CDATA[<p>讓我們嘗試用最少時間弄出一個可用的 TurboGears 版 “Hello World” 吧!</p><p><span style="font-weight: bold;">第一步</span>假設您已經安裝好 TurboGears. 首先, 要建立一個 TurboGears 專案.打開命令行(Command Line or shell), 進入到要建立專案的主目錄. 在主目錄下輸入</p><p>$ tg-admin quickstart</p><p>輸入之後, 會有專案建立導引如下:</p><p>Enter project name:Proj NameEnter package name [ProjName]: ProjName</p><p>ProjName 是我們自己指定的專案名稱, 專案名稱可以有空格, 第二行是 package name, 也就是實際建立的目錄(資料夾)名稱, 目錄名稱中則不能有空格.</p><p>把這些準備工作做完後, 我們可以發現這個 tg-admin 命令還會跑出一大串訊息, 告訴我們已經複製好專案框架, 可以開始寫我們自己的程式了.</p><p><span style="font-weight: bold;">第二步</span>現在我們進入開發的部分啦, 在 TurboGears 中, <a href="http://controllers.py" target="_blank" rel="noopener">controllers.py</a> 是實作我們的網頁應用程式邏輯的地方.</p><p>我們現在來進入剛剛建立的資料夾, 用你習慣的 python 文本(文件)編輯器來編輯 <a href="http://controllers.py" target="_blank" rel="noopener">controllers.py</a> 這個檔案 (檔案的路徑應該是ProjName/ProjName/controllers.py), 我們將檔案內看到的框架自動生成的內容都先清除或註解掉後, 輸入如下一段程式碼:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 from turbogears import controllers, expose</span><br><span class="line">1 class Root(controllers.RootController):</span><br><span class="line">2      @expose()</span><br><span class="line">3      def index(self):</span><br><span class="line">4          return &quot;Hello World!&quot;</span><br></pre></td></tr></table></figure><span style="font-weight: bold;">第三步</span><p>回到命令列, 在命令列上先進入剛剛建立的資料夾後, 輸入$ ./start-ProjName.py</p><p>在執行 ProjName/start-ProjName.py 後, 打開瀏覽器輸入 <a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a> 這個網址,就可以看到首頁上跑出 Hello World 字樣啦!</p><p>接著看<a href="http://inet6.blogspot.com/2006/02/turbogears-hello-turbogears_04.html" target="_blank" rel="noopener">講解</a></p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TurboGears in Minutes - Say Hello with TurboGears</title>
      <link href="/2006/10/23/TurboGears-in-Minutes-Say-Hello-with-TurboGears/"/>
      <url>/2006/10/23/TurboGears-in-Minutes-Say-Hello-with-TurboGears/</url>
      <content type="html"><![CDATA[<p>The doocument was merged to <a href="http://docs.turbogears.org/1.0/GettingStarted/CherryPy" target="_blank" rel="noopener">http://docs.turbogears.org/1.0/GettingStarted/CherryPy</a></p><p>The syntax is such simple that you may still hesitate: “did those code can fit all my need?” We’ll see in next minutes.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TurboGears in Minutes - Getting new project Start</title>
      <link href="/2006/10/23/TurboGears-in-Minutes-Getting-new-project-Start/"/>
      <url>/2006/10/23/TurboGears-in-Minutes-Getting-new-project-Start/</url>
      <content type="html"><![CDATA[<p>I decide to start a new track of TurboGears Tutorial (In English), which is light weight enough so it will be easy to follow.</p><p>Why not start this tutorial on <a href="http://docs.turbogears.org" target="_blank" rel="noopener">TurboGears Documentation Site</a> ?</p><p>It just because I feel more comfortable with blogger’s editor, and I’ll feel less guilty if I mess these tutorial up 😄</p><p>Oops, 5 seconds passed, let’s go back to the topic.</p><span style="font-size:130%;"><span style="font-size:180%;">Start a new project</span></span>To start a new project (new site) with TurboGears, you'd use "<span style="font-style: italic;">tg-admin quickstart</span>" command for it.The syntax is:<blockquote><p>$ tg-admin quickstart [projectname]Let’s create a “TurboHello” (sound’s powerful, isn’t it? 😄) project for example:</p></blockquote><blockquote><p>$ tg-admin quickstart TurboHelloThe console will prompt some choices. Feel free to press “enter” button (let defaults) and proceed to the next step.</p></blockquote><p><span style="font-size:180%;">Start the web server</span></p><p>The ‘TurboHello’ folder was created by your console. After the project was created, enter the ‘TurboHello’ folder, and you could start the TurboGears development web server with following command:</p><blockquote><p>$ ./start-TurboHello.py</p></blockquote><p>The web server is running, browse <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> to see the project welcome page:</p><p><a href="http://photos1.blogger.com/blogger/1345/565/1600/welcome.gif" target="_blank" rel="noopener"><img src="http://photos1.blogger.com/blogger/1345/565/320/welcome.png" alt=""></a></p><p>Pretty and easy, right?</p><p><span style="font-size:180%;">The project structure</span>While entering the ‘TurboHello’ folder, you’ll see the project skeleton laid there. Those files can be categorized for 4  purposes:</p><p>The document was merged to <a href="http://docs.turbogears.org/1.0/GettingStarted/BigPicture" target="_blank" rel="noopener">http://docs.turbogears.org/1.0/GettingStarted/BigPicture</a></p><p>TurboGears followed MVC design pattern (search if you don’t know that), which seperate the web application design into three different roles, to build the default quickstart project.TurboGears  also offer you the flexibility to ‘not use the MVC’ as well (will be shown in next minutes).</p><p>We’d always focus on part 4: “the Development part” in TurboGears.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>推廣 python ?</title>
      <link href="/2006/10/14/%E6%8E%A8%E5%BB%A3-python/"/>
      <url>/2006/10/14/%E6%8E%A8%E5%BB%A3-python/</url>
      <content type="html"><![CDATA[<p>我想沒什麼人會想學新語言, 即使這門語言很美很有用, 尤其是當對人們來說這語言用不太到的情況下 (例如有個傢伙跟你說一旦你學會了優美的拉丁文, 以後你就可以讀懂中古歐洲的文獻. 這傢伙大概會被你罵神經病 😄).</p><p>我認為要說服人學新東西, 要遵循: 對他有用, 讓他感興趣, 使他容易學習 三個步驟.</p><p>分享一下我最近讓公司同仁對 python 開始感興趣的方法,</p><p><span style="font-weight:bold;">對他有用</span></p><p>第一階段是我們團隊的部份原始碼庫從 MS的系統改到 svn 上.<br>工作久了, 會有個錯覺是世界會這麼一直運行下去, 日常使用的工具是世界運行的一環因此不太會思考要改變它.</p><p>當自己花些時間讓大家看到新工具 svn/trac 的好用時, 趁機跟大家灌輸新一代的工具優點, 再若有似無地提到 trac 這強悍的程式整個是 python 寫的. 可以勾起大家有點求變的動能.</p><p><span style="font-weight:bold;">讓他感興趣</span></p><p>第二階段是最近工作中引入自己用 scapy 做的封包產生器, 有的同事發現我用的工具可以跨平台使用, 不用花時間架設特別的機器和環境, 可以讓測試變得不那麼麻煩, 可能就有了想學習的動力.</p><p><span style="font-weight:bold;">使他容易學習</span></p><p>第三階段是在適當時機展示一下 python 的簡潔,讚揚一下 python 程式中非常直觀的列表, 字典等內建型態.程式縮排等寫作原則提都不用提, python 程式的美觀展示時即自然呈現.如果真的要強調, 則是花時間下去學習 python 語法時的事情了.</p><p>你的工作裡也有地方用的上 python 嗎?</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>收到管理權限</title>
      <link href="/2006/10/12/%E6%94%B6%E5%88%B0%E7%AE%A1%E7%90%86%E6%AC%8A%E9%99%90/"/>
      <url>/2006/10/12/%E6%94%B6%E5%88%B0%E7%AE%A1%E7%90%86%E6%AC%8A%E9%99%90/</url>
      <content type="html"><![CDATA[<p>終於收到 <a href="http://docs.turbogears.org/1.0" target="_blank" rel="noopener">TurboGears 官方文件網站</a>的管理權限, 可以修改首頁了.這幾天重新整理了 TurboGears 的官方文件, 讓整個學習流程變得更清楚了.</p><p>TurboGears 安裝早已變得很簡單,裝好 python 後, 只要抓下 <a href="http://tgsetup.py" target="_blank" rel="noopener">tgsetup.py</a> 後執行就會自動安裝.不用管是否已安裝了 setuptools 模組或 easy_install 命令.</p><p>新使用者可以關注 “教程 (Tutorials)”, “使用導覽(Getting Started Guide)”, “安裝 (Installation)” 三個部份.</p><p>一些特別的主題如 cookie, session, 傳送 Email, 註冊新使用者等等都被歸類在 “Solving specific problems” 中.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>kid 或 genshi 中文樣板編輯</title>
      <link href="/2006/10/06/kid-%E6%88%96-genshi-%E4%B8%AD%E6%96%87%E6%A8%A3%E6%9D%BF%E7%B7%A8%E8%BC%AF/"/>
      <url>/2006/10/06/kid-%E6%88%96-genshi-%E4%B8%AD%E6%96%87%E6%A8%A3%E6%9D%BF%E7%B7%A8%E8%BC%AF/</url>
      <content type="html"><![CDATA[<p>原本使用 TurboGears 都是拿來做些網站應用程式的原型, 享受它帶來的樂趣. 現在終於等到一個可以製作實際網站的機會.</p><p>我打算使用 TurboGears 的 1.1( 在 SVN Trunk 開發中) 版本開始做一個中文的應用網站.使用 genshi 做網頁樣板系統和 SQLAlchemy 做 ORM, 並使用 pydev(python) + Aptana(web) eclipse 環境開發.</p><p>剛開始玩得很順利:P直到我發現在預覽網頁時發生了錯誤.錯誤訊息看起來是有中文的地方會報錯, 因此我以為是網頁樣板預設編碼不是’utf-8’的問題.</p><p>找了半天, 到後來直接用瀏覽器預覽時, 才發現整個中文部份都變成了亂碼, 改編碼為 big5 時才顯示正常. 原來罪魁禍首是作業系統和編輯器!</p><p>作業系統預設編碼是 big5, 因此照一般輸入方式在編輯器中編輯儲存中文字的結果, 當然不是我所期望的 utf-8 囉.當我改使用 Dreamweaver 來編輯樣版後, 一切顯示就回歸正常了.應該是編輯時 Dreamweaver 會自動幫忙轉碼吧:-D</p><p>Anyway, 還是希望能找到個 OpenSource 的網頁編輯器可以做到國際化支援呀.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TurboGears on O3 Magzine</title>
      <link href="/2006/10/02/TurboGears-on-O3-Magzine/"/>
      <url>/2006/10/02/TurboGears-on-O3-Magzine/</url>
      <content type="html"><![CDATA[<p>繼 Ruby On Rails 後, 最新期的 o3 雜誌專刊介紹 TurboGears</p><p><a href="http://www.o3magazine.com/pastissues/issue5/" target="_blank" rel="noopener"><img src="http://photos1.blogger.com/blogger/1345/565/320/o3cover.jpg" alt=""></a>) 中發表了<a href="http://groups.google.com/group/turbogears/browse_thread/thread/20888f4a6f0f9f99/#" target="_blank" rel="noopener">一篇文章</a> 推薦 <a href="http://turboentity.ematia.de/" target="_blank" rel="noopener">TurboEntity</a> 這個項目,看起來他蠻推崇這個大量借鑒他的 ActiveMapper 功能的專案的.</p><p>TurboEntity 最酷的能耐應該是 ‘self reference’,能參考同個物件的資料 (不知道Django的怎樣, SQLObject不行直接參考, 要加一些特別的代碼)</p><p>網站上的範例裡拿了辛普森家庭 (The Simpsons) 做例子:</p><p>定義四個角色</p><pre><code>grampa = Person(name=&quot;Abe&quot;)</code></pre><p>homer = Person(name=“Homer”)bart = Person(name=“Bart”)lisa = Person(name=“Lisa”)</p><p>定義人物間的關係：</p><p>祖父- 河馬 - 霸子- 麗莎</p><pre><code>grampa.children.append(homer)</code></pre><p>homer.children.append(bart)lisa.father = homer</p><p>不講的話還真的看不出來這些是存取資料庫中資料的函式.</p><p>ManyToOne / ManyToMany 這些函式也是直接呼叫 sqlalchemy的功能.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>支援 OCN IPv6 連線的 BroadBand Router</title>
      <link href="/2006/09/27/%E6%94%AF%E6%8F%B4-OCN-IPv6-%E9%80%A3%E7%B7%9A%E7%9A%84-BroadBand-Router/"/>
      <url>/2006/09/27/%E6%94%AF%E6%8F%B4-OCN-IPv6-%E9%80%A3%E7%B7%9A%E7%9A%84-BroadBand-Router/</url>
      <content type="html"><![CDATA[<p>Corega 在     INTEROP TOKYO 2006 中展出了一台支援 NTT OCN IPv6 連線服務的寬頻路由器CG-BARPRO6</p><p><a href="http://ipv6.blog.ocn.ne.jp/ipv6/2006/06/cgbarpro6ocn_ip_62af.html" target="_blank" rel="noopener">ブロードバンドルータ(CG-BARPRO6)によるOCN IPv6接続</a></p><p><a href="http://www.ipv6style.jp/en/special/20060616/index.shtml" target="_blank" rel="noopener">Interop Tokyo 2006 Exhibition Hall Report (1)</a></p><p><a href="http://www.ipv6style.jp/en/news/2006/0608_corega.shtml" target="_blank" rel="noopener">http://www.ipv6style.jp/en/news/2006/0608_corega.shtml</a></p><p><a href="http://corega.jp/event/interop2006/" target="_blank" rel="noopener">http://corega.jp/event/interop2006/</a><a href="http://corega.jp/product/news/060607.htm" target="_blank" rel="noopener">http://corega.jp/product/news/060607.htm</a></p><p>效能比較<a href="http://www.ipv6style.jp/jp/20060922/corega.html" target="_blank" rel="noopener">http://www.ipv6style.jp/jp/20060922/corega.html</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>簡單安裝 TurboGears</title>
      <link href="/2006/09/25/%E7%B0%A1%E5%96%AE%E5%AE%89%E8%A3%9D-TurboGears/"/>
      <url>/2006/09/25/%E7%B0%A1%E5%96%AE%E5%AE%89%E8%A3%9D-TurboGears/</url>
      <content type="html"><![CDATA[<p>TurboGears 在進入1.0b版本後吸引了許多新的使用者,為了讓安裝 Python 跟 TurboGears 再更簡易. TurboGears 開發者 Kevin 釋出了新的簡單安裝工具 <a href="http://tgsetup.py" target="_blank" rel="noopener">tgsetup.py</a>, 將 SetupTools 與 TurboGears 的安裝步驟合而為一, 讓安裝TurboGears 的過程更簡單.只需兩個步驟就能安裝好 TurboGears:</p><p><span style="font-size:180%;">1. 安裝 Python</span>Linux 使用者:一般說來, 你的 Linux 發行版本(Distribution)裡早已預裝了 Python, 並且偷偷用在了一些內附的程式中. 你可以輸入</p><blockquote><p>$whereis python來查看它的存在.如果你是 Ubuntu 的使用者, 你需要再安裝幾個必備的套件$ sudo apt-get install gcc libc6-dev python2.4-dev</p></blockquote><p>Windows 使用者:到 <a href="http://www.python.org" target="_blank" rel="noopener">www.python.org</a> 下載 python 2.4 安裝檔, 接著只要按&quot;下一步&quot;按鈕就能安裝成功.安裝成功後需要設定環境變數. 進入&quot;控制台&quot;-&gt;“系統”-&gt;“進階”-&gt;“環境變數”,並選擇&quot;編輯&quot; path 變數.在 path 變數前端加入</p><blockquote><p>C:\Python24\Scripts; (安裝路徑\Scripts) 敘述.</p></blockquote><p>其他平台使用者:請參考 <a href="http://www.python.org" target="_blank" rel="noopener">www.python.org</a> 網站</p><p><span style="font-size:180%;">2. 安裝 TurboGears</span>各平台使用者都可以從 <a href="http://www.turbogears.org/download/" target="_blank" rel="noopener">www.turbogears.org/download/</a> 下載 <a href="http://tgsetup.py" target="_blank" rel="noopener">tgsetup.py</a> 檔案. 在命令列輸入</p><blockquote><h1>python <a href="http://tgsetup.py" target="_blank" rel="noopener">tgsetup.py</a></h1></blockquote><p>Windows 使用者可以直接在命令列輸入</p><blockquote><blockquote><p><a href="http://tgsetup.py" target="_blank" rel="noopener">tgsetup.py</a></p></blockquote></blockquote><p><a href="http://tgsetup.py" target="_blank" rel="noopener">tgsetup.py</a> 會自動從網路上下載相關的檔案來安裝 TurboGears.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何把蛋砸到起司商店?</title>
      <link href="/2006/09/23/%E5%A6%82%E4%BD%95%E6%8A%8A%E8%9B%8B%E7%A0%B8%E5%88%B0%E8%B5%B7%E5%8F%B8%E5%95%86%E5%BA%97/"/>
      <url>/2006/09/23/%E5%A6%82%E4%BD%95%E6%8A%8A%E8%9B%8B%E7%A0%B8%E5%88%B0%E8%B5%B7%E5%8F%B8%E5%95%86%E5%BA%97/</url>
      <content type="html"><![CDATA[<p>白話翻譯是: 怎麼在 Linux 或 Windows 平台上將 python 的安裝蛋(.egg)上傳到 Python 檔案集散地 CheeseShop 上.(取了個白目的標題 XD)</p><p>一般來說, 要上傳安裝檔到 CheeseShop, 只要輸入</p><blockquote><p><a href="http://setup.py" target="_blank" rel="noopener">setup.py</a> bdist_egg upload</p></blockquote><p>即可.“bdist_egg” 是通知 <a href="http://setup.py" target="_blank" rel="noopener">setup.py</a> 將我的程式封裝成安裝蛋(.egg),“upload” 是通知 <a href="http://setup.py" target="_blank" rel="noopener">setup.py</a> 將我剛封裝好的程式上傳至 CheeseShop.(另外一個常用的命令是 “register”, 可以直接更新 CheeseShop 上的程式發佈資訊)</p><p>但是在 Windows 上使用 <a href="http://setup.py" target="_blank" rel="noopener">setup.py</a> upload 命令一般會得到下面這樣非常無用的錯誤報告:</p><blockquote><p>Submitting dist/your.egg to <a href="http://www.python.org/pypi" target="_blank" rel="noopener">http://www.python.org/pypi</a>Upload failed (401): Authorization Required</p></blockquote><p>仔細查過文件才發現, 原來是在上傳之前, 需先建立一個 .pypirc 文件, 內容是儲存欲登入 cheeseshop 的帳號密碼. 如下:</p><blockquote><p>[server-login]username:jamespassword:password</p></blockquote><p>在 Linux 上, 可以在 home 目錄下建立.pypirc 文件;</p><p>在 Windows 上則是放在 Documents and Settings 目錄. 例如 C:\Documents and Settings\Gasolin</p><p>在 Windows 下一般無法編輯 .xxx 開頭的檔案, 這時可以在命令列下輸入</p><blockquote><blockquote><p>edit .pypirc</p></blockquote></blockquote><p>來編輯 .pypirc 檔案.</p><p>編輯完儲存後, 需在命令列下設置 HOME 環境變數.</p><blockquote><blockquote><p>SET HOME=C:\Documents and Settings\James</p></blockquote></blockquote><p>當設定完成後, 就可以輕鬆使用 CheeseShop 提供的所有功能囉!</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>支援 Feel6 連線服務的寬頻路由器</title>
      <link href="/2006/09/22/%E6%94%AF%E6%8F%B4-Feel6-%E9%80%A3%E7%B7%9A%E6%9C%8D%E5%8B%99%E7%9A%84%E5%AF%AC%E9%A0%BB%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
      <url>/2006/09/22/%E6%94%AF%E6%8F%B4-Feel6-%E9%80%A3%E7%B7%9A%E6%9C%8D%E5%8B%99%E7%9A%84%E5%AF%AC%E9%A0%BB%E8%B7%AF%E7%94%B1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>Corega 上次在 INTEROP TOKYO 2006 中展出了一台<a href="http://inet6.blogspot.com/2006/06/ocn-ipv6-broadband-router.html" target="_blank" rel="noopener">支援 NTT OCN IPv6 連線服務的寬頻路由器</a> CG-BARPRO6, 現在這台機器可以用更新韌體的方式新增支援 <a href="http://start.feel6.jp/" target="_blank" rel="noopener">Feel6 連線服務</a>.</p><p>據我試用過的結果, Feel6 服務跟 OCN 服務的差別除了使用的 Tunnel 技術不同之外, 兩者在 CG-BARPRO6 上都可以透過同樣的設定方式使用.</p><p>Feel6 服務是免費的, 在台灣只要上 Feel6 網站, 填寫資料後也可以申請 Feel6 服務, 比設一堆Tunnel Broker 方便多了:-)</p><p>資料來源: <a href="http://www.ipv6style.jp/jp/news/20060920/corega.html" target="_blank" rel="noopener">コレガ、CG-BARPRO6の最新ファームウェアを公開</a></p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>讓簡單的事情簡單 - TurboGears</title>
      <link href="/2006/09/08/%E8%AE%93%E7%B0%A1%E5%96%AE%E7%9A%84%E4%BA%8B%E6%83%85%E7%B0%A1%E5%96%AE-TurboGears/"/>
      <url>/2006/09/08/%E8%AE%93%E7%B0%A1%E5%96%AE%E7%9A%84%E4%BA%8B%E6%83%85%E7%B0%A1%E5%96%AE-TurboGears/</url>
      <content type="html"><![CDATA[<p><a href="http://www.blueskyonmars.com/2006/09/08/turbogears-10b1-released/" target="_blank" rel="noopener">TurboGears 1.0 b1</a> 發佈囉!</p><p>在看到這個訊息後我把剛寫好的 TurboJinja 插件也順便發佈了.</p><p>和 TurboDjago 模板插件一樣, TurboJinja 可以讓你在 TurboGears 上用 Django 的 template,只是用 TurboJinja 的話不需要先安裝 Django.</p><p><a href="http://docs.turbogears.org/1.0/DjangoTemplating" target="_blank" rel="noopener">http://docs.turbogears.org/1.0/DjangoTemplating</a></p><p>TurboGears 的 API 在最近這的三個月中幾乎沒有改動,1.0b1 發佈後, 現在 TurboGears 的文件也很齊全了,正是學習的好時機:-)</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python + fibonacci</title>
      <link href="/2006/09/07/Python-fibonacci/"/>
      <url>/2006/09/07/Python-fibonacci/</url>
      <content type="html"><![CDATA[<p>網路上找到 <a href="http://www.cse.ucsd.edu/users/dasgupta/mcgrawhill/" target="_blank" rel="noopener">Algorithms</a> 一書, 由於書上都是虛擬碼, 試試看用 Python 來做點練習</p><p>下面是序章 <a href="http://www.cse.ucsd.edu/users/dasgupta/mcgrawhill/chap0.pdf" target="_blank" rel="noopener">Prologue</a> 的例子:</p><p><span style="font-weight: bold;">目標: </span>用Python 實現 fibonacci 數列[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89 …]</p><p><span style="font-weight: bold;">Python 程式碼:</span></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def Fib1(n):</span><br><span class="line">   &quot;&quot;&quot;遞迴函式&quot;&quot;&quot;</span><br><span class="line">   if n==0:</span><br><span class="line">       return 0</span><br><span class="line">   elif n==1:</span><br><span class="line">       return 1</span><br><span class="line">   else:</span><br><span class="line">       return Fib1(n-1) + Fib1(n-2)</span><br><span class="line"></span><br><span class="line">def Fib2(n):</span><br><span class="line">    &quot;&quot;&quot;用列表暫存結果&quot;&quot;&quot;</span><br><span class="line">    f = [0]*(n+1)</span><br><span class="line">    f[1] = 1</span><br><span class="line">    if n&lt;2:</span><br><span class="line">        return f[n]</span><br><span class="line">    else:</span><br><span class="line">        for i in xrange(2,n+1):</span><br><span class="line">            f[i]=f[i-1]+f[i-2]</span><br><span class="line">        return f[n],f</span><br><span class="line"></span><br><span class="line">if __name__==&quot;__main__&quot;:</span><br><span class="line">    &quot;&quot;&quot;試算結果&quot;&quot;&quot;</span><br><span class="line">    import time</span><br><span class="line">    testtimes = 3</span><br><span class="line"></span><br><span class="line">    for i in xrange(testtimes):</span><br><span class="line">        begintime =  time.clock()</span><br><span class="line">        print Fib1(30)</span><br><span class="line">        endtime = time.clock()</span><br><span class="line">        print endtime - begintime</span><br><span class="line"></span><br><span class="line">    for i in xrange(testtimes):</span><br><span class="line">        begintime =  time.clock()</span><br><span class="line">        print Fib2(30)</span><br><span class="line">        endtime = time.clock()</span><br><span class="line">        print endtime - begintime</span><br></pre></td></tr></table></figure><p>執行結果:8320404.24318425945 (Fib1)8320407.90603275007e-005 (Fib2)</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python 手冊(簡體)中文版</title>
      <link href="/2006/08/31/python-%E6%89%8B%E5%86%8A-%E7%B0%A1%E9%AB%94-%E4%B8%AD%E6%96%87%E7%89%88/"/>
      <url>/2006/08/31/python-%E6%89%8B%E5%86%8A-%E7%B0%A1%E9%AB%94-%E4%B8%AD%E6%96%87%E7%89%88/</url>
      <content type="html"><![CDATA[<p>簡體中文版的 python 手冊已經發佈一段日子了.</p><p>連 python 2.5版的手冊都有已經翻譯了.</p><p><a href="http://wiki.woodpecker.org.cn/moin/March_Liu/PyTutorial" target="_blank" rel="noopener">發佈頁面</a></p><p>PDF 下载: <a href="http://www.woodpecker.org.cn:9081/doc/Python/Py2.5tut/Py2_5_tut_cn.pdf" title="localshare" target="_blank" rel="noopener">Py2_5_tut_cn.pdf</a>譯者：劉鑫 李夢夷</p><p>PDF 下载: <a href="http://www.woodpecker.org.cn:9081/doc/Python/Py2.4tut/ctut.pdf" title="localshare" target="_blank" rel="noopener">Py2_4_tut_cn.pdf</a>譯者：劉鑫</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>探索 IPv6</title>
      <link href="/2006/08/03/%E6%8E%A2%E7%B4%A2-IPv6/"/>
      <url>/2006/08/03/%E6%8E%A2%E7%B4%A2-IPv6/</url>
      <content type="html"><![CDATA[<p>IBM 網站文章 <a href="http://www-128.ibm.com/developerworks/cn/web/wa-ipv6/index.html?ca=dwcn-newsletter-web" target="_blank" rel="noopener">探索 IPv6 </a>講了最粗淺的 IP格式與作業系統/瀏覽器支援</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>台灣的開放原始碼 (OpenSource) 週報</title>
      <link href="/2006/08/02/%E5%8F%B0%E7%81%A3%E7%9A%84%E9%96%8B%E6%94%BE%E5%8E%9F%E5%A7%8B%E7%A2%BC-OpenSource-%E9%80%B1%E5%A0%B1/"/>
      <url>/2006/08/02/%E5%8F%B0%E7%81%A3%E7%9A%84%E9%96%8B%E6%94%BE%E5%8E%9F%E5%A7%8B%E7%A2%BC-OpenSource-%E9%80%B1%E5%A0%B1/</url>
      <content type="html"><![CDATA[<p>繼 OSSF 電子報後<a href="http://www.openfoundry.org/newsletter.pl?section=zh_epaper" target="_blank" rel="noopener">http://www.openfoundry.org/newsletter.pl?section=zh_epaper</a></p><p>tossug 社群也開始出三週報了</p><p><a href="http://wiki.tossug.org/CatfishNews/1" target="_blank" rel="noopener">http://wiki.tossug.org/CatfishNews/1</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>冰山</title>
      <link href="/2006/08/01/%E5%86%B0%E5%B1%B1/"/>
      <url>/2006/08/01/%E5%86%B0%E5%B1%B1/</url>
      <content type="html"><![CDATA[<p>*&gt; *   把使用介面的畫面展示給非程式人員看時，如果這個介面很不好，對方會認為你整個程式也是很不好的。</p><blockquote><ul><li>把使用介面的畫面展示給非程式人員看時，如果這個介面非常漂亮，對方會認為這個程式幾乎已經完工。</li><li>比起功能齊全又累積了3700年資料但用灰色底色的網站，只有四個網頁但外觀漂亮的會獲到較高的評價。</li><li>因為某些因素要求由各技術經理或客戶「啟動」專案時，可以拿些無關緊要的家家酒內容(ex:數種美術設計)給他們玩(選擇），讓他們覺得自己很重要。這些他們就不會嚴重影響你的時程了。</li><li>展示時唯一重要的就是畫面。一定要讓它美得冒泡。*結論:</li></ul></blockquote><ul><li>應該把未完成的使用介面畫得_像_未完成。在功能完成之前對應的工具欄圖示就只用草圖或暗影。如果是建立web服務，在功能完成之前就先不要放在首頁裡。這樣大家就會逐漸看到首頁由三個命令擴充到廿個命令。</li></ul><p>– 約爾談軟體 (<a href="http://local.joelonsoftware.com/mediawiki/index.php/The_Joel_on_Software_Translation_Project:%E6%8F%AD%E9%9C%B2%E5%86%B0%E5%B1%B1%E8%88%AC%E7%9A%84%E7%A7%98%E5%AF%86" target="_blank" rel="noopener">揭露冰山般的秘密)</a></p><p>有空時翻一翻看過的舊文章, 可以提醒自己很多事情:-)</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Bruce Eckel 看 TurboGears</title>
      <link href="/2006/07/30/Bruce-Eckel-%E7%9C%8B-TurboGears/"/>
      <url>/2006/07/30/Bruce-Eckel-%E7%9C%8B-TurboGears/</url>
      <content type="html"><![CDATA[<blockquote><p>我想, 這是第一次有了個網站框架將它的功能做得這麼容易明白.I think this is the first time that a web framework’s functionality has been so obvious– Bruce Eckel</p></blockquote><p>原文: <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=170038" target="_blank" rel="noopener">The Web Frameworks Jam and Turbogears</a></p><p>誰是 Bruce Eckel ?</p><p>Bruce Eckel 是 Thinking in Java, Thinking in C++ 系列書的作者, 作品享有很高的聲譽.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IPv6-IPv4 TCP Relay &amp; PortProxy</title>
      <link href="/2006/07/28/IPv6-IPv4-TCP-Relay-PortProxy/"/>
      <url>/2006/07/28/IPv6-IPv4-TCP-Relay-PortProxy/</url>
      <content type="html"><![CDATA[<p>在看 <a href="http://ipv6.blog.ocn.ne.jp/ipv6/2006/06/cgbarpro6ocn_ip_62af.html" target="_blank" rel="noopener">ブロードバンドルータ(CG-BARPRO6)によるOCN IPv6接続 </a>這篇文章時,發現回覆中提到很可惜沒支援 “v6-v4 TCP Relay” 這功能.</p><p>IPv6-IPv4 TCP Relay 到底是什麼呢?</p><p>上網查了一查, 原來就是一種 BIS(Bump In Stack) 的應用, 讓 IPv4 Only的程式可以透過 Port Mapping 來存取 IPv6 網路.</p><p>例如回覆中提到一台僅支援 IPv4 的網路電視機器, 因為區網內使用私有地址的關係, 需要在外部建一台 Virtual Server 才能在各地存取網路電視這資源.如果 Router 能支援 “IPv6-IPv4 TCP Relay”, 我們就能在外部使用 IPv6 位址存取網路電視了!</p><p>想起來就很讚, 做起來…😄</p><p>參考：<a href="http://www.microsoft.com/technet/prodtechnol/windowsserver2003/zh-cht/library/ServerHelp/2e145188-ce7e-4556-8540-abd9e7feb46c.mspx?mfr=true" target="_blank" rel="noopener">介面 Portproxy 的 Netsh 命令</a></p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Assimilate Django Template to TurboGears</title>
      <link href="/2006/07/21/Assimilate-Django-Template-to-TurboGears/"/>
      <url>/2006/07/21/Assimilate-Django-Template-to-TurboGears/</url>
      <content type="html"><![CDATA[<p>Lots of people use Django template for Pyhton Web Framework(As Django project shares).</p><p>And if we want to make people feel comfortable to try TurboGears (and then migrate to tg hopefully), first thing we can do is making django template system available on TurboGears.</p><p>Its easy because many template plugins (and their source codes) are available for TurboGears, I use a couple hours to read the <a href="http://www.turbogears.org/docs/plugins/template.html" target="_blank" rel="noopener">template plugins doc</a> and make the <span style="font-weight: bold;">TurboDjango template</span> plugin.</p><p>You can try the  django template in minutes. Here is the step by step guide:<span style="font-weight: bold;"></span></p><p>Install By SetupTools</p><p>$ easy_install TurboDjango</p><p><span style="font-weight: bold;">How to Make it just Work?</span><span style="font-weight: bold;">Step 1. Quickstart</span></p><p>Use tg-admin tool to create a project</p><p>$ tg-admin quickstart tgdj</p><p>The project name is &quot;tgdj&quot;<span style="font-weight: bold;">Step 2. Edit Controller</span></p><p><span style="font-style: italic;">Edit tgdj/tgdj/controller.py, add following method in “Root” class.</span>&gt; @expose(template = “django:tgdj.templates.djpage”)</p><blockquote><p>def page(self):return dict(name=“TurboGears”)“djpage” is django template name</p></blockquote><p><span style="font-weight: bold;">Step 3. Edit Template</span></p><p><span style="font-style: italic;">Edit </span><span style="font-style: italic;">tgdj/tgdj/templates/</span><span style="font-style: italic;">djpage.html</span></p><p>&gt; [h1]Hello, [/h1]The template has “html” file suffix</p><p><span style="font-weight: bold;">Step 4. Check Result</span></p><p>In <span style="font-style: italic;">tgdj, start develop server by typing</span></p><p>$ start-tgdj</p><p>Then surf <a href="http://localhost:8080/page" target="_blank" rel="noopener">http://localhost:8080/page</a>, you’ll see</p><p>&gt; # Hello, TurboGearsThe Release is available <a href="http://www.python.org/pypi/TurboDjango" target="_blank" rel="noopener">here</a>.</p><p>To Django Users: You can migrate your database with <a href="http://inet6.blogspot.com/2006/07/turbogears-with-sqlsoup.html" target="_blank" rel="noopener">SQLAlchemy’s SqlSoup</a></p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TurboGears 中使用 Django 模板</title>
      <link href="/2006/07/21/TurboGears-%E4%B8%AD%E4%BD%BF%E7%94%A8-Django-%E6%A8%A1%E6%9D%BF/"/>
      <url>/2006/07/21/TurboGears-%E4%B8%AD%E4%BD%BF%E7%94%A8-Django-%E6%A8%A1%E6%9D%BF/</url>
      <content type="html"><![CDATA[<p>利用 TurboDjango Template Plugin, 可以在 TurboGears, Buffet, 或 CherryPy 裡如此這般調用 Django 模板:</p><p>在 <a href="http://controller.py" target="_blank" rel="noopener">controller.py</a> 裡</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#123;</span><br><span class="line">   @expose(template = &quot;django:dem.templates.djpage&quot;)</span><br><span class="line">   def page(self):</span><br><span class="line">       return dict(name=&quot;TurboGears&quot;)</span><br><span class="line"></span><br><span class="line"> &lt;div id=&quot;qhide_141663&quot; style=&quot;display: block;&quot; class=&quot;qt&quot;&gt;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure> 用 "template " 參數指定樣板時加一個"django:"前綴,或是在設定檔app.cfg中將預設的tg.defaultview = "kid" 改成tg.defaultview = "django" 就可以在全站使用 django 模板.<p>djpage 是模板名稱, return dict後面給的參數群是要傳給模板的參數.</p><p>在  djpage.html 裡</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[h1]Hello, &#123;&#123;name&#125;&#125;[/h1]</span><br><span class="line"> &lt;div id=&quot;qhide_141664&quot; style=&quot;display: block;&quot; class=&quot;qt&quot;&gt;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure> djpage 是模板名稱, html是檔名<p>網頁 <a href="http://localhost:8080/page" target="_blank" rel="noopener">http://localhost:8080/page</a> 的輸出結果是</p><p>&quot;</p><h1>Hello, </h1><p>&quot;</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Step-by-Step Guide for Setting Up IPv6 in a Test Lab</title>
      <link href="/2006/07/10/Step-by-Step-Guide-for-Setting-Up-IPv6-in-a-Test-Lab/"/>
      <url>/2006/07/10/Step-by-Step-Guide-for-Setting-Up-IPv6-in-a-Test-Lab/</url>
      <content type="html"><![CDATA[<p>Microsoft’s <a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=fd7e1354-3a3b-43fd-955f-11edd39551d7&amp;DisplayLang=en" target="_blank" rel="noopener">Step-by-Step Guide for Setting Up IPv6 in a Test Lab</a></p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Eclipse Configuration for TurboGears</title>
      <link href="/2006/07/07/Eclipse-Configuration-for-TurboGears/"/>
      <url>/2006/07/07/Eclipse-Configuration-for-TurboGears/</url>
      <content type="html"><![CDATA[<p>Continue to my <a href="http://inet6.blogspot.com/2006/07/easyeclipse-for-python-and-turbogears.html" target="_blank" rel="noopener">previous article</a>, here is a configuration using eclipse external tools to start web server without open <a href="http://start-proj.py" target="_blank" rel="noopener">start-proj.py</a></p><p>Here is a list of the current functionality:</p><p>External Tools:</p><ul><li><p>Start Server</p></li><li><p>Start ToolboxAccessibility:</p></li><li><p>Auto Completion<span style="font-weight: bold;">Configure Eclipse to Launch developer server</span></p></li><li><p>Select** Run -&gt; External Tools -&gt; External Tools **</p></li><li><p>Select** “Program” <strong>from the</strong> configuration** tree*   Select <strong>New</strong> to create a new program*   Enter “<strong>Start Server</strong>” as the name*   Enter <span style="font-weight: bold;">C:\Python24\pythonw.exe</span> for the Location*   For the Working Directory, use<strong>${project_loc}</strong></p></li><li><p>Enter <span style="font-weight: bold;">start-${project_name}.py</span>** **for the <strong>Arguments</strong></p></li><li><p>Select the <strong>refresh</strong> tab and check <strong>Refresh Resources Upon Completion</strong></p></li><li><p>Select the <strong>Common</strong> tab*   Find the section for <strong>Display in Favorites Menu</strong></p><ul><li>Check **External Tools <strong>option</strong>***   Select <strong>Apply</strong><span style="font-weight: bold;">Configure Eclipse to Launch ToolBox</span></li></ul></li><li><p>Select** Run -&gt; External Tools -&gt; External Tools **</p></li><li><p>Select** “Program” <strong>from the</strong> configuration** tree*   Select <strong>New</strong> to create a new program*   Enter “**Start <em><em><span style="font-weight: bold;">ToolBox</span>” as the name</em>   Enter <span style="font-weight: bold;">C:\Python24\Scripts\tg-admin.exe</span> for the Location</em>   For the Working Directory, use<strong>${project_loc}</strong></p></li><li><p>Enter <span style="font-weight: bold;">toolbox</span>** **for the <strong>Arguments</strong></p></li><li><p>Select the <strong>Common</strong> tab*   Find the section for <strong>Display in Favorites Menu</strong></p><ul><li>Check **External Tools <strong>option</strong>***   Select <strong>Apply</strong></li></ul></li></ul><h4 id="a-name-toc111133465-id-toc111133465-a"><a name="_Toc111133465" id="_Toc111133465"></a></h4><h4 id="a-name-toc111133466-id-toc111133466-a"><a name="_Toc111133466" id="_Toc111133466"></a></h4><h4 id="a-name-toc111133466-id-toc111133466-a-v2"><a name="_Toc111133466" id="_Toc111133466"></a></h4><p><span style="font-weight: bold;">Auto-completion</span></p><ul><li>Select your project in <span style="font-weight: bold;">Navigator</span> panel</li><li>Select <span style="font-weight: bold;">Properties</span> on Right click menu.</li><li>Select** pyDev - PYTHONPATH**<span style="font-weight: bold;"></span></li><li><span style="font-weight: bold;"></span>Select** Add source folder <strong>to add project path in</strong> Project Source Folder.**it will bring project code-completion and code-analysis.</li><li>Select ** Add source folder **to add turbogears path in <span style="font-weight: bold;">External Source Folder.</span>it will bring turbogears code-completion PS: I get idea from <a href="http://www.napcs.com/howto/railsonwindows.html" target="_blank" rel="noopener">the rails article</a>, but for mine, you’d have eclipse &amp; pydev installed, I recommand you try <a href="http://www.easyeclipse.org/site/distributions/python.html" target="_blank" rel="noopener">EasyEclipse for Python</a>.</li></ul>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PlotKit with EasyPlot in TurboGears</title>
      <link href="/2006/07/04/PlotKit-with-EasyPlot-in-TurboGears/"/>
      <url>/2006/07/04/PlotKit-with-EasyPlot-in-TurboGears/</url>
      <content type="html"><![CDATA[<p>NOTICE: This Article is updated for 0.9w3</p><p>I recently update my TurboGears PlotKit widget.This version(0.9w3, 0.9 is <a href="http://www.liquidx.net/plotkit/" target="_blank" rel="noopener">origin lib’s version</a>, w means ‘widget’)</p><p>To get these widgets, easy_install them :</p><p>$easy_install plotkit</p><p>Then, you can Check the demo in TurboGears toolbox 😄</p><p><a href="http://photos1.blogger.com/blogger/1345/565/1600/easyplot.gif" target="_blank" rel="noopener"><img src="http://photos1.blogger.com/blogger/1345/565/400/easyplot.gif" alt=""></a></p><p>How to try it? Well, it’s extremely simple.</p><p>For a fresh quickstart site,</p><p>In <span style="font-weight: bold;">controllers.py</span>:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from plotkit import EasyPlot</span><br><span class="line"></span><br><span class="line">class Root(controllers.RootController):</span><br><span class="line">@expose(template=&quot;wgtest.templates.welcome&quot;)</span><br><span class="line">def index(self):</span><br><span class="line">setA = [[0,0], [1,2], [2,3], [3,7], [4,8], [5,6]]</span><br><span class="line">setB = [[0,0], [1,1], [2,4], [3,8], [4,7], [5,20]]</span><br><span class="line">setC = [[0,1], [1,3], [2,5], [3,5], [4,3], [5,2]]</span><br><span class="line">return dict(ep= EasyPlot(id=&quot;diag&quot;,</span><br><span class="line">                       style=&quot;line&quot;,</span><br><span class="line">                       width=&quot;300&quot;,</span><br><span class="line">                       height=&quot;300&quot;,</span><br><span class="line">                       data=[setA, setB, setC]))</span><br></pre></td></tr></table></figure><p>In <span style="font-weight: bold;">welcome.kid</span>:</p><p>${ep.display()}</p><p>add this script into html “body”.</p><p><span style="font-weight: bold;">Explain:</span></p><p><span style="font-style: italic;">from plotkit import EasyPlot</span></p><p>First of all, import the proper widget. (origin PlotKit widget is still availbe)</p><p><span style="font-style: italic;">return dict(ep= EasyPlot(…))</span></p><p>return the “ep” diagram instance to template</p><p><span style="font-style: italic;">${ep.display()}</span></p><p>display the diagram in template</p><p><span style="font-weight: bold;">Parameters:</span></p><p><span style="font-weight: bold;">id</span> : (diag)The Diagram’s Identifer (Element ID)<span style="font-weight: bold;">style</span> : (line)The diagram could be plot as a “line”, “pie”, or &quot;bar&quot;diagram.<span style="font-weight: bold;">width, height</span> : (400, 400)The diagram’s size<span style="font-weight: bold;">data</span> :Datasets is structured with [[x,y],[x1,y1],…]</p><p><span style="font-weight: bold;">option :</span>options of both Layout and Renderer (dictionary style), need be a string</p><p>The <a href="http://media.liquidx.net/js/plotkit-doc/PlotKit.EasyPlot.html" target="_blank" rel="noopener">origin example</a> is here.</p><hr><p>History0.9w3 07/04/2006: more flexible EasyPlot dataset0.9w2 : fix bugs and add a  EasyPlot() widget to plot a diagram within the code.</p><p>The svn repository is in <a href="http://svn.sourceforge.net/viewcvs.cgi/tgwidgets/" target="_blank" rel="noopener">Sourceforge</a>, you can share your TurboGears widget there, too.</p><p>known limit:current widget’s  option param suppor is not very OO, you need pass the dictionary in string format (can’t recognize “v”, “label”)</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>EasyEclipse for Python</title>
      <link href="/2006/07/02/EasyEclipse-for-Python/"/>
      <url>/2006/07/02/EasyEclipse-for-Python/</url>
      <content type="html"><![CDATA[<p>習慣用微軟 VisualStudio 或用 Java 的人用了 python 語言,通常會挑剔 python 語言沒什麼好用的 IDE 來搭配.</p><p>現在 EasyEclipse 有提供包好的 eclipse + pydev(eclipse平台上的 python 語言支援-) + Subclipse(eclipse平台上的圖形化 SVN 版本控制工具)<a href="http://www.easyeclipse.org/site/distributions/python.html" target="_blank" rel="noopener">http://www.easyeclipse.org/site/distributions/python.html</a></p><p>簡化了 eclipse 平台安裝設定上的繁瑣, 拿來做 python程式開發其實還蠻不賴的,</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript-library</title>
      <link href="/2006/06/27/javascript-library/"/>
      <url>/2006/06/27/javascript-library/</url>
      <content type="html"><![CDATA[<p>An article “<a href="http://www.sitepoint.com/article/javascript-library" target="_blank" rel="noopener">The JavaScript Library World Cup</a>” in sitepoint compare four mainstream javascript libraries : Dojo, Prototype and Scriptaculous, Mochikit, and Yahoo! UI.</p><p>There’s also an article <a href="http://www.musingsfrommars.org/2006/03/ajax-dhtml-library-scorecard.html" target="_blank" rel="noopener">Ajax/DHTML Library Scorecard: How Cross Platform Are They?</a> which compare the Cross Platform capability of JavaScript Libraries.</p><p>FYI, <a href="http://www.turbogears.org" target="_blank" rel="noopener">TurboGears </a>has Mochikit buildin,Prototype and Scriptaculous widgets available in <a href="http://www.turbogears.org/cogbin/" target="_blank" rel="noopener">cogbin</a>,and Yahoo! UI widgets in <a href="http://sourceforge.net/projects/tgwidgets" target="_blank" rel="noopener">sourceforge tgwidgets project repository</a>.</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>prototype documentation</title>
      <link href="/2006/06/27/prototype-documentation/"/>
      <url>/2006/06/27/prototype-documentation/</url>
      <content type="html"><![CDATA[<p>using prototype.js<a href="http://www.sergiopereira.com/articles/prototype.js.html" target="_blank" rel="noopener">http://www.sergiopereira.com/articles/prototype.js.html</a></p><p>chinese version is also available</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>IETF.org is IPv6 Enabled!</title>
      <link href="/2006/06/14/IETF-org-is-IPv6-Enabled/"/>
      <url>/2006/06/14/IETF-org-is-IPv6-Enabled/</url>
      <content type="html"><![CDATA[<p>Now, we can access <a href="http://www.ietf.org" target="_blank" rel="noopener">www.ietf.org</a> with IPv6 connection!</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TurboGears AJAX 使用感想- 2</title>
      <link href="/2006/06/08/TurboGears-AJAX-%E4%BD%BF%E7%94%A8%E6%84%9F%E6%83%B3-2/"/>
      <url>/2006/06/08/TurboGears-AJAX-%E4%BD%BF%E7%94%A8%E6%84%9F%E6%83%B3-2/</url>
      <content type="html"><![CDATA[<p>補充一點心得:</p><p>如果你的網頁應用服務主要關注在 AJAX 應用, 大部分動作都用 javascript 在客戶端完成,</p><p>只有 data 部分需要後端提供. 那麼 TurboGears 是非常適用的選擇.</p><p>1. 可以先用一般 serverside 開發方式寫函式和建立網頁應用服務原型 (prototype),</p><p>來測試你的網頁應用服務該有的功能.</p><blockquote><p>@expose(format = “.template.pages”) #資料以樣版格式顯示def method(self):…return dict{data=data}因為 TurboGears 中從傳入 serverside 的表單資料處理一致,</p></blockquote><p>所以在 serverside 寫的 code 完全可以繼續使用,</p><p>不必為了支持 AJAX 重寫, 很好的達到不重複自己(DRY)的效果.</p><p>2.import javascript library , 將資料改以 JSON 格式傳到網頁</p><p>from turbogears import mochikit…@expose(format = “.template.pages”) #資料以樣版格式顯示@expose(format = “JSON”) #資料以JSON格式顯示def method(self):…return dict{data=data, scripty = mochikit} #在網頁上</p><p>TurboGears 預先包好 mochikit, scriptaculous, plotkit 等 javascript 庫,</p><p>使用時可以用程式呼叫, 預設可用 JSON 格式傳輸,</p><p>預設 mochikit 庫提供相應資料處理支援.</p><p>3. 在 client 端用 javascript 處理 DOM 物件.</p><p>因為在開發的第一步時已經能將所需的資料, 傳輸內容等都處理好了,</p><p>能確信資料傳輸的正確性. 所以開發 javascript 時, 可以專注在網頁內資料處理的部分.</p><p>在這時遇到 bug 的話也可以很放心地將可能的問題點縮小到單純網頁內資料處理的範圍,</p><p>因而 AJAX 開發時最麻煩的交叉 debug 也變得更容易.</p><p>因此如果你的網頁應用服務主要關注在 AJAX 應用, 那麼 TurboGears 是非常適合的選擇.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PlotKit &amp; moo.fx Widget for TurboGears</title>
      <link href="/2006/06/02/PlotKit-moo-fx-Widget-for-TurboGears/"/>
      <url>/2006/06/02/PlotKit-moo-fx-Widget-for-TurboGears/</url>
      <content type="html"><![CDATA[<p>I’ve made <a href="http://www.python.org/pypi/plotkit/0.8" target="_blank" rel="noopener">PlotKit</a> &amp; <a href="http://www.python.org/pypi/moofx/1.2.4" target="_blank" rel="noopener">moo.fx</a> widget for TurboGears</p><p><a href="http://moofx.mad4milk.net/" target="_blank" rel="noopener">moo.fx</a> is a super-lite javascript effect library</p><p><a href="http://www.liquidx.net/plotkit/" target="_blank" rel="noopener">PlotKit</a> is a javascript svg web diagram plotting library</p><p>Both are available on CheeseShop, youcan easyinstall them by following commands:</p><p>$easy_install moofx</p><p>$easy_install plotkit</p><p>You can found them on <a href="http://www.turbogears.org/cogbin/" target="_blank" rel="noopener">TurboGears CogBin</a> too.</p><p>enjoy!</p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TurboGears Widgets One Page List</title>
      <link href="/2006/05/24/TurboGears-Widgets-One-Page-List/"/>
      <url>/2006/05/24/TurboGears-Widgets-One-Page-List/</url>
      <content type="html"><![CDATA[<table border="1" cellpadding="0" cellspacing="0" bordercolor="#E1E1E1">  <tbody>      <tr>      <td colspan="4" nowrap="nowrap"><span class="style1">TurboGears Widgets </span></td>    </tr>    <tr>      <td colspan="2" nowrap="nowrap" class="style1">Form Elements</td>      <td colspan="2" nowrap="nowrap" class="style1">HTML Imports</td>    </tr>    <tr>      <td> 1 </td>      <td> Button </td>      <td>1</td>      <td>CSS Link </td>    </tr>    <tr>      <td> 2 </td>      <td> Calendar </td>      <td>2</td>      <td>CSS Source </td>    </tr>    <tr>      <td> 3 </td>      <td> Calendar with time </td>      <td>3</td>      <td>JS Link</td>    </tr>    <tr>      <td> 4 </td>      <td>CheckBox</td>      <td>4</td>      <td>JS Source </td>    </tr>    <tr>      <td> 5 </td>      <td> File Field </td>      <td>5</td>      <td>Localizable JS Link</td>    </tr>    <tr>      <td> 6 </td>      <td> Hidden Field </td>      <td colspan="2" nowrap="nowrap" class="style1">Form Components</td>    </tr>    <tr>      <td> 7 </td>      <td> Image Button </td>      <td>1</td>      <td>CheckBox List </td>    </tr>    <tr>      <td> 8 </td>      <td> Label </td>      <td>2</td>      <td>FieldSet</td>    </tr>    <tr>      <td> 9 </td>      <td> Multiple Select Field </td>      <td>3</td>      <td>RadioButton List </td>    </tr>    <tr>      <td> 10 </td>      <td> Password Field </td>      <td>4</td>      <td>Repeating FieldSet</td>    </tr>    <tr>      <td> 11 </td>      <td> Reset Button </td>      <td colspan="2" class="style1">Table / Form</td>    </tr>    <tr>      <td> 12 </td>      <td> Single Select Field </td>      <td>1</td>      <td>DataGrid</td>    </tr>    <tr>      <td> 13 </td>      <td> Submit Button </td>      <td>2</td>      <td>List Form </td>    </tr>    <tr>      <td> 14 </td>      <td> Text Area </td>      <td>3</td>      <td>Table Form</td>    </tr>    <tr>      <td> 15 </td>      <td> Text Field </td>      <td colspan="2" class="style1">AJAX</td>    </tr>    <tr>   <td colspan="2" class="style1">Form UI</td>      <td>1</td>      <td>AJAX Form</td>    </tr>    <tr>            <td> 1</td>      <td> Jump Menu</td>      <td>2</td>      <td>Ajax Grid</td>    </tr>    <tr>      <td>2</td>      <td>Syntax Highlighter</td>      <td>3</td>      <td>Ajax remote function</td>    </tr>    <tr>      <td>3</td>      <td>Tabber</td>      <td>4</td>      <td>Auto Complete</td>    </tr>    <tr>      <td colspan="4">Find more widgets in [TurboGears Cogbin](http://www.turbogears.org/cogbin/)</td>    </tr>  </tbody></table>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MochiKit Intro - Ajax Experience Slides</title>
      <link href="/2006/05/13/MochiKit-Intro-Ajax-Experience-Slides/"/>
      <url>/2006/05/13/MochiKit-Intro-Ajax-Experience-Slides/</url>
      <content type="html"><![CDATA[<p><a href="http://svn.mochikit.com/presentations/2006/ajax_experience/slides.html" target="_blank" rel="noopener">MochiKit Intro - Ajax Experience Slides</a></p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TurboGears AJAX 使用感想</title>
      <link href="/2006/05/13/TurboGears-AJAX-%E4%BD%BF%E7%94%A8%E6%84%9F%E6%83%B3/"/>
      <url>/2006/05/13/TurboGears-AJAX-%E4%BD%BF%E7%94%A8%E6%84%9F%E6%83%B3/</url>
      <content type="html"><![CDATA[<blockquote><p>很難用簡短言語表述這種互動開發的經驗. 真的要稍微描述的話, 那是一種不管你想要怎麼進行下一個開發步驟時, TurboGears 都幫你準備好了各種基本工具的感覺.</p></blockquote><p>在學習 TurboGears 之後, 我用 TurboGears 框架試做了一個網路模擬架構產生器, 發現使用 TurboGears 寫操作到表單的網頁應用程式實在超方便.</p><p>很難用簡短言語表述這種互動開發的經驗. 真的要稍微描述的話, 那是一種不管你想要怎麼進行下一個開發步驟時, TurboGears 都幫你準備好了各種基本工具的感覺.</p><p>(以下不包含程式碼).</p><p><span style="font-weight:bold;">設計考量</span>產生器程式裡使用到大量小塊的表單, 用上 AJAX 技術可以大幅縮短來來回回修改的時間, 增進使用者經驗.</p><p>採用’內容為中心’的開發方式, controller 中盡量只返回與內容有關的資料. 所有內容展示都在樣版跟 javascript 中產生.</p><p>開發之初就可以預見程式中將會出現相對大量的 Javascript 程式碼, 我盡量採用 AJAX in Action 中提到將程式碼跟網頁分離的方式實做, 將 Javascript 用 import 的方式包含進網頁.</p><p><span style="font-weight:bold;">原型階段</span>在 <a href="http://protocontroller.py" target="_blank" rel="noopener">protocontroller.py</a> 中新增一個方法函式, 在其中手動建立一個列表 (預見將來將改成從資料庫中讀出), 返回列表到網頁, 作為剛開始要傳入網頁的資料.</p><p>建立一個剛剛的方法函式所用到的樣版 (template), 在樣版中建立一個表單, 來讓使用者選擇傳入的資料.並提供一個給使用者互動用的按鈕.</p><p>使用者按下互動用的按鈕後, 利用 mochikit (TurboGears 內建的javascript 函式庫) 提供的 DOM 處理參數, 由使用者選擇的選項來動態創建進一步的表單與第二個互動用的按鈕.</p><p>使用者填好相關資訊, 按下第二個互動用的按鈕. 傳回資料到另一個方法函式,取得下一個頁面.</p><p>exception: 使用者修改原來的選擇, 按下互動用的按鈕後, 利用 mochikit 提供的 DOM 處理函式更新原本動態產生的內容.</p><p><span style="font-weight:bold;">AJAX 網頁</span>使用 mochikit 提供的非同步(Async)處理函式, 從伺服器取回資訊.</p><p><span style="font-weight:bold;">感想</span>AJAX 非同步處理部分需要 server /client 一起配合才行, 因此對一個網頁框架而言, 不是單純加上一個 AJAX 函式庫, 這個框架就可以說是支援 AJAX. TurboGears 在這點上合格了!</p><p>開發時很妙的地方是 Turbogears 處理表單參數(POST)跟網頁參數(GET)的方式是一致的, 所以原本 controller 中寫好的程式根本不怎麼需要修改.</p><p>Turbogears 返回的資料除了給樣版用之外, 要回傳 JSON 格式只要在 uri 後加上’?tg_format=json’即可, 也不必做額外處理.</p><p>javascript 很多語法跟 c 和 python 相似, mochikit 函式庫更是借用了很多 python 的使用方式, 因此實際寫起來 client/server side 程式, 轉換間並不感到太過突兀.</p><p>到目前使用上還沒發現TurboGears 沒有 url mapping 有什麼壞處, 要用 url mapping 的話再裝 routes 不遲.</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 雙週刊 ...?</title>
      <link href="/2006/04/22/Python-%E9%9B%99%E9%80%B1%E5%88%8A/"/>
      <url>/2006/04/22/Python-%E9%9B%99%E9%80%B1%E5%88%8A/</url>
      <content type="html"><![CDATA[<p>在OSDC tw 上 Marr 提到辦 Python 雙週刊的想法,預計出版方式採雙週報的方式, 內容有python 相關網摘,原創文章, 翻譯文章等.我覺得這是個很棒的提議.回來後一直很期待有進一步消息.</p><p>這週回到家來, 想想既然是 Open 計畫,小弟也試著來推動一下, 好讓這個好想法更快實現.</p><p>要辦 Python 雙週刊首先是要做好基礎建設.</p><p>基礎建設包含選定使用平台, 決定授權方式,接下來則是決定收稿方式, 內容管理與出版方式.</p><p>我提出我的參考實作方法:</p><p>基礎建設部分, 小弟在 OSSF 上用 “pythonext”, “python時代雙週刊” 的專案名稱申請<a href="http://rt.openfoundry.org/Foundry/Project/index.html?Queue=550" target="_blank" rel="noopener">http://rt.openfoundry.org/Foundry/Project/index.html?Queue=550</a></p><p>接下來收稿方式與內容管理方面,召集人似乎已經有些腹案了,在此小弟建議增加一種從 TurboGears社群學來的收稿方式: wiki.</p><p>在 OSSF 共同筆記區中開闢一塊 “DocumentPlayGround”,用來寫隨筆, 寫下簡單的 recipes, 創作文章草稿,</p><p>OSSF 也提供 maillist , 可以在 maillist 上討論.</p><p>最後是出版方式,對最後出版方式我還沒很明確的概念,但是我可以看到的是利用OSSF的檔案庫,我們可以提供所有出版的Python 雙週刊下載.</p><p>利用版本控制系統,我們未來還可以做到針對有更新價值的文章更新,或是計畫用 python svn模組動態獲取這雙週中版本控制系統內更新的內容,組成新一期的雙週刊 😃</p><p>有興趣加入 Python雙週刊計畫的大哥大姐們先來加入計畫吧,<a href="http://rt.openfoundry.org/Foundry/Project/?Queue=550" target="_blank" rel="noopener">http://rt.openfoundry.org/Foundry/Project/?Queue=550</a>這是最直接統計 雙週刊辦不辦得起來的方式 😛</p><p>小弟目前只是協助做好初步的基礎建設,大家有了共同的 Base, 能開始討論更進一步的Python雙週刊運作才是我的希望</p><p>–使用平台: OSSF授權方式: 未定(待議)</p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OCN IPv6</title>
      <link href="/2006/04/20/OCN-IPv6/"/>
      <url>/2006/04/20/OCN-IPv6/</url>
      <content type="html"><![CDATA[<p><a href="http://www.ocn.ne.jp/ipv6/" target="_blank" rel="noopener">http://www.ocn.ne.jp/ipv6/</a></p><p>提供以每個月 315 日圓的低價格試驗 IPv6 網路</p><p>網站上演示了透過 IPv6 網路與支援 OCN IPv6 連線的家用閘道器來控制資訊家電,這願景很可能在近期變的真實.</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TurboGears Identity Management</title>
      <link href="/2006/04/11/TurboGears-Identity-Management/"/>
      <url>/2006/04/11/TurboGears-Identity-Management/</url>
      <content type="html"><![CDATA[<p>I just try the TurboGears Identity Management function,</p><p>Thanks Jeff,  the TurboGears  identity system is pretty slick 😃</p><p>I think we need a more clear and “actionable” document, so I “fire up” and modify the IdentityManagement doc on trac.</p><p><a href="http://trac.turbogears.org/turbogears/wiki/IdentityManagement" target="_blank" rel="noopener">http://trac.turbogears.org/turbogears/wiki/IdentityManagement</a></p><p><span style="font-weight:bold;">Updated</span> 20060410:Now the document has been the Turbogears <span style="font-weight:bold;">official</span> document,get it <a href="http://www.turbogears.org/preview/docs/identity/index.html" target="_blank" rel="noopener">here</a>.</p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Brian&#39;s TurboGears Tutorial</title>
      <link href="/2006/04/09/Brian-s-TurboGears-Tutorial/"/>
      <url>/2006/04/09/Brian-s-TurboGears-Tutorial/</url>
      <content type="html"><![CDATA[<p><a href="http://exogen.case.edu/turbogears.html" target="_blank" rel="noopener">Brian’s TurboGears Tutorial</a></p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>INET 20060330</title>
      <link href="/2006/04/03/INET-20060330/"/>
      <url>/2006/04/03/INET-20060330/</url>
      <content type="html"><![CDATA[<p>新版的 <a href="http://www.omnetpp.org/filemgmt/singlefile.php?lid=108" target="_blank" rel="noopener">INET</a> 出了, 主要加入 RIP and OSPFv2 等 IP Routing 功能</p>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>QuickMindMaps</title>
      <link href="/2006/04/02/QuickMindMaps/"/>
      <url>/2006/04/02/QuickMindMaps/</url>
      <content type="html"><![CDATA[<p>I’ve Update some <a href="http://flickr.com/photos/gasolin/tags/turbogears/" target="_blank" rel="noopener">QuickMindMaps</a> for TurboGears.Those QuickMindMaps present from model to views(by topic) to give you better resolution of TurboGears.</p><p>And I’ve listed My TurboGears-relate posts on my <a href="http://gasolinfred.pbwiki.com/%5BTurboGearsInMinutes" target="_blank" rel="noopener">pbwiki</a></p>]]></content>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TurboGears 的測試框架</title>
      <link href="/2006/03/24/TurboGears-%E7%9A%84%E6%B8%AC%E8%A9%A6%E6%A1%86%E6%9E%B6/"/>
      <url>/2006/03/24/TurboGears-%E7%9A%84%E6%B8%AC%E8%A9%A6%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<p>TurboGears 裡集成了 <a href="http://somethingaboutorange.com/mrl/projects/nose/" target="_blank" rel="noopener">nose</a> 作為測試工具. nose 支持 unitest / doctest, 可以對資料庫處理 (Model), 生成的頁面(View),  cherrypy 輸出結果(Controller) 作測試.</p><p>搭配 selenium4gears 直接測試網頁介面的能力, 讓 TurboGears 擁有了完整的測試方法.</p><p>TurboGears 可以直接集成成熟的現成 python 套件, 這是使用 TurboGears 的好處.</p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TurboGears 支持各種 Ajax 套件</title>
      <link href="/2006/03/23/TurboGears-%E6%94%AF%E6%8C%81%E5%90%84%E7%A8%AE-Ajax-%E5%A5%97%E4%BB%B6/"/>
      <url>/2006/03/23/TurboGears-%E6%94%AF%E6%8C%81%E5%90%84%E7%A8%AE-Ajax-%E5%A5%97%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>網路上許多 Ajax 套件, 例如 <a href="http://dojotoolkit.org/" target="_blank" rel="noopener">Dojo</a>, <a href="http://openrico.org/" target="_blank" rel="noopener">Rico</a>, 提供了比 TurboGears 預設的 mochikit 更多視覺上或是功能上的便利.</p><p>要讓 TurboGears 框架支援更多這些 Ajax 函式庫超容易. 只要將解壓縮後的函式庫放到 Turbogears/static/js 資料夾下. 然後在要使用時在 html 中以 script type=“text/javascript”  src = “/tg_js/script.js” 路徑加入即可</p><p>例如要用 Dojo 的 WYSIWYG 網頁編輯器功能,</p><p>先在 html body 中加入</p><blockquote><p>div class=&quot;dojo-Editor&quot;some content/div</p></blockquote><p>然後再在 title 中加入 dojo 連結</p><blockquote><p>script type=“text/javascript” src=&quot;/tg_js/dojo/dojo.js</p></blockquote><p>並呼叫載入要使用的 dojo-Editor 功能:</p><blockquote><p>script type=&quot;text/javascript&quot;dojo.require(“dojo.widget.Editor”);/script</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>從分享書籤到分享內容- unAPI</title>
      <link href="/2006/03/13/%E5%BE%9E%E5%88%86%E4%BA%AB%E6%9B%B8%E7%B1%A4%E5%88%B0%E5%88%86%E4%BA%AB%E5%85%A7%E5%AE%B9-unAPI/"/>
      <url>/2006/03/13/%E5%BE%9E%E5%88%86%E4%BA%AB%E6%9B%B8%E7%B1%A4%E5%88%B0%E5%88%86%E4%BA%AB%E5%85%A7%E5%AE%B9-unAPI/</url>
      <content type="html"><![CDATA[<p>現在不少 web 服務(amazon, <a href="http://del.icio.us" target="_blank" rel="noopener">del.icio.us</a>, flickr)都提供有 API 或 RSS,共通之處是這些 web 服務都使用了 XML 標記語言, 解析起來類似.但是問題來了, 這些種類 web service 的標籤格式雖然都遵照 XML 標記語言規範了,但各 web service 的格式還是都稍有不同, programmer 要使用這些 web 服務的時候, 每要支援一個服務就得重寫一個 Adapter.</p><p><a href="http://unapi.info/specs/" target="_blank" rel="noopener">unAPI</a>是一個新提出來的抽象 API,希望透過統一介面操作這些 API,讓 programmer 得以更輕鬆用同一個介面做出能線上分享書籍介紹, 參照圖片, 剪貼網頁的平台.(拿 windows 軟體來比喻的話就像是 Microsoft OneNote 那樣的功能)programmer 開發的速度加快了, 使用者也更容易得到更好的體驗(或是更奇怪的體驗?).</p><p>雖然之前已經有不少 web 2.0 網站打著可以將許多 web service 或是將 feed, blog post &quot;燒&quot;在一起來用來看,但是被&quot;綁&quot;在特定平台上的感覺總是不夠自在.因此我感覺 <a href="http://unapi.info/specs/" target="_blank" rel="noopener">unAPI</a> 相當具有成功的機會.</p><p>unAPI 離我們有點遠,覺得太抽象? 還有<a href="http://onebiglibrary.net/project/unapi/dawn-of-social-clipboards-screencast" target="_blank" rel="noopener">screencast</a>可以參考喔.</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>What straws make you choose TurboGears?</title>
      <link href="/2006/03/12/What-straws-make-you-choose-TurboGears/"/>
      <url>/2006/03/12/What-straws-make-you-choose-TurboGears/</url>
      <content type="html"><![CDATA[<p>I wonder to know the reason why people here choose TurboGears? I’d like to share mine.</p><p><span style="font-weight:bold;">1. Python Battery Included</span>With TurboGears I can apply &gt;5000 python modules on my web application natually. “Battery Included” facilitate me focusing on my major job to getting things done.</p><p>ex:Wiki20: “docutils” module is helpful for wiki syntaxTurboBlog: PIL “ImageFonts” module is helpful for blog anti-spam stuff.</p><p><span style="font-weight:bold;">2. Flexibility from Prototpying to Merchandising</span>In small app or prototyping stage, I just want to see something work first.TurboGears give me the flexibility to do most of my web programming by only edit <a href="http://controller.py" target="_blank" rel="noopener">controller.py</a>. I can adopt Template, ORM, AJAX… latter if I really need them.I don’t want to take care of “framework” stuff such as admin controll, templating, url mapping, or database reference at first (which Django did).</p><p>ex: I’ve written some short tutorials to teach myself turbogears’ features without template. (in chinese).<a href="http://gasolinfred.pbwiki.com/%5BTurboGearsInMinutes" target="_blank" rel="noopener">http://gasolinfred.pbwiki.com/[TurboGearsInMinutes</a></p><p><span style="font-weight:bold;">3. Easy to start, Plenty for Learn</span>Model Designer , CatWalk, help me leave from the first headache of database backend web programming.<a href="http://trac.turbogears.org/turbogears/wiki/QuickPrototyping" target="_blank" rel="noopener">http://trac.turbogears.org/turbogears/wiki/QuickPrototyping</a></p><p>And after learning how “controllers” and “expose” works (I think its the minimum set of turbogears core), I can construct a workable web app and enhance it during my learning curve.</p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hypy, hypertext in python</title>
      <link href="/2006/03/08/Hypy-hypertext-in-python/"/>
      <url>/2006/03/08/Hypy-hypertext-in-python/</url>
      <content type="html"><![CDATA[<p><a href="http://manatlan.online.fr/hypy.php" target="_blank" rel="noopener">http://manatlan.online.fr/hypy.php</a></p><p>今天剛寫完 “Making a Time Tracker in TurboGears”, 重新來看 Hypy 這個小樣板程式.</p><p>在 TurboGears 中可以這樣使用 hypy</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0  from turbogears import controllers</span><br><span class="line">0  from turbogears import expose</span><br><span class="line">0  import hypy</span><br><span class="line">1  class Root(controllers.RootController):</span><br><span class="line">2    @expose()</span><br><span class="line">3    def hypyd(self):</span><br><span class="line">4        template=&quot;&quot;&quot;</span><br><span class="line">5        &lt;span style=&quot;font-style: italic; font-size: 19.5px;&quot;&gt;@html:&lt;/span&gt;</span><br><span class="line">7         &lt;span style=&quot;font-style: italic; font-size: 19.5px;&quot;&gt;@head:&lt;/span&gt;</span><br><span class="line">8          &lt;span style=&quot;font-style: italic; font-size: 19.5px;&quot;&gt;@title:&lt;/span&gt;</span><br><span class="line">9           $&#123;title&#125;</span><br><span class="line">10         &lt;span style=&quot;font-style: italic; font-size: 19.5px;&quot;&gt;@body:&lt;/span&gt;</span><br><span class="line">11          Hello TurboGears!</span><br><span class="line">12       &quot;&quot;&quot;</span><br><span class="line">13       context = (title = &quot;Hello hypy&quot;)</span><br><span class="line">14       web = hypy.parse(template,context)</span><br><span class="line">15       return web</span><br></pre></td></tr></table></figure><p>原本 template 字串樣版用 html 寫的話簡直就是糊在一起, 但是改用 Hypy 寫之後整體就清楚多了Hypy 的語法跟 kid 的基本語法接近. 又能乾淨地在程式碼中內嵌網頁, 很適合當作一個取代字串樣版介於 controller 與 template 的中間形式.</p><p>只是這樣是否就又要使用者多學一種語言, 反而增加學習難度? 這就是相當見仁見智的事了.</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Making a Time Tracker in TurboGears</title>
      <link href="/2006/03/07/Making-a-Time-Tracker-in-TurboGears/"/>
      <url>/2006/03/07/Making-a-Time-Tracker-in-TurboGears/</url>
      <content type="html"><![CDATA[<p>2006/30/7Since may people may come from <a href="http://42.blogs.warnock.me.uk/2006/03/will_python_dom.html" target="_blank" rel="noopener">42</a>, I suggest you to download the full instruction at <a href="http://trac.turbogears.org/turbogears/wiki/QuickPrototyping" target="_blank" rel="noopener">TurboGears Trac</a>, you’ll see full instruction to make it.</p><p>This article is motivate by the <a href="http://oodt.jpl.nasa.gov/better-web-app.mov" target="_blank" rel="noopener">framework comparison screencast</a> performed by Sean Kelly. I found this screencast from <a href="http://groups.google.com/group/turbogears/browse_thread/thread/76378b490de76eab" target="_blank" rel="noopener">TurboGears group</a>. the <a href="http://oodt.jpl.nasa.gov/better-web-app.mov" target="_blank" rel="noopener">screencast</a> compare J2EE , <a href="http://www.rubyonrails.org" target="_blank" rel="noopener">Rails</a> ,<a href="http://www.zope.org" target="_blank" rel="noopener">Zope</a> ,<a href="http://www.turbogears.org" target="_blank" rel="noopener">TurboGears</a> ,and <a href="http://www.djangoproject.com" target="_blank" rel="noopener">Django</a>.  TurboGears did fairly well. but Sean Kelly wasn’t using the latest version(~0.9) during his tests.Thus I try to re-imlement the demo by using bunch of exciting new features (Model Designer, CatWalk, DataController…) introduced in the latest TurboGears  version.</p><p><span style="font-weight:bold;">Origin version in ScreenCast</span></p><p>The screencast implement page like this,  there is a add only interface, no editing.</p><p><a href="http://www.flickr.com/photos/gasolin/107081514/" title="Photo Sharing" target="_blank" rel="noopener"><img src="http://static.flickr.com/50/107081514_bcdd91b2b5_o.jpg" alt="TimeTracker preview"></a></p><p>And it cost 2 python source files 49 lines of code, 2 page of templates, 53 lines of code, not a hundred lines of code.</p><p><a href="http://www.flickr.com/photos/gasolin/107081515/" title="Photo Sharing" target="_blank" rel="noopener"><img src="http://static.flickr.com/42/107081515_4dcbd2af65_o.gif" alt="Time Tracker preview Evaluation"></a></p><p><span style="font-weight:bold;">Re-Implement version with latest svn(#885)</span>Its time catch up with Sean Kelly’s demo in latest TurboGears version.The re-implement with latest Turbogears svn like this. TurboGears &gt; 0.9 provide autogenerate Editor(Catwalk) in Admin Panel(Toolbox)</p><p><a href="http://www.flickr.com/photos/gasolin/107080749/" title="Photo Sharing" target="_blank" rel="noopener"><img src="http://static.flickr.com/33/107080749_f038bd03fb.jpg" alt="Timetracker catwalk"></a></p><p>We can get another running mode editor(much usefull for real app) with DataController by several lines of code.</p><p><a href="http://www.flickr.com/photos/gasolin/107080750/" title="Photo Sharing" target="_blank" rel="noopener"><img src="http://static.flickr.com/40/107080750_ea36cfeced.jpg" alt="Timetracker  DataController"></a></p><p>the re-implement version cost 2 python source files (now Turbogears config file is in python) 6 lines of code, 0 page of templates, not a ten lines of code. The re-implement version also include a full-functional database-relation editor.</p><p><a href="http://www.flickr.com/photos/gasolin/107080751/" title="Photo Sharing" target="_blank" rel="noopener"><img src="http://static.flickr.com/19/107080751_4ad98ddb35_o.gif" alt="Timetracker Evaluation"></a></p><p>Turbogears automatically generate pages for you both in admin and practice perspective. In Turbogears you can customize DataController and other widgets’ looking and feel to fit your layout style.</p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Access to IPv6 Home Network from Mobile Terminals</title>
      <link href="/2006/03/06/Access-to-IPv6-Home-Network-from-Mobile-Terminals/"/>
      <url>/2006/03/06/Access-to-IPv6-Home-Network-from-Mobile-Terminals/</url>
      <content type="html"><![CDATA[<p>OCN, an ISP company in Japan has published an experimental service for non-IPv6 enabled devices in non-IPv6 enabled networks to access pure-IPv6 Home network.</p><p>They seems using some kind of tunneling service.</p><p>OCN IPv6 Mobile Provides Access to IPv6 Home Network from Mobile Terminals<a href="http://www.ipv6style.jp/en/news/2006/0214_nttcom.shtml" target="_blank" rel="noopener">http://www.ipv6style.jp/en/news/2006/0214_nttcom.shtml</a></p><p>OCN IPv6 モバイル<a href="http://www.ocn.ne.jp/ipv6/mobile/?ipv6_info" target="_blank" rel="noopener">http://www.ocn.ne.jp/ipv6/mobile/?ipv6_info</a></p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用 TurboGears 做個網站時間追蹤應用程式</title>
      <link href="/2006/03/05/%E7%94%A8-TurboGears-%E5%81%9A%E5%80%8B%E7%B6%B2%E7%AB%99%E6%99%82%E9%96%93%E8%BF%BD%E8%B9%A4%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F/"/>
      <url>/2006/03/05/%E7%94%A8-TurboGears-%E5%81%9A%E5%80%8B%E7%B6%B2%E7%AB%99%E6%99%82%E9%96%93%E8%BF%BD%E8%B9%A4%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>根據 Sean Kelly 的 <a href="http://oodt.jpl.nasa.gov/better-web-app.mov" target="_blank" rel="noopener">framework comparison screencast </a> 的影片演示,他比較了 J2EE, Rails, Zope, TurboGears, and Django 幾個框架. TurboGears 在其中得到了不錯的評價, 然而他所使用的 TurboGears 版本還沒引入網頁自動生成資料庫編輯介面(CRUD)等 0.9 版新加入, 可以大大減少初期開發時間的功能.因此我利用他的 Time Tracker 例子和資料模型寫了篇用上 TurboGears 0.9 新功能的教學文章(英文), 貼在 TurboGears Trac 裡,可以前去下載.</p><p>QuickPrototyping: Making a Time Tracker in TurboGears<a href="http://trac.turbogears.org/turbogears/wiki/QuickPrototyping" target="_blank" rel="noopener">http://trac.turbogears.org/turbogears/wiki/QuickPrototyping</a></p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深入 TurboGears - 驗證並轉換表單參數 (Validators) 講解草稿</title>
      <link href="/2006/03/01/%E6%B7%B1%E5%85%A5-TurboGears-%E9%A9%97%E8%AD%89%E4%B8%A6%E8%BD%89%E6%8F%9B%E8%A1%A8%E5%96%AE%E5%8F%83%E6%95%B8-Validators-%E8%AC%9B%E8%A7%A3%E8%8D%89%E7%A8%BF/"/>
      <url>/2006/03/01/%E6%B7%B1%E5%85%A5-TurboGears-%E9%A9%97%E8%AD%89%E4%B8%A6%E8%BD%89%E6%8F%9B%E8%A1%A8%E5%96%AE%E5%8F%83%E6%95%B8-Validators-%E8%AC%9B%E8%A7%A3%E8%8D%89%E7%A8%BF/</url>
      <content type="html"><![CDATA[<p>在 TurboGears 中可以用 “@validate()” 裝飾方法來處理輸入表單參數的轉值與驗證. 使用的好處是除了會自動確認型態的正確性之外, 還會將字串轉換成目標型態.</p><p>例如拿前一個網頁加法器作例子, 原來例子中加總結果必須先將字串轉換成目標型態 , 因此計算式如下SUM = (int(A)+int(B))我們可以使用&quot;@validate()&quot;來預先先確認輸入資料, 並將資料轉換成預期的資料型態.範例如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from turbogears.validators import *</span><br><span class="line">        @expose(&lt;span style=&quot;font-weight:bold;&quot;&gt;inputform =&quot;add&quot;&lt;/span&gt;)</span><br><span class="line">        @validate(&lt;span style=&quot;font-weight:bold;&quot;&gt;validators=dict(A=validators.Int(),B=validators.Int())&lt;/span&gt;)</span><br><span class="line">        def calcit(self,A=0,B=0, SUM=0):</span><br><span class="line">            template = &quot;&quot;&quot;</span><br><span class="line">            &amp;lt;form name=&quot;add&quot; method=&quot;post&quot; action=&quot;/calcit&quot;&amp;gt;</span><br><span class="line">              &amp;lt;input name=&quot;A&quot; type=&quot;text&quot; value=&quot;%d&quot;/&amp;gt; + &amp;lt;input name=&quot;B&quot; type=&quot;text&quot; value=&quot;%d&quot;/&amp;gt;</span><br><span class="line">              &amp;lt;input type=&quot;submit&quot; value=&quot;=&quot; /&gt; &amp;lt;input name=&quot;SUM&quot; type=&quot;text&quot; value=&quot;%d&quot;/&amp;gt;</span><br><span class="line">            &amp;lt;/form&amp;gt;</span><br><span class="line">            &quot;&quot;&quot;</span><br><span class="line">            SUM = &lt;span style=&quot;font-weight:bold;&quot;&gt;A + B&lt;/span&gt;</span><br><span class="line">            return template%(A,B,SUM)</span><br></pre></td></tr></table></figure><p>@validate(validators=dict(A=Int(),B=Int()))@validate(validators={“A”:Int()}, “B”:Int())</p><p>現在例子中由於已經預先將字串轉換成目標型態, 因此可以直接加總SUM = A + B</p><p>這讓程式碼可讀性更進一步增加了.</p><p><span style="font-weight:bold;">總結</span>validate()&quot; 方法除了可以幫忙我們判斷回傳值型態外,同時也會將回傳值從傳回的字串型態轉換成指定型態供我們處理</p><p>除了這些簡單值的字串轉換外,在 TurboGears 中做 email 地址確認時, 甚至還能選擇確認 email 主機是否真正存在喔;)</p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一分鐘 TurboGears - 簡介</title>
      <link href="/2006/02/28/%E4%B8%80%E5%88%86%E9%90%98-TurboGears-%E7%B0%A1%E4%BB%8B/"/>
      <url>/2006/02/28/%E4%B8%80%E5%88%86%E9%90%98-TurboGears-%E7%B0%A1%E4%BB%8B/</url>
      <content type="html"><![CDATA[<p>TurboGears (超速齒輪)是個 python 風格(pythonic) 的網頁應用程式設計開發集成框架. 透過巧妙集成了許多 python 語言下的網頁程式相關開發工具, 提供了網頁程式開發者強大的支援.</p><p>TurboGears 利用 CherryPy(網頁控制框架), Kid(樣板系統), Mochikit(Javascript 函式庫), SQLObject(資料庫物件模型)這幾個套件為主體, 朝著簡單易用又靈活的方向, 做到快速網頁應用程式開發的功能.</p><p>組成 TurboGears 的齒輪們都是開發有年的成熟套件, 在主要功能的穩定性上可以信任, 而且 TurboGears 還可搭配其他的 ORM 系統如SQLAlchemy, 其他的模板系統如 cheetah, Paste, Stan等, 延伸性極高.</p><p>使用 TurboGears 可以順暢地利用 python 語言, 以簡單, 直覺, 易讀的方式來控制網站程式的運作(Business logic), 產生表單物件, 檢驗表單內容, 並使用視覺化的模板系統來編輯動態網站程式的外觀, 或運用AJAX來製作新一代的網頁應用程式.在多語言支援上, TurboGears 提供網頁介面的 il8n 翻譯協助工具, 讓網站多語言支援變得不再困難; 在牽涉到資料庫的進階設計中, TurboGears 提供 DataController 來達成自動生成對應資料庫欄位的網頁編輯介面 CRUD/scanfold 功能. 提供網頁介面的&quot;資料表設計師(Database Designer)“工具, 可以視覺化地設計資料組織方式; 提供網頁介面的資料表管理工具”(CatWalk)&quot;, 管理後端的資料模型</p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一分鐘 TurboGears - 處理表單參數 (form handler) 講解</title>
      <link href="/2006/02/28/%E4%B8%80%E5%88%86%E9%90%98-TurboGears-%E8%99%95%E7%90%86%E8%A1%A8%E5%96%AE%E5%8F%83%E6%95%B8-form-handler-%E8%AC%9B%E8%A7%A3/"/>
      <url>/2006/02/28/%E4%B8%80%E5%88%86%E9%90%98-TurboGears-%E8%99%95%E7%90%86%E8%A1%A8%E5%96%AE%E5%8F%83%E6%95%B8-form-handler-%E8%AC%9B%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p><span style="font-weight:bold;">1.傳送表單</span>    5         &lt;form name=“add” method=“post” action=&quot;/calcit&quot;&gt;</p><p>表示名稱為&quot;add&quot;的表單, 使用&quot;post&quot;的方式, 傳送到&quot;/calcit&quot;連結做處理.</p><p><span style="font-weight:bold;">2. 使用樣板</span>4         template = “”“5         &lt;form &gt;…8         &lt;/form&gt;9         “””</p><p>在 TurboGears 中, 除了可以直接在程式中傳回網頁連結外, 同樣地也可以直接在程式中傳回整個頁面的樣板,</p><p><span style="font-weight:bold;">3. 樣版中嵌入傳回值</span>3 @expose(inputform =“<span style="font-weight:bold;">add</span>”)…6         &lt;input name=“A” type=“text” value=&quot;%s&quot;/&gt; + &lt;input name=“B” type=“text” value=&quot;%s&quot;/&gt;7         &lt;input type=“submit” value=&quot;=&quot; /&gt; &lt;input name=“SUM” type=“text” value=&quot;%d&quot;/&gt;8         &lt;/form&gt;9         “”&quot;…11         return template%(A,B,SUM)</p><p>在 TurboGears 中, 寫出並&quot;@expose()“的方法/函數就對應到同名的網頁, 因此在頁面的樣版(即一串字串)中當然可以嵌入傳回值. 那麼若是在同一網頁中有一個以上表單時該如何處理這些傳回的參數呢? 在”@expose()&quot;方法中可以用 inputform 參數來指定要處理的傳入表單傳回的值需要注意型態問題(%d對應到數字, %s對應到字串,…etc).</p><p><span style="font-weight:bold;">3. 表單處理</span>3     def calcit(self,A=0,B=0, SUM=0):…11         return template%(A,B,SUM)</p><p>在 TurboGears 中以一致的方式處理使用&quot;post&quot;和&quot;get&quot;方法傳送到 TurboGears Server 的表單.我們可以從方法/函式(Method)的參數中取得這些表單傳回的值.本例子中因為使用同一個函數來顯示網頁與處理網頁傳回的參數 (A欄位, B欄位, 加總結果欄位), 第3行方法/函式取得的參數就是網頁傳回的參數, 第11行回傳的值則是用來在網頁上顯示結果. 你可以試試看如果將回傳的值去掉, 再看到表單欄位上值是不是永遠都是 0 呢 😃</p><p><span style="font-weight:bold;">4. 回傳值處理</span>3     def calcit(self,A=0,B=0, SUM=0):…10         SUM = (int(A)+int(B))</p><p>從表單接收所有預設回傳的值都會是字串格式(之後介紹到 validators() 方法可以在此改變回傳格式並確認格式正確性).</p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一分鐘 TurboGears - 處理表單參數 (form handler)</title>
      <link href="/2006/02/28/%E4%B8%80%E5%88%86%E9%90%98-TurboGears-%E8%99%95%E7%90%86%E8%A1%A8%E5%96%AE%E5%8F%83%E6%95%B8-form-handler/"/>
      <url>/2006/02/28/%E4%B8%80%E5%88%86%E9%90%98-TurboGears-%E8%99%95%E7%90%86%E8%A1%A8%E5%96%AE%E5%8F%83%E6%95%B8-form-handler/</url>
      <content type="html"><![CDATA[<p>在這一分鐘要介紹的是 TurboGears 表單處理的特性, 使用簡單的網頁加法器作例子 (嘿嘿…)試作的結果如下圖:<a href="http://photos1.blogger.com/blogger/1345/565/1600/form_result.gif" target="_blank" rel="noopener"><img src="http://photos1.blogger.com/blogger/1345/565/320/form_result.jpg" alt=""></a></p><p><span style="font-weight:bold;">第一步</span>假設您已經安裝好 TurboGears. 首先, 要建立一個 TurboGears 專案.打開命令行(Command Line or shell), 進入到要建立專案的主目錄. 在主目錄下輸入</p><p>$ tg-admin quickstart</p><p>輸入之後, 會有專案建立導引如下:</p><p>Enter project name:ProjNameEnter package name [ProjName]: ProjName</p><p>ProjName 是我們自己指定的專案名稱, 專案名稱可以有空格, 第二行是 package name, 也就是實際建立的目錄(資料夾)名稱, 目錄名稱中則不能有空格.</p><p>把準備工作做完後, 我們可以發現這個 tg-admin 命令還會跑出一大串訊息, 告訴我們已經複製好專案框架, 可以開始寫我們自己的程式了.</p><p><span style="font-weight:bold;">第二步</span>編輯 <a href="http://controllers.py" target="_blank" rel="noopener">controllers.py</a> 這個檔案 (檔案的路徑應該是ProjName/ProjName/controllers.py),我們將檔案內看到的框架自動生成的內容都先清除或註解掉後, 輸入如下一段程式碼:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 0 from turbogears import controllers,expose</span><br><span class="line"> 1 class Root(controllers.RootController):</span><br><span class="line"> 2     @expose(&lt;span style=&quot;font-weight:bold;&quot;&gt;inputform =&quot;add&quot;&lt;/span&gt;)</span><br><span class="line"> 3     def calcit(self,A=0,B=0, SUM=0):</span><br><span class="line"> 4         template = &quot;&quot;&quot;</span><br><span class="line"> 5         &amp;lt;form name=&amp;quot;&lt;span style=&quot;font-weight:bold;&quot;&gt;add&lt;/span&gt;&amp;quot; method=&amp;quot;post&amp;quot; action=&amp;quot;&lt;span style=&quot;font-weight:bold;&quot;&gt;/calcit&lt;/span&gt;&amp;quot;&amp;gt;</span><br><span class="line"> 6         &amp;lt;input name=&amp;quot;A&amp;quot; type=&amp;quot;text&amp;quot; value=&amp;quot;%s&amp;quot;/&amp;gt; + &amp;lt;input name=&amp;quot;B&amp;quot; type=&amp;quot;text&amp;quot; value=&amp;quot;%s&amp;quot;/&amp;gt;</span><br><span class="line"> 7         &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;=&amp;quot; /&amp;gt; &amp;lt;input name=&amp;quot;SUM&amp;quot; type=&amp;quot;text&amp;quot; value=&amp;quot;%d&amp;quot;/&amp;gt;</span><br><span class="line"> 8         &amp;lt;/form&amp;gt;</span><br><span class="line"> 9         &quot;&quot;&quot;</span><br><span class="line">10         SUM = (int(A)+int(B))</span><br><span class="line">11         return template%(A,B,SUM)</span><br></pre></td></tr></table></figure><p>第三步回到命令列, 在命令列上先進入剛剛建立的資料夾後, 輸入$ ./start-ProjName.py</p><p>在執行 ProjName/start-ProjName.py 後, 打開瀏覽器輸入 <a href="http://localhost:8000/calcit" target="_blank" rel="noopener">http://localhost:8000/calcit</a> 這個網址,可以看到三個欄位, 在前兩個欄位輸入數字, 按下&quot;=&quot;按鈕, 則第三欄位上會顯示出計算結果.</p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深入 TurboGears - 從模板生成網頁 (Templating)</title>
      <link href="/2006/02/28/%E6%B7%B1%E5%85%A5-TurboGears-%E5%BE%9E%E6%A8%A1%E6%9D%BF%E7%94%9F%E6%88%90%E7%B6%B2%E9%A0%81-Templating/"/>
      <url>/2006/02/28/%E6%B7%B1%E5%85%A5-TurboGears-%E5%BE%9E%E6%A8%A1%E6%9D%BF%E7%94%9F%E6%88%90%E7%B6%B2%E9%A0%81-Templating/</url>
      <content type="html"><![CDATA[<p>TurboGears 中可以使用從模板生成網頁 (Templating) 的方式,可以更好地將控制邏輯與操作介面分開,來達到程式碼與網頁分離的需求.讓程式與網頁更易於維護.</p><p>使用 TurboGears 中的預設模板, 可以用所見即所得(WYSIWYG)網頁編輯器來編輯網頁外觀.並在回傳時用字典(dict)形式傳回變數, 降低程式碼與網頁之間的直接關聯性.</p><p>讓我們用模板功能取代將網頁用字串存在 controllers 中的方式:</p><p><span style="font-weight:bold;">1.建立控制邏輯(Add Logic)</span></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 from turbogears import controllers</span><br><span class="line">1 from turbogears import expose</span><br><span class="line">2 class Root(controllers.RootController):</span><br><span class="line">3    @expose(template=&quot;.templates.&lt;span style=&quot;font-style:italic;&quot;&gt;filename&lt;/span&gt;&quot;)</span><br><span class="line">4    def &lt;span style=&quot;font-style:italic;&quot;&gt;webpage&lt;/span&gt;(self):</span><br><span class="line">5        return dict()</span><br></pre></td></tr></table></figure><p>透過在 @expose()方法中加入 template=&quot;.templates.<span style="font-style:italic;">filename</span>&quot;宣告來指定要使用的模板名稱.</p><p>return 型態必須是字典型態. 裡面傳回的內容則可以動態被填入模板中</p><p><span style="font-weight:bold;">2.建立模板</span>我們建立&quot;<span style="font-style:italic;">filename</span>.kid&quot;的模板.模板名稱要跟controllers中@expose(template=&quot;.templates.<span style="font-style:italic;">filename</span>&quot;)的filename相符</p><p>3.模板宣告</p><p>模板要使用XHTML格式來撰寫.</p><p>從 HTML 轉換到 XHTML 的主要差別在於 XHTML 對網頁語法有較嚴格規定</p><ul><li><p>在 html 標籤內加上 &lt;html xmlns:py=“<a href="http://purl.org/kid/ns#" target="_blank" rel="noopener">http://purl.org/kid/ns#</a>”/&gt; 宣告, 表示這是一個TurboGears 的模板, 在執行的時候 TurboGears 才能正確地將自行設定的變數替換成適當的值</p></li><li><p>所有的標籤要對稱, 單一的標籤要以/作結尾. 例如 &lt;br&gt; 變成 &lt;br/&gt;, &lt;input&gt; 變成 &lt;input/&gt;</p></li></ul><p><span style="font-weight:bold;">結論</span>前幾分鐘裡的範例都是在 Controller 中將網頁用一個&quot;template&quot;字串來表示, 直接將網頁內容存在 python 程式裡.然後用傳回值(return) 的方式將&quot;template&quot;字串轉換成網頁顯示出來.用這種方法寫網頁程式, 好處是我們只需要將網頁程式當作一般程式來處理就行了, 不需要了解太多複雜的動態網頁技巧, 利用這樣的方法, 我們需要仔細處理插入變數的類別, 並在回傳時注意變數的安排順序, 好正確地將字串中的變數替換成我們期望的樣子.我們很快地就發現這樣將網頁內容嵌在程式碼裡的寫作方式, 隨著漸漸增加的功能方法, 與要求更複雜的內容呈現時, 程式碼就變得越來越難以維護.</p><p>我們應該要擁有方便的工具, 可以用任意順序傳回我們想要顯示的內容, 並在實際的網頁上重複運用這些資訊. 最好還可以用一般的所見即所得(WYSIWYG)網頁編輯器來編輯網頁外觀,</p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一分鐘 TurboGears - 產生表格 (DataGrid) 講解</title>
      <link href="/2006/02/22/%E4%B8%80%E5%88%86%E9%90%98-TurboGears-%E7%94%A2%E7%94%9F%E8%A1%A8%E6%A0%BC-DataGrid-%E8%AC%9B%E8%A7%A3/"/>
      <url>/2006/02/22/%E4%B8%80%E5%88%86%E9%90%98-TurboGears-%E7%94%A2%E7%94%9F%E8%A1%A8%E6%A0%BC-DataGrid-%E8%AC%9B%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>表格是非常通用的網頁元素, 可以將資料用有條理的方式來表示.</p><p><span style="font-weight:bold;">1.定義模型物件 (define Model Object)</span></p><p>6   class TeamStatus:7      def <strong>init</strong>(self, name, win, draw, lose):8         self.team_name = name9         self.total = win + draw + lose10        self.win = win…</p><p>一個有條理的表格, 通常都具有一定的資料內容格式, 在 python 程式語言中, 我們可以使用一個類別(class)的 &quot;<strong>init</strong>&quot;方法來定義資料內容格式, 以 self.fieldname 來表示欄位內容.以方法參數來傳回預設值或是處理參數. 如果您是 c 語言使用者, 也可以將這種資料內容格式設定理解成 struct 宣告, 只是使用類別來定義資料內容格式能作更多事情.如本例中定義一個 TeamStatus類別來儲存球隊名稱, 已比賽場數(total), 勝(win), 平(fair), 負(lose)場數, 已比賽場數(total)可以在類別內直接由其他三個參數加總而得.</p><span style="font-weight:bold;">2\. 填入資料內容</span>teams =[TeamStatus('Arsenal', 30,5,3),TeamStatus('chelsea', 35,2,1)]<p>新增兩筆資料 &quot; Arsenal&quot;,“chelsea”</p><p><span style="font-weight:bold;">3. 產生表單from turbogears.widgets import DataGrid</span>status_form = DataGrid(fields = […])return status_form.render(teams)</p><p>呼叫 DataGrid 方法產生表單</p><p><span style="font-weight:bold;">4. 加入表單標題</span>17         status_form = DataGrid(fields = [18              (‘Team’,‘team_name’),19              (‘Play’,‘total’),20              (‘Win’,‘win’),21              (‘Draw’,‘draw’),22              (‘Lose’,‘lose’),23        ])</p><p>可以在 DataGrid 方法中定義 fields 參數來自訂表單標題, fields 參數內容是一個列表, 包含了表單各欄位的名稱和標題.格式是在列表(list) 中使用 tuple (欄位的標題,欄位的名稱) 形式來表示,前面是自訂名稱, 後面是資料欄位名稱,</p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一分鐘 TurboGears - 產生表格 (DataGrid)</title>
      <link href="/2006/02/21/%E4%B8%80%E5%88%86%E9%90%98-TurboGears-%E7%94%A2%E7%94%9F%E8%A1%A8%E6%A0%BC-DataGrid/"/>
      <url>/2006/02/21/%E4%B8%80%E5%88%86%E9%90%98-TurboGears-%E7%94%A2%E7%94%9F%E8%A1%A8%E6%A0%BC-DataGrid/</url>
      <content type="html"><![CDATA[<p>表格是最常用來呈現多筆資料的方式, TurboGears 中提供 DataGrid 方法來自動產生表格.本例以從資料表中產生簡單的足球聯賽積分(勝差)表作為範例.</p><p><span style="font-weight:bold;">第一步</span>假設您已經安裝好 TurboGears. 首先, 要建立一個 TurboGears 專案.打開命令行(Command Line or shell), 進入到要建立專案的主目錄. 在主目錄下輸入</p><p>$ tg-admin quickstart</p><p>輸入之後, 會有專案建立導引如下:</p><p>Enter project name:ProjNameEnter package name [ProjName]: ProjName</p><p>ProjName 是我們自己指定的專案名稱, 專案名稱可以有空格, 第二行是 package name, 也就是實際建立的目錄(資料夾)名稱, 目錄名稱中則不能有空格.</p><p>把準備工作做完後, 我們可以發現這個 tg-admin 命令還會跑出一大串訊息, 告訴我們已經複製好專案框架, 可以開始寫我們自己的程式了.</p><p><span style="font-weight:bold;">第二步</span>編輯 <a href="http://controllers.py" target="_blank" rel="noopener">controllers.py</a> 這個檔案 (檔案的路徑應該是ProjName/ProjName/controllers.py),我們將檔案內看到的框架自動生成的內容都先清除或註解掉後, 輸入如下一段程式碼:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0  from turbogears import controllers</span><br><span class="line">0  from turbogears import expose</span><br><span class="line">1  from turbogears.widgets import DataGrid</span><br><span class="line">2</span><br><span class="line">3  global teams </span><br><span class="line">4  teams =[TeamStatus(&apos;Arsenal&apos;, 30,5,3),TeamStatus(&apos;chelsea&apos;, 35,2,1)]</span><br><span class="line">5 </span><br><span class="line">6   class TeamStatus:</span><br><span class="line">7      def &lt;span style=&quot;font-weight:bold;&quot;&gt;__init__&lt;/span&gt;(self, name, win, draw, lose):</span><br><span class="line">8         self.team_name = name</span><br><span class="line">9         self.total = win + draw + lose</span><br><span class="line">10        self.win = win</span><br><span class="line">11        self.draw = draw</span><br><span class="line">12        self.lose = lose</span><br><span class="line">13</span><br><span class="line">14  class Root(controllers.RootController):</span><br><span class="line">15     @expose()</span><br><span class="line">16     def status(self):</span><br><span class="line">17         status_form = &lt;span style=&quot;font-weight:bold;&quot;&gt;DataGrid&lt;/span&gt;(&lt;span style=&quot;font-weight:bold;&quot;&gt;fields&lt;/span&gt; = [</span><br><span class="line">18              (&apos;Team&apos;,&apos;team_name&apos;),</span><br><span class="line">19              (&apos;Play&apos;,&apos;total&apos;),</span><br><span class="line">20              (&apos;Win&apos;,&apos;win&apos;),</span><br><span class="line">21              (&apos;Draw&apos;,&apos;draw&apos;),</span><br><span class="line">22              (&apos;Lose&apos;,&apos;lose&apos;)&lt;span style=&quot;font-weight:bold;&quot;&gt;,&lt;/span&gt;</span><br><span class="line">23        ])</span><br><span class="line">24        return status_form.&lt;span style=&quot;font-weight:bold;&quot;&gt;render&lt;/span&gt;(teams)</span><br></pre></td></tr></table></figure><p><span style="font-weight:bold;">第三步</span>回到命令列, 在命令列上先進入剛剛建立的資料夾後, 輸入$ ./start-ProjName.py</p><p>在執行 ProjName/start-ProjName.py 後, 打開瀏覽器輸入 <a href="http://localhost:8000/status" target="_blank" rel="noopener">http://localhost:8000/status</a> 這個網址,可以看到如下表結果.</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> Team   Play   Win   Draw   Lose     </span><br><span class="line">Arsenal  38    30     5      3</span><br><span class="line">chelsea  38    35     2      1</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>程序維護</title>
      <link href="/2006/02/17/%E7%A8%8B%E5%BA%8F%E7%B6%AD%E8%AD%B7/"/>
      <url>/2006/02/17/%E7%A8%8B%E5%BA%8F%E7%B6%AD%E8%AD%B7/</url>
      <content type="html"><![CDATA[<blockquote><p>程序維護是不同於程序開發的要想維護一個程序，就要把程序看作是一棵漸漸成長的植物，拔苗助長是毫無益處的。一個程序必須被小心地滋養。程序員在對程序進行改動之前，必須對每一個邏輯關係非常熟悉，必須對程序的意圖有很深刻的理解力。這種理解力不是在一夜之間就可以得來的，需要長時間的積累。-<a href="http://wiki.woodpecker.org.cn/moin/ZenOfProgramming" target="_blank" rel="noopener">編程之禪</a></p></blockquote><p>編程之禪實在是蠻唬人的文章, 不過其中也有些的內容令人有所感觸</p><blockquote><p>我編程三日，兩耳不聞人聲，只有硬盤在歌唱。一台沒有靈魂的機器，人們說，但它的靈魂是同事們的汗水，在它裡面有我們多年的生命，</p><p>…</p><p>我聽見了歎息和歡笑的回聲，在這間黑洞洞的辦公室裡，終端機閃耀著光芒，就像星星一樣。</p></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title>一分鐘 TurboGears - 產生表單(Widgets) 草稿</title>
      <link href="/2006/02/15/%E4%B8%80%E5%88%86%E9%90%98-TurboGears-%E7%94%A2%E7%94%9F%E8%A1%A8%E5%96%AE-Widgets-%E8%8D%89%E7%A8%BF/"/>
      <url>/2006/02/15/%E4%B8%80%E5%88%86%E9%90%98-TurboGears-%E7%94%A2%E7%94%9F%E8%A1%A8%E5%96%AE-Widgets-%E8%8D%89%E7%A8%BF/</url>
      <content type="html"><![CDATA[<p>這個例子可以在上個例子產生的表格後面再加上一個增加資料的表單連結,</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from turbogears import widgets</span><br><span class="line">....</span><br><span class="line">    @expose()</span><br><span class="line">    def status(self):</span><br><span class="line">        &lt;span style=&quot;font-weight:bold;&quot;&gt;template = &quot;&quot;&quot;&amp;lt;a href=&quot;%s&quot;&amp;gt;Add Team&amp;lt;/a&amp;gt;&quot;&quot;&quot;%url(&quot;/enterstatus&quot;)&lt;/span&gt;</span><br><span class="line">        status_form = DataGrid(fields = [</span><br><span class="line">            (&apos;Date&apos;, &apos;datet&apos;),</span><br><span class="line">            (&apos;Cost&apos;, &apos;value&apos;),</span><br><span class="line">            (&apos;Plan&apos;, &apos;planned&apos;),</span><br><span class="line">            (&apos;Good&apos;,&apos;proper&apos;),</span><br><span class="line">            (&apos;Category&apos;,&apos;category&apos;),</span><br><span class="line">        ]) </span><br><span class="line">        return status_form.render(teams),&lt;span style=&quot;font-weight:bold;&quot;&gt;template&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    @expose()</span><br><span class="line">    def enterstatus(self):</span><br><span class="line">        status_form = &lt;span style=&quot;font-weight:bold;&quot;&gt;widgets.TableForm&lt;/span&gt;(</span><br><span class="line">            &lt;span style=&quot;font-weight:bold;&quot;&gt;fields=[widgets.Label&lt;/span&gt;(name=&quot;Add Status&quot;),</span><br><span class="line">                     &lt;span style=&quot;font-weight:bold;&quot;&gt;widgets.TextField&lt;/span&gt;(name=&quot;name&quot;,label=&quot;Team&quot;),</span><br><span class="line">                     widgets.TextField(name=&quot;win&quot;,label=&quot;Win&quot;),</span><br><span class="line">                     widgets.TextField(name=&quot;draw&quot;,label=&quot;Draw&quot;),</span><br><span class="line">                     widgets.TextField(name=&quot;lose&quot;,label=&quot;Lose&quot;)</span><br><span class="line">                     ],submit_text=&quot;Append&quot;)</span><br><span class="line">        return &lt;span style=&quot;font-weight:bold;&quot;&gt;status_form.render(action=&quot;addteam&quot;)&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">    @expose()</span><br><span class="line">    def addteam(self, &lt;span style=&quot;font-weight:bold;&quot;&gt;name, win, draw, lose&lt;/span&gt;):</span><br><span class="line">        teams.append(TeamStatus(name, &lt;span style=&quot;font-weight:bold;&quot;&gt;int&lt;/span&gt;(win),&lt;span style=&quot;font-weight:bold;&quot;&gt;int&lt;/span&gt;(draw),&lt;span style=&quot;font-weight:bold;&quot;&gt;int&lt;/span&gt;(lose)))</span><br><span class="line">        raise redirect(url(&apos;/status&apos;))</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>什麼是 Selenium?</title>
      <link href="/2006/02/15/%E4%BB%80%E9%BA%BC%E6%98%AF-Selenium/"/>
      <url>/2006/02/15/%E4%BB%80%E9%BA%BC%E6%98%AF-Selenium/</url>
      <content type="html"><![CDATA[<blockquote><p>Selenium is a test tool for web applications. Selenium tests run directly in a browser, just as real users do</p></blockquote><p><a href="http://www.openqa.org/selenium/" target="_blank" rel="noopener">Selenium</a> 是網頁程式測試工具, 可以跨平台跨瀏覽器模擬各種使用者可能的操作.主要的兩個功能是:</p><ul><li>瀏覽器相容性測試 (Browser compatability testing)</li><li>系統功能測試 (System functional testing)</li></ul><p>Selenium 在內頁框(iframe)中, 使用 JavaScript 自動化引擎來模擬使用者操作網頁的動作,可以安裝 <a href="http://www.openqa.org/selenium-ide/" target="_blank" rel="noopener">IDE</a> (firefox 插件)來使用selenium,或是在 TurboGears 中也可以使用 Selenium ,看看 <a href="http://www.checkandshare.com/blog/?p=36" target="_blank" rel="noopener">Selenium4TurboGears</a> 的介紹影片吧</p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>關於 一分鐘 TurboGears</title>
      <link href="/2006/02/14/%E9%97%9C%E6%96%BC-%E4%B8%80%E5%88%86%E9%90%98-TurboGears/"/>
      <url>/2006/02/14/%E9%97%9C%E6%96%BC-%E4%B8%80%E5%88%86%E9%90%98-TurboGears/</url>
      <content type="html"><![CDATA[<p>最近生活中都是在寫 Code, 鑽研 boa web server 處理的流程,打開 Dreamweaver 也越來越少使用 Design View,感覺自己越來越有軟體工程師的樣子.</p><p>這陣子寫的 &quot;一分鐘 TurboGears&quot;系列, 前數篇原本是在春節期間用英文寫成的,後來才決定先用最熟悉的中文來寫.</p><p>現在的網頁框架幾乎全部都套用 MVC 模式, 將資料模型(Model), 展示頁面(View,Template)分離, 以控制邏輯(Control logic)來溝通兩者以呈現出設計者的思想. 這樣的方式讓架構跟維護都變得更清楚更容易.</p><p>然而, 在寫動態網頁原型的階段時, 一定要一次就套用上 MVC 嗎?我們在網頁程式早期做的頁面, 有幾頁能不做大修改就能留用到最後呢?我們什麼時候能一次就將資料庫欄位, 互相間的關聯性一次設計好呢?起碼對我來講, 這兩個假設都是不可能的.</p><p>設計 MVC 程式一般理想的流程是:</p><p>設計資料庫欄位 -&gt; 產生資料庫 -&gt; 寫樣板 -&gt; 寫控制邏輯以填入資料 -&gt; 展示</p><p>但是在實做上</p><p>設計資料庫欄位 -&gt; 產生資料庫 -&gt; 寫樣板 -&gt; 寫控制邏輯-&gt;發現問題 -&gt; 修改資料庫欄位 -&gt; 重新產生資料庫</p><p>我在 Modeling 時發現, 在早期設計階段修改欄位的需求很頻繁, (常有些是 paper design 時沒想到的)碰到這樣的問題時, 除了 update 資料庫, 若與資料庫不相容時還得將資料庫刪除, 再重新產生.</p><p>設計 MVC 程式在第一關就遇到 Modeling 問題, 接下來當然很難繼續學下去.</p><p>有了方便的網頁程式框架, 與動態網頁幾乎可忽略的編譯與重新載入時間的特性, 我們當然可以用靈活 (agile) 編程的方式來寫我們的網頁程式.</p><p>我想最快速動態資料庫網頁 prototyping 的方法,也許就是像目前的範例這樣子先將 model, view 放一邊, 純寫程式碼先掌握正確的控制邏輯吧.</p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深入 TurboGears - 多頁面的階層式網頁 (Multiple pages - Hierarchy)</title>
      <link href="/2006/02/08/%E6%B7%B1%E5%85%A5-TurboGears-%E5%A4%9A%E9%A0%81%E9%9D%A2%E7%9A%84%E9%9A%8E%E5%B1%A4%E5%BC%8F%E7%B6%B2%E9%A0%81-Multiple-pages-Hierarchy/"/>
      <url>/2006/02/08/%E6%B7%B1%E5%85%A5-TurboGears-%E5%A4%9A%E9%A0%81%E9%9D%A2%E7%9A%84%E9%9A%8E%E5%B1%A4%E5%BC%8F%E7%B6%B2%E9%A0%81-Multiple-pages-Hierarchy/</url>
      <content type="html"><![CDATA[<p>TurboGears 網頁階層的有兩類, 第一類是用&quot;參數&quot;來對應網頁階層, 第二類是用物件樹結構(即類別實體)來對應網頁階層.</p><p><span style="font-weight:bold;">1. 參數對應結構</span></p><p>例如 <a href="http://localhost:8080/calcit/4/8" target="_blank" rel="noopener">http://localhost:8080/calcit/4/8</a>&quot;4&quot;, &quot;8&quot;會被分別當成 calcit 方法的第一,第二個參數傳入, 作用等同於<a href="http://localhost:8080/calcit?A=4&amp;B=5" target="_blank" rel="noopener">http://localhost:8080/calcit?A=4&amp;B=5</a></p><p>如果calcit 方法不存在, 即連結資料夾名稱沒有對應到方法的話, 就會被當成參數傳到最近物件的 default()中當作參數 (在本例為 TurboGears 預設建立的 Root 物件).</p><p><span style="font-weight:bold;">2. 物件樹結構</span></p><p>另外三種情形都是用物件樹結構的&quot;類別實體&quot;(instance) 來對應網頁階層. 可以實現超過一層的網頁. TurboGears 中會自動建立 Root 類別的實體, 我們可以建立其他的類別, 然後在 Root 類別中建立其他相關類別的實體.(恩…要把這個概念寫成文字真不容易) 範例如下:</p><p><span style="font-weight:bold;">CASE1: <a href="http://controllers.py" target="_blank" rel="noopener">controllers.py</a> 內</span>在 <a href="http://controllers.py" target="_blank" rel="noopener">controllers.py</a> 內編寫多個類別(class)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0  from turbogears import controllers,expose</span><br><span class="line">1</span><br><span class="line">2  class &lt;span style=&quot;font-weight:bold;&quot;&gt;Subfolder&lt;/span&gt;(controllers.RootController):</span><br><span class="line">3     @expose()</span><br><span class="line">4     def index(self):</span><br><span class="line">5         return &quot;I am B&quot;</span><br><span class="line">6     @expose()</span><br><span class="line">7     def C(self):</span><br><span class="line">8         return &quot;I am C&quot;</span><br><span class="line">9</span><br><span class="line">10 class Root(controllers.RootController):</span><br><span class="line">11    @expose()</span><br><span class="line">12    def index(self):</span><br><span class="line">13        return &quot;I am Root&quot;</span><br><span class="line">14    @expose()</span><br><span class="line">15    def A(self):</span><br><span class="line">16        return &quot;I am A&quot;</span><br><span class="line">17    &lt;span style=&quot;font-weight:bold;&quot;&gt;B = Subfolder()&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>我們在 2~8 行編寫了一個類別, 在 Root 類別內第 17 行建立該類別的實體, 最後我們會得到像下面的網頁階層樹</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Root</span><br><span class="line">/    A    B</span><br><span class="line">              C</span><br></pre></td></tr></table></figure><p>網頁 localhost/ 跟網頁 localhost/B 的文字是由各自類別的 index() 方法來處理.</p><p><span style="font-weight:bold;">CASE2: <a href="http://controllers.py" target="_blank" rel="noopener">controllers.py</a> 外 (同目錄):</span></p><p>將 Subfolder 類別存成 <a href="http://subfolder.py" target="_blank" rel="noopener">subfolder.py</a> , 保存在與 <a href="http://controllers.py" target="_blank" rel="noopener">controllers.py</a> 同目錄下. <a href="http://subfolder.py" target="_blank" rel="noopener">subfolder.py</a> 內容如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0  from turbogears import controllers,expose</span><br><span class="line">1</span><br><span class="line">2  class Subfolder(controllers.RootController):</span><br><span class="line">3     @expose()</span><br><span class="line">4     def index(self):</span><br><span class="line">5         return &quot;I am B&quot;</span><br><span class="line">6     @expose()</span><br><span class="line">7     def C(self):</span><br><span class="line">8         return &quot;I am C&quot;</span><br></pre></td></tr></table></figure><p>TurboGears 可以從 <a href="http://controllers.py" target="_blank" rel="noopener">controllers.py</a> 內調用同目錄下的其他類別</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from subfolder import Subfolder</span><br><span class="line">from turbogears import controllers,expose</span><br><span class="line">class Root(controllers.RootController):</span><br><span class="line">    @expose()</span><br><span class="line">    def index(self):</span><br><span class="line">        return &quot;Root&quot;</span><br><span class="line">    @expose()</span><br><span class="line">    def A(self):</span><br><span class="line">        return &quot;I am A&quot;</span><br><span class="line"></span><br><span class="line">    B = Subfolder()</span><br></pre></td></tr></table></figure><p>“from subfolder import Subfolder” 前面小寫的&quot;subfolder&quot;是檔名 (<a href="http://subfolder.py" target="_blank" rel="noopener">subfolder.py</a>), 後面的 Subfolder 是類別名</p><p>CASE3: 子目錄下 (子系統)</p><p>TurboGears 也可以從 <a href="http://controllers.py" target="_blank" rel="noopener">controllers.py</a> 內調用子目錄下的其他類別(待補)</p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一分鐘 TurboGears - 多頁面 (Multiple Pages) 講解</title>
      <link href="/2006/02/07/%E4%B8%80%E5%88%86%E9%90%98-TurboGears-%E5%A4%9A%E9%A0%81%E9%9D%A2-Multiple-Pages-%E8%AC%9B%E8%A7%A3/"/>
      <url>/2006/02/07/%E4%B8%80%E5%88%86%E9%90%98-TurboGears-%E5%A4%9A%E9%A0%81%E9%9D%A2-Multiple-Pages-%E8%AC%9B%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p><span style="font-weight:bold;">1.使用超連結 (Make a Hyper link)</span></p><p>return “”“Hello , &lt;a href=“tg”&gt;World!&lt;/a&gt;”&quot;&quot;</p><p>在 TurboGears 中你可以直接用 return 傳 html 程式碼到網頁頁面上, 因此在 TurboGears 中你完全可以不使用樣板(Template)來建構一個網站. 注意到這邊的 “return” 使用&quot;三重括號&quot;來框住要傳回的資料, 在 python 中使用&quot;三重括號&quot;框住的內容就如 c 語言中的 “/* */” 標籤一樣代表多行內容或註解, 裡面可以允許html語法中的一般括號&quot; &quot;存在, 因此我們不必為了回傳資料的正確性而將內容改寫成如 &lt;a href=“tg”&gt; 的形式.</p><p><span style="font-weight:bold;">2. 建立多個頁面 Make another pages</span>3   def index(self):7   def tg(self):</p><p>在範例中我們共建立了兩個函式, 這些函式前都加上了&quot;@expose()&quot;敘述, 表示都會被加入TurboGears 的網頁樹狀結構中.</p><p>要建立額外的網頁, 就在 “controllers” 類別下加入更多的方法即可.</p><p><span style="font-weight:bold;">3. url() 方法</span>8           return “… &lt;a href=%s&gt;…&lt;/a&gt;”&quot;&quot;%url(&quot;/home&quot;)當有多層網頁時, 使用 url() 方法/函式可以保證連結的正確性</p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一分鐘 TurboGears - 多頁面 (Multiple Pages)</title>
      <link href="/2006/02/07/%E4%B8%80%E5%88%86%E9%90%98-TurboGears-%E5%A4%9A%E9%A0%81%E9%9D%A2-Multiple-Pages/"/>
      <url>/2006/02/07/%E4%B8%80%E5%88%86%E9%90%98-TurboGears-%E5%A4%9A%E9%A0%81%E9%9D%A2-Multiple-Pages/</url>
      <content type="html"><![CDATA[<p>在上一篇裡, 我們學到的是如何快速在 TurboGears 弄出一個網站的首頁來.在這一分鐘裡我們要學的則是如何在 TurboGears 製作多個頁面的網站, 並讓網頁相互連結.</p><p><strong>第一步</strong>假設您已經安裝好 TurboGears. 首先, 要建立一個 TurboGears 專案.打開命令行(Command Line or shell), 進入到要建立專案的主目錄. 在主目錄下輸入</p><p>$ tg-admin quickstart</p><p>輸入之後, 會有專案建立導引如下:</p><p>Enter project name:ProjNameEnter package name [ProjName]: ProjName</p><p>ProjName 是我們自己指定的專案名稱, 專案名稱可以有空格, 第二行是 package name, 也就是實際建立的目錄(資料夾)名稱, 目錄名稱中則不能有空格.</p><p>把準備工作做完後, 我們可以發現這個 tg-admin 命令還會跑出一大串訊息, 告訴我們已經複製好專案框架, 可以開始寫我們自己的程式了.</p><p><strong>第二步</strong>編輯 <a href="http://controllers.py" target="_blank" rel="noopener">controllers.py</a> 這個檔案 (檔案的路徑應該是ProjName/ProjName/controllers.py),我們將檔案內看到的框架自動生成的內容都先清除或註解掉後, 輸入如下一段程式碼:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 from turbogears import &lt;span style=&quot;font-weight:bold;&quot;&gt;controllers,expose,url&lt;/span&gt;</span><br><span class="line">1 class Root(controllers.RootController):</span><br><span class="line">2         @expose()</span><br><span class="line">3         def index(self):</span><br><span class="line">4                 return &quot;&quot;&quot;Hello , &amp;lt;a href=&quot;tg&quot;&amp;gt;World!&amp;lt;/a&amp;gt;&quot;&quot;&quot;</span><br><span class="line">5 </span><br><span class="line">6         @expose()</span><br><span class="line">7         def tg(self):</span><br><span class="line">8                 return &quot;TurboGears World!&amp;lt;br/&amp;gt; &amp;lt;a href=%s&amp;gt;Home&amp;lt;/a&amp;gt;&quot;&quot;&quot;%&lt;span style=&quot;font-weight:bold;&quot;&gt;url&lt;/span&gt;(&quot;/home&quot;)</span><br></pre></td></tr></table></figure><p>恩, 看的出來這一分鐘的例子跟前一篇有很多一樣的地方了嗎?這個例子跟上一個例子一樣由&quot;import&quot;, “class”(Root), 跟 &quot;def&quot;三個部分構成.僅僅多加了一個tg()方法來作出另一個頁面.</p><p><strong>第三步</strong>回到命令列, 在命令列上先進入剛剛建立的資料夾後, 輸入$ ./start-ProjName.py</p><p>在執行 ProjName/start-ProjName.py 後, 打開瀏覽器輸入 <a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a> 這個網址,就可以看到首頁上跑出 “Hello World!” 字樣, 而且&quot;World!“為一個連結, 按下連結後會跳到&quot;<a href="http://localhost:8000/tg" target="_blank" rel="noopener">http://localhost:8000/tg</a>&quot;網頁, 並顯示&quot;TurboGears World!”</p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>一分鐘 TurboGears - Hello TurboGears 講解</title>
      <link href="/2006/02/04/%E4%B8%80%E5%88%86%E9%90%98-TurboGears-Hello-TurboGears-%E8%AC%9B%E8%A7%A3/"/>
      <url>/2006/02/04/%E4%B8%80%E5%88%86%E9%90%98-TurboGears-Hello-TurboGears-%E8%AC%9B%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p><span style="font-weight:bold;">1. 載入模組 (Import Modules)</span></p><pre><code>0 from turbogears import *</code></pre><p>這一行會載入所有 turbogears 下的模組, 我們可以透過只載入我們現在會用到的模組來節省記憶體from turbogears import controllersfrom turbogears import expose</p><span style="font-weight:bold;">2\. 定義主類別(Define Main Class)</span>    1 class Root(controllers.RootController):<p>在剛開始我們只要知道我們創建了一個能處理網頁要求的類別, 利用這個主要類別我們可以透過網頁來執行我們寫的程式</p><p><span style="font-weight:bold;">3. 定義主要方法/處理函式(Define Main Method)</span>3      def index(self):4          return “Hello World!”</p><p>index() 是個特殊的方法, 它的作用就像網頁上的 index.html 一樣, 它是在網站被訪問時, 若不指定特定頁面時預設會存取的頁面.</p><p><span style="font-weight:bold;">4.允許透過網頁處理 (Access your function from Browser)</span>2      @expose()</p><p>我們使用&quot;expose&quot;來指定哪些方法/函式可以透過網頁操作. 你可以把&quot;@expose()“當作一個確認符號, 在controllers這個程式方法列表中, 只有在方法/函式前用”@expose()&quot;指令指定過的方法/函式才能從網頁存取到.</p><p>實際上測試就是將 def index(self) 方法前的 @expose() 註解掉, 再次訪問我們卻會發現原先可以正常運作的&quot;Hello World&quot;頁面不見了! 再將 @expose() 加回來, 再次訪問我們發現&quot;Hello World&quot;頁面又可以正常訪問了.</p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Explore the Linux memory model</title>
      <link href="/2006/01/27/Explore-the-Linux-memory-model/"/>
      <url>/2006/01/27/Explore-the-Linux-memory-model/</url>
      <content type="html"><![CDATA[<p>From IBM<a href="http://www-128.ibm.com/developerworks/linux/library/l-memmod/?ca=dgr-lnxw01MemModel" target="_blank" rel="noopener">http://www-128.ibm.com/developerworks/linux/library/l-memmod/?ca=dgr-lnxw01MemModel</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>另一個 OMNeT++ 教學</title>
      <link href="/2006/01/13/%E5%8F%A6%E4%B8%80%E5%80%8B-OMNeT-%E6%95%99%E5%AD%B8/"/>
      <url>/2006/01/13/%E5%8F%A6%E4%B8%80%E5%80%8B-OMNeT-%E6%95%99%E5%AD%B8/</url>
      <content type="html"><![CDATA[<p><a href="http://www.ece.stevens-tech.edu/~ccomanic/ee_cpe345f.html" target="_blank" rel="noopener">http://www.ece.stevens-tech.edu/~ccomanic/ee_cpe345f.html</a></p><p>起碼有兩個學校使用 OMNeT++ 作教學工具了:)</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>IPv6 tunnel broker tool</title>
      <link href="/2006/01/12/IPv6-tunnel-broker-tool/"/>
      <url>/2006/01/12/IPv6-tunnel-broker-tool/</url>
      <content type="html"><![CDATA[<p><a href="http://carmen.cselt.it/ipv6/tools/ipv6tb/index.html" target="_blank" rel="noopener">http://carmen.cselt.it/ipv6/tools/ipv6tb/index.html</a></p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>[公告] 翻譯 Linux+IPv6 HOWTO 計畫暫停</title>
      <link href="/2006/01/10/%E5%85%AC%E5%91%8A-%E7%BF%BB%E8%AD%AF-Linux-IPv6-HOWTO-%E8%A8%88%E7%95%AB%E6%9A%AB%E5%81%9C/"/>
      <url>/2006/01/10/%E5%85%AC%E5%91%8A-%E7%BF%BB%E8%AD%AF-Linux-IPv6-HOWTO-%E8%A8%88%E7%95%AB%E6%9A%AB%E5%81%9C/</url>
      <content type="html"><![CDATA[<p>由於該文件更新過慢,許多未翻譯部分的內容已經偏舊(例如 site-local 已經被取消).主要內容也都翻譯完成, 因此尚未翻譯的其餘部分暫停翻譯.</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>TurboGears develop setup steps</title>
      <link href="/2006/01/10/TurboGears-develop-setup-steps/"/>
      <url>/2006/01/10/TurboGears-develop-setup-steps/</url>
      <content type="html"><![CDATA[<p>I get a idea of building a OMNeT++ NED and ini setting application via web interface.I’m consider to use new pthon web framework “TurboGears” to implement it.</p><p>Try instructions in <a href="http://www.turbogears.org/community/contributing.html" target="_blank" rel="noopener">Contributing to TurboGears</a></p><p>or Bill Woodward posted the TurboGears develop setup steps on <a href="http://groups.google.com.tw/group/turbogears" target="_blank" rel="noopener">google TurboGears group</a></p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nautilus6 IPv6 DEMO</title>
      <link href="/2005/10/06/Nautilus6-IPv6-DEMO/"/>
      <url>/2005/10/06/Nautilus6-IPv6-DEMO/</url>
      <content type="html"><![CDATA[<p>鸚鵡螺6</p><p>有 NEMO 的 DEMO 喔<a href="http://demo.nautilus6.org/" target="_blank" rel="noopener">http://demo.nautilus6.org/</a></p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>OMNeT++ 教學</title>
      <link href="/2005/10/05/OMNeT-%E6%95%99%E5%AD%B8/"/>
      <url>/2005/10/05/OMNeT-%E6%95%99%E5%AD%B8/</url>
      <content type="html"><![CDATA[<p>Investigation of the Internet’s Protocols via Simulation<a href="http://www.tkn.tu-berlin.de/curricula/SimPrak/#Course%20Outline" target="_blank" rel="noopener">http://www.tkn.tu-berlin.de/curricula/SimPrak/#Course Outline</a></p><p>OMNeT++ 與  prosim 模組的教學</p>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>排版更清楚的 RFC 收集庫: Zvon</title>
      <link href="/2005/09/16/%E6%8E%92%E7%89%88%E6%9B%B4%E6%B8%85%E6%A5%9A%E7%9A%84-RFC-%E6%94%B6%E9%9B%86%E5%BA%AB-Zvon/"/>
      <url>/2005/09/16/%E6%8E%92%E7%89%88%E6%9B%B4%E6%B8%85%E6%A5%9A%E7%9A%84-RFC-%E6%94%B6%E9%9B%86%E5%BA%AB-Zvon/</url>
      <content type="html"><![CDATA[<p>看 RFC 時最大的問題就是純文字格式並不適合電腦閱讀,<a href="http://www.zvon.org/tmRFC/RFC_share/Output/index.html" target="_blank" rel="noopener">Zvon</a> 重新整理了大多數的 RFC, 提供適合線上閱讀的 RFC 格式.我透過 Zvon來閱讀 RFC , 感覺確實輕鬆不少.</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Feel the IPv6</title>
      <link href="/2005/09/06/Feel-the-IPv6/"/>
      <url>/2005/09/06/Feel-the-IPv6/</url>
      <content type="html"><![CDATA[<p>我一直在找可以在家裡面使用 IPv6 網路的方法.</p><p>今天因為工作的關係, 接觸到了日本的<a href="http://start.feel6.jp/" target="_blank" rel="noopener">feel6</a>這個服務.免費註冊, 取得帳號後需先下載它所附的程式,附的程式裡面除了有撥接上網用的 PPPoE 等設定之外, 也會幫忙自動設定一個IPv6 Tunnel連線</p><p>因此以後在家要連上網路時只要直接用它附的程式在家一次就直接接上了 IP/IPv6 網路!</p><p>不過要會點日文才能通過前面重重註冊帳號的關卡啦,我是有好心人士在電話裡手把手教會的:D</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Debian packages for OMNeT++</title>
      <link href="/2005/08/30/Debian-packages-for-OMNeT/"/>
      <url>/2005/08/30/Debian-packages-for-OMNeT/</url>
      <content type="html"><![CDATA[<p>From Tom Parker:</p><p>They are available by adding the following lines to your /etc/apt/sources.list</p><p>deb <a href="http://tevp.net/debian/" target="_blank" rel="noopener">http://tevp.net/debian/</a> binary/deb-src <a href="http://tevp.net/debian/" target="_blank" rel="noopener">http://tevp.net/debian/</a> source/</p><p>and then running “apt-get update”, followed by “apt-get install omnetpp-static”.As the name suggests, the package only currently has static library versions ofOMNeT++ not the shared versions, but I will be expanding this to include sharedversions at a later date.</p>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>模擬工具-偶得</title>
      <link href="/2005/08/26/%E6%A8%A1%E6%93%AC%E5%B7%A5%E5%85%B7-%E5%81%B6%E5%BE%97/"/>
      <url>/2005/08/26/%E6%A8%A1%E6%93%AC%E5%B7%A5%E5%85%B7-%E5%81%B6%E5%BE%97/</url>
      <content type="html"><![CDATA[<p>模擬工具對研究來說，就是為了省事，省下實際設置多臺設備、無意間弄壞設備、從多臺設備取得測量數據等的麻煩。對剛接觸模擬的新手而言，再更深入探索或開發之前，模擬工具是否能提供需要的模擬模組、方便地配置、明顯可觀察的結果是大家最關切的事。</p><p>但是相對的，認真的模擬是沒有捷徑的。因為網路模擬的專業性高，目前沒有任何工具可以協助你判斷要完成某種模擬需要使用哪些模組、需要修改哪些地方。這些都有賴要作網路模擬的人抉擇：</p><ul><li>（先學）清楚相關網路設備運作模式，傳輸模式，（邊學）相關設定。</li><li>（必要）清楚待模擬的模型/要達成的模擬目標。（至少先備好原型）</li><li>(選擇) 選擇適當模擬工具 ()**  選擇適當模擬模組</li><li>對模擬結果做效能評估</li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>KAME SHISA How To</title>
      <link href="/2005/08/21/KAME-SHISA-How-To/"/>
      <url>/2005/08/21/KAME-SHISA-How-To/</url>
      <content type="html"><![CDATA[<p>FreeBSD MIPv6 Implimentation</p><p><a href="http://www.kame.net/newsletter/20050707/" target="_blank" rel="noopener">http://www.kame.net/newsletter/20050707/</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Just how big is IPv6? or where did all those addresses go?</title>
      <link href="/2005/08/09/Just-how-big-is-IPv6-or-where-did-all-those-addresses-go/"/>
      <url>/2005/08/09/Just-how-big-is-IPv6-or-where-did-all-those-addresses-go/</url>
      <content type="html"><![CDATA[<p>[Just how big is IPv6?</p><ul><li>or where did all those addresses go? ](<a href="http://ispcolumn.isoc.org/2005-07/ipv6size.html" target="_blank" rel="noopener">http://ispcolumn.isoc.org/2005-07/ipv6size.html</a>)</li></ul><p>An intresting and well-described article about IPv6 addressing.</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Home Automation</title>
      <link href="/2005/07/24/Home-Automation/"/>
      <url>/2005/07/24/Home-Automation/</url>
      <content type="html"><![CDATA[<p>自動化設定的家庭網路</p><p><a href="http://www.osgi.org/" target="_blank" rel="noopener">OSGi</a></p><p><a href="http://linuxha.sourceforge.net/" target="_blank" rel="noopener">Linux Home Automation</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>IBM: Writing a simple IPv6 program</title>
      <link href="/2005/07/24/IBM-Writing-a-simple-IPv6-program/"/>
      <url>/2005/07/24/IBM-Writing-a-simple-IPv6-program/</url>
      <content type="html"><![CDATA[<p><a href="http://www-106.ibm.com/developerworks/web/library/wa-ipv6.html" target="_blank" rel="noopener">IBM developerworks</a></p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>INET TCP Tutorial</title>
      <link href="/2005/07/20/INET-TCP-Tutorial/"/>
      <url>/2005/07/20/INET-TCP-Tutorial/</url>
      <content type="html"><![CDATA[<p>From Andras, You can find the OMNeT++ INET TCP tutorial here:<a href="http://www.omnetpp.org/doc/INET/tcp-tutorial/" target="_blank" rel="noopener">http://www.omnetpp.org/doc<wbr>/INET/tcp-tutorial/</a></p><p>The tutorial will sometime be completed with advice on configuring TCP andwriting applications for it.</p>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MIPL</title>
      <link href="/2005/07/13/MIPL/"/>
      <url>/2005/07/13/MIPL/</url>
      <content type="html"><![CDATA[<p><a href="http://www.mobile-ipv6.org/" target="_blank" rel="noopener">http://www.mobile-ipv6.org/</a>MIPL Mobile IPv6 for Linux is an implementation of Mobility support in IPv6. Mobility support allows a mobile device to be tracked as it migrates between networks or even ISPs, allowing packets to be forwarded to where the device is currently located.</p><pre style="margin: 0em;">Download the stuff at these locations:[mipv6-2.0-rc2.tar.gz](http://mobile-ipv6.org/software/download/mipv6-2.0-rc2.tar.gz) (Latest **USER SPACE** part)[mipv6-2.0-rc2-linux-2.6.8.1.patch.gz](http://mobile-ipv6.org/software/download/mipv6-2.0-rc2-linux-2.6.8.1.patch.gz) (Latest **KERNEL** part)Remember, you need both of those. First is the user space daemon, and the other is a patch to enable MIPv6 in the kernel. INSTALL and INSTALL.kernel should get you started.<a name="nemo">The NEPL NEMO Platform for Linux is a NEMO implementation based on the MIPL 2 architecture.</a>It aims to be fully RFC 3963 compliant supporting both implicit and explicit mode signalling.Version 0.1 only supports static routing between the HA and MR.[nemo-0.1.tar.gz](http://www.mobile-ipv6.org/software/download/nemo-0.1.tar.gz) (NEMO Basic Support Protocol (RFC 3963) and MIPv6 userspace daemon, works with the patched 2.6 kernel)[radvd-0.7.2-NEMO.tar.gz](http://www.mobile-ipv6.org/software/download/radvd-0.7.2-NEMO.tar.gz) (Modified router advertisement daemon needed for proper operation of a NEMO Home Agent)</pre>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Modeling Work</title>
      <link href="/2005/07/13/Modeling-Work/"/>
      <url>/2005/07/13/Modeling-Work/</url>
      <content type="html"><![CDATA[<p>Any serious modeling work is difficult. My experience is that it needs a couple of month’s full-time work to reach a stage that you can have sufficient understanding for creating useful models for research work.</p><ul><li>Ahmet Sekercioglu</li></ul><p>這段是 OMNeT++ maillist 裡 Ahmet Sekercioglu 回答某個妄想幾天內有人手把手教他完成模擬的某個白爛博士候選人的話</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>IPv6 IPsec Adoption</title>
      <link href="/2005/07/07/IPv6-IPsec-Adoption/"/>
      <url>/2005/07/07/IPv6-IPsec-Adoption/</url>
      <content type="html"><![CDATA[<p><a href="http://www.ipv6style.jp/en/tech/20050704/index.shtml" target="_blank" rel="noopener">Rediscovering IPv6: Why Is IPv6 IPsec Not Widely Used?</a>這篇在談為什麼 IPSec 推不起來</p><blockquote><p>IPsec is still not used for purposes other than connecting to organization network, or making connections among corporate sites. In other words, IPsec is not used for P2P communications, which is one of the main motives for using IPv6.</p></blockquote><p><span class="title">Technical: IPsec: a basis for IPv6 security<a href="http://www.ipv6style.jp/en/tech/20040707/index.shtml" target="_blank" rel="noopener">Part1</a><a href="http://www.ipv6style.jp/en/tech/20040722/index.shtml" target="_blank" rel="noopener">Part2</a></span></p> <ul><li><span class="title">容易使用的產品才有銷路 </span></li><li><span class="title">與其加入所有功能，不如專注作好一件事</span></li></ul>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Better Than Nothing Security (BTNS)</title>
      <link href="/2005/07/06/Better-Than-Nothing-Security-BTNS/"/>
      <url>/2005/07/06/Better-Than-Nothing-Security-BTNS/</url>
      <content type="html"><![CDATA[<p><a href="http://www.ietf.org/html.charters/btns-charter.html" target="_blank" rel="noopener">http://www.ietf.org/html.charters/btns-charter.html</a></p><p>題目定的非常有趣的 Working Group, 由於IPSec 跟 IKE 實在是太繁瑣以致於並未被廣泛採用,IETF 抱著&quot;有點安全性總比完全沒有好&quot;的宗旨新加入了此 Working Group 😄</p><p>目前只有一篇 problem statement draft, 不過感覺敢提這個 Topic 真的是個蠻實際的 Group</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Congress To Study Slow Pace Of Migration To IPv6</title>
      <link href="/2005/07/01/Congress-To-Study-Slow-Pace-Of-Migration-To-IPv6/"/>
      <url>/2005/07/01/Congress-To-Study-Slow-Pace-Of-Migration-To-IPv6/</url>
      <content type="html"><![CDATA[<p><a href="http://informationweek.com/story/showArticle.jhtml?articleID=164903921" target="_blank" rel="noopener">Congress To Study Slow Pace Of Migration To IPv6</a></p><p>現已知的一些進一步推廣 IPv6 所遇上的問題.</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Get ready for IPv6: Five security issues to consider</title>
      <link href="/2005/07/01/Get-ready-for-IPv6-Five-security-issues-to-consider/"/>
      <url>/2005/07/01/Get-ready-for-IPv6-Five-security-issues-to-consider/</url>
      <content type="html"><![CDATA[<p><a href="http://searchsecurity.techtarget.com/tip/1,289483,sid14_gci1101218,00.html" target="_blank" rel="noopener">Get ready for IPv6: Five security issues to consider</a></p><p>security其實是無處不在的, 許多技術領域都存在著 security 問題,只有底層的支撐技術到一定階段才能夠考慮安全因素, 而越面向大眾的東西就越多非安全因素</p><p>IPv6 雖號稱更安全, 但仍有不少引入的安全問題可以談,多數 IPv6 Security issue 都是因認識不足, 或是來自位址轉換/隧道技術 (Tunneling) 引入衍伸的問題…</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>The TCP/IP Guide</title>
      <link href="/2005/06/21/The-TCP-IP-Guide/"/>
      <url>/2005/06/21/The-TCP-IP-Guide/</url>
      <content type="html"><![CDATA[<p>The TCP/IP Guide<a href="http://www.tcpipguide.com/free/t_toc.htm" target="_blank" rel="noopener">http://www.tcpipguide.com/free/t_toc.htm</a>我所看過最全的免費線上版網路書, 難能可貴的是可以用短短幾頁將每個主題說明清楚, 萬分拜服</p><p>以下是IPv6 相關章節**<a href="http://www.tcpipguide.com/free/t_InternetProtocolVersion6IPv6IPNextGenerationIPng.htm" target="_blank" rel="noopener">Internet Protocol Version 6 (IPv6) / IP Next Generation (IPng)</a><strong><strong><a href="http://www.tcpipguide.com/free/t_IPSecurityIPSecProtocols.htm" target="_blank" rel="noopener">IP Security (IPSec) Protocols</a></strong></strong><a href="http://www.tcpipguide.com/free/t_InternetProtocolMobilitySupportMobileIP.htm" target="_blank" rel="noopener"></a>****<a href="http://www.tcpipguide.com/free/t_InternetControlMessageProtocolICMPICMPv4andICMPv6.htm" target="_blank" rel="noopener">Internet Control Message Protocol (ICMP/ICMPv4 and ICMPv6)</a>****<a href="http://www.tcpipguide.com/free/t_TCPIPIPv6NeighborDiscoveryProtocolND.htm" target="_blank" rel="noopener">TCP/IP IPv6 Neighbor Discovery Protocol (ND)</a>****<a href="http://www.tcpipguide.com/free/t_TCPIPRoutingProtocolsGatewayProtocols.htm" target="_blank" rel="noopener">TCP/IP Routing Protocols (Gateway Protocols)</a></p><p>**</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IPv6 Autoconfiguration</title>
      <link href="/2005/06/21/IPv6-Autoconfiguration/"/>
      <url>/2005/06/21/IPv6-Autoconfiguration/</url>
      <content type="html"><![CDATA[<p><a href="http://www.cisco.com/en/US/about/ac123/ac147/archived_issues/ipj_7-2/ipv6_autoconfig.html" target="_blank" rel="noopener">IPv6 Autoconfiguration</a></p><p>Good introduction article by <span class="contentheader"><em>François Donzé, HP</em></span></p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Solve problems</title>
      <link href="/2005/06/21/Solve-problems/"/>
      <url>/2005/06/21/Solve-problems/</url>
      <content type="html"><![CDATA[<blockquote><p>We approach the problem the same way network systems, themselves, are approached. We break the problem down into smaller pieces, and try to solve each piece individually. When we have solved each of the smaller pieces, we recombine them, and see what needs to be adjusted to make it all work together properly.– <span class="contentheader"><em>Russ White, <a href="http://www.cisco.com/en/US/about/ac123/ac147/archived_issues/ipj_7-1/high_availability_routing.html" target="_blank" rel="noopener">High Availability in Routing</a></em></span>Not only routing problems, but also others (i.e. Cross Layer problems)</p></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title>KNOPPIX/IPv6</title>
      <link href="/2005/06/13/KNOPPIX-IPv6/"/>
      <url>/2005/06/13/KNOPPIX-IPv6/</url>
      <content type="html"><![CDATA[<p><a href="http://www.alpha.co.jp/knoppix/ipv6/" target="_blank" rel="noopener">http://www.alpha.co.jp/knoppix/ipv6/</a></p><p>提供 6to4, DHCPv6 等接續方法的 knoppix 套件</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Address Autoconfiguration in IPv6</title>
      <link href="/2005/06/13/Address-Autoconfiguration-in-IPv6/"/>
      <url>/2005/06/13/Address-Autoconfiguration-in-IPv6/</url>
      <content type="html"><![CDATA[<p><a href="http://www.ipv6style.jp/en/tech/20030120/index.shtml" target="_blank" rel="noopener">Address Autoconfiguration in IPv6</a></p><p><span class="title">IPv6 Plug &amp; Play with Prefix Delegation</span><a href="http://www.ipv6style.jp/en/tech/20031128/index.shtml" target="_blank" rel="noopener">Part 1 How Prefix Delegation Came Into Play</a><a href="http://www.ipv6style.jp/en/tech/20031226/index.shtml" target="_blank" rel="noopener">Part 2 Proposals to Make Prefix Delegation a Reality</a></p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Small office IPv6 manual with FreeBSD</title>
      <link href="/2005/06/13/Small-office-IPv6-manual-with-FreeBSD/"/>
      <url>/2005/06/13/Small-office-IPv6-manual-with-FreeBSD/</url>
      <content type="html"><![CDATA[<p><span class="title">Small office IPv6 manual with FreeBSD</span></p><p><a href="http://www.ipv6style.jp/en/building/20040526/index.shtml" target="_blank" rel="noopener">Part1</a><a href="http://www.ipv6style.jp/en/building/20040608/index.shtml" target="_blank" rel="noopener"><span class="title">Part 2</span></a></p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>A Discussion on IPv6 Transition Mechanisms</title>
      <link href="/2005/06/13/A-Discussion-on-IPv6-Transition-Mechanisms/"/>
      <url>/2005/06/13/A-Discussion-on-IPv6-Transition-Mechanisms/</url>
      <content type="html"><![CDATA[<p><span class="title"><a href="http://www.ipv6style.jp/en/building/20030820/index.shtml" target="_blank" rel="noopener"> Part1: From Dual Stack to 6to4 and ISATAP</a></span></p><p><a href="http://www.ipv6style.jp/en/building/20030822/index.shtml" target="_blank" rel="noopener"><span class="title">             Part2 Teredo, NAT-PT, BIS and MPLS</span></a></p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IPv6 Contest 2004</title>
      <link href="/2005/06/13/IPv6-Contest-2004/"/>
      <url>/2005/06/13/IPv6-Contest-2004/</url>
      <content type="html"><![CDATA[<p><a href="http://www.v6pc.jp/apc/jp/awards.html" target="_blank" rel="noopener">IPv6 Contest 2004</a></p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IPv6 Programming in 5 minutes</title>
      <link href="/2005/06/13/IPv6-Programming-in-5-minutes/"/>
      <url>/2005/06/13/IPv6-Programming-in-5-minutes/</url>
      <content type="html"><![CDATA[<p><a href="http://www.ipv6style.jp/en/apps/20030617/index.shtml" target="_blank" rel="noopener"><span class="title">IPv6 Programming in 5 minutes</span></a> in IPv6Style</p><p>Use DNS record to check <span class="semi_title">dual stack:</span></p><ol><li><p>Try accessing the IPv6 address written in the AAAA record.</p></li><li><p>If an attempt to connect using IPv6 fails, try accessing the IPv4 address  written in the A record. Use address family independent function: getaddrinfo()</p></li></ol>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MObile Nodes And Multiple Interfaces in IPv6</title>
      <link href="/2005/06/09/MObile-Nodes-And-Multiple-Interfaces-in-IPv6/"/>
      <url>/2005/06/09/MObile-Nodes-And-Multiple-Interfaces-in-IPv6/</url>
      <content type="html"><![CDATA[<p><a href="http://www.nautilus6.org/ietf/index.html" target="_blank" rel="noopener">MONAMI6</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Requirement of a Car Manufacturer for real MIPv6 large</title>
      <link href="/2005/06/05/Requirement-of-a-Car-Manufacturer-for-real-MIPv6-large/"/>
      <url>/2005/06/05/Requirement-of-a-Car-Manufacturer-for-real-MIPv6-large/</url>
      <content type="html"><![CDATA[<p>These slides are digested and organized from <a href="http://www1.ietf.org/mail-archive/web/nemo/current/msg02525.html" target="_blank" rel="noopener">this</a> mail, which was posted in NEMO group:</p><p>Edouard LASNIER REDDAN, Telecom Solution for Telematics, RENAULT, on May2nd, 2005</p><p>Keyword: MIPv6, Tunnel, NAT mapping</p><p>Quote: MIPv6 with a NAT traversal feature is urgent.The HA should Independent from telecom operators.</p><ul><li>RENAULT is involved in several research projects dealing with IP mobility since 2001</li><li>RENAULT Laguna “IPv6 Car”, supporting Mobile IPv6.** Received the “Murai Award” in 2003 in Tokyo** Capability to support GPRS (2G European cellular network) / Wifi vertical handover** Using Mobile IPv6 with IPv4 NAT traversal feature</li></ul><p>DOORS:</p><ul><li>The NAT traversal function,</li><li>Developed by Cisco Systems</li><li>Provide efficient results</li><li>Compatible with our deployment constraints for further commercial exploitations.</li></ul><p>Mobile IPv6</p><ul><li>Is considered by the car manufacturers as a key technology for** Deployment of next generation Telematic services*** Remote diagnosis*** Fleet management</li></ul><p>GST</p><ul><li>Global System for Telematics** RENAULT, BMW, DAIMLER CHRYSLER,FIAT** Other actors of the Telematic Industry</li><li>IPv6 is now part of the core specification for a European standard for telematics, mainly because of its mobility features.</li></ul><p>Challenges for the car manufacturers</p><ul><li>Be deployed soon on top of existing cellular networks, all basedon IPv4.</li><li>It is mandatory to deploy Mobile IPv6 with a NAT traversal support,to remain independent from the mobile telecom operator.</li></ul><p>Note: If it is agreed by the automotive industry that IPv6 paves the future of thetelematic market, the existing constraints on the deployment of Mobile IPv6makes the finalization of the standard very sensitive:</p><p>Note: If the car manufacturers have to setup technical agreements with the mobile telecom operators to deploy MIPv6, then many other solutions can be considered.Dependence toward the mobile telecom operators is not acceptable.</p><p>Note: MIPv6 should enable the actors of the value chain to define their business model,it means that MIPv6 should be flexible and not compel the Home Agent to be directly connected to the Internet.</p><p>NAT traversal</p><ul><li>NAT traversal is a required feature</li><li>Technical solution defined at the IETF should take into consideration the deployment constraints.</li><li><span style="font-weight: bold;">The Home Agent is in many cases in existing small networks dedicated to pilotexperiments initially designed for IPv4, with NAT boxes on the Internet interface.</span>** This constraint is a fact, and is valid for many projects.</li></ul><p>Long term perspective: HA consideration</p><ul><li>Car manufacturers - or any actors from the telematic industry supplying IP mobility support for the cars</li><li>Will deploy MIPv6 on their enterprise networks.</li><li>Those networks are secured, designed for IPv4, and most probably the Home Agent will not be directly interfaced with the Internet</li><li>It will be a secured equipment in the core of the network, behind NATs.</li></ul><p>Note: This problem is in fact very common as enterprise networks are connected tothe Internet behind NATs in general.</p><p>Multiple IPv4 Network Address Translation</p><ul><li>Mobile IPv6 should support it</li><li>In the access networks, and in front of the Home network.</li><li>The Home Agent may be deployed on IPv4 networks behind NAT access to the Internet.</li></ul><p>Conclution:If the deployment of Mobile IPv6 requires re-designing the car manufacturers networks because security policies and existing NAT features are not supported, then Mobile IPv6 will remain a beautiful idea that no company will be able to deploy.I could deploy MIPv6 for real if the IPv4 NAT traversal would be normalized and enable HomeAgent to be connected to the internet behind NATs and other boxes.</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>修改模組心得</title>
      <link href="/2005/06/05/%E4%BF%AE%E6%94%B9%E6%A8%A1%E7%B5%84%E5%BF%83%E5%BE%97/"/>
      <url>/2005/06/05/%E4%BF%AE%E6%94%B9%E6%A8%A1%E7%B5%84%E5%BF%83%E5%BE%97/</url>
      <content type="html"><![CDATA[<p>修改模組就是由實際 class, procedure 到目標理想 class, procedure 的過程.在動手修改模組之前必定先規劃好目標系統.</p><p>使用類似重構的開發方法, 一次只做一點點的改動,</p><p>make (nmake) 的特性是只重編改動到的檔案, 因此如果你一次只改動一兩個檔案,並用上一個還行的 CPU(~1G), 就不用擔心重新編譯所需時間過長的問題.</p><p>每次作改動的時候將之清楚紀錄下來, 這樣多作幾次下來的結果就會越來越熟悉, 考慮的越來越完整, 每步的幅度就越來越精準.</p><p>當 然, 你對模擬工具組成架構越清楚, 在模擬工具程式架構清楚的情況下, 你的目標理想 class, procedure 可能就會越接近實際 class, procedure. 為了修改模組順暢, 適當參考相關模擬程式提供的架構是必要的. 不然會遇到規劃出來的目標架構無法從模擬程式順利修改的窘境.</p><p>OMNeT++ 比起 NS2 很大的優勢就在此,感謝 Andras 開發的 IPv6SuiteWithINET 模組, 讓我們可以用很接近實作的 Code 來模擬.另一個例子是 S. Dulman 開發的 NesCT, 可以用此模組在 OMNeT++ 上跑 TinyOS 程式.</p>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>INET QnA</title>
      <link href="/2005/06/01/INET-QnA/"/>
      <url>/2005/06/01/INET-QnA/</url>
      <content type="html"><![CDATA[<p>Q: INET framework without dynamic nedfile</p><p>A: Easiest way to switch from dynamic NED to compiled-in NED for INET isto remove the “-N” flag from OPTS at the top of the makemake script, thenregenerate the makefiles (./makemake) and make.  (And of course removepreload-ned-files lines from omnetpp.ini’s.)</p><p>Q:I’ll use an example from Omnet Documentation:module RoutingTestNetworkparameters:routingNodeType: string; // should hold the name// of an existing module typegates: //…submodules:node1: routingNodeType like RoutingNode;node2: routingNodeType like RoutingNode;//…connections nocheck:node1.out0 --&gt; node2.in0;//…endmodule</p><p>What happens if I declare a routingNodeType in omnet.ini file which would be different from that declared in my .ned file?e.g. omnetpp.ini:*<em>.node</em>.routingNodeType = “Routingsomething”</p><p>Or perhaps I have to define this module in RoutingNode.ned and add some parameters in Routingsomething.ned if I want.</p><p>A:The setting in the NED file, if present, takes precedence over omnetpp.ini(basically, omnetpp.ini is only consulted if param is not set in the NED).</p><p>The module Routingsomething MUST have at least the parameters and gatesRoutingNode has, but it can add new ones as well.</p><p>Q:I wish to create shared libs in each of the subdirectories then link them to an executable for each of the networks like the old IPv6Suite.</p><p>A: we haven’t actually had this option available for the IPv6SuiteWithINET.</p><p>Currently, all c++ objects are statically linked into bin/INET. A batch file is provided in each network directory to run the executable, bin/INET and load omnetpp.ini (or -f &lt;your_own_network_ini&gt;) in the current network directory. (Eric)</p><p>Q:&lt;/your_own_network_ini&gt; I’ve installed TCL/TK but while executing make command, it can’t found them&lt;your_own_network_ini&gt;A:&lt;/your_own_network_ini&gt; Go to the installing directory and edit configure.user. Specifiy the path tothe TCL/TK header files. On my mashine tcl.h and tk.h are in /usr/include/:</p><p>TK_CFLAGS=&quot;-I/usr/include/tcl8 <div id="mb_0"><wbr>.4 -fwritable-strings&quot;TK_LIBS=&quot;-L/usr/lib -ltk8.4 -ltcl8.4&quot;</div></p><p>You should change the compiler flags if you want to debug your sessions:</p><p>CFLAGS=’-gstabs+3 -Wall’</p>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用協議分析工具學習TCP/IP</title>
      <link href="/2005/05/14/%E7%94%A8%E5%8D%94%E8%AD%B0%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E5%AD%B8%E7%BF%92TCP-IP/"/>
      <url>/2005/05/14/%E7%94%A8%E5%8D%94%E8%AD%B0%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E5%AD%B8%E7%BF%92TCP-IP/</url>
      <content type="html"><![CDATA[<p>覺得 INET 的 ARP tutorial 還是太難讀嗎?可能您對網路的 ARP 或 TCP/IP 還不夠了解,</p><p>可以看看這篇用協議分析工具學習TCP/IP, 會有相輔相乘的效果<a href="http://www.cnpaf.net/Class/OtherAnalysis/0532918532942694.html" target="_blank" rel="noopener">http://www.cnpaf.net/Class/OtherAnalysis/0532918532942694.html</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>SRTT</title>
      <link href="/2005/05/13/SRTT/"/>
      <url>/2005/05/13/SRTT/</url>
      <content type="html"><![CDATA[<p>把計算並儲存 RTT (Round-Trip Time) 的方式改成多計算 SRTT 並儲存 SRTT</p><p>Round-Trip Time Estimates<a href="http://www.opalsoft.net/qos/TCP-10.htm" target="_blank" rel="noopener">http://www.opalsoft.net/qos/TCP-10.htm</a></p>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Build an INET Application layer Module: Initial Test</title>
      <link href="/2005/05/11/Build-an-INET-Application-layer-Module-Initial-Test/"/>
      <url>/2005/05/11/Build-an-INET-Application-layer-Module-Initial-Test/</url>
      <content type="html"><![CDATA[<p>----in IPv6SuiteWithINET: work----Applications/UDPApp 下新增 “<a href="http://NDSBasicApp.cc" target="_blank" rel="noopener">NDSBasicApp.cc</a>”, “NDSBasicApp.h”, “NDSBasicApp.ned”.</p><blockquote><p>makemakenmake -f <a href="http://makefile.vc" target="_blank" rel="noopener">makefile.vc</a> depend (option)m.bat</p></blockquote><p>----in INET: not work----Our goal is to build a UDP based Application named NDSApp.</p><p>1. Add “NDSApp” folder in “INET/Applications” folder</p><p>2. Modifiy “INET/makemake.cmd” to generate makefile for the new App(If you add/remove/rename directories).set ALL_INET_INCLUDES:append -I%root%/Applications/NDSApp</p><p>We copied the line “cd %root%\Applications\UDPApp &amp;&amp; …” and change “UDPApp” to “NDSApp”</p><p>cd %root%\Nodes\INET:append -I…\Applications\NDSApp</p><p>3. Copy files “<a href="http://UDPApp.cc" target="_blank" rel="noopener">UDPApp.cc</a>”, “UDPApp.h”, “UDPApp.ned” from “UDPApp” folder,Rename “<a href="http://UDPApp.cc" target="_blank" rel="noopener">UDPApp.cc</a>”, “UDPApp.h”, “UDPApp.ned” to “<a href="http://NDSApp.cc" target="_blank" rel="noopener">NDSApp.cc</a>”, “NDSApp.h”, “NDSApp.ned”.</p><p>4. In file “<a href="http://NDSApp.cc" target="_blank" rel="noopener">NDSApp.cc</a>”&quot;#include “UDPApp.h”&quot; to &quot;#include “NDSApp.h”&quot;Replace the class inherits and function names from &quot;UDP&quot;xx to &quot;NDS&quot;xx,ex: “UDPSink::initialize();” to “NDSSink::initialize();”</p><p>5. Add NDSApp to StandardHostModifiy INET/Nodes/StandardHost.nedAt import section:append “NDSApp,”</p><p>At module StandardHost parameters section:Append&quot;numNdsApps : numeric const,“ndsAppType : string,”</p><p>At module StandardHost submodules section:AppendndsApp: ndsAppType[numNdsApps] like NDSApp;display: “i=block/app;p=392,67”;</p><p>At module StandardHost connections section:Append&quot;for i=0…numNdsApps-1 dondsApp[i].to_udp --&gt; udp.from_application++;ndsApp[i].from_udp &lt;-- udp.to_application++;endfor;&quot;</p><blockquote><p>makemakenmake -f <a href="http://makefile.vc" target="_blank" rel="noopener">makefile.vc</a> dependm.bat</p></blockquote><p>Then test it in Example/INET/Multicast</p><p>modify its omnetpp.ini</p><p>set UDPApp off</p><h1>udp app (off)</h1><p>**.numUdpApps=0**.udpAppType=“UDPApp”</p><p>modified udp app configuration to nds app configuration,note the captions.</p>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3rd day of tracing INET6: Application/UDPBasicApp</title>
      <link href="/2005/05/11/3rd-day-of-tracing-INET6-Application-UDPBasicApp/"/>
      <url>/2005/05/11/3rd-day-of-tracing-INET6-Application-UDPBasicApp/</url>
      <content type="html"><![CDATA[<p>If the dest_addresses parameter contains more than one address,one of them is randomly chosen for each packet.</p><p>An address may be given in the dotted decimal notation, or with the module name. (The IPAddressResolver class is used to resolve the address.)</p><p>To disable the model, set dest_addresses to “”.</p><p>The peer can be UDPSink or another UDPBasicApp (it handles received packets exactly like UDPSink).</p><hr><p>UDPAppBase:*** void UDPAppBase::bindToPort(int port)</p><p>cMessage *msg = new cMessage(“UDP_C_BIND”, UDP_C_BIND);建立新 message “*msg”, 使用 UDP_C_BIND 格式</p><p>UDPControlInfo *ctrl = new UDPControlInfo();建立新 record “*ctrl”</p><p>ctrl-&gt;setSrcPort(port);將port參數設定進ctrl的SrcPort參數中</p><p>msg-&gt;setControlInfo(ctrl);將ctrl包進 msg 中的 ControlInfo 參數中</p><p>send(msg, “to_udp”);送到傳輸層的 udp 做處理</p><p>void UDPAppBase::sendToUDP(cMessage *msg, int srcPort, const IPvXAddress&amp; destAddr, int destPort)</p><p>msg-&gt;setKind(UDP_C_DATA);Send message to UDP, with the appropriate control info attached</p><p>其他類似bindToPort()</p><hr><p>UDPSink:void UDPSink::initialize()</p><p>WATCH(numReceived);TKenv 中顯示 numReceived 變數</p><p>if (port!=-1)bindToPort(port);port 數字正常就將 port 參數繫結到埠號</p><p>void UDPSink::handleMessage(cMessage *msg)處理封包並秀numReceived狀態在畫面中</p><p>void UDPSink::processPacket(cMessage *msg)收到封包後刪除, numReceived數 +1</p><hr><p>UDPBaseApp</p><p>const char *destAddrs = par(“dest_addresses”);讀入目的位址cStringTokenizer tokenizer(destAddrs);const char *token;while ((token = tokenizer.nextToken())!=NULL)destAddresses.push_back(IPAddressResolver().resolve(token));解析 string 成可辨識的位址格式</p><p>void UDPBasicApp::sendPacket()IPvXAddress destAddr = chooseDestAddr();超過一個目的位址時從中選擇隨機目的位址</p><p>IPvXAddress UDPBasicApp::chooseDestAddr(){int k = intrand(destAddresses.size());destAddresses.size() 即目標位址數量, intrand(n) 從n中隨機取一數</p><pre><code>return destAddresses[k];</code></pre><p>}</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>12th. day of porting INET6 (Mile Stone: Pre-work Finished)</title>
      <link href="/2005/05/11/12th-day-of-porting-INET6-Mile-Stone-Pre-work-Finished/"/>
      <url>/2005/05/11/12th-day-of-porting-INET6-Mile-Stone-Pre-work-Finished/</url>
      <content type="html"><![CDATA[<p>22th. Part:修改IPControlInfo.msg:協定對應改成 IP6NextHeaderFieldId</p><p>檢討: 在修改一陣子模組之後, 對整個架構更了解的同時,也更了解修改整個IP協定的難度.因為了解, 而越來越缺少每個部分改好兜起來就能跑的自信.</p><p>所以檢討了現在 porting 的方法, 歸納出下面幾條新的 porting 步驟:</p><p>第一階段: 多方嘗試 (完成)1. 初步對各主要模組了解, trace code 同時並做初步 porting.2. 儲存當前 porting slices 成果</p><p>第二階段: 系統化調試1. 一切修改都應該先以能執行, 能隨時觀察模擬流程為目標.(每次修改都能編出可用的快照檔(snapshot))2. 將 IP 相關模組複製一份, 編譯, 確定可用的新增協定方式3. 階段修改2. 修改 Mac 層加入訊息3. 修改 IPDatagram.msg 新增協定4. 修改協定訊息5. 修改各 Class 名稱6. 實際修改 Class7. 路由表位址, 位址解譯, flatconfigurator</p><p>第三階段: 新增功能1. Neighbor Discovery(Major Option). MIPv6 &amp; NEMO (After Wireless Support)2. DualStack3. Extension Header Proccessing4. RSVP, Multicast</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>網路模擬 Scenario</title>
      <link href="/2005/05/11/%E7%B6%B2%E8%B7%AF%E6%A8%A1%E6%93%AC-Scenario/"/>
      <url>/2005/05/11/%E7%B6%B2%E8%B7%AF%E6%A8%A1%E6%93%AC-Scenario/</url>
      <content type="html"><![CDATA[<p>說到網路模擬, 大家在試過各種模擬網路工具之後, 都會覺得模擬網路比起實際架設其實並不是容易的事情,</p><p>網路模擬 Scenario 主要都是由4個部分構成: 點, 線, 面, 時間</p><p>因為網路通訊本身就由Physical/MAC, IP, Network, Application 等層構成,就 Physical/MAC 來簡分就有無線, 有線之別, IP, Network層裡又有多樣的協定,總合起來先天網路通訊本模擬上就有極高的複雜度.</p><p>先由網路模擬 Scenario來說.在 ns2 上是在tcl檔中定義, 在omnet++上是在ned檔與omnetpp.ini檔中定義</p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
            <tag> NS2 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NS2 無線模擬</title>
      <link href="/2005/05/11/NS2-%E7%84%A1%E7%B7%9A%E6%A8%A1%E6%93%AC/"/>
      <url>/2005/05/11/NS2-%E7%84%A1%E7%B7%9A%E6%A8%A1%E6%93%AC/</url>
      <content type="html"><![CDATA[<p>Digest from <a href="http://www.isi.edu/nsnam/ns/tutorial/nsscript6.html" target="_blank" rel="noopener">here</a> :</p><p>In a mixed simulation involving wired and wireless nodes its necessary :1. to turn on hierarchical routing2. to create separate domains for wired and wireless nodes. There may be multiple wired and wireless domains to simulate multiple networks.3. to have one base-station node in every wireless domain, thru which the wireless nodes may communicate with nodes outside their domain.</p><p>we need to use hierarchical routing in order to route packets between wireless and wired domains</p><ul><li>the routing information for wired nodes are based on connectivity of the topology</li><li>use base-stations which act as gateways between wired and wireless domains</li></ul><p>#Number of domains in this topology is 2 (one for the wired nodes and one for the wireless)AddrParams set domain_num_ 2</p><p>#Number of clusters in each of these domains#which indicates the first domain (wired) to have 1 clusters and#the second (wireless) to have 5 cluster.AddrParams set cluster_num_ {1 5}</p><p>#the number of nodes in each of these clustersAddrParams set nodes_num_ {1 1 3 1 1 1}</p><p>心得:在 mobiwan 中, bs 可以當 rt 用,因此 bs 也有路由功能</p><p>每個bs 都可以當 HA, 因此 mobiwan裡不必指定HA,mobile attach 上的那個點就自動做 HA.</p><p>所以 set mobile_ [create-mobile 1.4.1 1.4.0 1000 200 0 0 0.01]表示 mobile 會把 1.4.0 這節點當作 HA</p><p>create-mobile 來自 proc-mipv6-config.tcl啟動 def_mobile_config 來處理</p><p>base-station:create-base-station啟動 def_bs_config 來處理讓bs可以處理wired&amp;wireless的重點是#have wired routing mechanism turned on-wiredRouting ON開啟 MIPv6 功能-mipv6 ON</p><p>router: def_transit_config-mipv6 ON-mipagent CN</p><p>NS2 上的 RO 即是把 CN 當作 HA, 接收 BU, 然後作 tunnel欲啟動 RO , 則在檔案最前頭宣告:Agent/MIPv6/MN set rt_opti_     1       ; # 0 if routing optimization OFF</p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
            <tag> NS2 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>11th. day of porting INET6</title>
      <link href="/2005/05/11/11th-day-of-porting-INET6/"/>
      <url>/2005/05/11/11th-day-of-porting-INET6/</url>
      <content type="html"><![CDATA[<p>20th. Part:IPv6suite 的 IPProccessing 用的是 IPv4d 資料夾中的架構.</p><p>21th. Part:Mac 層要加入 0x86DD 代表IPv6訊息</p>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>UML</title>
      <link href="/2005/05/11/UML/"/>
      <url>/2005/05/11/UML/</url>
      <content type="html"><![CDATA[<p>一個有經驗的Developer對於剛接手的已存在的只有程式碼軟體開發專案，要能了解這個軟體的架構是什麼至少要花數個小時，如果這個軟體專案有ModelDiagram，則這個Developer則很快就可以了解這個軟體架構。</p><p>一般而言Diagramming Language都應該提供下列資訊：</p><p>‧Overall architecture of the system　‧System dependencies　‧Complexity　‧Flow of information through a system　‧Business requirements　‧Database organization and structure　‧Source code – including almost every aspect of object-orienteddevelopment　‧Deployment configurations</p><p>一個軟體專案如果有使用Visual Models，我們就能從比較高的層次去看這個Project，藉由從較高層次圖去找尋Fine-Grained Diagram。這樣的方法可以幫助 Architect 和 Engineer 直覺地(Intuitively)掌握住問題並解決它，軟體問題容易掌握，時間自然縮短，品質自然提高。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>10th day of porting INET6</title>
      <link href="/2005/05/11/10th-day-of-porting-INET6/"/>
      <url>/2005/05/11/10th-day-of-porting-INET6/</url>
      <content type="html"><![CDATA[<p>18th. Part:NetworkLayer6.ned:disable OSPF, RSVP原 protocolMapping = “6:0,17:1,1:2,2:3,46:4,89:5”;表示 TCP(6):0, UDP(17):1, ICMP(1):2, IGMP(2):3, RSVP(46):4, OSPF(89):5考慮到保證將來 DualStack 相容性, 因此不更改原對應數字, 而從後面再繼續補加.</p><p>暫時補加ICMPv6(58):2, ROUTING(43), MOBILITY(135)protocolMapping 後添上 58:6,43:7,135:8</p><ul><li>應再找資料確認 Neighbor Discovery – ND 模組是否應包含在 ICMPv6 模組裡</li></ul><p>19th. Part:照著 Winodws 步驟, 以 TicToc10 為基礎編譯.OMNET++/Sample/INET6Test:修改 IP6Datagram.msg 以通過 compiler.</p><p>這次是針對&quot;模擬&quot;來做修正:</p><ul><li>因為 20 bits 不好宣告(RFC 中是連 version, Traffic Class 一同宣告在一起),因此 flow label 欄位訂的較 RFC 小 (20-&gt;16)(反正沒在用, 應該沒什麼關係)</li><li>在訂 IPv6 options message struct 時, Padding 不加似乎也沒關係</li><li>IP6FRAGMENT identification 欄位訂的較 RFC 小 (32-&gt;16)</li></ul><p>目前採用方式-&gt; 全改用 int , short, long 來宣告, 皆遠大於所需位元數</p>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>論文寫作指引</title>
      <link href="/2005/05/11/%E8%AB%96%E6%96%87%E5%AF%AB%E4%BD%9C%E6%8C%87%E5%BC%95/"/>
      <url>/2005/05/11/%E8%AB%96%E6%96%87%E5%AF%AB%E4%BD%9C%E6%8C%87%E5%BC%95/</url>
      <content type="html"><![CDATA[<p>Review: Global Dynamic Home Agent Discovery on Mobile IPv6Q1. 訊息流程一不一樣?Ay: -&gt; 原不需用 RRAn: -&gt; 模擬該重做</p><p>外:Paper 檢查注意:</p><ul><li>規格: A4, 上下30mm, 左右20mm, 中間8mm, 左右對齊. 字高10pt.*   圖片引用次序*   參考引用次序內:Problem solving:</li></ul><ol><li>Setup sample space2.  Define probability law3.  Identify event of interest4.  Calculate…原則:</li></ol><ul><li><p>先討論做某件事的老方法,</p></li><li><p>再和新解決方法建立關聯.</p></li><li><p>提案前先確定它有效, 成功提綱:</p></li><li><p>要有完整的survey,也就是完整的view</p></li><li><p>針對某些很明確的問題來想出正確可靠的解決辦法, 細節要想透及交待清楚</p><pre><code>1.  想解決什麼樣的問題</code></pre><ol start="2"><li>清楚地告訴大家有人是如何解決</li><li>想解決問題的完整步驟是什麼*   完整解決問題的方法及步驟<a href="http://www.icce.org/authors_page/Summary%20Guide.htm" target="_blank" rel="noopener">http://www.icce.org/authors_page/Summary%20Guide.htm</a></li></ol></li></ul><ol><li>Outline: An author’s contribution is of value to the reader only if the information is presented in a clear and well-organized way. Papers and summaries that follow an outline similar to that below are likely to provide readers with the best information as to their value.</li><li>Introduction. This section should provide the motivation for the paper. Why is this an interesting and important topic to which the reader should allocate time and effort? How does it differ from prior art? A brief description of the research and development process, and the results, should follow.</li><li>Review and overview. The author should describe the present state of knowledge and, if appropriate, provide references. This should lead to an overview of the new direction taken.</li><li>Development method/procedures. The methods and reasons for the design choices should be described in sufficient detail for readers to be able to judge the validity, reliability and general applicability of the results.</li><li>Results. Important results should be well summarized. More complete experimental results are expected in a paper than space allows in a summary. The results should be directly related to the topics presented in the introduction and in the overview of the new direction taken.</li><li>Conclusion. The final section should highlight the author’s contribution. That is, what do we now know that we did not know before this paper was presented? It should also mention limitations of the work and provide suggestions for future improvement in this area.</li><li>References. A good paper lists references that support key statements and assumptions.</li></ol>]]></content>
      
      
    </entry>
    
    <entry>
      <title>NS2 無線模擬結果 Trace 檔分析</title>
      <link href="/2005/05/11/NS2-%E7%84%A1%E7%B7%9A%E6%A8%A1%E6%93%AC%E7%B5%90%E6%9E%9C-Trace-%E6%AA%94%E5%88%86%E6%9E%90/"/>
      <url>/2005/05/11/NS2-%E7%84%A1%E7%B7%9A%E6%A8%A1%E6%93%AC%E7%B5%90%E6%9E%9C-Trace-%E6%AA%94%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p><span style="font-family:新細明體;">新 r 33.908773621 <em>3</em> MAC  — 334 mipv6_bu 70 [13a 1 4 800] ------- [4196353:0 0:0 32 4198400]舊 s -t 1.000075000 -Hs 22 -Hd 2147483647 -Ni 22 -Nx 100.00 -Ny 2200.00 -Nz 0.00 -Ne -1.000000 -Nl MAC -Nw — -Ma 0 -Md ffffffff -Ms 14 -Mt 800 -Is 4222977.0 -Id 2147483647.0 -It ipv6_sol -Il 100 -If 0 -Ii 1 -Iv 255</span></p><p>欄位<span lang="EN-US">: event type (</span><span style="font-family:新細明體;">事件類型</span>)</p><p><span lang="EN-US">有四種基本事件類型</span></p><p><span style="" lang="EN-US">s: send (</span><span style="font-family:新細明體;">傳送</span><span style="" lang="EN-US">)<span style="">          </span>r: receive(</span><span style="font-family:新細明體;">接收</span><span style="" lang="EN-US">)<span style=""></span>d:drop(</span><span style="font-family:新細明體;">丟棄</span><span style="" lang="EN-US">)<span style=""></span>f: forward(</span><span style="font-family:新細明體;">轉送</span><span style="" lang="EN-US">)&lt;o:p&gt;&lt;/o:p&gt;</span></p><p><span style="" lang="EN-US">&lt;o:p&gt;還有一種特別類型m: move (移動)&lt;/o:p&gt;</span></p><span style="font-family:新細明體;">欄位</span><span style="" lang="EN-US">2: <span class="GramE">general</span> flag</span><p><span lang="EN-US">-t: time (</span><span style="font-family:新細明體;">時間</span><span lang="EN-US">)</span></p><p><span lang="EN-US">&lt;o:p&gt; &lt;/o:p&gt;</span></p><p><span style="font-family:新細明體;">欄位</span><span lang="EN-US">3: <span style="">Next hop info (</span></span><span style="font-family:新細明體;">下一站的資訊</span><span style="" lang="EN-US">)&lt;o:p&gt;&lt;/o:p&gt;</span></p><p><span style="" lang="EN-US">-Hs: id for this node&lt;o:p&gt;&lt;/o:p&gt;</span></p><p><span class="GramE"><span style="" lang="EN-US">-Hd</span></span><span style="" lang="EN-US">: id for next hop towards the destination</span></p><p><span lang="EN-US">&lt;o:p&gt; &lt;/o:p&gt;</span></p><p><span style="font-family:新細明體;">欄位</span><span style="" lang="EN-US">4: Node property type tag (</span><span style="font-family:新細明體;">節點屬性類型標籤</span><span style="" lang="EN-US">)&lt;o:p&gt;&lt;/o:p&gt;</span></p><p><span style="" lang="EN-US">-Ni: node id<span style="">  </span>(</span><span style="font-family:新細明體;">節點</span><span style="" lang="EN-US">ID)<span style="">   </span>&lt;o:p&gt;&lt;/o:p&gt;</span></p><p><span style="" lang="EN-US">-Nx <span class="GramE">–</span>Ny -Nz: node<span class="GramE">’</span>s x/y/z coordinate (</span><span style="font-family:新細明體;">節點</span><span style="" lang="EN-US">x/y/z</span><span style="font-family:新細明體;">的座標位置</span><span style="" lang="EN-US">)&lt;o:p&gt;&lt;/o:p&gt;</span></p><p><span style="" lang="EN-US">-Ne: node energy level &lt;o:p&gt;&lt;/o:p&gt;</span></p><p><span class="GramE"><span style="" lang="EN-US">-Nl</span></span><span style="" lang="EN-US">: trace level, such as AGT, RTR, MAC&lt;o:p&gt;&lt;/o:p&gt;</span></p><p><span style="" lang="EN-US">-Nw: reason for the event (</span><span style="font-family:新細明體;">事件發生原因</span><span style="" lang="EN-US">)&lt;o:p&gt;&lt;/o:p&gt;</span></p><p><span style="" lang="EN-US">&lt;o:p&gt;&lt;/o:p&gt;</span></p><p><span style="font-family:新細明體;">欄位</span><span style="" lang="EN-US">5: packet info at MAC level (</span><span style="font-family:新細明體;">封包在</span><span style="" lang="EN-US">Mac</span><span style="font-family:新細明體;">層的資訊</span><span style="" lang="EN-US">)&lt;o:p&gt;&lt;/o:p&gt;</span></p><p><span style="" lang="EN-US">-Ma: duration &lt;o:p&gt;&lt;/o:p&gt;</span></p><p><span style="" lang="EN-US">-Md: dest’s ethernet address&lt;o:p&gt;&lt;/o:p&gt;</span></p><p><span style="" lang="EN-US">-Ms: src’s ethernet address&lt;o:p&gt;&lt;/o:p&gt;</span></p><p><span style="" lang="EN-US">-Mt: ethernet type&lt;o:p&gt;&lt;/o:p&gt;</span><span style="" lang="EN-US">&lt;o:p&gt;&lt;/o:p&gt;</span></p><p><span style="font-family:新細明體;">欄位</span><span style="" lang="EN-US">6: Packet information at IP level (</span><span style="font-family:新細明體;">封包在</span><span style="" lang="EN-US">IP</span><span style="font-family:新細明體;">層的資訊</span><span style="" lang="EN-US">)&lt;o:p&gt;&lt;/o:p&gt;</span></p><p><span style="" lang="EN-US">-Is: source address. Source port number (</span><span style="font-family:新細明體;">來源位置，</span><span style="" lang="EN-US">a.b</span><span style="font-family:新細明體;">其中</span><span style="" lang="EN-US">a</span><span style="font-family:新細明體;">為節點</span><span style="" lang="EN-US">ID</span><span style="font-family:新細明體;">，</span><span style="" lang="EN-US">b</span><span class="GramE"><span style="font-family:新細明體;">為埠號</span></span><span style="" lang="EN-US">)&lt;o:p&gt;&lt;/o:p&gt;</span></p><p><span style="" lang="EN-US">-Id: dest address.dest port number (</span><span style="font-family:新細明體;">目的位置</span><span style="" lang="EN-US">)&lt;o:p&gt;&lt;/o:p&gt;</span></p><p><span style="" lang="EN-US">-It: packet type (</span><span style="font-family:新細明體;">封包類型</span><span style="" lang="EN-US">)&lt;o:p&gt;&lt;/o:p&gt;</span></p><p><span style="" lang="EN-US">-Il: packet size (</span><span style="font-family:新細明體;">封包大小</span><span style="" lang="EN-US">)&lt;o:p&gt;&lt;/o:p&gt;</span></p><p><span style="" lang="EN-US">-If: flow id (</span><span style="font-family:新細明體;">資料流</span><span style="" lang="EN-US">ID)&lt;o:p&gt;&lt;/o:p&gt;</span></p><p><span style="" lang="EN-US">-Ii: unique id (</span><span style="font-family:新細明體;">唯一的</span><span style="" lang="EN-US">ID</span><span style="font-family:新細明體;">編號</span><span style="" lang="EN-US">)&lt;o:p&gt;&lt;/o:p&gt;</span></p><p><span style="" lang="EN-US">-Iv: ttl value (Time To Live</span><span style="font-family:新細明體;">的值</span><span style="" lang="EN-US">)</span></p><p><span style="" lang="EN-US">&lt;o:p&gt;&lt;/o:p&gt;</span></p><p><span style="" lang="EN-US">&lt;o:p&gt; &lt;/o:p&gt;</span><span style="font-family:新細明體;">欄位</span><span style="" lang="EN-US">7:</span><span style="font-family:新細明體;">封包在應用層的資訊。包含的應用程式類型如 </span><span style="" lang="EN-US">arp, tcp </span><span style="font-family:新細明體;">或者是 </span><span style="" lang="EN-US">adhoc </span><span style="font-family:新細明體;">路由協定, </span><span style="font-family:新細明體;">這個欄位都是以</span><span style="" lang="EN-US">P</span><span style="font-family:新細明體;">所開頭的，且標籤為隨著應用程式不同而不同</span></p><p>Trace 檔分析:</p><p><span lang="EN-US">Packet Loss</span><span style="font-family:新細明體;"> 數量計算:</span><span style="font-family:新細明體;">不考慮</span><span lang="EN-US">Out-of-Order</span><span style="font-family:新細明體;">情況時, </span><span lang="EN-US">Packet Loss</span><span style="font-family:新細明體;">數量的計算方法最簡單, </span><span style="font-family:新細明體;">每一個封包在傳送端發送前，傳送端都會給封包一個序號，序號是連續性的，因此若是在接收到發現序號有不連續的發生，則可視為有封包<span class="GramE">的移失</span>。</span></p><p>OWD&amp;IPDV<span style="font-family:新細明體;">計算:</span><span lang="EN-US">最重要的欄位是 Sending Time(</span><span style="font-family:新細明體;">傳送時間</span><span lang="EN-US">)</span><span style="font-family:新細明體;">和</span><span lang="EN-US">Sequence Number(</span><span style="font-family:新細明體;">封包序號</span><span lang="EN-US">), </span><span style="font-family:新細明體;">可以用來計算出</span><span lang="EN-US">One Way Delay (OWD)</span><span style="font-family:新細明體;">和</span><span lang="EN-US">IP Delay Variance (IPDV</span><span style="font-family:新細明體;">，或是</span><span lang="EN-US">Jitter)</span><span style="font-family:新細明體;">。</span><span style="font-family:新細明體;"></span><span style="font-family:新細明體;"></span><span lang="EN-US"></span><span style="font-family:新細明體;"></span><span lang="EN-US"></span><span style="font-family:新細明體;"></span></p><p><strong><span lang="EN-US" style="font-family:新細明體;">One Way Delay = 接收時間 <span class="GramE">–</span> 傳送時間&lt;o:p&gt;&lt;/o:p&gt;</span></strong>**<span lang="EN-US" style="font-family:新細明體;">IPDV = |目前量測到的OWD <span class="GramE">–</span> 上一次量測到的OWD |</span></p><p>**Reference:<a href="http://140.116.72.80/~smallko/ns2/wireless1.htm" target="_blank" rel="noopener">http://140.116.72.80/~smallko/ns2/wireless1.htm</a><a href="http://www.k-lug.org/~griswold/NS2/ns2-trace-formats.html" target="_blank" rel="noopener">http://www.k-lug.org/~griswold/NS2/ns2-trace-formats.html</a><a href="http://www.ee.surrey.ac.uk/Personal/L.Wood/ns/" target="_blank" rel="noopener">http://www.ee.surrey.ac.uk/Personal/L.Wood/ns/</a></p>]]></content>
      
      
        <tags>
            
            <tag> NS2 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>9th. day of porting INET6 第九天</title>
      <link href="/2005/05/11/9th-day-of-porting-INET6-%E7%AC%AC%E4%B9%9D%E5%A4%A9/"/>
      <url>/2005/05/11/9th-day-of-porting-INET6-%E7%AC%AC%E4%B9%9D%E5%A4%A9/</url>
      <content type="html"><![CDATA[<div style="text-align: left;">17th Part:</div> 檔案管理方式決定:用 freemind 畫好了 INET6 與 INET 檔案分佈圖,隨時比較兩者間相應模組與進度<p>封包測試方式決定:使用 tictoc scenario 先測試 IPv6, ICMPv6 封包格式的正確性</p>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Module Functions</title>
      <link href="/2005/05/11/Module-Functions/"/>
      <url>/2005/05/11/Module-Functions/</url>
      <content type="html"><![CDATA[<p>The <em>Mobility</em> module provides a geographical position of the host and handles its movement.</p><p>The <em>Blackboard</em> module is used for cross layer communication. It provides information relevant to more than one layer like the actual energy status of the host, the display appearance or the status of the radio.</p>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>When less is more</title>
      <link href="/2005/05/11/When-less-is-more/"/>
      <url>/2005/05/11/When-less-is-more/</url>
      <content type="html"><![CDATA[<p>就好像 Unix Programming guide 講的, unix程式設計的哲學就是ㄧ件工具能將ㄧ件事做的最好, 然後再將各種工具&quot;串接&quot;(pipe)起來共同完成一項工作.</p><p>在實體世界中, 這種&quot;簡約&quot;(Simplicity)的思考, 體現在&quot;ipod&quot;等商品熱賣上.人們將會擁有一堆能將單一工作做的最好的工具.</p><p>使各種工具ㄧ起完成工作, 工具之間的溝通當然是透過網路.而擔任如 perl 或 python 在作業中&quot;膠合劑&quot;(glue)的腳色的會是我在ㄧ篇論文裡提出的個人化內容分散式網路的概念 (Personal Content Distribution Internetwork)</p><p>“Ubiquitous Computing”</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>8th. day of porting INET6 第八天</title>
      <link href="/2005/05/11/8th-day-of-porting-INET6-%E7%AC%AC%E5%85%AB%E5%A4%A9/"/>
      <url>/2005/05/11/8th-day-of-porting-INET6-%E7%AC%AC%E5%85%AB%E5%A4%A9/</url>
      <content type="html"><![CDATA[<p>15th Part:</p><p>模組組成</p><ul><li>PING6, TraceRoute6</li><li>UDP6</li></ul><hr><p>IP6</p><ul><li>ICMP6</li><li>ND (replace ARP)– future –</li><li>MLD</li><li>IPSEC</li></ul><hr><p>封包處理流程:收到封包-&gt;判斷是給自己或給別人的封包(Deliver locally/Addressed to another node)If給別人-&gt;Look up routing table -&gt;轉送封包到對應介面上(identified interface)</p><p>16th Part:位址格式:</p><ul><li>unicast</li><li>link-local</li><li>multicast</li><li>IPv4-compatible address 評估: flatconfigurator6 是否可以先使用IPv4-compatible address 的方式設定?</li></ul><p>Addressing format(參考 Smartbit-smartflow):</p><ul><li>Full hexadecimal</li><li>No leading zero (前面的0省略)</li><li>Compact(最簡化ex: 2001::1)</li><li>Mixed (最後四碼接IPv4位址 ex: 2001::192.168.0.1)</li></ul>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>7th. day of porting INET6 第七天</title>
      <link href="/2005/05/11/7th-day-of-porting-INET6-%E7%AC%AC%E4%B8%83%E5%A4%A9/"/>
      <url>/2005/05/11/7th-day-of-porting-INET6-%E7%AC%AC%E4%B8%83%E5%A4%A9/</url>
      <content type="html"><![CDATA[<p>13th. Part:看 <a href="http://rfc-editor.org/rfc/rfc3493.txt" target="_blank" rel="noopener">RFC3493</a> 與 <a href="http://rfc-editor.org/rfc/rfc3542.txt" target="_blank" rel="noopener">RFC 2542</a>一邊處理 IP6Address.h 位址格式設定的問題.</p><p>原本 IPAddress內部結構是 unsigned char addr[4];用來儲存 32bits IP 位址改成 IP6Address 後,內部結構要儲存128 bits IPv6 位址, 因此改成uint8_t  s6_addr[16];</p><p>取消輸入值或回傳值為 int 型態的函數, 因為與 IPv6 位址表示方式不符,這部分需弄更清楚後再作加強.</p><p>14th. Part:聯想:</p><p>猜測OMNET++ 中的 IPControInfo 應該就是  RFC 中的 sockaddr_in ,是用來與上層協定溝通的資料結構.</p><ul><li>IP模組改變對上層 (APP , UDP) 影響研究</li><li>雖然已經有 NedDoc 和 Class relation Diagram 來表現模組跟類別的關係,但要改模組時還是會困惑於各檔案用途還有互相間的關係.想嘗試使用心智圖 (Mind Map) 來描繪實際檔案關係<a href="http://web.hku.hk/~jwilam/PCEd_FT_2003_IT/mappingware.htm" target="_blank" rel="noopener">http://web.hku.hk/~jwilam/PCEd_FT_2003_IT/mappingware.htm</a><a href="http://www.donews.net/zminjiao/archive/2004/11/12/167474.aspx" target="_blank" rel="noopener">http://www.donews.net/zminjiao/archive/2004/11/12/167474.aspx</a>查詢結果: “FreeMind有個很好的功能是根據目錄創建文件，也就是可以根據某個目錄下的文件結構來直接生成一個 MindMap” 這功能正好可用上 😃</li></ul><p>該詢問INET Wireless 模組部分的進度The routing information for wired nodes are based on connectivity of the topology, i.e how are nodes connected to one another through Links.This connectivity information is used to populate the forwarding tables in each wired node., however wireless nodes have no concept of “links”.</p><p>Inorder to exchange pkts among these wired and wireless nodes, Base-stations(BS) is introduced to act as gateways between the two domains.</p><p>porting 學長模組時,發現 OPNET/NS2 (Mobiwan2) 共同的缺點是模組用太多簡寫,讓人剛開始沒有辦法一看就很清楚這模組的作用…若能減少花在辨認簡寫上的時間,使用者可以更容易明瞭各模組的作用,也能更容易去使用它們.</p>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>4th day of tracing INET6: Application/TCPApp Echo&amp;Sink</title>
      <link href="/2005/05/09/4th-day-of-tracing-INET6-Application-TCPApp-Echo-Sink/"/>
      <url>/2005/05/09/4th-day-of-tracing-INET6-Application-TCPApp-Echo-Sink/</url>
      <content type="html"><![CDATA[<p>從 UDPApp 或 TCPApp 一堆檔案中, 總是要從 xxSinkApp 最先開始看,最簡單又能猜測到大致流程的一定是這幾個檔案, 透過這樣 tracing code 熟悉了大致架構後, 看其他相關檔案時會事半功倍.</p><p>因為 xxSinkApp 明顯講的都會是如何收到這種類型的封包, 還有收到後如何將封包消滅的過程</p><hr><p>TCPSinkAppvoid TCPSinkApp::initialize()</p><p>TCPSocket socket;宣告TCPSocket</p><p>socket.setOutputGate(gate(“tcpOut”));</p><p>socket.bind(address[0] ? IPAddress(address) : IPAddress(), port);繫結&quot;位址-埠號&quot;</p><p>socket.listen(true);</p><p>…參考一般 socket 連線相關文件</p><p>void TCPSinkApp::handleMessage(cMessage *msg)if (msg-&gt;kind()==TCP_I_PEER_CLOSED)如果狀態為TCP_I_PEER_CLOSED</p><p>msg-&gt;setKind(TCP_C_CLOSE);將狀態設成TCP_C_CLOSE</p><p>send(msg, “tcpOut”);將訊息送到&quot;tcpOut&quot;</p><p>else if (msg-&gt;kind()==TCP_I_DATA || msg-&gt;kind()==TCP_I_URGENT_DATA)如果狀態為 TCP_I_DATA 或 TCP_I_URGENT_DATA</p><p>bytesRcvd += msg-&gt;length()/8;bytesRcvd += 收到的封包bit長度/8(變成byte)</p><p>delete msg;並將訊息刪除</p><p>else delete msg;收到其他狀態訊息的話都直接刪除</p><hr><p>TCPEchoAppechoFactor=1 will result in sending back the same message unmodifiedThe lengths of the messages are multiplied by echoFactor before sending them back</p><p>void TCPEchoApp::sendOrSchedule(cMessage *msg)</p><p>if (delay==0)若 delay 變數值為 0</p><p>bytesSent += msg-&gt;length()/8;紀錄總共送出的封包byte長度</p><p>send(msg, “tcpOut”);並送出訊息</p><p>else scheduleAt(simTime()+delay, msg);否則繼續等待 delay 這段時間</p><p>void TCPEchoApp::handleMessage(cMessage *msg)</p><p>if (msg-&gt;isSelfMessage())若訊息來自本身紀錄總共送出的封包byte長度並送出訊息</p><p>else if (msg-&gt;kind()==TCP_I_PEER_CLOSED)如果狀態為TCP_I_PEER_CLOSED</p><p>msg-&gt;setKind(TCP_C_CLOSE);將狀態設成 TCP_C_CLOSE</p><p>sendOrSchedule(msg);將訊息傳到sendOrSchedule()處理</p><p>else if (msg-&gt;kind()==TCP_I_DATA || msg-&gt;kind()==TCP_I_URGENT_DATA)如果狀態為 TCP_I_DATA 或 TCP_I_URGENT_DATA紀錄總共收到的封包byte長度</p><p>if (echoFactor==0)若echoFactor==0將訊息刪除</p><p>else其他:msg-&gt;setKind(TCP_C_SEND);狀態設成 TCP_C_SEND</p><p>//reverse direction, modify length, and send it back</p><p>TCPCommand *ind = check_and_cast&lt;TCPCommand *&gt;(msg-&gt;removeControlInfo());將 msg 的 ControlInfo 去掉後, 強制轉換型別成 TCPCommand</p><p>TCPSendCommand *cmd = new TCPSendCommand();</p><p>cmd-&gt;setConnId(ind-&gt;connId());msg-&gt;setControlInfo(cmd);</p><p>delete ind;將不再用到的 ind 刪除</p><p>計算回傳訊息大小:long len = long(msg-&gt;length()<em>echoFactor) &amp; ~7U;將原訊息長度</em>echoFactor</p><p>if (len&lt;8) len=8;若訊息長度小於1 byte, 補足成1 byte</p><p>msg-&gt;setLength(len);設定回傳訊息長度sendOrSchedule(msg);排到sendOrSchedule()中</p><p>else delete msg;收到其他狀態訊息的話都直接刪除</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>5th day of tracing INET6: setStatusString()</title>
      <link href="/2005/05/08/5th-day-of-tracing-INET6-setStatusString/"/>
      <url>/2005/05/08/5th-day-of-tracing-INET6-setStatusString/</url>
      <content type="html"><![CDATA[<p>void TCPGenericCliAppBase::setStatusString(const char *s){if (ev.isGUI()) displayString().setTagArg(“t”, 0, s);}</p><p>void TCPGenericCliAppBase::socketEstablished(int, void *){// <em>redefine</em> to perform or schedule first sendingev &lt;&lt; “connected\n”;setStatusString(“connected”);}</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IPv6SuiteWithINET</title>
      <link href="/2005/05/08/IPv6SuiteWithINET/"/>
      <url>/2005/05/08/IPv6SuiteWithINET/</url>
      <content type="html"><![CDATA[<p>剛看到</p><p><a href="http://ctieware.eng.monash.edu.au/twiki/bin/view/Simulation/Installation" target="_blank" rel="noopener">http://ctieware.eng.monash.edu.au/twiki/bin/view/Simulation/Installation</a></p><p>上提供了 IPv6SuiteWithINET for <a href="http://ctieware.eng.monash.edu.au/twiki/bin/view/Simulation/OMNeT" target="_blank" rel="noopener">OMNeT</a>++ 3.1, windows/linux版.</p><p>趕快來試用, 如果沒問題的話那INET6計畫的下一步就修正成寫 IPv6SuiteWithINET 文件推廣囉,當然, 要先自己 trace 一遍才知人家怎麼做的</p><p>4/21 quick revice:必須安裝VC 7.1編譯程式才能編譯, 6.0的不行. 程式可以由下面連結下載<a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=272be09d-40bb-49fd-9cb0-4bfa122fa91b&amp;displaylang=en" target="_blank" rel="noopener">http://www.microsoft.com/downloads/details.aspx?FamilyID=272be09d-40bb-49fd-9cb0-4bfa122fa91b&amp;displaylang=en</a></p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>FreeBSD TCP/IP-Stack to OMNeT++</title>
      <link href="/2005/05/08/FreeBSD-TCP-IP-Stack-to-OMNeT/"/>
      <url>/2005/05/08/FreeBSD-TCP-IP-Stack-to-OMNeT/</url>
      <content type="html"><![CDATA[<p>I found this paper through IEEE Xplore, and intrest in  the topic&quot;Eval freeBSD protocol stack in OMNeT++&quot;.</p><p>Integration of the FreeBSD TCP/IP-Stack into the Discrete EventSimulator OMNet++Bless, R.; Doll, M.;Simulation Conference, 2004. Proceedings of the 2004 WinterVolume 2,  December 5-8, 2004 Page(s):487 - 492</p><p>–</p><ul><li>In asimulation environment one wants to run several hosts in parallel,So every required global and static FreeBSD variable must be made local to each host. -&gt; a structure to store all the kernel variables for one host.-&gt; Consequently,in the FreeBSD source every occurrence of the variables must be replaced by a reference into the corresponding structure.</li></ul><p>ex: xyz is replaced to D-&gt;xyz</p><p>where D points to the current host structure that contains all the global and static kernel variables for this particular host.</p><ul><li>Encapsulate the complete TCP/IP into one OMNeT++ simple module.</li></ul><p>Others are out of my knowledge…In consequence, I think porting protocol stacks from different architecture is still not an easy way…</p>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2nd day of tracing INET6: Application/PingAPP</title>
      <link href="/2005/05/08/2nd-day-of-tracing-INET6-Application-PingAPP/"/>
      <url>/2005/05/08/2nd-day-of-tracing-INET6-Application-PingAPP/</url>
      <content type="html"><![CDATA[<p>Define_Module(PingApp);模組名稱是 PingApp</p><p>PingApp::initialize()</p><ol><li>讀入 omnetpp.ini 中設定的參數.</li><li>在 TKenv 中監視</li></ol><ul><li>sendSeqNo</li><li>expectedReplySeqNo</li><li>dropCount</li><li>outOfOrderArrivalCount這幾個結果 PingApp::handleMessage(cMessage *msg)</li></ul><p>if (msg-&gt;isSelfMessage())若訊息來自本身節點</p><p>destAddr = IPAddressResolver().resolve(par(“destAddr”));解析目的位址設定</p><p>來自其他節點則啟動回覆機制processPingResponse(check_and_cast<pingpayload>(msg));</pingpayload></p><p>void PingApp::sendPing()</p><p>PingPayload <em>msg = new PingPayload(name);新增封包, 接著下面照著宣告的格式填入對應的值msg-&gt;setLength(8</em>packetSize); //? 封包裡沒宣告</p><p>sendToICMP(msg, destAddr, srcAddr, hopLimit);把訊息送到 ICMP 裡</p><p>PingApp::scheduleNextPing(cMessage *timer)</p><p>simtime_t nextPing = simTime() + intervalp-&gt;doubleValue();模擬時間加上間隔時間</p><p>void PingApp::sendToICMP(cMessage *msg, const IPvXAddress&amp; destAddr, const IPvXAddress&amp; srcAddr, int hopLimit)判斷送出 v4/v6 icmp 格式封包</p><p>void PingApp::processPingResponse(PingPayload *msg)收到ICMP封包, 判斷 v4/v6 並<pingpayload>處理</pingpayload></p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Tracegraph for NS2</title>
      <link href="/2005/04/30/Tracegraph-for-NS2/"/>
      <url>/2005/04/30/Tracegraph-for-NS2/</url>
      <content type="html"><![CDATA[<p>在 <a href="http://www.geocities.com/tracegraph/" target="_blank" rel="noopener">http://www.geocities.com/tracegraph/</a></p><p>可下載 tracegraph 程式來分析 NS2 輸出的 tr 檔.</p><p>Yahoo Group:<a href="http://groups.yahoo.com/group/tracegraph/" target="_blank" rel="noopener">http://groups.yahoo.com/group/tracegraph/</a></p><p>Help<a href="http://inesc-0.tagus.ist.utl.pt/~pmsrve/ns2/tracegraph.html" target="_blank" rel="noopener">http://inesc-0.tagus.ist.utl.pt/~pmsrve/ns2/tracegraph.html</a></p><p>要了解 TraceGraph 的代號與NodeID間的對應關係, 可以參考這篇<a href="http://mailman.isi.edu/pipermail/ns-users/2005-March/047944.html" target="_blank" rel="noopener">http://mailman.isi.edu/pipermail/ns-users/2005-March/047944.html</a></p>]]></content>
      
      
        <tags>
            
            <tag> TurboGears </tag>
            
            <tag> NS2 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何在 VS C++ .Net 2003 底下編譯 INET</title>
      <link href="/2005/04/28/%E5%A6%82%E4%BD%95%E5%9C%A8-VS-C-Net-2003-%E5%BA%95%E4%B8%8B%E7%B7%A8%E8%AD%AF-INET/"/>
      <url>/2005/04/28/%E5%A6%82%E4%BD%95%E5%9C%A8-VS-C-Net-2003-%E5%BA%95%E4%B8%8B%E7%B7%A8%E8%AD%AF-INET/</url>
      <content type="html"><![CDATA[<p>針對我所要用的編譯器 還有 執行檔 定義一些所需要的set path</p><p>在命令提示字元底下一定要找得到以下幾個可執行的程式:nmakeclvcvars32.bat</p><p>我的電腦按右鍵-&gt;內容-&gt;進階-&gt;環境變數-&gt;系統變數-&gt;編輯 path, 加入C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\bin;</p><p>切換到目錄, 執行 vcvars32.bat 以設定vc71環境.若 path 變數未設好, 則會出現找不到這檔案的訊息.接著執行 m.bat 編譯即可.</p><p>若發生問題, 可以試著鍵入makemake重新產生 makefiles.再打入nmake -f <a href="http://makefile.vc" target="_blank" rel="noopener">makefile.vc</a> depend確認相依性.之後再執行 m.bat 重新編譯一次即可</p><p>參考網址<a href="http://java.csie.nctu.edu.tw/~deryann/paper/HowToSTL.htm" target="_blank" rel="noopener">http://java.csie.nctu.edu.tw/~deryann/paper/HowToSTL.htm</a></p>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用 OMNeT++ 跑 TinyOS 程式</title>
      <link href="/2005/04/28/%E4%BD%BF%E7%94%A8-OMNeT-%E8%B7%91-TinyOS-%E7%A8%8B%E5%BC%8F/"/>
      <url>/2005/04/28/%E4%BD%BF%E7%94%A8-OMNeT-%E8%B7%91-TinyOS-%E7%A8%8B%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><a href="http://wwwes.cs.utwente.nl/ewsnsim/" target="_blank" rel="noopener">http://wwwes.cs.utwente.nl/ewsnsim/</a></p><p>這裡有使用 OMNeT++ 跑 TinyOS 程式的 wireless framework,</p><p><img src="http://wwwes.cs.utwente.nl/ewsnsim/figures/simulation.png" alt=""></p><p>看起來蠻適合用來做 sensor network/p2p 模擬的</p>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>6th. day of porting INET6  第六天</title>
      <link href="/2005/04/05/6th-day-of-porting-INET6-%E7%AC%AC%E5%85%AD%E5%A4%A9/"/>
      <url>/2005/04/05/6th-day-of-porting-INET6-%E7%AC%AC%E5%85%AD%E5%A4%A9/</url>
      <content type="html"><![CDATA[<p>11th. Part:IPv4d/IPProcessing 模組功能等同 IPv4/IP 模組</p><p>因此 IPv4 資料夾即已實作 IPv4 協定IPv4d 資料夾內程式則是將IP模組內容拆開成多個子模組,以此推論, 若模擬的目標是 IP 協定運作情形,單單只看到 IP 模組並不能滿足要求時,則將 Nodes/INET/ 各 .ned 檔中的&quot;IP&quot; 改成&quot;IPProcessing&quot;應該就可以看到更詳細的 IP 協定運作情形. 建議名稱: Routerd / Router6d?</p><p>節點先做 Nodes/INET6/BurstHost6 與 Router6, StandardHost6 稍後再處理</p><ul><li>要寫自行設定模組的 Tutorial</li></ul><p>12th. Part:INET比 NS2 好的特色:FlatNetworkConfigurator,只需指定網域/遮罩,INET 即自動配置各節點模擬用的位址.</p><ul><li>要研究 AutoRouting 中 FlatNetworkConfigurator 的做法(怎麼與 ND 互補? (有 ND 那 FlatNetworkConfigurator 就不應作用於’*Host’上) ex:</li><li>決定 Prefix/Prefix Lenth(Subnetmask),</li><li>設定啟不啟動 DAD 等)</li></ul><p>Neighbor Discovery vs ARPIPv6d/ND 將作為一個模組來對應 NetworkInterfaces/ARP</p><p>IP protocol header is represented by the IPDatagram message class</p>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NS2 模組編譯心得</title>
      <link href="/2005/03/28/NS2-%E6%A8%A1%E7%B5%84%E7%B7%A8%E8%AD%AF%E5%BF%83%E5%BE%97/"/>
      <url>/2005/03/28/NS2-%E6%A8%A1%E7%B5%84%E7%B7%A8%E8%AD%AF%E5%BF%83%E5%BE%97/</url>
      <content type="html"><![CDATA[<p>(討論區整理得)</p><p>如果是已經Compiler過的ns2, 則改Makefile然後在ns2的目錄下例如: ns2.2x則是在ns-2.2x<span style=";font-family:verdana,arial,helvetica;font-size:85%;"> 目錄下</span><span style=";font-family:verdana,arial,helvetica;font-size:85%;">執行</span></p><p>#make depand#make</p><p>這樣就可以從新compiler ns2並且加入自己的模組</p><p>如果想要加入自己寫的程式, 則可以修改 ns2 的 Makefile如果是還未 Compiler 過的 ns2, 則修改 <a href="http://Makefile.in" target="_blank" rel="noopener">Makefile.in</a>然後依照 ns2 的安裝說明來安裝</p>]]></content>
      
      
        <tags>
            
            <tag> NS2 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>5th. day of porting INET6 第五天</title>
      <link href="/2005/03/26/5th-day-of-porting-INET6-%E7%AC%AC%E4%BA%94%E5%A4%A9/"/>
      <url>/2005/03/26/5th-day-of-porting-INET6-%E7%AC%AC%E4%BA%94%E5%A4%A9/</url>
      <content type="html"><![CDATA[<p>9th. Part:編輯 IP6Datagram.msg參考 <a href="http://www.iana.org/numbers.html" target="_blank" rel="noopener">IANA</a> 上<span style="font-family:monospace;"> </span><a href="http://www.iana.org/assignments/protocol-numbers" target="_blank" rel="noopener">PROTOCOL NUMBERS</a> 來改寫 IP6Datagram.msg</p><p>Protocol field -&gt;  Next Header field因此 enum 名稱IP6ProtocolFieldId 改成  IP6NextHeaderFieldId</p><p>IPv4 上叫 Protocol field, IPv6 上稱 Next Header field為了相容性, 將原本定義的 Protocol field 全保留之外, 另外新增</p><ul><li>IP6_PROT_IPv6_Route = 43;  //Routing Header for IPv6       [Deering]</li><li>IP6_PROT_IPv6_Frag =  44;  //Fragment Header for IPv6     [Deering]</li><li>IP6_PROT_ESP   = 50;  //Encap Security Payload            [RFC2406]</li><li>IP6_PROT_AH   = 51;  //Authentication Header               [RFC2402]</li><li>IP6_PROT_IPv6_ICMP  = 58; //ICMP for IPv6                [RFC1883]IP6_PROT_NONE  = 59; --&gt; IP6_PROT_NoNxt  = 59; //No Next Header for IPv6           [RFC1883]</li><li>IP6_PROT_Opts  = 60; //Destination Options for IPv6      [RFC1883]</li><li>IP6_PROT_ENCAP = 98; //Encapsulation Header         [RFC1241,RXB3]</li></ul><p>除了這些之外, 順便把一些 Routing protocol 的號也加了上去.</p><p>IP6_PROT_IPv6_MOBILITY 原本給 62,  改成IP6_PROT_IPv6_MOBILITY = 135; //Mobility Header for IPv6 [RFC3775]</p><p>從一串配給號碼中發現比較特別的是</p><pre>61                 any host internal protocol           [IANA]63                 any local network                    [IANA]68                 any distributed file system          [IANA]99                 any private encryption scheme        [IANA]114                any 0-hop protocol                   [IANA]</pre> 剛開始看不知有何特別作用, 後來想想這幾個保留位看起來對模擬工具好像不賴<p>–&gt; 有新協定要試作?不必改到標頭定義, 暫時先用這幾個吧!不過沒有標頭名稱怎麼辦?Orz … 還是暫時不要加進去好了</p><p>本檔案編完的下一步應是編輯 IP6Address.h 或  IP6ControInfo.msg 吧</p><p>Ref:  <a href="http://www.iana.org/assignments/ipv6-parameters" target="_blank" rel="noopener">IP VERSION 6 PARAMETERS</a> ,   <a href="http://www.iana.org/assignments/icmpv6-parameters" target="_blank" rel="noopener">ICMPv6 TYPE NUMBERS</a></p><p>10th. Part:</p><pre>編輯 IP6Datagram.msg 中的 message IP6Datagram :參考 IPv6Suite IP6Datagram.cc 來改寫 IP6Datagram.msgToDo:1\. 將相關各標頭定義在檔案裡.2\. 定義 flow_label 結構(struct, 20 bit = double + short OR int + int + short OR?)3\. 訂 Options TypesIP6Datagram.cc 中標頭是如此定義出來的:static const ipv6_hdr IPV6_INITIAL_HDR ={0x60000000, //version 6, traffic class of 0, flow label of 00,   //payload of 059,   //No next header yet0,   //Hop Limit set to uninitialisedIPv6_ADDR_UNSPECIFIED,IPv6_ADDR_UNSPECIFIED};</pre>完整的標頭:<p>message IP6Datagram{properties://g Still unknown its funcomitGetVerb = true;fields:short version            = 6;                               // version 6int traffic_class        = 0;                               // traffic class of 0IP6FlowLabel flow_label;                                    // flow label of 0double payload_length    = 0;                               // payload of 0int next_header enum(IP6NextHeaderFieldId) = IP_PROT_NONxt; // No next header yetint hop_limit            = 0;                               //Hop Limit set to uninitialisedIP6Address srcAddress;IP6Address destAddress;}</p><p>即將碰到 day 3 提到的 延伸標頭處理 問題. <a href="http://ietf.org/rfc/rfc2460.txt?number=2460" target="_blank" rel="noopener">RFC2460</a> 上的敘述是這樣的</p><pre>4.1  Extension Header Order [Page 6]When more than one extension header is used in the same packet, it isrecommended that those headers appear in the following order:   IPv6 header   Hop-by-Hop Options header   Destination Options header (note 1)   Routing header   Authentication header (note 2)   Encapsulating Security Payload header (note 2)   Destination Options header (note 3)   upper-layer header   Fragment header填 class IP6Options,碰到Option_Data: Variable-length field.  Option-Type-specific data 的問題經 majorlee 學長指點[RFC 3493](http://rfc-editor.org/rfc/rfc3493.txt) Basic Socket Interface Extensions for IPv6.[RFC 3542](http://rfc-editor.org/rfc/rfc3542.txt) Advanced Sockets Application Program Interface (API) for IPv6裡可能會有答案.</pre>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>4th. day of porting INET6 第四天</title>
      <link href="/2005/03/26/4th-day-of-porting-INET6-%E7%AC%AC%E5%9B%9B%E5%A4%A9/"/>
      <url>/2005/03/26/4th-day-of-porting-INET6-%E7%AC%AC%E5%9B%9B%E5%A4%A9/</url>
      <content type="html"><![CDATA[<p>7th Part:為了對將來開發好的程式進行測試, 新增目錄INET/Tests/IPv6同時也發現原本 INET 程式的測試數量明顯不足, 但還好結果不差.</p><p>發現 Firebird 的 scratchbook extension 可以編輯已截取的網頁文件, 可以在原文件上畫重點並加上註解,我想應該充分將這個特點利用在 INET 與 IPv6Suite 線上文件注釋上.</p><p>8th. Part:分析 Mobiwan2 架構, 並與學長留下的舊版程式碼作比對.為此使用 <a href="http://sourceforge.net/projects/winmerge/" target="_blank" rel="noopener">WinMerge</a> 程式來協助版本比對的工作.</p><p>OMNET++ INET 與 NS2 的比較:目錄名: INET mobiwan架構: 按照 TCP/IP 作分層目錄 / 平行資料夾目錄相依性: 放到 OMNET++ 3.0以上版本目錄下, 依照 Readme 即可安裝 / 需 Patch 特定版本的 NS2</p><p>Mobiwan 新舊檔案比較檔案: 新 / 舊<a href="http://ipv6.cc" target="_blank" rel="noopener">ipv6.cc</a>, ipv6.h:Network --&gt; NetworkAgent</p><p><a href="http://ipv6.cc" target="_blank" rel="noopener">ipv6.cc</a> - line 416r line 497:hdr_ipinip **ppinhdr = (hdr_ipinip **)p-&gt;access(off_ipinip_); 改成:hdr_ipinip **ppinhdr = (hdr_ipinip **)hdr_ipinip::access§;</p><p><a href="http://mipv6.cc" target="_blank" rel="noopener">mipv6.cc</a>  大修改mipv6.h: Binding訊息 , Mobile IPv6 Base Agent, Mobile IPv6 Node</p><p>ipv6routing.h, classifer-src.h 完全相同</p><p>tcl/lib 2.27 版多了很多檔案, 包含2.1b1版所有檔案. 尚不知是否會造成什麼影響</p>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>3rd. day of porting INET6 第三天</title>
      <link href="/2005/03/26/3rd-day-of-porting-INET6-%E7%AC%AC%E4%B8%89%E5%A4%A9/"/>
      <url>/2005/03/26/3rd-day-of-porting-INET6-%E7%AC%AC%E4%B8%89%E5%A4%A9/</url>
      <content type="html"><![CDATA[<p>5th Part:閱讀論文: KAME IPv6 Impliment issue文中指出 IPv6 遵照 IPv4 基礎來修改, 所以基本觀念不變.文中也提出一些porting 中遇上的問題:1. Scope 位址處理2. 多重位址應綁介面(Interface)而非綁節點(Node)3. 延伸標頭處理4. IPSec</p><p>目前可能會遇到的問題還不只這些:1. 位址分析2. 明確的參考資料…, etc</p><p>6th. Part閱讀書籍: C++ 風格與藝術 第二版(Practical C++ Programming, 2e)整本書說明都很清晰, 應該買一本手邊隨時參考</p><p>程式碼要像文章一樣分段落章節, 每段並加入主題說明,變數避免用縮寫, 以降低程式複雜度</p><p>原型: 先寫規格中可以運作的部分,當這一小部份運作正常之後,再以它為基礎,建立其他的功能.</p><p>程式檔中應包含:Header 標題Author 作者Purpose 目的Usage 用法References 參考資料File Formats 列出讀取/寫入的檔案與格式Restrictions 限制 (Q by myself:是否可延伸成代辦事項? Revice: ToDo集中管理會比較有效率)Revision HistoryError HandlingCopyright and LicenseNotes 補充說明</p><ul><li>編輯提供 .ned 架構檔在 NodePad++ 編輯關鍵字加亮的定義,但還沒找到獨立提供這個設定檔的方法</li></ul><p>3/11 update: 定義在 NodePad++ 資料夾下 userDefineLang.xml 檔中</p>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>16.3. 使用方法</title>
      <link href="/2005/03/26/16-3-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2005/03/26/16-3-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="16-3-1-確認是否支援">16.3.1. 確認是否支援</h2><p>嘗試載入模組, 確認是否編譯成功<font><span style="color:#000000;"><pre class="PROGRAMLISTING"># modprobe ip6_tables</pre></span></font></p><p>確認相容性<font><span style="color:#000000;"><pre class="PROGRAMLISTING"># [ ! -f /proc/net/ip6_tables_names ] &amp;&amp; echo “Current kernel doesn’t support� ‘ip6tables’ firewalling (IPv6)!”</pre></span></font></p> <h2 id="16-3-2-學習如何使用-ip6tables">16.3.2. 學習如何使用 ip6tables</h2><h3 id="16-3-2-1-列出所有-ipv6-netfilter-輸入條件">16.3.2.1. 列出所有 IPv6 netfilter 輸入條件</h3><p><font><span style="color:#000000;"></span></font></p><ul><li>短指令 <span style="color:#000000;"><pre class="PROGRAMLISTING"># ip6tables -L</pre></span></li></ul> <ul><li>延伸指令 <span style="color:#000000;"><pre class="PROGRAMLISTING"># ip6tables -n -v --line-numbers -L</pre></span></li></ul>    <h3 id="16-3-2-2-列出特定過濾器">16.3.2.2. 列出特定過濾器</h3><p><font><span style="color:#000000;"><pre class="PROGRAMLISTING"># ip6tables -n -v --line-numbers -L INPUT</pre></span></font></p> <h3 id="16-3-2-3-使用選項在輸入過濾器中插入紀錄規則">16.3.2.3. 使用選項在輸入過濾器中插入紀錄規則</h3><p><font><span style="color:#000000;"><pre class="PROGRAMLISTING"># ip6tables --table filter --append INPUT  -j LOG --log-prefix &quot;INPUT:&quot;� --log-level 7</pre></span></font></p><h3 id="16-3-2-4-在輸入過濾器中插入拋棄條件">16.3.2.4. 在輸入過濾器中插入拋棄條件</h3><p><font><span style="color:#000000;"><pre class="PROGRAMLISTING"># ip6tables --table filter --append INPUT  -j DROP</pre></span></font></p> <h3 id="16-3-2-5-依號碼刪除一筆條件">16.3.2.5. 依號碼刪除一筆條件</h3><p><font><span style="color:#000000;"><pre class="PROGRAMLISTING"># ip6tables --table filter --delete INPUT 1</pre></span></font></p> <h3 id="16-3-2-6-允許-icmpv6-訊息">16.3.2.6. 允許 ICMPv6 訊息</h3><p>使用較舊的Linux核心 (未修正的核心2.4.5 與 iptables-1.2.2) 將無法指定類型(type)</p><ul><li>接受透過隧道(Tunnel)進來的 ICMPv6 通訊 <font><span style="color:#000000;"><pre class="PROGRAMLISTING"># ip6tables -A INPUT -i sit+ -p icmpv6 -j ACCEPT</pre></span></font></li></ul> <ul><li>接受透過隧道(Tunnel)出去的 ICMPv6 通訊 <font><span style="color:#000000;"><pre class="PROGRAMLISTING"># ip6tables -A OUTPUT -o sit+ -p icmpv6 -j ACCEPT </pre></span>新的Linux核心可以指定ICMPv6 類型:<font><span style="color:#000000;"><pre class="PROGRAMLISTING"># ip6tables -A INPUT -p icmpv6 --icmpv6-type echo-request -j ACCEPT</pre></span></font></font></li></ul> <h3 id="16-3-2-7-速率限制">16.3.2.7. 速率限制</h3><p><font><span style="color:#000000;"> <pre class="PROGRAMLISTING"></pre></span></font></p> <p><a href="http://www.tldp.org/HOWTO/Linux+IPv6-HOWTO/x2231.html" target="_blank" rel="noopener">http://www.tldp.org/HOWTO/Linux+IPv6-HOWTO/x2231.html</a></p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>16.2. 準備</title>
      <link href="/2005/03/26/16-2-%E6%BA%96%E5%82%99/"/>
      <url>/2005/03/26/16-2-%E6%BA%96%E5%82%99/</url>
      <content type="html"><![CDATA[<p>16.2.1. 取得原始檔</p><p>取得最新的 Linux 核心原始檔: <a href="http://www.kernel.org/" target="_blank" rel="noopener">http://www.kernel.org/</a></p><p>取得最新的 iptables 套件:</p><ul><li>Source tarball (kernel 修正檔用): <a href="http://www.netfilter.org/" target="_blank" rel="noopener">http://www.netfilter.org/</a></li><li>Source RPM for rebuild of binary (for RedHat systems): <a href="ftp://ftp.redhat.com/redhat/linux/rawhide/SRPMS/SRPMS/" target="_blank" rel="noopener">ftp://ftp.redhat.com/redhat/linux/rawhide/SRPMS/SRPMS/</a> or perhaps also at <a href="http://www.netcore.fi/pekkas/linux/ipv6/" target="_blank" rel="noopener">http://www.netcore.fi/pekkas/linux/ipv6/ </a> <span style="font-weight: bold;"></span>16.2.2. 將原始檔解壓縮</li></ul><p>切換到原始檔所在目錄:<font><span style="color:#000000;"><pre class="PROGRAMLISTING"># cd /path/to/src</pre></span></font></p><p>將原始檔解開並更名<font><span style="color:#000000;"><pre class="PROGRAMLISTING"># tar z|jxf kernel-version.tar.gz|bz2</pre></span></font></p><h1>mv linux linux-version-iptables-version+IPv6 解壓縮iptables 原始檔</h1><p><font><span style="color:#000000;"><pre class="PROGRAMLISTING"># tar z|jxf iptables-version.tar.gz|bz2</pre></span></font></p><p>16.2.3. 將最新 iptables/IPv6-相關 修正檔修正到 Linux 核心原始檔上切換到 iptables 所在目錄:<font><span style="color:#000000;"><pre class="PROGRAMLISTING"># cd iptables-version</pre></span></font></p><p>使用修正檔<font><span style="color:#000000;"><pre class="PROGRAMLISTING"># make pending-patches KERNEL_DIR=/path/to/src/linux-version-iptables-version/ </pre></span><font><font><font><span style="color:#000000;"><pre class="PROGRAMLISTING">使用其他IPv6相關修正檔 (核心尚未包含的)</pre></span><font><span style="color:#000000;"><pre class="PROGRAMLISTING"># make patch-o-matic KERNEL_DIR=/path/to/src/linux-version-iptables-version/</pre></span></font></font></font></font></font></p> <p>在以下選項中選擇 yes (iptables-1.2.2)</p><ul><li>ah-esp.patch</li><li>masq-dynaddr.patch (only needed for systems with dynamic IP assigned WAN connections like PPP or PPPoE)</li><li>ipv6-agr.patch.ipv6</li><li>ipv6-ports.patch.ipv6</li><li>LOG.patch.ipv6</li><li>REJECT.patch.ipv6</li></ul><p>確認 IPv6 extensions<br><font><span style="color:#000000;"> <pre class="PROGRAMLISTING"><font><span style="color:#000000;"><pre class="PROGRAMLISTING"># make print-extensionsExtensions found: IPv6:owner IPv6:limit IPv6:mac IPv6:multipor</pre></span></font></pre></span> 16.2.4. 配置, 建立與安裝新 Linux 核心切換到Linux核心所在目錄:<font><span style="color:#000000;"><pre class="PROGRAMLISTING"># cd /path/to/src/linux-version-iptables-version/</pre></span></font></font></p><p>編輯 Makefile<font><span style="color:#000000;"><pre class="PROGRAMLISTING">- EXTRAVERSION =</pre></span></font></p><ul><li>EXTRAVERSION = -iptables-version+IPv6-try 執行 configure, 啟動 IPv6 相關支援<font><span style="color:#000000;"><pre class="PROGRAMLISTING">            Code maturity level optionsPrompt for development and/or incomplete code/drivers : yesNetworking optionsNetwork packet filtering: yesThe IPv6 protocol: moduleIPv6: Netfilter ConfigurationIP6 tables support: moduleAll new options like following:limit match support: moduleMAC address match support: moduleMultiple port match support: moduleOwner match support: modulenetfilter MARK match support: moduleAggregated address check: modulePacket filtering: moduleREJECT target support: moduleLOG target support: modulePacket mangling: moduleMARK target support: module<font><font><font><font><font><span style="color:#000000;"></span></font></font></font></font></font></pre></span></font></li></ul><p></p> <p>同時亦配置其他與系統相關的參數. 完整的核心編譯與安裝請參照其他 HOWTOs<span style="font-weight: bold;"></span></p><p><span style="font-weight: bold;"></span>16.2.5. 重新建立與安裝iptables binaries</p><p>確認核心原始碼已存在於 /usr/src/linux/</p><p>將舊目錄更名<font><span style="color:#000000;"><pre class="PROGRAMLISTING"># mv /usr/src/linux /usr/src/linux.old</pre></span></font></p><p>建立一個新的軟連結(softlink)<font><span style="color:#000000;"><pre class="PROGRAMLISTING"># ln -s /path/to/src/linux-version-iptables-version /usr/src/linux</pre></span></font></p><p>重新建立 SRPMS<font><span style="color:#000000;"><pre class="PROGRAMLISTING"># rpm --rebuild /path/to/SRPMS/iptables-version-release.src.rpm</pre></span></font></p><p>安裝新的 iptables 套件 (iptables + iptables-ipv6)</p><ul><li>在 RH 7.1 系統上, 正常狀況下已安裝好舊版的 iptables , 因此我們&quot;更新&quot;它</li></ul><p><font><span style="color:#000000;"> <pre class="PROGRAMLISTING"><font><span style="color:#000000;"><pre class="PROGRAMLISTING"><font><span style="color:#000000;"><pre class="PROGRAMLISTING"># rpm -Fhv /path/to/RPMS/cpu/iptables*-version-release.cpu.rpm</pre></span></font></pre></span></font></pre></span></font></p> <ul><li>若尚未安裝, 就先&quot;安裝&quot;它 <font><span style="color:#000000;"><pre class="PROGRAMLISTING"># rpm -ihv /path/to/RPMS/cpu/iptables*-version-release.cpu.rpm</pre></span></font></li></ul> <ul><li>On RH 6.2 systems, normally, no kernel 2.4.x is installed, therefore the requirements don’t fit. Use “–nodeps” to install it <font><span style="color:#000000;"> <pre class="PROGRAMLISTING">&gt; </pre> </span></font></li></ul><p><font><span style="color:#000000;"> <pre class="PROGRAMLISTING"><font><span style="color:#000000;"><pre class="PROGRAMLISTING"># rpm -ihv --nodeps /path/to/RPMS/cpu/iptables*-version-release.cpu.rpm</pre></span></font></pre></span></font></p><p>也許須先新建一個軟連結給 iptables 參照檔<font><span style="color:#000000;"><pre class="PROGRAMLISTING"># ln -s /lib/iptables/ /usr/lib/iptables</pre></span></font></p> ]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>16.1. 使用 netfilter6 作防火牆</title>
      <link href="/2005/03/26/16-1-%E4%BD%BF%E7%94%A8-netfilter6-%E4%BD%9C%E9%98%B2%E7%81%AB%E7%89%86/"/>
      <url>/2005/03/26/16-1-%E4%BD%BF%E7%94%A8-netfilter6-%E4%BD%9C%E9%98%B2%E7%81%AB%E7%89%86/</url>
      <content type="html"><![CDATA[<p>IPv6 原生防火牆僅 Linux 核心 2.4 版以上才有支援. 在較舊的 2.2 版以下你只能透過協定 41過濾IPv6-in-IPv4 封包.</p><p>注意: 以下敘述的規則或範例不一定能真正保護你的系統! 本書對此不負任何責任</p><p>在安裝後測試你的規則設定, 可參照 <a href="http://www.tldp.org/HOWTO/Linux+IPv6-HOWTO/ipv6-security-auditing.html" target="_blank" rel="noopener">Section 17.3</a> .</p><p>注意USAGI 專案正在處理IPv6結束連線追蹤問題! 如此將可讓安全規則設定更加容易且更安全!</p> <div class="SECT2"><h2 id="a-name-aen2135-a-16-1-1-更多資訊"><a name="AEN2135"></a>16.1.1. 更多資訊</h2><ul><li><a href="http://www.netfilter.org/" target="_blank" rel="noopener">Netfilter project</a></li><li><a href="http://lists.samba.org/pipermail/netfilter/" target="_blank" rel="noopener">maillist archive of netfilter users</a></li><li><a href="http://lists.samba.org/pipermail/netfilter-devel/" target="_blank" rel="noopener">maillist archive of netfilter developers</a></li><li><a href="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-kernel.html#netfilter6" target="_blank" rel="noopener">Unofficial status informations</a></li></ul></div>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>16. 防火牆</title>
      <link href="/2005/03/26/16-%E9%98%B2%E7%81%AB%E7%89%86/"/>
      <url>/2005/03/26/16-%E9%98%B2%E7%81%AB%E7%89%86/</url>
      <content type="html"><![CDATA[<p>IPv6 防火牆相當重要, 特別是當在內部網路使用全球通用位址時. 因為IPv6不像在 IPv4 網路裡內部主機自動由私有 IPv4 位址保護, 如 <a href="http://www.faqs.org/rfcs/rfc1918.html" target="_blank" rel="noopener">RFC 1918 / Address Allocation for Private Internets</a> 或私有 IPv4 位址自動分配 (Automatic Private IP Addressing, APIPA)<a href="http://www.google.com/search?q=apipa+microsoft" target="_blank" rel="noopener">Google search for Microsoft + APIPA</a>, 在 IPv6上一般通常使用全球通用位址, 而任何具備IPv6 連線能力的節點都可以連結上所有內部 IPv6 支援節點.</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>17.3. IPv6 安全性驗證</title>
      <link href="/2005/03/26/17-3-IPv6-%E5%AE%89%E5%85%A8%E6%80%A7%E9%A9%97%E8%AD%89/"/>
      <url>/2005/03/26/17-3-IPv6-%E5%AE%89%E5%85%A8%E6%80%A7%E9%A9%97%E8%AD%89/</url>
      <content type="html"><![CDATA[<p>目前並無合適的工具可用來確認系統上關於IPv6 網路的安全性問題. 目前即使是 <a href="http://www.nessus.org/" target="_blank" rel="noopener">Nessus</a> 或其他商業性安全性檢測軟體都還無法掃描 IPv6 位址.</p><h2 id="17-3-1-法律議題">17.3.1. 法律議題</h2><p>注意: 僅可掃描自有或經過對方授權的電腦, 否則您將有遭遇法律追訴的可能. 在掃描前請多確認掃描目的 IPv6 位址是否正確.</p><h2 id="17-3-2-使用-ipv6-支援-的-netcat-作-ipv6-安全性驗證">17.3.2. 使用 IPv6-支援 的 netcat 作 IPv6 安全性驗證</h2><p>透過<span style="font-size:100%;">使用 IPv6-支援 的 netcat</span> (可參照 <a href="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-apps.html#security-auditing" target="_blank" rel="noopener">IPv6+Linux-status-apps/security-auditing</a> ) 你可以包裝一個指令段(wrapping a script)以完成在特定通訊埠區段的掃描, 或取得 banners 等等工作. 使用範例:</p><p><font><span style="color: rgb(0, 0, 0);"><pre class="PROGRAMLISTING"># nc6 ::1 daytime13 JUL 2002 11:22:22 CEST</pre></span></font></p><h2 id="17-3-3-使用-ipv6-支援-的-nmap-作-ipv6-安全性驗證">17.3.3. 使用 IPv6-支援 的 nmap 作 IPv6 安全性驗證</h2><p><span style="color: rgb(0, 0, 0);"> <pre class="PROGRAMLISTING"><a href="http://www.insecure.org/nmap/" target="_blank" rel="noopener">NMap</a>, 作為世界上最棒的通訊埠掃描工具之一, 從 3.10ALPHA1 版起即支援IPv6 . 使用範例:<span style="color: rgb(0, 0, 0);"><pre class="PROGRAMLISTING"># nmap -6 -sT ::1Starting nmap V. 3.10ALPHA3 ( <a href="http://www.insecure.org/nmap/" target="_blank" rel="noopener">www.insecure.org/nmap/</a> )Interesting ports on localhost6 (::1):(The 1600 ports scanned but not shown below are in state: closed)Port       State       Service22/tcp     open        ssh53/tcp     open        domain515/tcp    open        printer2401/tcp   open        cvspserverNmap run completed – 1 IP address (1 host up) scanned in 0.525 seconds</pre></span></pre></span></p> <h2 id="17-3-4-使用-ipv6-支援-的-strobe-作-ipv6-安全性驗證">17.3.4. 使用 IPv6-支援 的 strobe 作 IPv6 安全性驗證</h2><p><font><font><font><font><font><font><font><font><font><font><font><font> Strobe 是一個 (與NMap相較) 功能較簡單的通訊埠掃描工具<font><font><font>, 但也提供了 IPv6-支援修正檔 (參照 <a href="http://www.bieringer.de/linux/IPv6/status/IPv6+Linux-status-apps.html#security-auditing" target="_blank" rel="noopener">IPv6+Linux-status-apps/security-auditing</a> ). <span style="color: rgb(0, 0, 0);"> <pre class="PROGRAMLISTING">使用範例:<font><span style="color: rgb(0, 0, 0);"><pre class="PROGRAMLISTING"># ./strobe ::1 strobe 1.05 © 1995-1999 Julian Assange <proff org="">.::1 2401 unassigned unknown::1 22 ssh Secure Shell - RSA encrypted rsh::1 515 printer spooler (lpd)::1 6010 unassigned unknown::1 53 domain Domain Name Server</proff></pre></span>附註: strobe 並未繼續開發, 在此顯示的版本並不十分正確.</font></pre></span></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></p><p><font><font> <h2 class="SECT2"><font><font><font><font><font><font><font><font><font><font><font><font><font><font><font><font><font><font><font><font><font><font><font><font><font><font><font><font><font><font><font><font><font><font>17.3.5.<font><font><font><font> 驗證結果<font>若驗證結果與你的 IPv6 安全策略不相符, 使用 IPv6 防火牆來關閉漏洞, 例如使用 netfilter6 (參照 <a href="http://www.tldp.org/HOWTO/Linux+IPv6-HOWTO/firewalling-netfilter6.html" target="_blank" rel="noopener">Firewalling/Netfilter6</a> ).    資訊: 更多關於IP 安全性的資訊可在此取得:      <li></li></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></font></h2></font></font></p><p><a href="http://www.ietf.org/internet-drafts/" target="_blank" rel="noopener">Firewalling Considerations for IPv6 / draft-savola-v6ops-firewalling-??.txt</a></p><li><p><a href="http://www.ietf.org/internet-drafts/" target="_blank" rel="noopener">IPv6 Neighbour Discovery trust models and threats / draft-ietf-send-psreq-??.txt</a></p></li><li><p><a href="http://www.ietf.org/internet-drafts/" target="_blank" rel="noopener">Security Considerations for 6to4 / draft-savola-v6ops-6to4-security-??.txt</a></p></li><li><p><a href="http://www.ietf.org/internet-drafts/" target="_blank" rel="noopener">Access Control Prefix Router Advertisement Option for IPv6 / draft-bellovin-ipv6-accessprefix-??.txt</a></p></li><li><p><a href="http://www.ietf.org/internet-drafts/" target="_blank" rel="noopener">Requirements for Plug and Play IPsec for IPv6 applications /draft-kobayakawa-ipsec-ipv6-pnpipsec-reqts-??.txt </a></p></li><li><p><a href="http://www.ietf.org/internet-drafts/" target="_blank" rel="noopener">Security of IPv6 Routing Header and Home Address Options / draft-savola-ipv6-rh-ha-security-??.txt</a></p></li> <span style="color: rgb(0, 0, 0);"> <pre class="PROGRAMLISTING"></pre> <font></font></span>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>17.1. 節點安全性</title>
      <link href="/2005/03/26/17-1-%E7%AF%80%E9%BB%9E%E5%AE%89%E5%85%A8%E6%80%A7/"/>
      <url>/2005/03/26/17-1-%E7%AF%80%E9%BB%9E%E5%AE%89%E5%85%A8%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>在此非常鼓勵更新所有修正檔並關閉所有非必要的服務. 也最好僅繫結必須的 IPv4/IPv6 位址到所使用的服務上. 同使也安裝上本地防火牆.</p><p>More to be filled…</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>17.2. 存取限制</title>
      <link href="/2005/03/26/17-2-%E5%AD%98%E5%8F%96%E9%99%90%E5%88%B6/"/>
      <url>/2005/03/26/17-2-%E5%AD%98%E5%8F%96%E9%99%90%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>許多服務使用 tcp_wrapper 作為存取限制的參照檔. 以下將描述<a href="http://www.tldp.org/HOWTO/Linux+IPv6-HOWTO/hints-daemons-tcpwrapper.html" target="_blank" rel="noopener"> tcp_wrapper</a> 的使用方式.</p><p>More to be filled…</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>22. 連線相容性</title>
      <link href="/2005/03/26/22-%E9%80%A3%E7%B7%9A%E7%9B%B8%E5%AE%B9%E6%80%A7/"/>
      <url>/2005/03/26/22-%E9%80%A3%E7%B7%9A%E7%9B%B8%E5%AE%B9%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>世界上有些專案專注於測試各作業系統實作 IPv6特性後的連線相容性. 在此提供一些聯結:</p><ul><li><a href="http://www.tahi.org/" target="_blank" rel="noopener">TAHI Project</a></li></ul><p>More coming next…</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>21. 程式設計 (使用 API)</title>
      <link href="/2005/03/26/21-%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88-%E4%BD%BF%E7%94%A8-API/"/>
      <url>/2005/03/26/21-%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88-%E4%BD%BF%E7%94%A8-API/</url>
      <content type="html"><![CDATA[<p>筆者並沒有寫作 IPv6 程式的經驗, 本章也許將由其他人接手或移至其他 HOWTO 中.</p><p>可在此找到更多資訊:</p><ul><li><a href="http://www.faqs.org/rfcs/rfc2553.html" target="_blank" rel="noopener">RFC 2553 / Basic Socket Interface Extensions for IPv6</a></li><li><a href="http://www.ietf.org/internet-drafts/" target="_blank" rel="noopener">Draft / Advanced Sockets API for IPv6 / draft-ietf-ipngwg-rfc2292bis-XY.txt</a></li><li><a href="http://jungla.dit.upm.es/%7Eecastro/IPv6-web/ipv6.html" target="_blank" rel="noopener">Porting applications to IPv6 HowTo</a> , Eva M. Castro</li></ul>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>19. 服務品質 (QoS)</title>
      <link href="/2005/03/26/19-%E6%9C%8D%E5%8B%99%E5%93%81%E8%B3%AA-QoS/"/>
      <url>/2005/03/26/19-%E6%9C%8D%E5%8B%99%E5%93%81%E8%B3%AA-QoS/</url>
      <content type="html"><![CDATA[<p>IPv6 使用訊流標籤(Flow Labels) 與 Traffic Classes 支援服務品質. 我們可以使用 “tc” 指令來控制(包含在 &quot;iproute&quot;套件中).</p><p>額外資訊:</p><ul><li><a href="http://www.ietf.org/internet-drafts/draft-ietf-ipv6-flow-label-03.txt" target="_blank" rel="noopener">IPv6 Flow Label Specification</a></li></ul><p>待補充…</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>18.4. 額外訊息</title>
      <link href="/2005/03/26/18-4-%E9%A1%8D%E5%A4%96%E8%A8%8A%E6%81%AF/"/>
      <url>/2005/03/26/18-4-%E9%A1%8D%E5%A4%96%E8%A8%8A%E6%81%AF/</url>
      <content type="html"><![CDATA[<p>在 Linux  2.6.x 版的核心中你可以同樣使用&quot;ip&quot;指令來獲取 IPsec 的策略(policy)與狀態 :</p><h1>ip xfrm policy</h1><p>…</p><h1>ip xfrm state</h1><p>…</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>18.2. 核心支援(ESP與AH)</title>
      <link href="/2005/03/26/18-2-%E6%A0%B8%E5%BF%83%E6%94%AF%E6%8F%B4-ESP%E8%88%87AH/"/>
      <url>/2005/03/26/18-2-%E6%A0%B8%E5%BF%83%E6%94%AF%E6%8F%B4-ESP%E8%88%87AH/</url>
      <content type="html"><![CDATA[<p>18.2.1. Linux 2.4.x  版的核心支援</p><p>目前 2.4 版未支援. 在加密程式碼部分還有些法律上的問題. 同樣的問題也發生在其他專案上</p><p>18.2.2. Linux 2.6.x  版的核心支援</p><p>目前的版本 ( 2.6.9 以上) 已支援 IPv4 與 IPv6的 IPsec .</p><p>這部份的程式由 USAGI 專案協助實作.</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>18.1. 使用加密與認證的模式</title>
      <link href="/2005/03/26/18-1-%E4%BD%BF%E7%94%A8%E5%8A%A0%E5%AF%86%E8%88%87%E8%AA%8D%E8%AD%89%E7%9A%84%E6%A8%A1%E5%BC%8F/"/>
      <url>/2005/03/26/18-1-%E4%BD%BF%E7%94%A8%E5%8A%A0%E5%AF%86%E8%88%87%E8%AA%8D%E8%AD%89%E7%9A%84%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>有兩種加密與認證的模式可行:</p><p>18.1.1. 傳輸模式 (Transport Mode)</p><p>傳輸模式是種真實的點對點連線模式. 它的IP標頭並未被加密(但通常已包含於認證中), 而只有負載(通常為 ICMP, TCP 或 UDP)被他們的特定標頭所加密</p><p>使用 AES-128來加密,  並使用SHA1來做認證, 此模式讓 MTU 減少 42 位元</p><p>18.1.1. 隧道模式 (Tunnel Mode)</p><p>隧道模式可於點對點和閘道對閘道連線模式中使用. 完整的IP封包將被加密並取得新的IP標頭(The complete IP packet is being encrypted and gets a new IP header prepended .)</p><p>This mode usually decreases the MTU by 40 octets from the MTU of transport mode.<br>在此模式下通常會讓使用了傳輸模式的 MTU 再減少 40 位元</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>18.3. 自動金鑰交換(IKE)</title>
      <link href="/2005/03/26/18-3-%E8%87%AA%E5%8B%95%E9%87%91%E9%91%B0%E4%BA%A4%E6%8F%9B-IKE/"/>
      <url>/2005/03/26/18-3-%E8%87%AA%E5%8B%95%E9%87%91%E9%91%B0%E4%BA%A4%E6%8F%9B-IKE/</url>
      <content type="html"><![CDATA[<p>IPsec 需要透過一個安全的金鑰交換過程. 在Linux中是透過 IKE daemons 程式來達成. 它們也使用公用安全機制(common known secret, 即一般所言的&quot;預先分享安全機制&quot;(pre-shared secret)), 或使用RSA金鑰 (此金鑰也可用在 X.509 認證上)處理對方的認證. 目前Linux上提供有兩種不同的 IKE daemons, 兩者在使用與配置過程上完全不同. 相較於*S/WAN , 筆者比較偏好 &quot;pluto&quot;實作, 因為 &quot;pluto&quot;比較容易而且只需一步設定安裝.</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1.2. 歸類</title>
      <link href="/2005/03/26/1-2-%E6%AD%B8%E9%A1%9E/"/>
      <url>/2005/03/26/1-2-%E6%AD%B8%E9%A1%9E/</url>
      <content type="html"><![CDATA[<p>此 HOWTO 文件應列於&quot;網路/協定&quot;分類</p><p>This HOWTO should be listed in category “Networking/Protocols”.</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.4. FAQ (基礎問題)</title>
      <link href="/2005/03/26/2-4-FAQ-%E5%9F%BA%E7%A4%8E%E5%95%8F%E9%A1%8C/"/>
      <url>/2005/03/26/2-4-FAQ-%E5%9F%BA%E7%A4%8E%E5%95%8F%E9%A1%8C/</url>
      <content type="html"><![CDATA[<p>2.4.1. 為什麼稱作IPv6,而非繼IPv4之後稱為IPv5 ?在任何IP標頭中, 前4位元是為協定版本號所保留的. 所以理論上一個協定的版本號在0和15之間都是可以的:</p><pre><code>* 4 己經為IPv4所使用.* 5 為串流( Stream )協定所保留 (STP, RFC 1819 / 網際網路串流協定第二版)(不曾真正公開使用過)</code></pre><p>因此下一個可以用的號碼是6, 因此 IPv6 就這樣誕生了!</p><p>2.4.2. IPv6 位址: 為什麼IPv6 位址位元數要這麼長?在設計IPv4的時候,人們認為32位元的長度足夠全世界使用. 回頭看看這些年來, 32位元就現在和未來幾年來仍足以使用.然而, 32位元過不久將不能滿足各種網路設備對全球IP位址的需求. 想一想將來要連結網路的移動電話, 汽車(包括電子總控系統), 烤麵包機,冰箱, 照明開關…</p><p>所以設計者選擇了128位元, 是今天IPv4 大小(2^96)與長度的4倍.</p><p>雖然實際可使用的大小可能比它看起來的還要小. 這是因為現在的定義位址設計, 64位元被用於界面識別.另外64位元則用於路由. 假設於目前嚴格的集合階層(/48, /35, …), IPv6 所能提供的位址空間仍可能有耗盡的一天, 但在可見的將來中應仍不會發生.</p><p>您可由 RFC 1715 / The H Ratio for Address Assignment Efficiency and RFC 3194 / The Host-Density Ratio for Address Assignment Efficiency.中得到更進一步的資訊</p><p>2.4.3. IPv6 位址: 為什麼在新的設計裡位元數這麼少?雖然, 可能有些人在考慮IPv8和IPv16, 然而這些設計無論從接受和執行都是那麼的遙遠.目前128bit對於標頭和數據傳輸延遲來說是最佳的選擇.考慮到在IPv4和IPv6的最小最大傳輸單位(MTU),它們分別是576位元組和 1280位元組,IPv4 的標頭長度為20位元組和(最小值,加上IPv4位址選項可以增大到60位元組),在 IPv6 的標頭中則是48位元組(固定不變的), 標頭分別占它們MTU的3.4%和3.8%, 這意味著兩個協定標頭所造成的負載幾乎相同.更多位元的位址需要更大的標頭, 因而佔據更大的負載.</p><p>同樣,考慮到正常連結的MTU最大值(像現在的以太網): 1500位元組(特別的例子:Jumbo frames使用了9k位元組).最終,如果在要傳輸的第三層封包中10%或20%都用來傳送位址而非封包內容, 這可能不是個很好的設計方式.</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.1 什麼是 IPv6?</title>
      <link href="/2005/03/26/2-1-%E4%BB%80%E9%BA%BC%E6%98%AF-IPv6/"/>
      <url>/2005/03/26/2-1-%E4%BB%80%E9%BA%BC%E6%98%AF-IPv6/</url>
      <content type="html"><![CDATA[<p>IPv6是將用來取代 IPv4(也叫做IP) 的ㄧ種新的第三層協定 (請參考 linuxports/howto/intro_to_networking/ISO - OSI Model) IPv4是很早以前設計的 (1980年一月, RFC 760 / 網路協定(Internet Protocol)) , 自協定設計之初即不斷地有人要求IP網路協定應提供更多的位址和更高的性能. RFC 2460 / 網路協定第六版 (Internet Protocol Version 6 Specification) 是最新的 RFC 版本. IPv6與IP最主要的不同點在於重新設計了封包標頭. 包括將位址的長度從 32 bits 增加到 128 bits. 因為第三層主要負責使用基於位址的封包路由來達成端對端位址傳輸. 因此與 IPv4 ㄧ樣, 傳輸時必需包含新的IPv6位址(來源和目標). 想知道更多關於 IPv6 歷史的資訊的話可以參考看看較舊版本的 IPv6 相關 RFC 列表 SWITCH IPv6 Pilot / References <a href="http://www.switch.ch/lan/ipv6/references.html" target="_blank" rel="noopener">http://www.switch.ch/lan/ipv6/references.html</a></p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2.3. IPv6 的位址格式 ?</title>
      <link href="/2005/03/26/2-3-IPv6-%E7%9A%84%E4%BD%8D%E5%9D%80%E6%A0%BC%E5%BC%8F/"/>
      <url>/2005/03/26/2-3-IPv6-%E7%9A%84%E4%BD%8D%E5%9D%80%E6%A0%BC%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>前文提到 IPv6 的位址為128位元. 這麼高的位元數換算成一般十進位數字表示法的話, 長度將達到10的39次方:</p><p>2^128-1: 340282366920938463463374607431768211455</p><p>這麼長的數字或位址將很難記得住. 而且, IPv6的位址是逐位定位的(就像IPv4, 但這個觀點不是公認的).所以透過十六進制表示法能更好地表示這些數字. 將每 4 位元(也叫做&quot;nibble&quot;)表示為數字(0-9)或字符 a-f(10-15).這種表示法可以將IPv6的地址長度縮減到可用32個字符來表示.</p><p>2^128-1: 0xffffffffffffffffffffffffffffffff</p><p>這種表示法仍然不是很方便. (因為這樣一長串看下來很容易就會混淆或遺漏了單個十六進制數字), 所以IPv6的設計者將地址形式定為每16位元就用&quot;冒號&quot;區分開來.此外, 開頭的&quot;0x&quot;(在程式設計當中用來表示十六進制數值)也被省略了:</p><p>2^128-1: ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff</p><p>如此一來, 一個可用的地址(請參考之後提到的地址類型)如下:</p><p>3ffe:ffff:0100:f101:0210:a4ff:fee3:9566</p><p>為了簡化, 每個16位元區塊中高位元的0可以被省略:</p><p>3ffe:ffff:0100:f101:0210:a4ff:fee3:9566  -&gt;¬ 3ffe:ffff💯f101:210:a4ff:fee3:9566</p><p>連續值為0的16位元位址區塊可以用&quot;::&quot;表示. 但是在一個IPv6位址當中只能使用這種簡寫一次, 否則就不再是唯一表示的位址了:</p><p>3ffe:ffff💯f101:0:0:0:1  -&gt;  3ffe:ffff💯f101::1</p><p>簡化得最短的 IPv6 本地位址:</p><p>0000:0000:0000:0000:0000:0000:0000:0001  -&gt;  ::1</p><p>也有一種方法叫做簡潔 (compact, base85 coded) 表示法. 定義於 RFC 1924 / IPv6簡潔位址表示法 (定於1996年四月一日),但從沒有被廣泛使用過, 可能只是個愚人節笑話. 但還是給個例子:</p><h1>ipv6calc --addr_to_base85 3ffe:ffff:0100:f101:0210:a4ff:fee3:9566</h1><p>Itu&amp;-ZQ82s&gt;J%s99FJXT</p><p>資訊: ipv6calc 是一個IPv6地址格式的計算和轉換的計劃, 您可以在 ipv6calc 首頁中找到: <a href="http://www.deepspace6.net/projects/ipv6calc.html" target="_blank" rel="noopener">http://www.deepspace6.net/projects/ipv6calc.html</a>鏡像站: <a href="http://mirrors.bieringer.de/www.deepspace6.net/projects/ipv6calc.html" target="_blank" rel="noopener">http://mirrors.bieringer.de/www.deepspace6.net/projects/ipv6calc.html</a></p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>大綱</title>
      <link href="/2005/03/26/%E5%A4%A7%E7%B6%B1/"/>
      <url>/2005/03/26/%E5%A4%A7%E7%B6%B1/</url>
      <content type="html"><![CDATA[<p>//2/22/2005//8/6/2004</p><p>1. 概述</p><pre><code>1.1\. 版權,許可與其它1.2\. 歸類1.3\. 版本, 歷史和待辦事項1.4\. 翻譯1.5\. 技術1.6\. 序1.7\. 使用詞彙與縮寫1.8\. 了解這個 HOWTO 的必需條件</code></pre><p>2. 基礎</p><pre><code>2.1\. 什麼是 IPv6?2.2\. IPv6 在 Linux 作業系統上的歷史2.3\. IPv6 的位址格式的形式 ?2.4\. FAQ 問與答(基礎)</code></pre><p>3. 位址格式</p><pre><code>3.1\. 沒有特殊前綴的位址3.2\. 位址前綴3.3\. 位址格式 (主機部份)3.4\. 用作路由的位址前綴長度</code></pre><p>4. IPv6-支援(ready) 系統確認</p><pre><code>4.1\. IPv6-支援 kernel4.2\. IPv6-支援 網路設定工具4.3\. IPv6-支援 測試/調試 程式4.4\. IPv6-支援 程式4.5\. IPv6-支援 客戶端程式 (selection)4.6\. IPv6-支援 伺服器端程式4.7\. FAQ 問與答 (IPv6-支援 系統確認)</code></pre><p>5. 設定界面</p><pre><code>5.1\. 不同的網路設備5.2\. 啟動與關閉界面</code></pre><p>6. 設定 IPv6 位址</p><pre><code>6.1\. 顯示目前的 IPv6 位址6.2\. 新增 IPv6 位址6.3\. 移除 IPv6 位址</code></pre><p>7. 設定正常 IPv6 路由</p><pre><code>7.1\. 顯示目前的 IPv6 路由7.2\. 新增 IPv6 通過閘道器的路由7.3\. 移除 IPv6 通過閘道器的路由7.4\. 新增 IPv6 通過介面的路由7.5\. 移除 IPv6 通過介面的路由7.6\. IPv6 路由FAQ</code></pre><p>8. 芳鄰搜尋</p><pre><code>8.1\. 使用 &quot;ip&quot; 指令顯示芳鄰8.2\. 使用 &quot;ip&quot; 指令處理芳鄰列表</code></pre><p>9. 設定 IPv6-in-IPv4 通道</p><pre><code>9.1\. 通道的類型9.2\. 顯示目前通道9.3\. 設定點對點的通道9.4\. 設定 6to4 通道</code></pre><p>10. 設定 IPv4-in-IPv6 通道11. 在 /proc-filesystem 的內核設定</p><pre><code>11.1\. 如何存取 /proc-filesystem11.2\. /proc/sys/net/ipv6/ 中的數值類型.11.3\. /proc/sys/net/ipv4/ 中 IPv6 相關的數值類型11.4\. /proc/net/ 中 IPv6 相關的數值類型</code></pre><p>12. Netlink-Interface to kernel13. 網路調試</p><pre><code>13.1\. 伺服器接口(socket) 繫結13.2\. tcpdump 封包傾印範例</code></pre><p>14. 在不同的發行版中設定 IPv6</p><pre><code>14.1\. Red Hat Linux and &quot;clones&quot;14.2\. SuSE Linux14.3\. Debian Linux</code></pre><p>15.自動設定與移動性</p><pre><code>15.1\. 無狀態自動設定15.2\. 使用Router Advertisement Daemon (radvd)達成有狀態自動設定15.3\. 動態主機設定協定 v6 (DHCPv6)15.4\. 移動性</code></pre><p>16. 防火牆</p><pre><code>16.1\. 使用 netfilter6 防火牆16.2\. 準備16.3\. 使用方法</code></pre><p>17.安全性</p><pre><code>17.1\. 節點安全性17.2\. 存取限制17.3\. IPv6 安全性驗證</code></pre><p>18. 加密與認證18.1. 使用加密與認證的模式18.2. 核心支援(ESP與AH)18.3. 自動金鑰交換(IKE)18.4. 額外訊息</p><p>19. 服務品質 (QoS)20. Hints for IPv6-enabled daemons</p><pre><code>20.1\. Berkeley Internet Name Daemon BIND (named)20.2\. Internet super daemon (xinetd)20.3\. Webserver Apache2 (httpd2)20.4\. Router Advertisement Daemon (radvd)20.5\. tcp_wrapper</code></pre><p>21. 程式設計 (使用 API)22. Interoperability23. 更多資訊與網址</p><pre><code>23.1\. 書籍, 文章, 線上評論 (mixed)23.2\. Conferences, Meetings, Summits23.3\. 線上資訊23.4\. IPv6 基礎架構23.5\. Maillists23.6\. 線上工具23.7\. Trainings, Seminars23.8\. 'The Online Discovery' ...</code></pre><p>24. Revision history / Credits / The End</p><pre><code>24.1\. Revision history24.2\. Credits24.3\. 結語</code></pre>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NS2.27 + Mobiwan2 安裝</title>
      <link href="/2005/03/10/NS2-27-Mobiwan2-%E5%AE%89%E8%A3%9D/"/>
      <url>/2005/03/10/NS2-27-Mobiwan2-%E5%AE%89%E8%A3%9D/</url>
      <content type="html"><![CDATA[<p>用來與 OMNET++ IPv6Suite 模組 作對照的模擬工具是 NS2 上的 Mobiwan2 模組.這是目前最多人使用的模擬模組.除了基礎對照系統架設之外,還將根據之前學長在 NS2.1b1 上使用 Mobiwan 的程式,改寫成 for NS2.27 的 Mobiwan2 版本.以順便了解其架構, 並利用其優點在 INET6 porting 上</p><p>剛開始照著NS2 (Network Simulator) 教學手冊 的<a href="http://140.116.72.80/%7Esmallko/ns2/setup.htm" target="_blank" rel="noopener"> 安裝篇</a> 裝,成功後再裝 <a href="http://www.ti-wmc.nl/mobiwan2/" target="_blank" rel="noopener">Mobiwan2</a> 卻遇到問題.</p><p>解決方法是在執行NS2-AllinOne 安裝前先照著 Mobiwan2 網站上的指令 patch 好,</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># cd &lt;your&gt;ns-allinone-2.27/ns-2.27</span><br><span class="line"># zcat &lt;patchfile.gz&gt;&lt;/patchfile.gz&gt;&lt;/your&gt;patchfile.gz&lt;your&gt;&lt;patchfile.gz&gt; |patch -p1&lt;/patchfile.gz&gt;&lt;/your&gt;</span><br></pre></td></tr></table></figure><p>然後再執行 NS2 安裝</p><h1>./install</h1><p>要是已經把 NS2 裝好了怎麼辦? 還能怎麼辦, 我只會一個笨方法…先把之前裝的整個目錄砍掉後, 再裝一次吧…Orz.</p><p><span style="font-family:新細明體;">在Cygwin上測試的方法: 命令列中輸入 </span><span lang="EN-US">startxwin.bat</span><span style="font-family:新細明體;">。會產生一個新的視窗，在此命令視窗中輸入</span></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd your path to ns-2.27</span><br><span class="line">$ ./ns simple-mipv6.tcl</span><br></pre></td></tr></table></figure><p>若要在Fedora Core 3 上安裝, 因為 gcc 版本太新(3.34)的關係, 笨笨的 NS2 不懂得支援,去下載 <a href="http://www.ececs.uc.edu/%7Ecdmc/ucbt/src/ns227-gcc34.patch" target="_blank" rel="noopener">http://www.ececs.uc.edu/~cdmc/ucbt/src/ns227-gcc34.patch </a>這個好心人寫的修正檔,丟到 ns-allinone-2.27 目錄下, 打入</p><p>#patch -p0 -p0 &lt; ns227-gcc34.patch</p><p>修正後再來裝就可以了.</p>]]></content>
      
      
        <tags>
            
            <tag> NS2 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>1st. Day of porting INET6 第一天: 從RFC2463開始</title>
      <link href="/2005/03/06/1st-Day-of-porting-INET6-%E7%AC%AC%E4%B8%80%E5%A4%A9-%E5%BE%9ERFC2463%E9%96%8B%E5%A7%8B/"/>
      <url>/2005/03/06/1st-Day-of-porting-INET6-%E7%AC%AC%E4%B8%80%E5%A4%A9-%E5%BE%9ERFC2463%E9%96%8B%E5%A7%8B/</url>
      <content type="html"><![CDATA[<p>這系列文章僅記錄過程, 目的是從紀錄中看到自己對的 ipv6 了解, 對做事方法的改進.不總結經驗. 因為一但總結經驗就會陷入長段撰寫文件的誤區. 而且在現在階段, 甚至不能確定此專案能否成功. 希望我能有寫出總結經驗文章來的一天吧:)</p><p>1st. Part:第一步先從ICMPv6開始著手 Porting.在熟悉INET目錄規劃後, 首先是根據INET目錄規則來建立INET專案所應用到的目錄,剛開始在Network目錄下先建立IPv6與IPv6d兩個目錄. 並在Nodes目錄下建立INET6目錄.</p><p>從 IETF <a href="http://www.ietf.org/iesg/1rfc_index.txt" target="_blank" rel="noopener">RFC列表</a> 中挖出了 RFC 2463, Internet Control Message Protocol (ICMPv6) for the Internet Protocol Version 6 (IPv6) Specification, 依此為憑開始 porting.</p><p>編輯 Network/IPv6/ICMPv6.ned參照<a href="http://ctieware.eng.monash.edu.au/twiki/bin/view/Simulation/IPv6Suite" target="_blank" rel="noopener"> IPv6Suite</a>, 從 IPv6Suite/IP/IPv6/Generic 目錄下的 ICMPv6.ned. 觀察它的 ICMPv6 模組組成.發現該模組與INET的ICMP.ned大不相同, 是由 IPv6Core, Neighbourdiscovery, ICMPv6Combine, 還有 MLD (multicast) 模組組成的複合模組.MLD模組在剛開始 porting 時可以忽略暫時不處理. 剩下的三塊中…應不應分拆成三個檔案三個simplemodule? , 是否要使用到 ICMPv6Combine 這塊呢? 我馬上陷入了第一個難題中.</p><p>2nd. Part:告解式除錯(Confessional Debug): 為何不先弄好IP header呢? 這絕對是問題.還好意識到這件事情的時間點還算早. 更堅定了我&quot;只有邊寫邊紀錄才能意識到自己的錯誤&quot;的想法, 因此接下來應先搜尋 IP header 定義的部分, 從這裡開始作修改.</p><p>暫時將 DualStack 放到一邊, 完成純 IPv6 Support 的模組後再考慮 DualStack.但一定會將之排入計畫裡.因為雖然 DualStack 對我的論文模擬來說重要性不大,但在實際工作上將會遇到. porting 過一遍心裡會先有點底, 相信多少有些助益.</p>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2nd. day of porting INET6 第二天</title>
      <link href="/2005/03/06/2nd-day-of-porting-INET6-%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
      <url>/2005/03/06/2nd-day-of-porting-INET6-%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
      <content type="html"><![CDATA[<p>3rd. Part:</p><p>再次瀏覽 INET 目錄, 評估應該增修的檔案:初步規劃大致如下:</p><ul><li>Network/IPv6     //.ned, .msg 資源檔, IP6 實作</li><li>Network/IPv6d  //IP6 分模組實作</li><li>Network/Autorouting/FlatNetworkConfigurator6.ned  //模擬用位址自動設定</li><li>Nodes/INET6     //組合模組成為節點</li><li>Applications/PingApp6</li></ul><p>這時又發現了 INET 的一個好處: 模組所包含的目錄大致與 TCP/IP 架構分層符合,對熟悉網路的我來說, 很容易找到應該增修檔案的位址.</p><p>順便規劃 DualStack, 但暫時不做, 原因如 Day1 2nd. Part:</p><ul><li>Network/DualStack</li><li>Network/Autorouting/FlatNetworkConfiguratorDS.ned</li><li>Nodes/DualStack應用層不必修改.</li></ul><p>做 DualStack 的話還會另外引入 6to4 等 transition/tunnel 模組,工作量會遠遠比目前列出的 DualStack所需修改內容多上許多,且現在自己還不具備白手疊床架屋的能力.因此先弄好 IPv6 部分的 porting 才是最重要的.</p><p>昨天思考 ICMPv6 3個模組部分, 決定分拆成多個 simplemodule,在 NetworkLayer6 裡再進行合作.</p><p>4th. Part:編輯 Network/IPv6/IPv6.ned:</p><p>IPControlInfo:When IPv6 sends up a packet to a higher layer protocol, it will also attach an IP6ControlInfo to the packet, with the source and destination IPv6 address</p><ul><li><p>與上層溝通的訊息, 若名稱不改的話. 以後做 DualStack 從上層傳下來的封包會否出問題?</p></li><li><p>另外弄個小 script 來判斷位址長度是否比改名造成的後果來的容易?When delivering packets to higher-layer protocols, the output gate is determined from the Protocol field in the IPv6 header. The protocol-to-gateindex mapping must be given in the protocolMapping string parameter</p></li><li><p>protocolMapping 應該被 NextHeader 或延伸標頭分析取代routing table 儲存在 RoutingTable6 模組裡.if the route entry contained a next hop address, it will be passed to the interface in the attached IPRoutingDecision.</p></li></ul>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在 Windows 上安裝與使用 OMNET++</title>
      <link href="/2005/03/06/%E5%9C%A8-Windows-%E4%B8%8A%E5%AE%89%E8%A3%9D%E8%88%87%E4%BD%BF%E7%94%A8-OMNET/"/>
      <url>/2005/03/06/%E5%9C%A8-Windows-%E4%B8%8A%E5%AE%89%E8%A3%9D%E8%88%87%E4%BD%BF%E7%94%A8-OMNET/</url>
      <content type="html"><![CDATA[<p><a href="//1.1.1">//1.1.1</a> 03/06/05 Doc is Included in INET6 Project<a href="//1.1">//1.1</a> 01/05/05<a href="//1.0">//1.0</a> 12/31/04<a href="//0.9">//0.9</a> 12/28/04<a href="//0.5">//0.5</a> 12/26/04 init</p><p>Install and Using OMNET++ on Windows對開發者來說, 儘管在 Linux 環境下編譯 OMNET++ 模擬套件也是個好選擇,但是也有不少人希望能在 Windows 環境下順利利用 OMNET++ 編譯模擬套件.而目前相關文件仍然極少.本文總結了作者如何在 Windows 環境下利用 Microsoft Visual C++ 6 (MSVC6) 編譯 OMNET++ 模擬套件的經驗</p><p><strong>1. 安裝 MSVC6 &amp; MSVC Service Pack 6</strong>安裝 MSVC6 時&quot;註冊變數&quot;選項一定要勾選</p><p><strong>2. 設定</strong>打開選單 -&gt; 工具(Tools) -&gt; 自訂(Customize)點選 Add-ins and Macro files 分頁標籤(Tab) ,看到omnetpp選項, 將之勾選</p><p>回到命令(Commands) 分頁標籤(Tab),分頁左上角的分類(Category) 選單會多出巨集(Macros) 選項.選擇巨集(Macros) 選項, 看到 addNEDfileToProject 巨集,點選 addNEDfileToProject 巨集,使用鼠標將巨集拖曳到工具列上,選擇合適的位置, 圖示後按確定.</p><p>在完成上兩步之後, 我們已經將 VC 環境設定完成,可以準備開始在 VC 上建立新的 OMNET++ 專案,或是匯入原本不是在 Windows 環境下執行的專案</p><p><strong>3. VC 中建立新專案</strong>若要從頭開始建立新的模擬套件,可以先在 Windows 檔案管理員中任意地點建立放置新專案的資料夾,再從 OMNET++ 安裝目錄/sample 中複製 .dsw, .dsp 專案檔到新專案的資料夾中.</p><p>複製範例專案檔的目的是因為範例專案檔已經將 OMNET++ 編譯所需的編譯器,連結旗標, Tkenv/Cmdenv 參數等都設定好了, 讓我們不需再重新設定.</p><p>點擊 .dsw檔進入 VC 編輯畫面.將檔案檢視 (File View) 中的檔案名稱清空後, 即可開始編輯新的專案</p><p><strong>4. VC 中匯入專案</strong>有時我們會想使用別人在 OMNET++ 中已完成的模擬套件或成果,而對方使用的平台並非 Windows,此時我們可以用類似前一步驟的方式為這個模擬套件加入新的 VC 專案檔.從omnet安裝目錄/sample 中複製 .dsw, .dsp 專案檔到原來模擬套件的資料夾中.點擊 .dsw 檔進入 VC 編輯畫面.將 File View 中的檔案名稱清空後, 即可開始編輯新的專案</p><p><strong>5. VC 中編輯專案</strong>在 IDE 環境下依照一般 VC 中編輯專案的方式增刪編輯檔案.但要將其他平台上的 c++ 檔案拿來用時, 注意檔案副檔名不能使用 .cc,副檔名都要先改成 .cpp 後在VC下才能正常編譯(這點好像不一定, 至少在 INET 模組裡就不必改)</p><p>當遇到設計好 .ned 檔要加入 VC 時,先點選工具列上新增的 addNEDfileToProject 巨集圖示,輸入該 .ned 檔檔名(包含副檔名),之後  addNEDfileToProject 巨集會幫忙生成 .ned 對應的 cpp 檔.</p><p>詳細設定可參考 OMNeT++ 安裝目錄下 doc/Readme-MSVC.txt</p><p><strong>6, VC 中編譯專案</strong>首先打開命令列, 準備開始編譯的動作.命令列開啟流程為按作業系統左下角的&quot;開始&quot;, 在選單中選擇&quot;執行&quot;,其後將跳出輸入視窗, 在視窗中鍵入 <code>cmd (或 Terminal)</code>  按下確定後即彈出類似 Dos 視窗.接著用一般 Dos 指令切換到專案目錄下準備開始編譯, 鍵入<code>opp_nmakemake</code>  這動作會根據目錄中的來源檔案生成 <a href="http://Makefile.vc" target="_blank" rel="noopener">Makefile.vc</a> 檔案</p><p>接著使用下面指令來生成模擬:<code>nmake -f Makefile.vc</code>  做完以上部驟之後就可以照一般 VC 編譯方式編譯啦:)</p><p><strong>7, 重新編譯專案</strong>之前已編譯過時資料夾中會存有舊的 <a href="http://Makefile.vc" target="_blank" rel="noopener">Makefile.vc</a> 檔案, 可鍵入 <code>opp_nmakemake -f</code>  來強制覆寫 <a href="http://Makefile.vc" target="_blank" rel="noopener">Makefile.vc</a> .</p><p>在編譯前要清除過時連結資料, 可以在命令列中輸入<code>nmake Makefile.vc clean</code>  也可以在 VC 中使用 選單/Build/Clean 選項將過時連結資料清除</p><p><strong>8.選擇 Tkenv 視窗模式模擬</strong>在預設的情況下, 使用 OMNET++ 編譯出來的檔案將是在 cmdenv 命令列環境下執行.為了更容易檢視模擬結果,我們可以透過以下方法將模擬切換到在 TKenv 環境下執行:</p><p>選單/Build/Set Active Project Configuration從四個選項中選取 xx- win32 Release Tkenv</p><p>參考資料:1. OMNeT++ and MF build instructions for Windows2. OMNeT/doc/Readme-MSVC.txt</p><p>refer: Make sure you enter thesesettings for <em>all</em> configurations (In the Project|Settings dialog,select ‘All configurations’ from the combo in the top-left corner.)</p><ul><li>include path: You must tell MSVC the location of omnetpp.h and otherheader files.  Add c:\omnetpp-2.3\include to the include path inProject|Settings --&gt; ‘C/C++’ tab --&gt; ‘Preprocessor’ category --&gt;Additional include directories.</li><li>library path: MSVC needs to know where to find sim_std.lib, envir.liband other libraries. Add omnetpp/lib to the linker path inProject|Settings --&gt; ‘Link’ tab --&gt; ‘Input’ category --&gt;Additional library path.</li><li>nedc: It’s advisable to put OMNeT++'s bin directory into the PATHso that MSVC will find the NED compiler. (An alternative is to enterexplicit nedc path for each NED file’s Custom build step, but that’smuch more cumbersome.)</li></ul><p>Add the .ned files to the project and set custom build option for them:Description:  NED Compiling $(InputPath)Command:      nedc -s _n.cpp $(InputPath)Outputs:      $(InputPath)_n.cppHint: you can select all .ned files together, and 'All configurations’from the combo at the left of the Settings dialog, and then you have totype this settings only once.Note: If you copied one of the sample projects, you’ll have to adjustCommand, because they contain explicit nedc path (…\bin\nedc).</p>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>INET6 Project</title>
      <link href="/2005/03/03/INET6-Project/"/>
      <url>/2005/03/03/INET6-Project/</url>
      <content type="html"><![CDATA[<p>動機:由於自己論文的模擬需求, 嘗試了許多網路模擬工具, 包括 OPNET, NS2, OMNET++ 等.試用後發現 OPNET 架構完備, 然而複雜度過高, 因授權關係使用上亦受到重重限制.NS2 使用免費, 牌子老又擁有不可忽視的模組群, 然而OTCL與 C 之間模組關係處理複雜, 模組使用時還必需與版本配合, 毫無可攜性.而 OMNET++ 具有許多 NS2 沒有的優點, 例如是物件導向式的模擬工具. 跨平台通用, 使用C++語言撰寫.在網路模擬上目前則提供了 INET, Mobility Framework, IPv6Suite 等網路模擬模組.Mobility Framework 是一個相似於 NS2 的網路模擬模組, 提供樣版檔案, 讓使用者從 Mac 層至 Application 層自行挑選, 組合出所需的網路.而 INET 是三者中支援OSI七層最完整的網路模擬模組, 使用上也最為簡便. 然而目前並不支援 IPv6 與 IP Mobility.IPv6Suite 提供 IPv6, IPv4, MIPv6 等的模擬, , 功能最為強大.然而問題頗多, 由於綁定太過額外模組, 僅限於 Linux 平台, 也不容易修改,在網路模擬上具有分層不夠清楚, 安裝不夠簡單, 文件不夠友善等缺點.因此一個主要目的以 INET 模組為基礎, 依據 INET 網路分層, 並以 IPv6Suite 為參考,使 INET 支援 IPv6 的 INET6 計畫於焉成型</p><p>INET6 計畫包含</p><ul><li>IPv6 模組程式</li><li>nedDoc 模組程式碼生成文件</li><li>安裝步驟</li><li>導覽 Tutorial</li><li>模擬寫作指引</li></ul><p>未來計畫:</p><ul><li>MIPv6 模組程式 (待 Mobility Framework 整合後繼續開發)</li><li>NEMO 模組程式</li><li>DualStack 模組程式</li></ul><p>本計畫發展穩定後, 最終將合併入 INET 模組中, 提供OMNET++平台上完整的網路模擬環境.</p>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>這個網誌搞什麼?</title>
      <link href="/2005/03/01/%E9%80%99%E5%80%8B%E7%B6%B2%E8%AA%8C%E6%90%9E%E4%BB%80%E9%BA%BC/"/>
      <url>/2005/03/01/%E9%80%99%E5%80%8B%E7%B6%B2%E8%AA%8C%E6%90%9E%E4%BB%80%E9%BA%BC/</url>
      <content type="html"><![CDATA[<p>這個網誌搞什麼?這個網誌的目的就是放我翻譯的 Linux+IPv6 HOWTO,還有紀錄我在自己發起的 INET6 計畫中 porting INET6 的過程,與 porting 過程中所獲得的相關經驗.</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>網路模擬最重要應注意的事情</title>
      <link href="/2005/02/27/%E7%B6%B2%E8%B7%AF%E6%A8%A1%E6%93%AC%E6%9C%80%E9%87%8D%E8%A6%81%E6%87%89%E6%B3%A8%E6%84%8F%E7%9A%84%E4%BA%8B%E6%83%85/"/>
      <url>/2005/02/27/%E7%B6%B2%E8%B7%AF%E6%A8%A1%E6%93%AC%E6%9C%80%E9%87%8D%E8%A6%81%E6%87%89%E6%B3%A8%E6%84%8F%E7%9A%84%E4%BA%8B%E6%83%85/</url>
      <content type="html"><![CDATA[<p>網路模擬最重要應注意的事情, 就是找一台穩定可靠的機器.一台穩定可靠的機器可以省下無限多測試安裝麻煩.</p><p>以前在好幾台機器上怎麼試都不太順利, 換到新的這台 X30 後一切順利的不得了.感覺這次的投資真是值得:)</p>]]></content>
      
      
        <tags>
            
            <tag> OMNET++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>0. 大綱</title>
      <link href="/2005/02/24/0-%E5%A4%A7%E7%B6%B1/"/>
      <url>/2005/02/24/0-%E5%A4%A7%E7%B6%B1/</url>
      <content type="html"><![CDATA[<p>//2/25/2005//2/22/2005//8/6/2004</p><p>1. 概述1.1. 版權,許可與其它1.2. 歸類1.3. 版本, 歷史和待辦事項1.4. 翻譯1.5. 技術1.6. 序1.7. 使用詞彙與縮寫1.8. 了解這個 HOWTO 的必需條件2. 基礎2.1. 什麼是 IPv6?2.2. IPv6 在 Linux 作業系統上的歷史2.3. IPv6 的位址格式的形式 ?2.4. FAQ 問與答(基礎)3. 位址格式3.1. 沒有特殊前綴的位址3.2. 位址前綴3.3. 位址格式 (主機部份)3.4. 用作路由的位址前綴長度4. IPv6-支援(ready) 系統確認4.1. IPv6-支援 kernel4.2. IPv6-支援 網路設定工具4.3. IPv6-支援 測試/調試 程式4.4. IPv6-支援 程式4.5. IPv6-支援 客戶端程式 (selection)4.6. IPv6-支援 伺服器端程式4.7. FAQ 問與答 (IPv6-支援 系統確認)5. 設定界面5.1. 不同的網路設備5.2. 啟動與關閉界面6. 設定 IPv6 位址6.1. 顯示目前的 IPv6 位址6.2. 新增 IPv6 位址6.3. 移除 IPv6 位址7. 設定正常 IPv6 路由7.1. 顯示目前的 IPv6 路由7.2. 新增 IPv6 通過閘道器的路由7.3. 移除 IPv6 通過閘道器的路由7.4. 新增 IPv6 通過介面的路由7.5. 移除 IPv6 通過介面的路由7.6. IPv6 路由FAQ8. 芳鄰搜尋8.1. 使用 “ip” 指令顯示芳鄰8.2. 使用 “ip” 指令處理芳鄰列表9. 設定 IPv6-in-IPv4 通道9.1. 通道的類型9.2. 顯示目前通道9.3. 設定點對點的通道9.4. 設定 6to4 通道10. 設定 IPv4-in-IPv6 通道11. 在 /proc-filesystem 的內核設定11.1. 如何存取 /proc-filesystem11.2. /proc/sys/net/ipv6/ 中的數值類型.11.3. /proc/sys/net/ipv4/ 中 IPv6 相關的數值類型11.4. /proc/net/ 中 IPv6 相關的數值類型12. Netlink-Interface to kernel13. 網路調試13.1. 伺服器接口(socket) 繫結13.2. tcpdump 封包傾印範例14. 在不同的發行版中設定 IPv614.1. Red Hat Linux and &quot;clones&quot;14.2. SuSE Linux14.3. Debian Linux15.自動設定與移動性15.1. 無狀態自動設定15.2. 使用Router Advertisement Daemon (radvd)達成有狀態自動設定15.3. 動態主機設定協定 v6 (DHCPv6)15.4. 移動性16. 防火牆16.1. 使用 netfilter6 作防火牆16.2. 準備16.3. 使用方法17.安全性17.1. 節點安全性17.2. 存取限制17.3. IPv6 安全性驗證18. 加密與認證18.1. 使用加密與認證的模式18.2. 核心支援(ESP與AH)18.3. 自動金鑰交換(IKE)18.4. 額外訊息19. 服務品質 (QoS)20. Hints for IPv6-enabled daemons20.1. Berkeley Internet Name Daemon BIND (named)20.2. Internet super daemon (xinetd)20.3. Webserver Apache2 (httpd2)20.4. Router Advertisement Daemon (radvd)20.5. tcp_wrapper21. 程式設計 (使用 API)22. 互聯性23. 更多資訊與網址23.1. 書籍, 文章, 線上評論 (mixed)23.2. Conferences, Meetings, Summits23.3. 線上資訊23.4. IPv6 基礎架構23.5. 郵件列表23.6. 線上工具23.7. Trainings, Seminars23.8. ‘The Online Discovery’ …</p><p>24. Revision history / Credits / The End</p><p>24.1. Revision history24.2. Credits24.3. 結語</p>]]></content>
      
      
        <tags>
            
            <tag> IPv6 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
